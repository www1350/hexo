<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dubbo3源码解析（十二）-Triple协议解析</title>
      <link href="/hexo/post/d6c1b591.html"/>
      <url>/hexo/post/d6c1b591.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat 启用gzip</title>
      <link href="/hexo/post/26f8b378.html"/>
      <url>/hexo/post/26f8b378.html</url>
      
        <content type="html"><![CDATA[<p>编辑conf/server.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span>               <span class="attr">maxHttpHeaderSize</span>=<span class="string">&quot;8192&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">minSpareThreads</span>=<span class="string">&quot;25&quot;</span> <span class="attr">maxSpareThreads</span>=<span class="string">&quot;75&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableLookups</span>=<span class="string">&quot;false&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">acceptCount</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">disableUploadTimeout</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">compression</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">compressionMinSize</span>=<span class="string">&quot;2048&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">noCompressionUserAgents</span>=<span class="string">&quot;gozilla,traviata&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">compressableMimeType</span>=<span class="string">&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol><li>compression=”on” 打开压缩功能</li><li>compressionMinSize=”2048” 启用压缩的输出内容大小，这里面默认为2KB</li><li>noCompressionUserAgents=”gozilla, traviata” 对于以下的浏览器，不启用压缩&lt;60;</li><li>compressableMimeType=”text/html,text/xml” 压缩类型</li></ol><p><a href="http://hongjiang.info/index/tomcat/">http://hongjiang.info/index/tomcat/</a></p>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uu加速器</title>
      <link href="/hexo/post/b34a8cb1.html"/>
      <url>/hexo/post/b34a8cb1.html</url>
      
        <content type="html"><![CDATA[<p>  uu加速器需要会员非常麻烦，根据下面步骤可以绕过。</p><h2 id="下载uu加速器"><a href="#下载uu加速器" class="headerlink" title="下载uu加速器"></a>下载uu加速器</h2><p>这个步骤省略，登录 <a href="https://uu.163.com/">https://uu.163.com/</a> 下载</p><h2 id="下载安装翻墙软件"><a href="#下载安装翻墙软件" class="headerlink" title="下载安装翻墙软件"></a>下载安装翻墙软件</h2><p>下载地址：<a href="https://www.mediafire.com/folder/sfqz8bmodqdx5/shadowsocks%E7%9B%B8%E5%85%B3%E5%AE%A2%E6%88%B7%E7%AB%AF">https://www.mediafire.com/folder/sfqz8bmodqdx5/shadowsocks%E7%9B%B8%E5%85%B3%E5%AE%A2%E6%88%B7%E7%AB%AF</a> </p><p>如果是windows系统，第一次电脑系统使用SSR/SS客户端时，如果提示你需要安装NET Framework 4.0，网上搜一下这个东西，安装一下即可。NET Framework 4.0是SSR/SS的运行库，没有这个SSR/SS客户端无法正常运行。有的电脑系统可能会自带NET Framework 4.0。</p><p>安装过程省略</p><h2 id="使用免费账号"><a href="#使用免费账号" class="headerlink" title="使用免费账号"></a>使用免费账号</h2><p>地址：<a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7#%E5%85%8D%E8%B4%B9ssssr%E8%B4%A6%E5%8F%B7%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0">https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7#%E5%85%8D%E8%B4%B9ssssr%E8%B4%A6%E5%8F%B7%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0</a></p><p>选中其中一个链接复制到浏览器</p><p><img src="https://user-images.githubusercontent.com/7789698/113422899-13523e80-9400-11eb-8951-694a334ee6f1.png" alt="image-20210402220849250"></p><p>打开自动导入</p><p><img src="https://user-images.githubusercontent.com/7789698/113422952-354bc100-9400-11eb-8919-df134b2cbcdc.png" alt="image-20210402221015608"></p><p>选中，并勾选打开shadowsocks</p><p><img src="https://user-images.githubusercontent.com/7789698/113423016-557b8000-9400-11eb-9728-ac731ceb386a.png" alt="image-20210402221108746"></p><p>切换全局模式</p><p><img src="https://user-images.githubusercontent.com/7789698/113423135-865bb500-9400-11eb-89ef-400e1aaf43c7.png" alt="image-20210402221231427"></p><h2 id="开始uu加速"><a href="#开始uu加速" class="headerlink" title="开始uu加速"></a>开始uu加速</h2><p>打开uu加速器。不要登录直接选择一款游戏选择节点，连接后按教程去配置你的switch或者ps4</p><p><img src="https://user-images.githubusercontent.com/7789698/113423342-e5212e80-9400-11eb-8c9a-8f1be7bd731d.png" alt="image-20210402221359124"></p><h2 id="关闭翻墙软件"><a href="#关闭翻墙软件" class="headerlink" title="关闭翻墙软件"></a>关闭翻墙软件</h2><p>把全局模式切回Pac模式或者直接关闭翻墙软件。</p><p>ps.如果发现部分不可描述的页面打不开，点开高级设置，替换GFW LIST URL 为： <a href="https://github.com/www1350/gfwlist/blob/master/gfwlist.txt">https://github.com/www1350/gfwlist/blob/master/gfwlist.txt</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从0开始学习opencv（二）-highGui初步</title>
      <link href="/hexo/post/82582a1f.html"/>
      <url>/hexo/post/82582a1f.html</url>
      
        <content type="html"><![CDATA[<h1 id="HighGui界面初步"><a href="#HighGui界面初步" class="headerlink" title="HighGui界面初步"></a>HighGui界面初步</h1><h2 id="图像的载入"><a href="#图像的载入" class="headerlink" title="图像的载入"></a>图像的载入</h2><p>imread函数，用在读取图像到Mat矩阵，可以看下官方注释</p><ul><li>这个函数从指定文件加载图片返回，如果图片无法读取，就会返回空矩阵(Mat::data == null)，支持如下格式<ul><li>windows位图，*.bmp, *.dib</li><li>JPEG文件，*.jpeg, *.jpg, *.jpe</li><li>JPEG2000文件，*.jp2</li><li>便携式文件格式，*.pbm, *.pgm, *.ppm *.pxm, *.pnm</li><li>Sun rasters光栅文件，*.sr, *.ras </li><li>TIFF文件，*.tiff, *.tif</li><li>OpenEXR图片文件，*.exr </li><li>HDR文件，*.hdr, *.pic </li><li>栅格和矢量地理空间数据</li></ul></li><li>第二个参数，载入标识，指定一个加载图片的颜色类型，自带的默认值为1。也就是三通道BGR。<ul><li>flag&gt;0 返回一个三通道的彩色图像</li><li>flag=0 返回灰度图像</li><li>flag&lt;0 返回包含alpha通道加载图像</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ImreadModes</span> &#123;</span></span><br><span class="line">       IMREAD_UNCHANGED            = <span class="number">-1</span>, <span class="comment">//!&lt; If set, return the loaded image as is (with alpha channel, otherwise it gets cropped).已废弃</span></span><br><span class="line">       IMREAD_GRAYSCALE            = <span class="number">0</span>,  <span class="comment">//!&lt; If set, always convert image to the single channel grayscale image (codec internal conversion).转成灰度</span></span><br><span class="line">       IMREAD_COLOR                = <span class="number">1</span>,  <span class="comment">//!&lt; If set, always convert image to the 3 channel BGR color image.</span></span><br><span class="line">       IMREAD_ANYDEPTH             = <span class="number">2</span>,  <span class="comment">//!&lt; If set, return 16-bit/32-bit image when the input has the corresponding depth, otherwise convert it to 8-bit.载入16或32位深度图像，否则转化为8位返回</span></span><br><span class="line">       IMREAD_ANYCOLOR             = <span class="number">4</span>,  <span class="comment">//!&lt; If set, the image is read in any possible color format. </span></span><br><span class="line">       IMREAD_LOAD_GDAL            = <span class="number">8</span>,  <span class="comment">//!&lt; If set, use the gdal driver for loading the image.</span></span><br><span class="line">       IMREAD_REDUCED_GRAYSCALE_2  = <span class="number">16</span>, <span class="comment">//!&lt; If set, always convert image to the single channel grayscale image and the image size reduced 1/2.</span></span><br><span class="line">       IMREAD_REDUCED_COLOR_2      = <span class="number">17</span>, <span class="comment">//!&lt; If set, always convert image to the 3 channel BGR color image and the image size reduced 1/2.</span></span><br><span class="line">       IMREAD_REDUCED_GRAYSCALE_4  = <span class="number">32</span>, <span class="comment">//!&lt; If set, always convert image to the single channel grayscale image and the image size reduced 1/4.</span></span><br><span class="line">       IMREAD_REDUCED_COLOR_4      = <span class="number">33</span>, <span class="comment">//!&lt; If set, always convert image to the 3 channel BGR color image and the image size reduced 1/4.</span></span><br><span class="line">       IMREAD_REDUCED_GRAYSCALE_8  = <span class="number">64</span>, <span class="comment">//!&lt; If set, always convert image to the single channel grayscale image and the image size reduced 1/8.</span></span><br><span class="line">       IMREAD_REDUCED_COLOR_8      = <span class="number">65</span>, <span class="comment">//!&lt; If set, always convert image to the 3 channel BGR color image and the image size reduced 1/8.</span></span><br><span class="line">       IMREAD_IGNORE_ORIENTATION   = <span class="number">128</span> <span class="comment">//!&lt; If set, do not rotate the image according to EXIF&#x27;s orientation flag.</span></span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The function imread loads an image from the specified file <span class="keyword">and</span> returns it. <span class="function">If the image cannot be</span></span><br><span class="line"><span class="function"><span class="title">read</span> <span class="params">(because of missing file, improper permissions, unsupported <span class="keyword">or</span> invalid format)</span>, the function</span></span><br><span class="line"><span class="function">returns an empty <span class="title">matrix</span> <span class="params">( Mat::data==<span class="literal">NULL</span> )</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Currently, the following file formats are supported:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">-   Windows bitmaps - \*.bmp, \*.dib (always supported)</span></span><br><span class="line"><span class="function">-   JPEG files - \*.jpeg, \*.jpg, \*.jpe (see the *Note* section)</span></span><br><span class="line"><span class="function">-   JPEG <span class="number">2000</span> files - \*.jp2 (see the *Note* section)</span></span><br><span class="line"><span class="function">-   Portable Network Graphics - \*.png (see the *Note* section)</span></span><br><span class="line"><span class="function">-   WebP - \*.webp (see the *Note* section)</span></span><br><span class="line"><span class="function">-   Portable image format - \*.pbm, \*.pgm, \*.ppm \*.pxm, \*.pnm (always supported)</span></span><br><span class="line"><span class="function">-   Sun rasters - \*.sr, \*.ras (always supported)</span></span><br><span class="line"><span class="function">-   TIFF files - \*.tiff, \*.tif (see the *Note* section)</span></span><br><span class="line"><span class="function">-   OpenEXR Image files - \*.exr (see the *Note* section)</span></span><br><span class="line"><span class="function">-   Radiance HDR - \*.hdr, \*.pic (always supported)</span></span><br><span class="line"><span class="function">-   Raster and Vector geospatial data supported by GDAL (see the *Note* section)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@note</span></span><br><span class="line"><span class="function">-   The function determines the type of an image by the content, not by the file extension.</span></span><br><span class="line"><span class="function">-   In the case of color images, the decoded images will have the channels stored in **B G R** order.</span></span><br><span class="line"><span class="function">-   When using IMREAD_GRAYSCALE, the codec<span class="string">&#x27;s internal grayscale conversion will be used, if available.</span></span></span><br><span class="line"><span class="string"><span class="function">    Results may differ to the output of cvtColor()</span></span></span><br><span class="line"><span class="string"><span class="function">-   On Microsoft Windows\* OS and MacOSX\*, the codecs shipped with an OpenCV image (libjpeg,</span></span></span><br><span class="line"><span class="string"><span class="function">    libpng, libtiff, and libjasper) are used by default. So, OpenCV can always read JPEGs, PNGs,</span></span></span><br><span class="line"><span class="string"><span class="function">    and TIFFs. On MacOSX, there is also an option to use native MacOSX image readers. But beware</span></span></span><br><span class="line"><span class="string"><span class="function">    that currently these native image loaders give images with different pixel values because of</span></span></span><br><span class="line"><span class="string"><span class="function">    the color management embedded into MacOSX.</span></span></span><br><span class="line"><span class="string"><span class="function">-   On Linux\*, BSD flavors and other Unix-like open-source operating systems, OpenCV looks for</span></span></span><br><span class="line"><span class="string"><span class="function">    codecs supplied with an OS image. Install the relevant packages (do not forget the development</span></span></span><br><span class="line"><span class="string"><span class="function">    files, for example, &quot;libjpeg-dev&quot;, in Debian\* and Ubuntu\*) to get the codec support or turn</span></span></span><br><span class="line"><span class="string"><span class="function">    on the OPENCV_BUILD_3RDPARTY_LIBS flag in CMake.</span></span></span><br><span class="line"><span class="string"><span class="function">-   In the case you set *WITH_GDAL* flag to true in CMake and @ref IMREAD_LOAD_GDAL to load the image,</span></span></span><br><span class="line"><span class="string"><span class="function">    then the [GDAL](http://www.gdal.org) driver will be used in order to decode the image, supporting</span></span></span><br><span class="line"><span class="string"><span class="function">    the following formats: [Raster](http://www.gdal.org/formats_list.html),</span></span></span><br><span class="line"><span class="string"><span class="function">    [Vector](http://www.gdal.org/ogr_formats.html).</span></span></span><br><span class="line"><span class="string"><span class="function">-   If EXIF information are embedded in the image file, the EXIF orientation will be taken into account</span></span></span><br><span class="line"><span class="string"><span class="function">    and thus the image will be rotated accordingly except if the flag @ref IMREAD_IGNORE_ORIENTATION is passed.</span></span></span><br><span class="line"><span class="string"><span class="function">-   By default number of pixels must be less than 2^30. Limit can be set using system</span></span></span><br><span class="line"><span class="string"><span class="function">    variable OPENCV_IO_MAX_IMAGE_PIXELS</span></span></span><br><span class="line"><span class="string"><span class="function"></span></span></span><br><span class="line"><span class="string"><span class="function">@param filename Name of file to be loaded.</span></span></span><br><span class="line"><span class="string"><span class="function">@param flags Flag that can take values of cv::ImreadModes</span></span></span><br><span class="line"><span class="string"><span class="function">*/</span></span></span><br><span class="line"><span class="string"><span class="function">CV_EXPORTS_W Mat imread( const String&amp; filename, int flags = IMREAD_COLOR );</span></span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat img = imread(&quot;a.jpg&quot;, 2 | 4); //载入无损源图像</span><br><span class="line">Mat img = imread(&quot;a.jpg&quot;, 0); //载入灰度图</span><br></pre></td></tr></table></figure><h2 id="图像的显示"><a href="#图像的显示" class="headerlink" title="图像的显示"></a>图像的显示</h2><p>imshow函数，用在指定界面显示图像</p><ul><li>如果窗口使用cv::WINDOW_AUTOSIZE创建，会显示原始大小（还是会受限屏幕），否则会将图片缩放适合窗口。缩放图像取决于深度：<ul><li>8位无符号，显示图像原来样子</li><li>16位无符号或32位整型，用像素值除以256，值在 [0,255]</li><li>如果图像是32位或64位浮点型，像素乘以255，[0,1] 映射到[0,255]</li></ul></li><li>如果窗口创建，设定了支持openGL，imshow 还支持 ogl::Buffer , ogl::Texture2D 和<br>cuda::GpuMat 作为输入.</li><li>如果你需要显示图像大于屏幕，在imshow前需要调用namedWindow(“”, WINDOW_NORMAL).</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** @brief Displays an image in the specified window.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The function imshow displays an image in the specified window. If the window was created with the</span></span><br><span class="line"><span class="comment">cv::WINDOW_AUTOSIZE flag, the image is shown with its original size, however it is still limited by the screen resolution.</span></span><br><span class="line"><span class="comment">Otherwise, the image is scaled to fit the window. The function may scale the image, depending on its depth:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-   If the image is 8-bit unsigned, it is displayed as is.</span></span><br><span class="line"><span class="comment">-   If the image is 16-bit unsigned or 32-bit integer, the pixels are divided by 256. That is, the</span></span><br><span class="line"><span class="comment">    value range [0,255\*256] is mapped to [0,255].</span></span><br><span class="line"><span class="comment">-   If the image is 32-bit or 64-bit floating-point, the pixel values are multiplied by 255. That is, the</span></span><br><span class="line"><span class="comment">    value range [0,1] is mapped to [0,255].</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If window was created with OpenGL support, cv::imshow also support ogl::Buffer , ogl::Texture2D and</span></span><br><span class="line"><span class="comment">cuda::GpuMat as input.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If the window was not created before this function, it is assumed creating a window with cv::WINDOW_AUTOSIZE.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If you need to show an image that is bigger than the screen resolution, you will need to call namedWindow(&quot;&quot;, WINDOW_NORMAL) before the imshow.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@note This function should be followed by cv::waitKey function which displays the image for specified</span></span><br><span class="line"><span class="comment">milliseconds. Otherwise, it won&#x27;t display the image. For example, **waitKey(0)** will display the window</span></span><br><span class="line"><span class="comment">infinitely until any keypress (it is suitable for image display). **waitKey(25)** will display a frame</span></span><br><span class="line"><span class="comment">for 25 ms, after which display will be automatically closed. (If you put it in a loop to read</span></span><br><span class="line"><span class="comment">videos, it will display the video frame-by-frame)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@note</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[__Windows Backend Only__] Pressing Ctrl+C will copy the image to the clipboard.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[__Windows Backend Only__] Pressing Ctrl+S will show a dialog to save the image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param winname Name of the window.</span></span><br><span class="line"><span class="comment">@param mat Image to be shown.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">CV_EXPORTS_W <span class="keyword">void</span> <span class="title">imshow</span><span class="params">(<span class="keyword">const</span> String&amp; winname, InputArray mat)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="InputArray类型"><a href="#InputArray类型" class="headerlink" title="InputArray类型"></a>InputArray类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> _InputArray&amp; InputArray;</span><br></pre></td></tr></table></figure><p>_InputArray在core.hpp头文件里面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////////////////// Input/Output Array Arguments /////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** @brief This is the proxy class for passing read-only input arrays into OpenCV functions.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">It is defined as:</span></span><br><span class="line"><span class="comment">@code</span></span><br><span class="line"><span class="comment">    typedef const _InputArray&amp; InputArray;</span></span><br><span class="line"><span class="comment">@endcode</span></span><br><span class="line"><span class="comment">where _InputArray is a class that can be constructed from `Mat`, `Mat_&lt;T&gt;`, `Matx&lt;T, m, n&gt;`,</span></span><br><span class="line"><span class="comment">`std::vector&lt;T&gt;`, `std::vector&lt;std::vector&lt;T&gt; &gt;`, `std::vector&lt;Mat&gt;`, `std::vector&lt;Mat_&lt;T&gt; &gt;`,</span></span><br><span class="line"><span class="comment">`UMat`, `std::vector&lt;UMat&gt;` or `double`. It can also be constructed from a matrix expression.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Since this is mostly implementation-level class, and its interface may change in future versions, we</span></span><br><span class="line"><span class="comment">do not describe it in details. There are a few key things, though, that should be kept in mind:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-   When you see in the reference manual or in OpenCV source code a function that takes</span></span><br><span class="line"><span class="comment">    InputArray, it means that you can actually pass `Mat`, `Matx`, `vector&lt;T&gt;` etc. (see above the</span></span><br><span class="line"><span class="comment">    complete list).</span></span><br><span class="line"><span class="comment">-   Optional input arguments: If some of the input arrays may be empty, pass cv::noArray() (or</span></span><br><span class="line"><span class="comment">    simply cv::Mat() as you probably did before).</span></span><br><span class="line"><span class="comment">-   The class is designed solely for passing parameters. That is, normally you *should not*</span></span><br><span class="line"><span class="comment">    declare class members, local and global variables of this type.</span></span><br><span class="line"><span class="comment">-   If you want to design your own function or a class method that can operate of arrays of</span></span><br><span class="line"><span class="comment">    multiple types, you can use InputArray (or OutputArray) for the respective parameters. Inside</span></span><br><span class="line"><span class="comment">    a function you should use _InputArray::getMat() method to construct a matrix header for the</span></span><br><span class="line"><span class="comment">    array (without copying data). _InputArray::kind() can be used to distinguish Mat from</span></span><br><span class="line"><span class="comment">    `vector&lt;&gt;` etc., but normally it is not needed.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Here is how you can use a function that takes InputArray :</span></span><br><span class="line"><span class="comment">@code</span></span><br><span class="line"><span class="comment">    std::vector&lt;Point2f&gt; vec;</span></span><br><span class="line"><span class="comment">    // points or a circle</span></span><br><span class="line"><span class="comment">    for( int i = 0; i &lt; 30; i++ )</span></span><br><span class="line"><span class="comment">        vec.push_back(Point2f((float)(100 + 30*cos(i*CV_PI*2/5)),</span></span><br><span class="line"><span class="comment">                              (float)(100 - 30*sin(i*CV_PI*2/5))));</span></span><br><span class="line"><span class="comment">    cv::transform(vec, vec, cv::Matx23f(0.707, -0.707, 10, 0.707, 0.707, 20));</span></span><br><span class="line"><span class="comment">@endcode</span></span><br><span class="line"><span class="comment">That is, we form an STL vector containing points, and apply in-place affine transformation to the</span></span><br><span class="line"><span class="comment">vector using the 2x3 matrix created inline as `Matx&lt;float, 2, 3&gt;` instance.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Here is how such a function can be implemented (for simplicity, we implement a very specific case of</span></span><br><span class="line"><span class="comment">it, according to the assertion statement inside) :</span></span><br><span class="line"><span class="comment">@code</span></span><br><span class="line"><span class="comment">    void myAffineTransform(InputArray _src, OutputArray _dst, InputArray _m)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        // get Mat headers for input arrays. This is O(1) operation,</span></span><br><span class="line"><span class="comment">        // unless _src and/or _m are matrix expressions.</span></span><br><span class="line"><span class="comment">        Mat src = _src.getMat(), m = _m.getMat();</span></span><br><span class="line"><span class="comment">        CV_Assert( src.type() == CV_32FC2 &amp;&amp; m.type() == CV_32F &amp;&amp; m.size() == Size(3, 2) );</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // [re]create the output array so that it has the proper size and type.</span></span><br><span class="line"><span class="comment">        // In case of Mat it calls Mat::create, in case of STL vector it calls vector::resize.</span></span><br><span class="line"><span class="comment">        _dst.create(src.size(), src.type());</span></span><br><span class="line"><span class="comment">        Mat dst = _dst.getMat();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for( int i = 0; i &lt; src.rows; i++ )</span></span><br><span class="line"><span class="comment">            for( int j = 0; j &lt; src.cols; j++ )</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                Point2f pt = src.at&lt;Point2f&gt;(i, j);</span></span><br><span class="line"><span class="comment">                dst.at&lt;Point2f&gt;(i, j) = Point2f(m.at&lt;float&gt;(0, 0)*pt.x +</span></span><br><span class="line"><span class="comment">                                                m.at&lt;float&gt;(0, 1)*pt.y +</span></span><br><span class="line"><span class="comment">                                                m.at&lt;float&gt;(0, 2),</span></span><br><span class="line"><span class="comment">                                                m.at&lt;float&gt;(1, 0)*pt.x +</span></span><br><span class="line"><span class="comment">                                                m.at&lt;float&gt;(1, 1)*pt.y +</span></span><br><span class="line"><span class="comment">                                                m.at&lt;float&gt;(1, 2));</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">@endcode</span></span><br><span class="line"><span class="comment">There is another related type, InputArrayOfArrays, which is currently defined as a synonym for</span></span><br><span class="line"><span class="comment">InputArray:</span></span><br><span class="line"><span class="comment">@code</span></span><br><span class="line"><span class="comment">    typedef InputArray InputArrayOfArrays;</span></span><br><span class="line"><span class="comment">@endcode</span></span><br><span class="line"><span class="comment">It denotes function arguments that are either vectors of vectors or vectors of matrices. A separate</span></span><br><span class="line"><span class="comment">synonym is needed to generate Python/Java etc. wrappers properly. At the function implementation</span></span><br><span class="line"><span class="comment">level their use is similar, but _InputArray::getMat(idx) should be used to get header for the</span></span><br><span class="line"><span class="comment">idx-th component of the outer vector and _InputArray::size().area() should be used to find the</span></span><br><span class="line"><span class="comment">number of components (vectors/matrices) of the outer vector.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">In general, type support is limited to cv::Mat types. Other types are forbidden.</span></span><br><span class="line"><span class="comment">But in some cases we need to support passing of custom non-general Mat types, like arrays of cv::KeyPoint, cv::DMatch, etc.</span></span><br><span class="line"><span class="comment">This data is not intented to be interpreted as an image data, or processed somehow like regular cv::Mat.</span></span><br><span class="line"><span class="comment">To pass such custom type use rawIn() / rawOut() / rawInOut() wrappers.</span></span><br><span class="line"><span class="comment">Custom type is wrapped as Mat-compatible `CV_8UC&lt;N&gt;` values (N = sizeof(T), N &lt;= CV_CN_MAX).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CV_EXPORTS</span> _<span class="title">InputArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">        KIND_SHIFT = <span class="number">16</span>,</span><br><span class="line">        FIXED_TYPE = <span class="number">0x8000</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        FIXED_SIZE = <span class="number">0x4000</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        KIND_MASK = <span class="number">31</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line"></span><br><span class="line">        NONE              = <span class="number">0</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        MAT               = <span class="number">1</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        MATX              = <span class="number">2</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_VECTOR        = <span class="number">3</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_VECTOR_VECTOR = <span class="number">4</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_VECTOR_MAT    = <span class="number">5</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        EXPR              = <span class="number">6</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        OPENGL_BUFFER     = <span class="number">7</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        CUDA_HOST_MEM     = <span class="number">8</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        CUDA_GPU_MAT      = <span class="number">9</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        UMAT              =<span class="number">10</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_VECTOR_UMAT   =<span class="number">11</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_BOOL_VECTOR   =<span class="number">12</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_VECTOR_CUDA_GPU_MAT = <span class="number">13</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_ARRAY         =<span class="number">14</span> &lt;&lt; KIND_SHIFT,</span><br><span class="line">        STD_ARRAY_MAT     =<span class="number">15</span> &lt;&lt; KIND_SHIFT</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _InputArray();</span><br><span class="line">    _InputArray(<span class="keyword">int</span> _flags, <span class="keyword">void</span>* _obj);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> Mat&amp; m);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> MatExpr&amp; expr);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> std::vector&lt;Mat&gt;&amp; vec);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; _InputArray(<span class="keyword">const</span> Mat_&lt;_Tp&gt;&amp; m);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; _InputArray(<span class="keyword">const</span> std::vector&lt;_Tp&gt;&amp; vec);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> std::vector&lt;<span class="keyword">bool</span>&gt;&amp; vec);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; _InputArray(<span class="keyword">const</span> std::vector&lt;std::vector&lt;_Tp&gt; &gt;&amp; vec);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> std::vector&lt;std::vector&lt;<span class="keyword">bool</span>&gt; &gt;&amp;);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; _InputArray(<span class="keyword">const</span> std::vector&lt;Mat_&lt;_Tp&gt; &gt;&amp; vec);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; _InputArray(<span class="keyword">const</span> _Tp* vec, <span class="keyword">int</span> n);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp, <span class="keyword">int</span> m, <span class="keyword">int</span> n&gt; _InputArray(<span class="keyword">const</span> Matx&lt;_Tp, m, n&gt;&amp; matx);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> <span class="keyword">double</span>&amp; val);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> cuda::GpuMat&amp; d_mat);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> std::vector&lt;cuda::GpuMat&gt;&amp; d_mat_array);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> ogl::Buffer&amp; buf);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> cuda::HostMem&amp; cuda_mem);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; _InputArray(<span class="keyword">const</span> cudev::GpuMat_&lt;_Tp&gt;&amp; m);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> UMat&amp; um);</span><br><span class="line">    _InputArray(<span class="keyword">const</span> std::vector&lt;UMat&gt;&amp; umv);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CV_CXX_STD_ARRAY</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp, std::<span class="keyword">size_t</span> _Nm&gt; _InputArray(<span class="keyword">const</span> std::array&lt;_Tp, _Nm&gt;&amp; arr);</span><br><span class="line">    <span class="keyword">template</span>&lt;std::<span class="keyword">size_t</span> _Nm&gt; _InputArray(<span class="keyword">const</span> std::array&lt;Mat, _Nm&gt;&amp; arr);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">static</span> _InputArray <span class="title">rawIn</span><span class="params">(<span class="keyword">const</span> std::vector&lt;_Tp&gt;&amp; vec)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CV_CXX_STD_ARRAY</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp, std::<span class="keyword">size_t</span> _Nm&gt; <span class="keyword">static</span> _InputArray <span class="title">rawIn</span><span class="params">(<span class="keyword">const</span> std::array&lt;_Tp, _Nm&gt;&amp; arr)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function">Mat <span class="title">getMat</span><span class="params">(<span class="keyword">int</span> idx=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">getMat_</span><span class="params">(<span class="keyword">int</span> idx=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">UMat <span class="title">getUMat</span><span class="params">(<span class="keyword">int</span> idx=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getMatVector</span><span class="params">(std::vector&lt;Mat&gt;&amp; mv)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUMatVector</span><span class="params">(std::vector&lt;UMat&gt;&amp; umv)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getGpuMatVector</span><span class="params">(std::vector&lt;cuda::GpuMat&gt;&amp; gpumv)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">cuda::GpuMat <span class="title">getGpuMat</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">ogl::Buffer <span class="title">getOGlBuffer</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFlags</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="title">getObj</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Size <span class="title">getSz</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kind</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dims</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cols</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rows</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Size <span class="title">size</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sizend</span><span class="params">(<span class="keyword">int</span>* sz, <span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">sameSize</span><span class="params">(<span class="keyword">const</span> _InputArray&amp; arr)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">total</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">channels</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isContinuous</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubmatrix</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copyTo</span><span class="params">(<span class="keyword">const</span> _OutputArray&amp; arr)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copyTo</span><span class="params">(<span class="keyword">const</span> _OutputArray&amp; arr, <span class="keyword">const</span> _InputArray &amp; mask)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">offset</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> i=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMat</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isUMat</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatVector</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isUMatVector</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatx</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isVector</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isGpuMat</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isGpuMatVector</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    ~_InputArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line">    <span class="keyword">void</span>* obj;</span><br><span class="line">    Size sz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _flags, <span class="keyword">const</span> <span class="keyword">void</span>* _obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _flags, <span class="keyword">const</span> <span class="keyword">void</span>* _obj, Size _sz)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果你看到使用InputArray,可以当成 <code>Mat</code>, <code>Matx</code>, <code>vector&lt;T&gt;</code> 等</li></ul><h2 id="创建窗口namedWindow-函数"><a href="#创建窗口namedWindow-函数" class="headerlink" title="创建窗口namedWindow()函数"></a>创建窗口namedWindow()函数</h2><p>上面说过，简单显示不需要调用，如果需要用到窗口则需要用到.</p><ul><li>如果窗口名已经存在，则不做任何处理</li><li>调用 cv::destroyWindow 或 cv::destroyAllWindows 关闭窗口 释放内存空间。如果是简单程序，退出时，资源会被系统释放掉</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @brief Creates a window.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The function namedWindow creates a window that can be used as a placeholder for images and</span></span><br><span class="line"><span class="comment">trackbars. Created windows are referred to by their names.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If a window with the same name already exists, the function does nothing.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">You can call cv::destroyWindow or cv::destroyAllWindows to close the window and de-allocate any associated</span></span><br><span class="line"><span class="comment">memory usage. For a simple program, you do not really have to call these functions because all the</span></span><br><span class="line"><span class="comment">resources and windows of the application are closed automatically by the operating system upon exit.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@note</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Qt backend supports additional flags:</span></span><br><span class="line"><span class="comment"> -   **WINDOW_NORMAL or WINDOW_AUTOSIZE:** WINDOW_NORMAL enables you to resize the</span></span><br><span class="line"><span class="comment">     window, whereas WINDOW_AUTOSIZE adjusts automatically the window size to fit the</span></span><br><span class="line"><span class="comment">     displayed image (see imshow ), and you cannot change the window size manually.</span></span><br><span class="line"><span class="comment"> -   **WINDOW_FREERATIO or WINDOW_KEEPRATIO:** WINDOW_FREERATIO adjusts the image</span></span><br><span class="line"><span class="comment">     with no respect to its ratio, whereas WINDOW_KEEPRATIO keeps the image ratio.</span></span><br><span class="line"><span class="comment"> -   **WINDOW_GUI_NORMAL or WINDOW_GUI_EXPANDED:** WINDOW_GUI_NORMAL is the old way to draw the window</span></span><br><span class="line"><span class="comment">     without statusbar and toolbar, whereas WINDOW_GUI_EXPANDED is a new enhanced GUI.</span></span><br><span class="line"><span class="comment">By default, flags == WINDOW_AUTOSIZE | WINDOW_KEEPRATIO | WINDOW_GUI_EXPANDED</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param winname Name of the window in the window caption that may be used as a window identifier.</span></span><br><span class="line"><span class="comment">@param flags Flags of the window. The supported flags are: (cv::WindowFlags)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">CV_EXPORTS_W <span class="keyword">void</span> <span class="title">namedWindow</span><span class="params">(<span class="keyword">const</span> String&amp; winname, <span class="keyword">int</span> flags = WINDOW_AUTOSIZE)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>第二个参数flags，窗口标识<ul><li>WINDOW_NORMAL，用户可以改变窗口大小</li><li>WINDOW_AUTOSIZE，窗口自动适应显示图像，无法手动改变</li><li>WINDOW_OPENGL, 支持openGL</li><li>WINDOW_FULLSCREEN， 全屏</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Flags for cv::namedWindow</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WindowFlags</span> &#123;</span></span><br><span class="line">       WINDOW_NORMAL     = <span class="number">0x00000000</span>, <span class="comment">//!&lt; the user can resize the window (no constraint) / also use to switch a fullscreen window to a normal size.</span></span><br><span class="line">       WINDOW_AUTOSIZE   = <span class="number">0x00000001</span>, <span class="comment">//!&lt; the user cannot resize the window, the size is constrainted by the image displayed.</span></span><br><span class="line">       WINDOW_OPENGL     = <span class="number">0x00001000</span>, <span class="comment">//!&lt; window with opengl support.</span></span><br><span class="line"></span><br><span class="line">       WINDOW_FULLSCREEN = <span class="number">1</span>,          <span class="comment">//!&lt; change the window to fullscreen.</span></span><br><span class="line">       WINDOW_FREERATIO  = <span class="number">0x00000100</span>, <span class="comment">//!&lt; the image expends as much as it can (no ratio constraint).</span></span><br><span class="line">       WINDOW_KEEPRATIO  = <span class="number">0x00000000</span>, <span class="comment">//!&lt; the ratio of the image is respected.</span></span><br><span class="line">       WINDOW_GUI_EXPANDED=<span class="number">0x00000000</span>, <span class="comment">//!&lt; status bar and tool bar</span></span><br><span class="line">       WINDOW_GUI_NORMAL = <span class="number">0x00000010</span>, <span class="comment">//!&lt; old fashious way</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="输出图像到文件：imwrite"><a href="#输出图像到文件：imwrite" class="headerlink" title="输出图像到文件：imwrite()"></a>输出图像到文件：imwrite()</h2><p>函数会写入到指定文件，图像格式基于拓展名。只有8位单通道或者3通道BGR图像可以使用这个函数写入，</p><ul><li><p>16位无符号图像可以保存PNG, JPEG 2000, and TIFF 格式</p></li><li><p>32位浮点可以保存TIFF, OpenEXR, and Radiance HDR格式；3通道TIFF图像可以使用LogLuv高动态范围编码（每像素4字节）保存</p></li><li><p>可以保存带有alpha通道的PNG图像。8或16位的4通道BGRA图像（最后一个通道是alpha通道）。把alpha设置为0就是透明像素，完全不透明像素应将alpha设置为255/65535</p></li><li><p>如果格式、通道、深度不同，用Mat::convertTo 和 cv::cvtColor转换或者使用通用文件存储I/O</p><p>函数将图像保存为XML或YAML格式</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @brief Saves an image to a specified file.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The function imwrite saves the image to the specified file. The image format is chosen based on the</span></span><br><span class="line"><span class="comment">filename extension (see cv::imread for the list of extensions). In general, only 8-bit</span></span><br><span class="line"><span class="comment">single-channel or 3-channel (with &#x27;BGR&#x27; channel order) images</span></span><br><span class="line"><span class="comment">can be saved using this function, with these exceptions:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 16-bit unsigned (CV_16U) images can be saved in the case of PNG, JPEG 2000, and TIFF formats</span></span><br><span class="line"><span class="comment">- 32-bit float (CV_32F) images can be saved in TIFF, OpenEXR, and Radiance HDR formats; 3-channel</span></span><br><span class="line"><span class="comment">(CV_32FC3) TIFF images will be saved using the LogLuv high dynamic range encoding (4 bytes per pixel)</span></span><br><span class="line"><span class="comment">- PNG images with an alpha channel can be saved using this function. To do this, create</span></span><br><span class="line"><span class="comment">8-bit (or 16-bit) 4-channel image BGRA, where the alpha channel goes last. Fully transparent pixels</span></span><br><span class="line"><span class="comment">should have alpha set to 0, fully opaque pixels should have alpha set to 255/65535 (see the code sample below).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If the format, depth or channel order is different, use</span></span><br><span class="line"><span class="comment">Mat::convertTo and cv::cvtColor to convert it before saving. Or, use the universal FileStorage I/O</span></span><br><span class="line"><span class="comment">functions to save the image to XML or YAML format.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The sample below shows how to create a BGRA image and save it to a PNG file. It also demonstrates how to set custom</span></span><br><span class="line"><span class="comment">compression parameters:</span></span><br><span class="line"><span class="comment">@include snippets/imgcodecs_imwrite.cpp</span></span><br><span class="line"><span class="comment">@param filename Name of the file.</span></span><br><span class="line"><span class="comment">@param img Image to be saved.</span></span><br><span class="line"><span class="comment">@param params Format-specific parameters encoded as pairs (paramId_1, paramValue_1, paramId_2, paramValue_2, ... .) see cv::ImwriteFlags</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CV_EXPORTS_W <span class="keyword">bool</span> <span class="title">imwrite</span><span class="params">( <span class="keyword">const</span> String&amp; filename, InputArray img,</span></span></span><br><span class="line"><span class="params"><span class="function">              <span class="keyword">const</span> std::vector&lt;<span class="keyword">int</span>&gt;&amp; params = std::vector&lt;<span class="keyword">int</span>&gt;())</span></span>;</span><br></pre></td></tr></table></figure><ul><li>第一个参数filename，文件名需要带拓展名</li><li>第二个参数输入一个矩阵Mat</li><li>第三个参数是为特定格式保存的参数编码。有默认值，一般不需要填。<ul><li>JPEG格式图片，这个参数0-100(CV_IMWRITE_JPEG_QUALITY),默认95</li><li>PNG格式，压缩级别0-9（CV_IMWRITE_PNG_COMPRESSION），数值越大表明更小尺寸更长压缩时间，默认3</li><li>PPM，PGM或PBM，表示二进制格式标示（CV_IMWRITE_PXM_BINARY），参数0-1，默认1</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CV_IMWRITE_JPEG_QUALITY =<span class="number">1</span>,</span><br><span class="line">    CV_IMWRITE_JPEG_PROGRESSIVE =<span class="number">2</span>,</span><br><span class="line">    CV_IMWRITE_JPEG_OPTIMIZE =<span class="number">3</span>,</span><br><span class="line">    CV_IMWRITE_JPEG_RST_INTERVAL =<span class="number">4</span>,</span><br><span class="line">    CV_IMWRITE_JPEG_LUMA_QUALITY =<span class="number">5</span>,</span><br><span class="line">    CV_IMWRITE_JPEG_CHROMA_QUALITY =<span class="number">6</span>,</span><br><span class="line">    CV_IMWRITE_PNG_COMPRESSION =<span class="number">16</span>,</span><br><span class="line">    CV_IMWRITE_PNG_STRATEGY =<span class="number">17</span>,</span><br><span class="line">    CV_IMWRITE_PNG_BILEVEL =<span class="number">18</span>,</span><br><span class="line">    CV_IMWRITE_PNG_STRATEGY_DEFAULT =<span class="number">0</span>,</span><br><span class="line">    CV_IMWRITE_PNG_STRATEGY_FILTERED =<span class="number">1</span>,</span><br><span class="line">    CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY =<span class="number">2</span>,</span><br><span class="line">    CV_IMWRITE_PNG_STRATEGY_RLE =<span class="number">3</span>,</span><br><span class="line">    CV_IMWRITE_PNG_STRATEGY_FIXED =<span class="number">4</span>,</span><br><span class="line">    CV_IMWRITE_PXM_BINARY =<span class="number">32</span>,</span><br><span class="line">    CV_IMWRITE_EXR_TYPE = <span class="number">48</span>,</span><br><span class="line">    CV_IMWRITE_WEBP_QUALITY =<span class="number">64</span>,</span><br><span class="line">    CV_IMWRITE_PAM_TUPLETYPE = <span class="number">128</span>,</span><br><span class="line">    CV_IMWRITE_PAM_FORMAT_NULL = <span class="number">0</span>,</span><br><span class="line">    CV_IMWRITE_PAM_FORMAT_BLACKANDWHITE = <span class="number">1</span>,</span><br><span class="line">    CV_IMWRITE_PAM_FORMAT_GRAYSCALE = <span class="number">2</span>,</span><br><span class="line">    CV_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = <span class="number">3</span>,</span><br><span class="line">    CV_IMWRITE_PAM_FORMAT_RGB = <span class="number">4</span>,</span><br><span class="line">    CV_IMWRITE_PAM_FORMAT_RGB_ALPHA = <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="滑动条创建和使用"><a href="#滑动条创建和使用" class="headerlink" title="滑动条创建和使用"></a>滑动条创建和使用</h2><ul><li><p>创建滑动条，这个函数通过指定名字和范围来创建一个滑动条。</p><ul><li>第一个参数trackbarname，滑动条名字</li><li>第二个参数winname，滑动条要依附的窗口名</li><li>第三个参数value，指针，表示滑块的位置</li><li>第四个参数count，表示滑块可以到达的最大位置</li><li>第五个参数onChange，指向回调函数的指针，每次滑块改变位置都会回调该函数<ul><li>第一个参数是滑块条的位置</li><li>第二个参数是用户数据</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @brief Callback function for Trackbar see cv::createTrackbar</span></span><br><span class="line"><span class="comment">@param pos current position of the specified trackbar.</span></span><br><span class="line"><span class="comment">@param userdata The optional parameter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*TrackbarCallback)</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">void</span>* userdata)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>用户数据指针将会被传递到滑块回调函数</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @brief Creates a trackbar and attaches it to the specified window.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The function createTrackbar creates a trackbar (a slider or range control) with the specified name</span></span><br><span class="line"><span class="comment">and range, assigns a variable value to be a position synchronized with the trackbar and specifies</span></span><br><span class="line"><span class="comment">the callback function onChange to be called on the trackbar position change. The created trackbar is</span></span><br><span class="line"><span class="comment">displayed in the specified window winname.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@note</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[__Qt Backend Only__] winname can be empty (or NULL) if the trackbar should be attached to the</span></span><br><span class="line"><span class="comment">control panel.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Clicking the label of each trackbar enables editing the trackbar values manually.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param trackbarname Name of the created trackbar.</span></span><br><span class="line"><span class="comment">@param winname Name of the window that will be used as a parent of the created trackbar.</span></span><br><span class="line"><span class="comment">@param value Optional pointer to an integer variable whose value reflects the position of the</span></span><br><span class="line"><span class="comment">slider. Upon creation, the slider position is defined by this variable.</span></span><br><span class="line"><span class="comment">@param count Maximal position of the slider. The minimal position is always 0.</span></span><br><span class="line"><span class="comment">@param onChange Pointer to the function to be called every time the slider changes position. This</span></span><br><span class="line"><span class="comment">function should be prototyped as void Foo(int,void\*); , where the first parameter is the trackbar</span></span><br><span class="line"><span class="comment">position and the second parameter is the user data (see the next parameter). If the callback is</span></span><br><span class="line"><span class="comment">the NULL pointer, no callbacks are called, but only value is updated.</span></span><br><span class="line"><span class="comment">@param userdata User data that is passed as is to the callback. It can be used to handle trackbar</span></span><br><span class="line"><span class="comment">events without using global variables.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">CV_EXPORTS <span class="keyword">int</span> <span class="title">createTrackbar</span><span class="params">(<span class="keyword">const</span> String&amp; trackbarname, <span class="keyword">const</span> String&amp; winname,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span>* value, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TrackbarCallback onChange = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">void</span>* userdata = <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>获取当前滑动条位置.<ul><li>第一个参数指定要获取的滑动条名</li><li>第二个参数指定滑块归属的窗口名</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @brief Returns the trackbar position.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The function returns the current position of the specified trackbar.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@note</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[__Qt Backend Only__] winname can be empty (or NULL) if the trackbar is attached to the control</span></span><br><span class="line"><span class="comment">panel.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param trackbarname Name of the trackbar.</span></span><br><span class="line"><span class="comment">@param winname Name of the window that is the parent of the trackbar.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">CV_EXPORTS_W <span class="keyword">int</span> <span class="title">getTrackbarPos</span><span class="params">(<span class="keyword">const</span> String&amp; trackbarname, <span class="keyword">const</span> String&amp; winname)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>鼠标操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @brief Sets mouse handler for the specified window</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param winname Name of the window.</span></span><br><span class="line"><span class="comment">@param onMouse Callback function for mouse events. See OpenCV samples on how to specify and use the callback.</span></span><br><span class="line"><span class="comment">@param userdata The optional parameter passed to the callback.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">CV_EXPORTS <span class="keyword">void</span> <span class="title">setMouseCallback</span><span class="params">(<span class="keyword">const</span> String&amp; winname, MouseCallback onMouse, <span class="keyword">void</span>* userdata = <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数，窗口名</p></li><li><p>第二个参数onMouse,鼠标事件回调函数</p><ul><li>事件</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Mouse Events see cv::MouseCallback</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MouseEventTypes</span> &#123;</span></span><br><span class="line">       EVENT_MOUSEMOVE      = <span class="number">0</span>, <span class="comment">//!&lt; indicates that the mouse pointer has moved over the window.</span></span><br><span class="line">       EVENT_LBUTTONDOWN    = <span class="number">1</span>, <span class="comment">//!&lt; indicates that the left mouse button is pressed.</span></span><br><span class="line">       EVENT_RBUTTONDOWN    = <span class="number">2</span>, <span class="comment">//!&lt; indicates that the right mouse button is pressed.</span></span><br><span class="line">       EVENT_MBUTTONDOWN    = <span class="number">3</span>, <span class="comment">//!&lt; indicates that the middle mouse button is pressed.</span></span><br><span class="line">       EVENT_LBUTTONUP      = <span class="number">4</span>, <span class="comment">//!&lt; indicates that left mouse button is released.</span></span><br><span class="line">       EVENT_RBUTTONUP      = <span class="number">5</span>, <span class="comment">//!&lt; indicates that right mouse button is released.</span></span><br><span class="line">       EVENT_MBUTTONUP      = <span class="number">6</span>, <span class="comment">//!&lt; indicates that middle mouse button is released.</span></span><br><span class="line">       EVENT_LBUTTONDBLCLK  = <span class="number">7</span>, <span class="comment">//!&lt; indicates that left mouse button is double clicked.</span></span><br><span class="line">       EVENT_RBUTTONDBLCLK  = <span class="number">8</span>, <span class="comment">//!&lt; indicates that right mouse button is double clicked.</span></span><br><span class="line">       EVENT_MBUTTONDBLCLK  = <span class="number">9</span>, <span class="comment">//!&lt; indicates that middle mouse button is double clicked.</span></span><br><span class="line">       EVENT_MOUSEWHEEL     = <span class="number">10</span>,<span class="comment">//!&lt; positive and negative values mean forward and backward scrolling, respectively.</span></span><br><span class="line">       EVENT_MOUSEHWHEEL    = <span class="number">11</span> <span class="comment">//!&lt; positive and negative values mean right and left scrolling, respectively.</span></span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Mouse Event Flags see cv::MouseCallback</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MouseEventFlags</span> &#123;</span></span><br><span class="line">       EVENT_FLAG_LBUTTON   = <span class="number">1</span>, <span class="comment">//!&lt; indicates that the left mouse button is down.</span></span><br><span class="line">       EVENT_FLAG_RBUTTON   = <span class="number">2</span>, <span class="comment">//!&lt; indicates that the right mouse button is down.</span></span><br><span class="line">       EVENT_FLAG_MBUTTON   = <span class="number">4</span>, <span class="comment">//!&lt; indicates that the middle mouse button is down.</span></span><br><span class="line">       EVENT_FLAG_CTRLKEY   = <span class="number">8</span>, <span class="comment">//!&lt; indicates that CTRL Key is pressed.</span></span><br><span class="line">       EVENT_FLAG_SHIFTKEY  = <span class="number">16</span>,<span class="comment">//!&lt; indicates that SHIFT Key is pressed.</span></span><br><span class="line">       EVENT_FLAG_ALTKEY    = <span class="number">32</span> <span class="comment">//!&lt; indicates that ALT Key is pressed.</span></span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @brief Callback function for mouse events. see cv::setMouseCallback</span></span><br><span class="line"><span class="comment">@param event one of the cv::MouseEventTypes constants.</span></span><br><span class="line"><span class="comment">@param x The x-coordinate of the mouse event.</span></span><br><span class="line"><span class="comment">@param y The y-coordinate of the mouse event.</span></span><br><span class="line"><span class="comment">@param flags one of the cv::MouseEventFlags constants.</span></span><br><span class="line"><span class="comment">@param userdata The optional parameter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*MouseCallback)</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span>* userdata)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>第三个参数是传递给回调的用户数据指针</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始学习opencv（一）-配置环境</title>
      <link href="/hexo/post/a2eaa8a6.html"/>
      <url>/hexo/post/a2eaa8a6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mac环境，安装OpenCV，VScode调试C-程序"><a href="#Mac环境，安装OpenCV，VScode调试C-程序" class="headerlink" title="Mac环境，安装OpenCV，VScode调试C++程序"></a>Mac环境，安装OpenCV，VScode调试C++程序</h1><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul><li>macOS版本 catalina 10.15版本</li><li>opencv3</li><li>vscode</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>安装XCode工具Command Line <code>**sudo** xcode-select --install</code></p></li><li><p>安装homebrew，可以用Homebrew安装很多东西</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>brew下载后发生很慢的情况，是因为某种不可描述的原因。这时候需要国内镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure></li><li><p>安装cmake，如果你用的<code>homebrew</code>方式安裝<code>opencv</code>那麼CMake就不是必須的.</p><p>到<a href="https://cmake.org/download/%E4%B8%8B%E4%B8%8B%E8%BD%BDcmake%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85">https://cmake.org/download/下下载cmake安装包安装</a></p><p><img src="https://user-images.githubusercontent.com/7789698/67623984-33222200-f85e-11e9-88fd-a132f96d7a57.png" alt="image"></p><p>或者使用<code>brew install cmake</code></p></li><li><p>安装opencv,使用brew安装<code>brew install opencv@3</code></p><p>如果遇到<code>Cloning into &#39;/Users/wangwenwei/Library/Caches/Homebrew/aom--git&#39;... fatal: unable to access &#39;https://aomedia.googlesource.com/aom.git/&#39;: Failed to connect to aomedia.googlesource.com port 443: Operation timed out</code>肯定又是因为某种不可描述的问题，无法安装aom</p><p>解决方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/aom.rb</span><br><span class="line"> </span><br><span class="line"># 用本站提供的一份代码拷贝来替代原来的地址</span><br><span class="line">$ sed -i &quot;&quot; &quot;s/https:\/\/aomedia\.googlesource\.com\/aom\.git/https:\/\/www.mobibrw.com\/wp-content\/uploads\/2019\/04\/aom.zip/g&quot; aom.rb</span><br><span class="line"> </span><br><span class="line">$ brew uninstall --ignore-dependencies aom</span><br><span class="line"> </span><br><span class="line">$ brew install --build-from-source aom.rb --env=std</span><br></pre></td></tr></table></figure><p>(如果某种不可描述的原因连wget都不行，则直接访问<a href="https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/aom.rb%E6%8A%8A%E5%86%85%E5%AE%B9%E6%8B%B7%E8%B4%9D%E5%88%B0aom.rb">https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/aom.rb把内容拷贝到aom.rb</a>)</p></li><li><p>写个demo测试gcc可用性</p><p>新建编辑main.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/// ./main.cpp</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;absurd!\n&quot;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">absurd$ g++ -g ./main.cpp -o ./main.o</span><br><span class="line">absurd$ ./main.o</span><br><span class="line">absurd!</span><br><span class="line">absurd$</span><br></pre></td></tr></table></figure></li><li><p>配置pkg-config</p><p>由 <code>brew list opencv</code>可以看到现在opencv的路径，拷贝相关配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/Cellar/opencv/4.1.2/lib/pkgconfig/opencv4.pc /usr/local/lib/pkgconfig/opencv.pc</span><br></pre></td></tr></table></figure><p>配置bash环境（永久的走/etc/profile）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">absurd$ echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig &gt;&gt; ~/.bash_profile</span><br><span class="line">absurd$ echo export PKG_CONFIG_PATH &gt;&gt; ~/.bash_profile</span><br><span class="line">absurd$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>配置完后执行</p><p><code>pkg-config opencv --libs --cflags opencv</code></p></li><li><p>测试opencv的DEMO</p><p><img src="https://github.com/QianMo/OpenCV3-Intro-Book-Src/blob/master/OpenCV3-examples/src/%E3%80%901%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0/%E3%80%901%E3%80%91OpenCV%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/1_HelloOpenCV/1.jpg?raw=true" alt="image"></p><p>新建test.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;opencv2/opencv.hpp&gt; //头文件</span><br><span class="line">using namespace cv; //包含cv命名空间</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">// 【1】读入一张图片</span><br><span class="line">Mat img=imread(&quot;1.jpg&quot;);</span><br><span class="line">// 【2】在窗口中显示载入的图片</span><br><span class="line">imshow(&quot;【载入的图片】&quot;,img);</span><br><span class="line">// 【3】等待6000 ms后窗口自动关闭</span><br><span class="line">waitKey(6000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译<code>g++ </code>pkg-config opencv –libs –cflags opencv<code> ./test.cpp -o ./test.o</code>,</p><p>执行<code>./test.o</code></p><p>可以看到弹出图片</p></li><li><p>下载安装vscode，<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>安装插件C/C++、C++ Intellisense、C++ Clang Command Adapter、Chinese (Simplified) Language Pack for Visual Studio Code（中文语言包，看个人喜好）</p><p><img src="https://user-images.githubusercontent.com/7789698/67624402-af1e6900-f862-11e9-805f-5667049e317a.png" alt="image"></p></li><li><p>配置vscode</p><p><img src="https://user-images.githubusercontent.com/7789698/67629549-51197200-f8b2-11e9-9cea-2e9ff7906105.png" alt="image"></p><ul><li><p>“command+shift+p”打开命令行工具窗口，输入或者选择“Edit Configurations”命令。</p><p>此时会在当前工作空间目录生成.vscode配置目录，同时在配置目录会生成一个c_cpp_properties.json文件。</p><p>includePath使用的opencv通过<code> ~ brew list opencv@3</code>获取到include</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Mac&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;/usr/local/include&quot;,</span><br><span class="line">                &quot;/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/bin&quot;,</span><br><span class="line">                &quot;/usr/local/Cellar/opencv@3/3.4.5_6/include/&quot;,      </span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/**&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [],</span><br><span class="line">            &quot;macFrameworkPath&quot;: [</span><br><span class="line">                &quot;/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;compilerPath&quot;: &quot;/usr/bin/clang&quot;,</span><br><span class="line">            &quot;cStandard&quot;: &quot;c11&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;c++17&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;clang-x64&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>“command+shift+p”打开命令行工具窗口，输入或者选择“Tasks: Configure Task”</p><p>配置 tasks.json文件</p><p><img src="https://user-images.githubusercontent.com/7789698/67629567-7a3a0280-f8b2-11e9-94c1-c9942d9d4bae.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// 有关 tasks.json 格式的文档，请参见</span><br><span class="line">    // https://go.microsoft.com/fwlink/?LinkId=733558</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;g++ build active file&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;/usr/bin/g++&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out&quot;,</span><br><span class="line">                &quot;`pkg-config&quot;,</span><br><span class="line">                &quot;--libs&quot;,</span><br><span class="line">                &quot;--cflags&quot;,</span><br><span class="line">                &quot;opencv`&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;/usr/bin&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &quot;build&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置launch.json。“command+shift+p”打开命令行工具窗口，输入或者选择<strong>Debug: Open launch.json</strong>命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;g++ build active file&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.out&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [ &#123;&quot;name&quot;: &quot;PKG_CONFIG_PATH&quot;, &quot;value&quot;: &quot;/usr/local/lib/pkgconfig&quot;&#125;,   // 這是opencv解壓碼後創建的release目錄下的unix-install, 要保證該目錄下下有opencv.pc文件</span><br><span class="line">                &#123;&quot;name&quot;: &quot;DYLD_LIBRARY_PATH&quot;, &quot;value&quot;: &quot;/usr/local/opencv/build/lib&quot;&#125;   // 這個是你在編譯時，opencv make時`CMAKE_INSTALL_PREFIX`指定的目錄</span><br><span class="line">            ],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;lldb&quot;,</span><br><span class="line">            &quot;preLaunchTask&quot;:&quot;g++ build active file&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开始调试</p></li></ol><p><img src="https://user-images.githubusercontent.com/7789698/67629588-c422e880-f8b2-11e9-86c1-e3f20ab171c7.png" alt="image"></p><p>调试如果出现图片就是成功了</p><p><img src="https://user-images.githubusercontent.com/7789698/67629814-00584800-f8b7-11e9-9173-d295d6daf500.png" alt="image"></p><p>如果类似上图显示波浪形，就是c_cpp_properties.json的includePath没有引用到正确的库，配置下就好了</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引</title>
      <link href="/hexo/post/f79dc38d.html"/>
      <url>/hexo/post/f79dc38d.html</url>
      
        <content type="html"><![CDATA[<h2 id="B-Tree-索引（B-Tree）"><a href="#B-Tree-索引（B-Tree）" class="headerlink" title="B-Tree 索引（B+Tree）"></a>B-Tree 索引（B+Tree）</h2><p>当你需要查找两个值之间的多个元素时，成本是 O(N)，因为你必须查找树的每一个节点，以判断它是否处于那 2 个值之间（例如，对树使用中序遍历）。而且这个操作不是磁盘I/O有利的，因为你必须读取整个树。我们需要找到高效的范围查询方法。为了解决这个问题，现代数据库使用了B+树。在一个B+树里：</p><ul><li>只有最底层的节点（叶子节点）才保存信息（相关表的行位置）</li><li>其它节点只是在搜索中用来指引到正确节点的。</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/48948736-9467b400-ef70-11e8-8c9e-e7ba0d3b4a35.png" alt="image"></p><p>你可以看到，节点更多了（多了两倍）。确实，你有了额外的节点，它们就是帮助你找到正确节点的『决策节点』（正确节点保存着相关表中行的位置）。但是搜索复杂度还是在 O(log(N))（只多了一层）。一个重要的不同点是，最底层的节点是跟后续节点相连接的。</p><p>用这个 B+树，假设你要找40到100间的值：</p><ul><li>你只需要找 40（若40不存在则找40之后最贴近的值），就像你在上一个树中所做的那样。</li><li>然后用那些连接来收集40的后续节点，直到找到100。</li></ul><p>比方说你找到了 M 个后续节点，树总共有 N 个节点。对指定节点的搜索成本是 log(N)，跟上一个树相同。但是当你找到这个节点，你得通过后续节点的连接得到 M 个后续节点，这需要 M 次运算。那么这次搜索只消耗了 M+log(N) 次运算，区别于上一个树所用的 N 次运算。此外，你不需要读取整个树（仅需要读 M+log(N) 个节点）,这意味着更少的磁盘访问。如果 M 很小（比如 200 行）并且 N 很大（1,000,000），那结果就是天壤之别了。</p><p>如果你在数据库中增加或删除一行（从而在相关的 B+树索引里）：</p><ul><li>你必须在B+树中的节点之间保持顺序，否则节点会变得一团糟，你无法从中找到想要的节点。</li><li>你必须尽可能降低B+树的层数，否则 O(log(N)) 复杂度会变成 O(N)。</li></ul><p>换句话说，B+树需要自我整理和自我平衡。谢天谢地，我们有智能删除和插入。但是这样也带来了成本：在B+树中，插入和删除操作是 O(log(N)) 复杂度。所以有些人听到过使用太多索引不是个好主意这类说法。没错，你减慢了快速插入/更新/删除表中的一个行的操作，因为数据库需要以代价高昂的每索引 O(log(N)) 运算来更新表的索引。再者，增加索引意味着给事务管理器带来更多的工作负荷。</p><h2 id="MyISAM索引实现："><a href="#MyISAM索引实现：" class="headerlink" title="MyISAM索引实现："></a>MyISAM索引实现：</h2><p>MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。</p><p>1）主键索引：</p><p>MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。下图是MyISAM主键索引的原理图：</p><p><img src="https://user-images.githubusercontent.com/7789698/48948771-b3664600-ef70-11e8-99a1-479039340dcc.png" alt="image"></p><p>这里设表一共有三列，假设我们以Col1为主键，图myisam1是一个MyISAM表的主索引（Primary key）示意。可以看出MyISAM的索引文件仅仅保存数据记录的地址。</p><p>2）辅助索引（Secondary key）</p><p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：</p><p><img src="https://user-images.githubusercontent.com/7789698/48948783-c0833500-ef70-11e8-847e-52cdcc542e41.png" alt="image"></p><p>同样也是一颗B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p><p>MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分。</p><h2 id="InnoDB索引实现"><a href="#InnoDB索引实现" class="headerlink" title="InnoDB索引实现"></a>InnoDB索引实现</h2><p>InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同.</p><p>1）主键索引：</p><p>InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。</p><p><img src="https://user-images.githubusercontent.com/7789698/48948817-d264d800-ef70-11e8-8d9b-2b6b8428ee76.png" alt="image"></p><p>可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p><p>2）InnoDB的辅助索引</p><pre><code>InnoDB的所有辅助索引都引用主键作为data域。</code></pre><p>例如，下图为定义在Col3上的一个辅助索引：</p><p><img src="https://user-images.githubusercontent.com/7789698/48948834-dd1f6d00-ef70-11e8-9a8b-26dda162a433.png" alt="image"></p><p>   InnoDB 表是基于聚簇索引建立的。因此InnoDB 的索引能提供一种非常快速的主键查找性能。不过，它的辅助索引（Secondary Index， 也就是非主键索引）也会包含主键列，所以，如果主键定义的比较大，其他索引也将很大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。</p><pre><code>  文字符的ASCII码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。  不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白</code></pre><p>1、为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，</p><p>2、用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</p><h3 id="InnoDB索引和MyISAM索引的区别："><a href="#InnoDB索引和MyISAM索引的区别：" class="headerlink" title="InnoDB索引和MyISAM索引的区别："></a>InnoDB索引和MyISAM索引的区别：</h3><p>一是主索引的区别，InnoDB的数据文件本身就是索引文件。而MyISAM的索引和数据是分开的。</p><p>二是辅助索引的区别：InnoDB的辅助索引data域存储相应记录主键的值而不是地址。而MyISAM的辅助索引和主索引没有多大区别。</p><h2 id="Hash-索引"><a href="#Hash-索引" class="headerlink" title="Hash 索引"></a>Hash 索引</h2><p>基于哈希表实现，优点是查找非常快。</p><p>在 MySQL 中只有 Memory 引擎显式支持哈希索引。</p><p>InnoDB 引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B-Tree 索引之上再创建一个哈希索引，这样就让 B-Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><p>限制：哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能影响并不明显；无法用于分组与排序；只支持精确查找，无法用于部分查找和范围查找；如果哈希冲突很多，查找速度会变得很慢。</p><h2 id="Fulltext-索引"><a href="#Fulltext-索引" class="headerlink" title="Fulltext 索引"></a>Fulltext 索引</h2><p>全文索引是MyISAM的一个特殊索引类型，主要用于全文检索。 </p><h2 id="R-Tree-索引"><a href="#R-Tree-索引" class="headerlink" title="R-Tree 索引"></a>R-Tree 索引</h2><p>MyISAM支持空间索引，主要用于地理空间数据类型，例如GEOMETRY。 </p><h2 id="聚集索引与非聚集索引区别？"><a href="#聚集索引与非聚集索引区别？" class="headerlink" title="聚集索引与非聚集索引区别？"></a>聚集索引与非聚集索引区别？</h2><p>聚集索引</p><p>索引的键值逻辑顺序决定了表数据行的物理存储顺序，也就是在数据库上连接的记录在磁盘上的物理存储地址也是相邻的。由于聚集索引规定了数据项，也可以说是记录在表中的物理存储顺序，物理顺序唯一，自然每张表中的聚集索引也是唯一的，但是它可以包含多个列，多个字段。</p><p>非聚集索引</p><p>非聚集索引也就是存储的键值逻辑连续，但是在表数据行物理存储顺序上不一定连续的索引，也就是索引的逻辑顺序与磁盘上的物理存储顺序不同。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务隔离机制</title>
      <link href="/hexo/post/6275b0e6.html"/>
      <url>/hexo/post/6275b0e6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Isolation.DEFAULT(TransactionDefinition.ISOLATION_DEFAULT)使用数据库默认的事务隔离级别。</p></blockquote><blockquote><p>Isolation.READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。</p><p>实现：SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED</p></blockquote><blockquote><p>Isolation.READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。</p><p>实现：SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED</p></blockquote><blockquote><p>Isolation.REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。</p><p>实现：SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ</p></blockquote><blockquote><p>Isolation.SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻读。</p><p>实现：SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE</p></blockquote><p>√: 可能出现    ×: 不会出现</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li><li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读</li><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</li></ul><h2 id="为什么RU级别会发生脏读，而其他的隔离级别能够避免？"><a href="#为什么RU级别会发生脏读，而其他的隔离级别能够避免？" class="headerlink" title="为什么RU级别会发生脏读，而其他的隔离级别能够避免？"></a>为什么RU级别会发生脏读，而其他的隔离级别能够避免？</h2><p>RU级别的操作其实就是对事务内的每一条更新语句对应的行记录加上读写锁来操作，而不把一个事务当成一个整体来加锁，所以会导致脏读。但是RC和RR能够通过MVCC来保证记录只有在最后COMMIT后才会让别的事务看到。</p><p>Read Committed（读取提交内容）</p><p>在RC级别中，数据的读取都是不加锁的，但是数据的写入、修改和删除是需要加锁的。</p><p>由于MySQL的InnoDB默认是使用的RR级别，所以我们先要将该session开启成RC级别，并且设置binlog的模式</p><p>SET session transaction isolation level read committed;</p><p>SET SESSION binlog_format = ‘ROW’;（或者是MIXED）</p><p>Repeatable Read（可重读）</p><p>这是MySQL中InnoDB默认的隔离级别。我们姑且分“读”和“写”两个模块来讲解。</p><p>读</p><p>读就是可重读，可重读这个概念是一事务的多个实例在并发读取数据时，会看到同样的数据行，有点抽象，我们来看一下效果。</p><p>RC（不可重读）模式下的展现</p><table><thead><tr><th>事务A</th><th>事务B</th><th></th></tr></thead><tbody><tr><td>begin;</td><td>begin;</td><td></td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=1; idclass_nameteacher_id 1初三二班1 2初三一班1</td><td></td><td></td></tr><tr><td></td><td>update class_teacher set class_name=’初三三班’ where id=1;</td><td></td></tr><tr><td></td><td>commit;</td><td></td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=1; idclass_nameteacher_id 1初三三班1 2初三一班1 读到了事务B修改的数据，和第一次查询的结果不一样，是不可重读的。</td><td></td><td></td></tr><tr><td>commit;</td><td></td><td></td></tr></tbody></table><p>事务B修改id=1的数据提交之后，事务A同样的查询，后一次和前一次的结果不一样，这就是不可重读（重新读取产生的结果不一样）。这就很可能带来一些问题，那么我们来看看在RR级别中MySQL的表现：</p><table><thead><tr><th>事务A</th><th>事务B</th><th>事务C</th></tr></thead><tbody><tr><td>begin;</td><td>begin;</td><td>begin;</td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=1; idclass_nameteacher_id 1初三二班1 2初三一班1</td><td></td><td></td></tr><tr><td></td><td>update class_teacher set class_name=’初三三班’ where id=1; commit;</td><td></td></tr><tr><td></td><td></td><td>insert into class_teacher values (null,’初三三班’,1);commit;</td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=1; idclass_nameteacher_id 1初三二班1 2初三一班1 没有读到事务B修改的数据，和第一次sql读取的一样，是可重复读的。 没有读到事务C新添加的数据。</td><td></td><td></td></tr><tr><td>commit;</td><td></td><td></td></tr></tbody></table><p>我们注意到，当teacher_id=1时，事务A先做了一次读取，事务B中间修改了id=1的数据，并commit之后，事务A第二次读到的数据和第一次完全相同。所以说它是可重读的。那么MySQL是怎么做到的呢？这里姑且卖个关子，我们往下看。</p><h2 id="为什么RC级别不能重复读，而RR级别能够避免？"><a href="#为什么RC级别不能重复读，而RR级别能够避免？" class="headerlink" title="为什么RC级别不能重复读，而RR级别能够避免？"></a>为什么RC级别不能重复读，而RR级别能够避免？</h2><p>在RC事务隔离级别下,每次语句执行都关闭ReadView,然后重新创建一份ReadView。而在RR下,事务开始后第一个读操作创建ReadView,一直到事务结束关闭</p><h3 id="不可重复读和幻读的区别"><a href="#不可重复读和幻读的区别" class="headerlink" title="不可重复读和幻读的区别"></a>不可重复读和幻读的区别</h3><p>很多人容易搞混不可重复读和幻读，确实这两者有些相似。但不可重复读重点在于update和delete，而幻读的重点在于insert。</p><p>如果使用锁机制来实现这两种隔离级别，在可重复读中，该sql第一次读取到数据后，就将这些数据加锁，其它事务无法修改这些数据，就可以实现可重复读了。但这种方法却无法锁住insert的数据，所以当事务A先前读取了数据，或者修改了全部数据，事务B还是可以insert数据提交，这时事务A就会发现莫名其妙多了一条之前没有的数据，这就是幻读，不能通过行锁来避免。需要Serializable隔离级别 ，读用读锁，写用写锁，读锁和写锁互斥，这么做可以有效的避免幻读、不可重复读、脏读等问题，但会极大的降低数据库的并发能力。</p><p>所以说不可重复读和幻读最大的区别，就在于如何通过锁机制来解决他们产生的问题。</p><p>上文说的，是使用悲观锁机制来处理这两种问题，但是MySQL、ORACLE、PostgreSQL等成熟的数据库，出于性能考虑，都是使用了以乐观锁为理论基础的MVCC（多版本并发控制）来避免这两种问题。</p><ul><li><p>快照读：就是select</p></li><li><ul><li>select * from table ….;</li></ul></li><li><p>当前读：特殊的读操作，插入/更新/删除操作，属于当前读，处理的都是当前的数据，需要加锁。</p></li><li><ul><li>select * from table where ? lock in share mode;</li><li>select * from table where ? for update;</li><li>insert;</li><li>update ;</li><li>delete;</li></ul></li></ul><p>GAP间隙锁</p><p>RC级别：</p><table><thead><tr><th>事务A</th><th>事务B</th><th></th></tr></thead><tbody><tr><td>begin;</td><td>begin;</td><td></td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=30; idclass_nameteacher_id 2初三二班30</td><td></td><td></td></tr><tr><td>update class_teacher set class_name=’初三四班’ where teacher_id=30;</td><td></td><td></td></tr><tr><td></td><td>insert into class_teacher values (null,’初三二班’,30); commit;</td><td></td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=30; idclass_nameteacher_id 2初三四班30 10初三二班30</td><td></td><td></td></tr></tbody></table><p>RR级别：</p><table><thead><tr><th>事务A</th><th>事务B</th><th></th></tr></thead><tbody><tr><td>begin;</td><td>begin;</td><td></td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=30; idclass_nameteacher_id 2初三二班30</td><td></td><td></td></tr><tr><td>update class_teacher set class_name=’初三四班’ where teacher_id=30;</td><td></td><td></td></tr><tr><td></td><td>insert into class_teacher values (null,’初三二班’,30); waiting….</td><td></td></tr><tr><td>select id,class_name,teacher_id from class_teacher where teacher_id=30; idclass_nameteacher_id 2初三四班30</td><td></td><td></td></tr><tr><td>commit;</td><td>事务Acommit后，事务B的insert执行。</td><td></td></tr></tbody></table><p>通过对比我们可以发现，在RC级别中，事务A修改了所有teacher_id=30的数据，但是当事务Binsert进新数据后，事务A发现莫名其妙多了一行teacher_id=30的数据，而且没有被之前的update语句所修改，这就是“当前读”的幻读。</p><p>RR级别中，事务A在update后加锁，事务B无法插入新数据，这样事务A在update前后读的数据保持一致，避免了幻读。这个锁，就是Gap锁。</p><p>MySQL是这么实现的：</p><p>在class_teacher这张表中，teacher_id是个索引，那么它就会维护一套B+树的数据关系，为了简化，我们用链表结构来表达（实际上是个树形结构，但原理相同）</p><p><img src="https://user-images.githubusercontent.com/7789698/48948565-de03cf00-ef6f-11e8-8b15-400d86f16bf4.png" alt="image">如图所示，InnoDB使用的是聚集索引，teacher_id身为二级索引，就要维护一个索引字段和主键id的树状结构（这里用链表形式表现），并保持顺序排列。</p><p>Innodb将这段数据分成几个个区间</p><ul><li>(negative infinity, 5],</li><li>(5,30],</li><li>(30,positive infinity)；</li></ul><p>update class_teacher set class_name=’初三四班’ where teacher_id=30;不仅用行锁，锁住了相应的数据行；同时也在两边的区间，（5,30]和（30，positive infinity），都加入了gap锁。这样事务B就无法在这个两个区间insert进新数据。</p><p>受限于这种实现方式，Innodb很多时候会锁住不需要锁的区间。如下所示：</p><table><thead><tr><th>事务A</th><th>事务B</th><th>事务C</th></tr></thead><tbody><tr><td>begin;</td><td>begin;</td><td>begin;</td></tr><tr><td>select id,class_name,teacher_id from class_teacher; idclass_nameteacher_id 1初三一班5  2初三二班30</td><td></td><td></td></tr><tr><td>update class_teacher set class_name=’初一一班’ where teacher_id=20;</td><td></td><td></td></tr><tr><td></td><td>insert into class_teacher values (null,’初三五班’,10); waiting …..</td><td>insert into class_teacher values (null,’初三五班’,40);</td></tr><tr><td>commit;</td><td>事务A commit之后，这条语句才插入成功</td><td>commit;</td></tr><tr><td></td><td>commit;</td><td></td></tr></tbody></table><p>update的teacher_id=20是在(5，30]区间，即使没有修改任何数据，Innodb也会在这个区间加gap锁，而其它区间不会影响，事务C正常插入。</p><p>如果使用的是没有索引的字段，比如update class_teacher set teacher_id=7 where class_name=’初三八班（即使没有匹配到任何数据）’,那么会给全表加入gap锁。同时，它不能像上文中行锁一样经过MySQL Server过滤自动解除不满足条件的锁，因为没有索引，则这些字段也就没有排序，也就没有区间。除非该事务提交，否则其它事务无法插入任何数据。</p><p>行锁防止别的事务修改或删除，GAP锁防止别的事务新增，行锁和GAP锁结合形成的的Next-Key锁共同解决了RR级别在写数据时的幻读问题。</p><h3 id="Read-uncommitted-读未提交"><a href="#Read-uncommitted-读未提交" class="headerlink" title="Read uncommitted 读未提交"></a>Read uncommitted 读未提交</h3><p>公司发工资了，领导把5000元打到singo的账号上，但是该事务并未提交，而singo正好去查看账户，发现工资已经到账，是5000元整，非常高兴。可是不幸的是，领导发现发给singo的工资金额不对，是2000元，于是迅速回滚了事务，修改金额后，将事务提交，最后singo实际的工资只有2000元，singo空欢喜一场。</p><p><img src="https://user-images.githubusercontent.com/7789698/48948598-fe338e00-ef6f-11e8-86d1-1aceac364782.png" alt="image"></p><p>出现上述情况，即我们所说的脏读，两个并发的事务，“事务A：领导给singo发工资”、“事务B：singo查询工资账户”，事务B读取了事务A尚未提交的数据。</p><p>当隔离级别设置为Read uncommitted时，就可能出现脏读，如何避免脏读，请看下一个隔离级别。</p><h4 id="Read-committed-读提交"><a href="#Read-committed-读提交" class="headerlink" title="Read committed 读提交"></a>Read committed 读提交</h4><p>singo拿着工资卡去消费，系统读取到卡里确实有2000元，而此时她的老婆也正好在网上转账，把singo工资卡的2000元转到另一账户，并在singo之前提交了事务，当singo扣款时，系统检查到singo的工资卡已经没有钱，扣款失败，singo十分纳闷，明明卡里有钱，为何……</p><p>出现上述情况，即我们所说的不可重复读，两个并发的事务，“事务A：singo消费”、“事务B：singo的老婆网上转账”，事务A事先读取了数据，事务B紧接了更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。</p><p>当隔离级别设置为Read committed时，避免了脏读，但是可能会造成不可重复读。</p><p>大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。如何解决不可重复读这一问题，请看下一个隔离级别。</p><h4 id="Repeatable-read-重复读"><a href="#Repeatable-read-重复读" class="headerlink" title="Repeatable read 重复读"></a>Repeatable read 重复读</h4><p>当隔离级别设置为Repeatable read时，可以避免不可重复读。当singo拿着工资卡去消费时，一旦系统开始读取工资卡信息（即事务开始），singo的老婆就不可能对该记录进行修改，也就是singo的老婆不能在此时转账。</p><p>虽然Repeatable read避免了不可重复读，但还有可能出现幻读。</p><p>singo的老婆工作在银行部门，她时常通过银行内部系统查看singo的信用卡消费记录。有一天，她正在查询到singo当月信用卡的总消费金额（select sum(amount) from transaction where month = 本月）为80元，而singo此时正好在外面胡吃海塞后在收银台买单，消费1000元，即新增了一条1000元的消费记录（insert transaction … ），并提交了事务，随后singo的老婆将singo当月信用卡消费的明细打印到A4纸上，却发现消费总额为1080元，singo的老婆很诧异，以为出现了幻觉，幻读就这样产生了。</p><p>注：Mysql的默认隔离级别就是Repeatable read。</p><h4 id="Serializable-序列化"><a href="#Serializable-序列化" class="headerlink" title="Serializable 序列化"></a>Serializable 序列化</h4><p>Serializable是最高的事务隔离级别，同时代价也花费最高，性能很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻像读。</p><h1 id="MySql-ACID如何保证？"><a href="#MySql-ACID如何保证？" class="headerlink" title="MySql ACID如何保证？"></a>MySql ACID如何保证？</h1><p>ACID，指数据库事务正确执行的四个基本要素的缩写。包含：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability） </p><h2 id="为什么InnoDB能够保证原子性？"><a href="#为什么InnoDB能够保证原子性？" class="headerlink" title="为什么InnoDB能够保证原子性？"></a>为什么InnoDB能够保证原子性？</h2><p>在事务里任何对数据的修改都会写一个Undo log，然后进行数据的修改，如果出现错误或者用户需要回滚的时候可以利用Undo log的备份数据恢复到事务开始之前的状态。</p><h2 id="为什么InnoDB能够保证持久性？"><a href="#为什么InnoDB能够保证持久性？" class="headerlink" title="为什么InnoDB能够保证持久性？"></a>为什么InnoDB能够保证持久性？</h2><p>在一个事务中的每一次SQL操作之后都会写入一个redo log到buffer中，在最后COMMIT的时候，必须先将该事务的所有日志写入到redo log file进行持久化（这里的写入是顺序写的），待事务的COMMIT操作完成才算完成。即使COMMIT后数据库有任何的问题，在下次重启后依然能够通过redo log的checkpoint进行恢复。</p><h2 id="为什么InnoDB能够保证一致性？"><a href="#为什么InnoDB能够保证一致性？" class="headerlink" title="为什么InnoDB能够保证一致性？"></a>为什么InnoDB能够保证一致性？</h2><p>在事务处理的ACID属性中，一致性是最基本的属性，其它的三个属性都为了保证一致性而存在的。</p><p>首先回顾一下一致性的定义。所谓一致性，指的是数据处于一种有意义的状态，这种状态是语义上的而不是语法上的。最常见的例子是转帐。例如从帐户A转一笔钱到帐户B上，如果帐户A上的钱减少了，而帐户B上的钱却没有增加，那么我们认为此时数据处于不一致的状态。</p><p>在数据库实现的场景中，一致性可以分为数据库外部的一致性和数据库内部的一致性。前者由外部应用的编码来保证，即某个应用在执行转帐的数据库操作时，必须在同一个事务内部调用对帐户A和帐户B的操作。如果在这个层次出现错误，这不是数据库本身能够解决的，也不属于我们需要讨论的范围。后者由数据库来保证，即在同一个事务内部的一组操作必须全部执行成功（或者全部失败）。这就是事务处理的原子性。（上面说过了是用Undo log来保证的）</p><p>但是，原子性并不能完全保证一致性。在多个事务并行进行的情况下，即使保证了每一个事务的原子性，仍然可能导致数据不一致的结果，比如丢失更新问题。</p><p>为了保证并发情况下的一致性，引入了隔离性，即保证每一个事务能够看到的数据总是一致的，就好象其它并发事务并不存在一样。用术语来说，就是多个事务并发执行后的状态，和它们串行执行后的状态是等价的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fastjson IdentityHashMap 内存泄漏排查</title>
      <link href="/hexo/post/bc931ae8.html"/>
      <url>/hexo/post/bc931ae8.html</url>
      
        <content type="html"><![CDATA[<p>一个安稳的周末，突然线上传来报警，保留现场过后紧急重启下，然后开始分析。让运维把oom 的dump数据和jstack数据传来</p><p>dump文件太大，传过来之前先分析下jstack日志。</p><p>jstack发现了一丝异样</p><blockquote><p>“http-nio-8080-exec-197” #7490 daemon prio=5 os_prio=0 tid=0x00007fdd5806b000 nid=0xed1 waiting for monitor entry [0x00007fdd1b7d5000]<br>   java.lang.Thread.State: BLOCKED (on object monitor)<br>    at org.apache.catalina.webresources.CachedResource.validateResources(CachedResource.java:125)<br>    - waiting to lock &lt;0x000000008015c660&gt; (a org.apache.catalina.webresources.CachedResource)<br>    at org.apache.catalina.webresources.Cache.getResources(Cache.java:129)<br>    at org.apache.catalina.webresources.StandardRoot.getResources(StandardRoot.java:315)<br>    at org.apache.catalina.webresources.StandardRoot.getClassLoaderResources(StandardRoot.java:231)<br>    at org.apache.catalina.loader.WebappClassLoaderBase.findResources(WebappClassLoaderBase.java:995)<br>    at java.lang.ClassLoader.getResources(ClassLoader.java:1142)<br>    at com.alibaba.fastjson.util.ServiceLoader.load(ServiceLoader.java:33)<br>    at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:459)<br>    at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:354)<br>    at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:639)<br>    at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)<br>    at com.alibaba.fastjson.JSON.parseObject(JSON.java:318)<br>    at com.alibaba.fastjson.JSON.parseObject(JSON.java:281)</p></blockquote><p>看到这个线程是阻塞状态，也就是tomcat请求http-nio-8080-exec-197现在是阻塞状态，等待&lt;0x000000008015c660&gt;释放。而且waiting to lock &lt;0x000000008015c660&gt;出现了11次，也就是有11个线程正在等待释放</p><p>关于线程状态：</p><p><img src="https://user-images.githubusercontent.com/7789698/44249880-86ddb800-a224-11e8-9e28-084e8bfebbb9.png" alt="image"></p><p><strong>新建（New）</strong></p><p>创建后尚未启动。</p><p><strong>可运行（Runnable）</strong></p><p>可能正在运行，也可能正在等待 CPU 时间片。</p><p>包含了操作系统线程状态中的 Running 和 Ready。</p><p><strong>阻塞（Blocking）</strong></p><p>等待获取一个排它锁，如果其线程释放了锁就会结束此状态。</p><p><strong>无限期等待（Waiting）</strong></p><p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>没有设置 Timeout 参数的 Object.wait() 方法</td><td>Object.notify() / Object.notifyAll()</td></tr><tr><td>没有设置 Timeout 参数的 Thread.join() 方法</td><td>被调用的线程执行完毕</td></tr><tr><td>LockSupport.park() 方法</td><td>-</td></tr></tbody></table><p><strong>限期等待（Timed Waiting）</strong></p><p>无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。</p><p>调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。</p><p>调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。</p><p>睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。</p><p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>Thread.sleep() 方法</td><td>时间结束</td></tr><tr><td>设置了 Timeout 参数的 Object.wait() 方法</td><td>时间结束 / Object.notify() / Object.notifyAll()</td></tr><tr><td>设置了 Timeout 参数的 Thread.join() 方法</td><td>时间结束 / 被调用的线程执行完毕</td></tr><tr><td>LockSupport.parkNanos() 方法</td><td>-</td></tr><tr><td>LockSupport.parkUntil() 方法</td><td>-</td></tr></tbody></table><p><strong>死亡（Terminated）</strong></p><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p><p>往下一看</p><blockquote><p>at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)<br>at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:94)<br>at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)<br>at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)<br>at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)<br>at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)<br>at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:502)<br>at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1132)<br>at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:684)<br>at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1539)<br>at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1495)</p><ul><li>locked &lt;0x0000000094c40718&gt; (a org.apache.tomcat.util.net.NioChannel)<br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)<br>at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)<br>at java.lang.Thread.run(Thread.java:745)</li></ul></blockquote><p>通过查找&lt;0x000000008015c660&gt; 发现有个线程badge-thread-18锁住了它 ，</p><blockquote><p>“badge-thread-18” #438 prio=5 os_prio=0 tid=0x00007fdd6403d800 nid=0x5b36 runnable [0x00007fdd282bb000]<br>   java.lang.Thread.State: RUNNABLE<br>    at java.util.zip.ZipFile.open(Native Method)<br>    at java.util.zip.ZipFile.<init>(ZipFile.java:219)<br>    at java.util.zip.ZipFile.<init>(ZipFile.java:149)<br>    at java.util.jar.JarFile.<init>(JarFile.java:166)<br>    at java.util.jar.JarFile.<init>(JarFile.java:130)<br>    at org.apache.tomcat.util.compat.JreCompat.jarFileNewInstance(JreCompat.java:170)<br>    at org.apache.tomcat.util.compat.JreCompat.jarFileNewInstance(JreCompat.java:155)<br>    at org.apache.catalina.webresources.AbstractArchiveResourceSet.openJarFile(AbstractArchiveResourceSet.java:316)<br>    - locked &lt;0x00000000903a4828&gt; (a java.lang.Object)<br>    at org.apache.catalina.webresources.AbstractSingleArchiveResourceSet.getArchiveEntry(AbstractSingleArchiveResourceSet.java:96)<br>    at org.apache.catalina.webresources.AbstractArchiveResourceSet.getResource(AbstractArchiveResourceSet.java:265)<br>    at org.apache.catalina.webresources.StandardRoot.getResourcesInternal(StandardRoot.java:327)<br>    at org.apache.catalina.webresources.CachedResource.validateResources(CachedResource.java:127)<br>    - locked &lt;0x000000008015c660&gt; (a org.apache.catalina.webresources.CachedResource)<br>    at org.apache.catalina.webresources.Cache.getResources(Cache.java:147)<br>    at org.apache.catalina.webresources.StandardRoot.getResources(StandardRoot.java:315)<br>    at org.apache.catalina.webresources.StandardRoot.getClassLoaderResources(StandardRoot.java:231)<br>    at org.apache.catalina.loader.WebappClassLoaderBase.findResources(WebappClassLoaderBase.java:995)<br>    at java.lang.ClassLoader.getResources(ClassLoader.java:1142)<br>    at com.alibaba.fastjson.util.ServiceLoader.load(ServiceLoader.java:33)<br>    at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:459)<br>    at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:354)<br>    at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:639)<br>    at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)<br>    at com.alibaba.fastjson.JSON.parseObject(JSON.java:318)<br>    at com.alibaba.fastjson.JSON.parseObject(JSON.java:281)</p></blockquote><p>通过上面的堆栈，我们先猜测下跟ParserConfig的getDeserializer方法可能有若干关系，先看下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">getDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class="line">    ObjectDeserializer derializer = deserializers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">        type = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    derializer = deserializers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        JSONType annotation = clazz.getAnnotation(JSONType.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; mappingTo = annotation.mappingTo();</span><br><span class="line">            <span class="keyword">if</span> (mappingTo != Void.class) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDeserializer(mappingTo, mappingTo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> WildcardType || type <span class="keyword">instanceof</span> TypeVariable || type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">        derializer = deserializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String className = clazz.getName();</span><br><span class="line">    className = className.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.awt.&quot;</span>) <span class="comment">//</span></span><br><span class="line">        &amp;&amp; AwtCodec.support(clazz)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!awtError) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.awt.Point&quot;</span>), AwtCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.awt.Font&quot;</span>), AwtCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.awt.Rectangle&quot;</span>), AwtCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.awt.Color&quot;</span>), AwtCodec.instance);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">                awtError = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            derializer = AwtCodec.instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!jdk8Error) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.time.&quot;</span>)) &#123;</span><br><span class="line">                </span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.LocalDateTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.LocalDate&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.LocalTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.ZonedDateTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.OffsetDateTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.OffsetTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.ZoneOffset&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.ZoneRegion&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.ZoneId&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.Period&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.Duration&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.time.Instant&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                </span><br><span class="line">                derializer = deserializers.get(clazz);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.util.Optional&quot;</span>)) &#123;</span><br><span class="line">                </span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.util.Optional&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.util.OptionalDouble&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.util.OptionalInt&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                deserializers.put(Class.forName(<span class="string">&quot;java.util.OptionalLong&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                </span><br><span class="line">                derializer = deserializers.get(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">            jdk8Error = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (className.equals(<span class="string">&quot;java.nio.file.Path&quot;</span>)) &#123;</span><br><span class="line">        deserializers.put(clazz, MiscCodec.instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == Map.Entry.class) &#123;</span><br><span class="line">        deserializers.put(clazz, MiscCodec.instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class,classLoader)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class="line">                deserializers.put(forType, autowired);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (derializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        derializer = deserializers.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz.isEnum()) &#123;</span><br><span class="line">        derializer = <span class="keyword">new</span> EnumDeserializer(clazz);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isArray()) &#123;</span><br><span class="line">        derializer = ObjectArrayCodec.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class</span><br><span class="line">               || clazz == ArrayList.class) &#123;</span><br><span class="line">        derializer = CollectionCodec.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        derializer = CollectionCodec.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        derializer = MapDeserializer.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        derializer = <span class="keyword">new</span> ThrowableDeserializer(<span class="keyword">this</span>, clazz);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        derializer = createJavaBeanDeserializer(clazz, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    putDeserializer(type, derializer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> derializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deserializers又指的是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> IdentityHashMap&lt;Type, ObjectDeserializer&gt; deserializers         = <span class="keyword">new</span> IdentityHashMap&lt;Type, ObjectDeserializer&gt;();</span><br></pre></td></tr></table></figure><p>大致逻辑是先通过缓存的IdentityHashMap查找，找不到就判断是否注解@JSONType，从中解析。如果还是找不到如果类型是WildcardType、TypeVariable 、 ParameterizedType从中解析。还是不行就使用当前线程类加载器 查找 META-INF/services/AutowiredObjectDeserializer.class实现类。余下就不分析了，当大多数json解析走至此处就要想一下，为什么从缓存的IdentityHashMap查找不到该类型？</p><p>通过dump分析可以得到com.alibaba.fastjson.util.IdentityHashMap非常大，也验证了我的看法。</p><p>IdentityHashMap是通过System.identityHashCode获取的key，但是这个几乎是唯一的，就算是同一个类型并不是同一个引用都将会有问题</p><p>引发这段代码的业务代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leak</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student student=<span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    CacheWrapper cacheWrapper = <span class="keyword">new</span> CacheWrapper();</span><br><span class="line">    cacheWrapper.setCacheObject(student);</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = JSON.toJSONBytes(cacheWrapper);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        Object o = JSON.parseObject(bytes, <span class="keyword">new</span> ParameterizedTypeImpl(<span class="keyword">new</span> Type[]&#123;Student.class&#125;, CacheWrapper.class.getDeclaringClass(), CacheWrapper.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T cacheObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheWrapper</span><span class="params">(T cacheObject, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheObject=cacheObject;</span><br><span class="line">        <span class="keyword">this</span>.expire=expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        CacheWrapper&lt;T&gt; tmp=(CacheWrapper&lt;T&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">        tmp.setCacheObject(<span class="keyword">this</span>.cacheObject);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getCacheObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCacheObject</span><span class="params">(T cacheObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheObject = cacheObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExpire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpire</span><span class="params">(<span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expire = expire;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 -Xmx50m配置我们就能得到</p><p>java.lang.OutOfMemoryError: GC overhead limit exceeded</p><pre><code>at java.util.Arrays.copyOf(Arrays.java:3236)at java.lang.StringCoding.safeTrim(StringCoding.java:79)at java.lang.StringCoding.access$300(StringCoding.java:50)at java.lang.StringCoding$StringEncoder.encode(StringCoding.java:305)at java.lang.StringCoding.encode(StringCoding.java:344)at java.lang.String.getBytes(String.java:918)at java.io.UnixFileSystem.getBooleanAttributes0(Native Method)at java.io.UnixFileSystem.getBooleanAttributes(UnixFileSystem.java:242)at java.io.File.exists(File.java:819)at sun.misc.URLClassPath$FileLoader.getResource(URLClassPath.java:1245)at sun.misc.URLClassPath$FileLoader.findResource(URLClassPath.java:1212)at sun.misc.URLClassPath$1.next(URLClassPath.java:240)at sun.misc.URLClassPath$1.hasMoreElements(URLClassPath.java:250)at java.net.URLClassLoader$3$1.run(URLClassLoader.java:601)at java.net.URLClassLoader$3$1.run(URLClassLoader.java:599)at java.security.AccessController.doPrivileged(Native Method)at java.net.URLClassLoader$3.next(URLClassLoader.java:598)at java.net.URLClassLoader$3.hasMoreElements(URLClassLoader.java:623)at sun.misc.CompoundEnumeration.next(CompoundEnumeration.java:45)at sun.misc.CompoundEnumeration.hasMoreElements(CompoundEnumeration.java:54)at com.alibaba.fastjson.util.ServiceLoader.load(ServiceLoader.java:34)at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:459)at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:354)at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:639)at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)at com.alibaba.fastjson.JSON.parseObject(JSON.java:318)at com.alibaba.fastjson.JSON.parseObject(JSON.java:281)at com.alibaba.fastjson.JSON.parseObject(JSON.java:381)at com.alibaba.fastjson.JSON.parseObject(JSON.java:361)</code></pre><p>通过分析发现，每次new一个ParameterizedTypeImpl，就算泛型是一个类，也会在IdentityHashMap储存两遍，这样造成了内存泄漏。</p><p>ParameterizedTypeImpl的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTypeImpl</span> <span class="keyword">implements</span> <span class="title">ParameterizedType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type[] actualTypeArguments;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type   ownerType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type   rawType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterizedTypeImpl</span><span class="params">(Type[] actualTypeArguments, Type ownerType, Type rawType)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actualTypeArguments = actualTypeArguments;</span><br><span class="line">        <span class="keyword">this</span>.ownerType = ownerType;</span><br><span class="line">        <span class="keyword">this</span>.rawType = rawType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Type[] getActualTypeArguments() &#123;</span><br><span class="line">        <span class="keyword">return</span> actualTypeArguments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getOwnerType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ownerType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getRawType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rawType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        ParameterizedTypeImpl that = (ParameterizedTypeImpl) o;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Probably incorrect - comparing Object[] arrays with Arrays.equals</span></span><br><span class="line">        <span class="keyword">if</span> (!Arrays.equals(actualTypeArguments, that.actualTypeArguments)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (ownerType != <span class="keyword">null</span> ? !ownerType.equals(that.ownerType) : that.ownerType != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> rawType != <span class="keyword">null</span> ? rawType.equals(that.rawType) : that.rawType == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = actualTypeArguments != <span class="keyword">null</span> ? Arrays.hashCode(actualTypeArguments) : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (ownerType != <span class="keyword">null</span> ? ownerType.hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (rawType != <span class="keyword">null</span> ? rawType.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果通过hashcode而不是System.identityHashCode就不会有内存泄漏的问题。所以我们尝试把ParameterizedTypeImpl缓存一下。代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ConcurrentMap&lt;Type, Type&gt; classTypeCache</span><br><span class="line">            = <span class="keyword">new</span> ConcurrentHashMap&lt;Type, Type&gt;(<span class="number">16</span>, <span class="number">0.75f</span>, <span class="number">1</span>);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixLeak</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student student=<span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    CacheWrapper cacheWrapper = <span class="keyword">new</span> CacheWrapper();</span><br><span class="line">    cacheWrapper.setCacheObject(student);</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = JSON.toJSONBytes(cacheWrapper);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        Type argkey = <span class="keyword">new</span> ParameterizedTypeImpl(<span class="keyword">new</span> Type[]&#123;Student.class&#125;, CacheWrapper.class.getDeclaringClass(), CacheWrapper.class);</span><br><span class="line">        Type cachedType = classTypeCache.get(argkey);</span><br><span class="line">        <span class="keyword">if</span> (cachedType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            classTypeCache.putIfAbsent(argkey, argkey);</span><br><span class="line">            cachedType = classTypeCache.get(argkey);</span><br><span class="line">        &#125;</span><br><span class="line">        Object o = JSON.parseObject(bytes, cachedType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过测试发现不会在发生问题了</p><p>上线后监控一段时间问题解决.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（十一）SPI内核</title>
      <link href="/hexo/post/7583e99e.html"/>
      <url>/hexo/post/7583e99e.html</url>
      
        <content type="html"><![CDATA[<p>关于java SPI和dubbo SPI的简单阐述<a href="https://www1350.github.io/#post/114">https://www1350.github.io/#post/114</a></p><p>拿解析一的ServiceConfig的doExportUrlsFor1Protocol为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br></pre></td></tr></table></figure><p>这里的protocol来自</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span><br></pre></td></tr></table></figure><p>但是我们debug的时候会发现这个protocol命名是com.alibaba.dubbo.rpc.Protocol$Adaptive,可见是动态生成的。</p><p>通过ExtensionLoader的createAdaptiveExtensionClassCode方法。我们可以获取到这么一段代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Protocol</span>$<span class="title">Adaptive</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">dubbo</span>.<span class="title">rpc</span>.<span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Exporter <span class="title">export</span><span class="params">(com.alibaba.dubbo.rpc.Invoker arg0)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;com.alibaba.dubbo.rpc.Invoker argument == null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (arg0.getUrl() == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;com.alibaba.dubbo.rpc.Invoker argument getUrl() == null&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class="line">        String extName = (url.getProtocol() == <span class="keyword">null</span> ? <span class="string">&quot;dubbo&quot;</span> : url.getProtocol());</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(&quot;</span> + url.toString() + <span class="string">&quot;) use keys([protocol])&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.export(arg0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Invoker <span class="title">refer</span><span class="params">(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg1 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg1;</span><br><span class="line">        String extName = (url.getProtocol() == <span class="keyword">null</span> ? <span class="string">&quot;dubbo&quot;</span> : url.getProtocol());</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(&quot;</span> + url.toString() + <span class="string">&quot;) use keys([protocol])&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.refer(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;dubbo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到动态生成的代码里面，通过getAdaptiveExtension获取的时候，如果没有注解@Adaptive就会把实现类写成UnsupportedOperationException，而对于@Adaptive我们看下一个动态生成的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.remoting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transporter</span>$<span class="title">Adaptive</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">dubbo</span>.<span class="title">remoting</span>.<span class="title">Transporter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.remoting.<span class="function">Client <span class="title">connect</span><span class="params">(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1)</span> <span class="keyword">throws</span> com.alibaba.dubbo.remoting.RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg0;</span><br><span class="line">        String extName = url.getParameter(<span class="string">&quot;client&quot;</span>, url.getParameter(<span class="string">&quot;transporter&quot;</span>, <span class="string">&quot;netty&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(&quot;</span> + url.toString() + <span class="string">&quot;) use keys([client, transporter])&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.connect(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.remoting.<span class="function">Server <span class="title">bind</span><span class="params">(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1)</span> <span class="keyword">throws</span> com.alibaba.dubbo.remoting.RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg0;</span><br><span class="line">        String extName = url.getParameter(<span class="string">&quot;server&quot;</span>, url.getParameter(<span class="string">&quot;transporter&quot;</span>, <span class="string">&quot;netty&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(&quot;</span> + url.toString() + <span class="string">&quot;) use keys([server, transporter])&quot;</span>);</span><br><span class="line">        com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.bind(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到所不同的地方在于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String extName = url.getParameter(<span class="string">&quot;client&quot;</span>, url.getParameter(<span class="string">&quot;transporter&quot;</span>, <span class="string">&quot;netty&quot;</span>));</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.common.URL url = arg0.getUrl(); </span><br><span class="line">String extName = (url.getProtocol() == <span class="keyword">null</span> ? <span class="string">&quot;dubbo&quot;</span> : url.getProtocol());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;netty&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transporter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.SERVER_KEY, Constants.TRANSPORTER_KEY&#125;)</span></span><br><span class="line">    <span class="function">Server <span class="title">bind</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//client    transporter</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY&#125;)</span></span><br><span class="line">    <span class="function">Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们大胆猜测，@Adaptive如果没有设置参数，extName就会拿url.get+接口名；如果有设置参数，extName就会拿最后一个参数和SPI的name获取url.getParameter(最后一个参数名, SPI名)，得到的结果在用url.getParameter(倒数第二个参数名，上一个结果)，一直这样直到取完参数。另外还通过官方文档了解到，接口方法不注解@Adaptive，在实现类注解@Adaptive将会自动激活这个拓展。</p><p>另外一点我们注意到不管参数顺序如何，都能拿到url，这里可能进行了类型判断。接下来我们就验证下想象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getAdaptiveExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object instance = cachedAdaptiveInstance.get();</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//单例double check</span></span><br><span class="line">        <span class="keyword">if</span> (createAdaptiveInstanceError == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (cachedAdaptiveInstance) &#123;</span><br><span class="line">                instance = cachedAdaptiveInstance.get();</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//这里是关键</span></span><br><span class="line">                        instance = createAdaptiveExtension();</span><br><span class="line">                        cachedAdaptiveInstance.set(instance);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                        createAdaptiveInstanceError = t;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;fail to create adaptive instance: &quot;</span> + t.toString(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;fail to create adaptive instance: &quot;</span> + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">    getExtensionClasses();</span><br><span class="line">    <span class="comment">//实现类有注解Adaptive，就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (cachedAdaptiveClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有实现类，类上注解Adaptive，动态生成</span></span><br><span class="line">    <span class="keyword">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; getExtensionClasses() &#123;</span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();</span><br><span class="line">    <span class="comment">//DCL</span></span><br><span class="line">    <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (cachedClasses) &#123;</span><br><span class="line">            classes = cachedClasses.get();</span><br><span class="line">            <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                classes = loadExtensionClasses();</span><br><span class="line">                cachedClasses.set(classes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取SPI，并获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class="line">    <span class="keyword">final</span> SPI defaultAnnotation = type.getAnnotation(SPI.class);</span><br><span class="line">    <span class="keyword">if</span> (defaultAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String value = defaultAnnotation.value();</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; (value = value.trim()).length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String[] names = NAME_SEPARATOR.split(value);</span><br><span class="line">            <span class="keyword">if</span> (names.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;more than 1 default extension name on extension &quot;</span> + type.getName()</span><br><span class="line">                        + <span class="string">&quot;: &quot;</span> + Arrays.toString(names));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (names.length == <span class="number">1</span>) cachedDefaultName = names[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class="keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">    <span class="comment">// /META-INF/dubbo/internal/</span></span><br><span class="line">    loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY);</span><br><span class="line">    <span class="comment">//   META-INF/dubbo/</span></span><br><span class="line">    loadFile(extensionClasses, DUBBO_DIRECTORY);</span><br><span class="line">    <span class="comment">//   META-INF/services/  因为这里是存到cache里面的，所以优先级自然是反过来services&gt;dubbo&gt;internal</span></span><br><span class="line">    loadFile(extensionClasses, SERVICES_DIRECTORY);</span><br><span class="line">    <span class="keyword">return</span> extensionClasses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进入到了SPI机制的核心,通过loadFile可以加载到所有配置的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFile</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, String dir)</span> </span>&#123;</span><br><span class="line">    String fileName = dir + type.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Enumeration&lt;java.net.URL&gt; urls;</span><br><span class="line">        ClassLoader classLoader = findClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            urls = classLoader.getResources(fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            urls = ClassLoader.getSystemResources(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (urls != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                java.net.URL url = urls.nextElement();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream(), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String line = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">//去除注释</span></span><br><span class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> ci = line.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (ci &gt;= <span class="number">0</span>) line = line.substring(<span class="number">0</span>, ci);</span><br><span class="line">                            line = line.trim();</span><br><span class="line">                            <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    String name = <span class="keyword">null</span>;</span><br><span class="line">                                    <span class="keyword">int</span> i = line.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//获取name</span></span><br><span class="line">                                        name = line.substring(<span class="number">0</span>, i).trim();</span><br><span class="line">                                        <span class="comment">//获取class 全限定类名</span></span><br><span class="line">                                        line = line.substring(i + <span class="number">1</span>).trim();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        Class&lt;?&gt; clazz = Class.forName(line, <span class="keyword">true</span>, classLoader);</span><br><span class="line">                         <span class="comment">//类上注解Adaptive，缓存到cachedAdaptiveClass</span></span><br><span class="line">                                        <span class="keyword">if</span> (clazz.isAnnotationPresent(Adaptive.class)) &#123;</span><br><span class="line">                                            <span class="keyword">if</span> (cachedAdaptiveClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                cachedAdaptiveClass = clazz;</span><br><span class="line">                                            &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">                                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                                <span class="comment">//有构造方法是带一个参数且参数类型是接口</span></span><br><span class="line">                                                clazz.getConstructor(type);</span><br><span class="line">                                                Set&lt;Class&lt;?&gt;&gt; wrappers = cachedWrapperClasses;</span><br><span class="line">                                                <span class="keyword">if</span> (wrappers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                          <span class="comment">//没有Adaptive注解，反射所有实现类带参构造放入cachedWrapperClasses</span></span><br><span class="line">                                                    cachedWrapperClasses = <span class="keyword">new</span> ConcurrentHashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">                                                    wrappers = cachedWrapperClasses;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                wrappers.add(clazz);</span><br><span class="line">                                            &#125; </span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="comment">// end of while read lines</span></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        reader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    logger.error(<span class="string">&quot;Exception when load extension class(interface: &quot;</span> +</span><br><span class="line">                            type + <span class="string">&quot;, class file: &quot;</span> + url + <span class="string">&quot;) in &quot;</span> + url, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">// end of while urls</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Exception when load extension class(interface: &quot;</span> +</span><br><span class="line">                type + <span class="string">&quot;, description file: &quot;</span> + fileName + <span class="string">&quot;).&quot;</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createAdaptiveExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Can not create adaptive extension &quot;</span> + type + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">//生成拼接源码</span></span><br><span class="line">    String code = createAdaptiveExtensionClassCode();</span><br><span class="line">    <span class="comment">//获取自定义ClassLoader -&gt;ExtensionLoader</span></span><br><span class="line">    ClassLoader classLoader = findClassLoader();</span><br><span class="line">    <span class="comment">//获取到AdaptiveCompiler</span></span><br><span class="line">    com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();</span><br><span class="line">    <span class="comment">//最终使用JavassistCompiler编译</span></span><br><span class="line">    <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是$Adaptive类生成的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createAdaptiveExtensionClassCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder codeBuidler = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Method[] methods = type.getMethods();</span><br><span class="line">    <span class="keyword">boolean</span> hasAdaptiveAnnotation = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//接口是否有@Adaptive注解</span></span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m.isAnnotationPresent(Adaptive.class)) &#123;</span><br><span class="line">            hasAdaptiveAnnotation = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有Adaptive注解直接报错</span></span><br><span class="line">    <span class="keyword">if</span> (!hasAdaptiveAnnotation)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No adaptive method on extension &quot;</span> + type.getName() + <span class="string">&quot;, refuse to create the adaptive class!&quot;</span>);</span><br><span class="line"><span class="comment">//接口所在包 &quot;package com.alibaba.dubbo.rpc;&quot;</span></span><br><span class="line">    codeBuidler.append(<span class="string">&quot;package &quot;</span> + type.getPackage().getName() + <span class="string">&quot;;&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;import com.alibaba.dubbo.common.extension.ExtensionLoader;&quot;</span></span><br><span class="line">    codeBuidler.append(<span class="string">&quot;\nimport &quot;</span> + ExtensionLoader.class.getName() + <span class="string">&quot;;&quot;</span>);</span><br><span class="line"><span class="comment">// 接口名+$Adaptive生成类名   &quot;public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol &#123;&quot;</span></span><br><span class="line">    codeBuidler.append(<span class="string">&quot;\npublic class &quot;</span> + type.getSimpleName() + <span class="string">&quot;$Adaptive&quot;</span> + <span class="string">&quot; implements &quot;</span> + type.getCanonicalName() + <span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line"><span class="comment">//遍历方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">        <span class="comment">//入参</span></span><br><span class="line">        Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">        <span class="comment">//异常</span></span><br><span class="line">        Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line">        <span class="comment">//获取方法Adaptive注解</span></span><br><span class="line">        Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);</span><br><span class="line">        StringBuilder code = <span class="keyword">new</span> StringBuilder(<span class="number">512</span>);</span><br><span class="line">        <span class="comment">//没有Adaptive注解的 拼接实现为“throw new UnsupportedOperationException”</span></span><br><span class="line">        <span class="keyword">if</span> (adaptiveAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            code.append(<span class="string">&quot;throw new UnsupportedOperationException(\&quot;method &quot;</span>)</span><br><span class="line">                    .append(method.toString()).append(<span class="string">&quot; of interface &quot;</span>)</span><br><span class="line">                    .append(type.getName()).append(<span class="string">&quot; is not adaptive method!\&quot;);&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> urlTypeIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//获取类型为url的参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pts[i].equals(URL.class)) &#123;</span><br><span class="line">                    urlTypeIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 有url类型参数</span></span><br><span class="line">            <span class="keyword">if</span> (urlTypeIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 判空 “if (arg0 == null) throw new IllegalArgumentException”</span></span><br><span class="line">                String s = String.format(<span class="string">&quot;\nif (arg%d == null) throw new IllegalArgumentException(\&quot;url == null\&quot;);&quot;</span>,</span><br><span class="line">                        urlTypeIndex);</span><br><span class="line">                code.append(s);</span><br><span class="line">                <span class="comment">//“Url url = ”</span></span><br><span class="line">                s = String.format(<span class="string">&quot;\n%s url = arg%d;&quot;</span>, URL.class.getName(), urlTypeIndex);</span><br><span class="line">                code.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 参数里面没有url类型的参数，取每个参数里面getxxx看有没有getUrl</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                String attribMethod = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 找到getUrl，LBL_PTS为了一个break跳出两层循环</span></span><br><span class="line">                LBL_PTS:</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">                    Method[] ms = pts[i].getMethods();</span><br><span class="line">                    <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                        String name = m.getName();</span><br><span class="line">                        <span class="keyword">if</span> ((name.startsWith(<span class="string">&quot;get&quot;</span>) || name.length() &gt; <span class="number">3</span>)</span><br><span class="line">                                &amp;&amp; Modifier.isPublic(m.getModifiers())</span><br><span class="line">                                &amp;&amp; !Modifier.isStatic(m.getModifiers())</span><br><span class="line">                                &amp;&amp; m.getParameterTypes().length == <span class="number">0</span></span><br><span class="line">                                &amp;&amp; m.getReturnType() == URL.class) &#123;</span><br><span class="line">                            urlTypeIndex = i;</span><br><span class="line">                            attribMethod = name;</span><br><span class="line">                            <span class="keyword">break</span> LBL_PTS;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (attribMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;fail to create adaptive class for interface &quot;</span> + type.getName()</span><br><span class="line">                            + <span class="string">&quot;: not found url parameter or url attribute in parameters of method &quot;</span> + method.getName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判空</span></span><br><span class="line">                String s = String.format(<span class="string">&quot;\nif (arg%d == null) throw new IllegalArgumentException(\&quot;%s argument == null\&quot;);&quot;</span>,</span><br><span class="line">                        urlTypeIndex, pts[urlTypeIndex].getName());</span><br><span class="line">                code.append(s);</span><br><span class="line">                s = String.format(<span class="string">&quot;\nif (arg%d.%s() == null) throw new IllegalArgumentException(\&quot;%s argument %s() == null\&quot;);&quot;</span>,</span><br><span class="line">                        urlTypeIndex, attribMethod, pts[urlTypeIndex].getName(), attribMethod);</span><br><span class="line">                code.append(s);</span><br><span class="line"></span><br><span class="line">                s = String.format(<span class="string">&quot;%s url = arg%d.%s();&quot;</span>, URL.class.getName(), urlTypeIndex, attribMethod);</span><br><span class="line">                code.append(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String[] value = adaptiveAnnotation.value();</span><br><span class="line">            <span class="comment">// Adaptive注解没有参数get+接口名</span></span><br><span class="line">            <span class="keyword">if</span> (value.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] charArray = type.getSimpleName().toCharArray();</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Character.isUpperCase(charArray[i])) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                            sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        sb.append(Character.toLowerCase(charArray[i]));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sb.append(charArray[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                value = <span class="keyword">new</span> String[]&#123;sb.toString()&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> hasInvocation = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pts[i].getName().equals(<span class="string">&quot;com.alibaba.dubbo.rpc.Invocation&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// Invoker判空</span></span><br><span class="line">                    String s = String.format(<span class="string">&quot;\nif (arg%d == null) throw new IllegalArgumentException(\&quot;invocation == null\&quot;);&quot;</span>, i);</span><br><span class="line">                    code.append(s);</span><br><span class="line">                    s = String.format(<span class="string">&quot;\nString methodName = arg%d.getMethodName();&quot;</span>, i);</span><br><span class="line">                    code.append(s);</span><br><span class="line">                    hasInvocation = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String defaultExtName = cachedDefaultName;</span><br><span class="line">            String getNameCode = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = value.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == value.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != defaultExtName) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="string">&quot;protocol&quot;</span>.equals(value[i]))</span><br><span class="line">                            <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                                getNameCode = String.format(<span class="string">&quot;url.getMethodParameter(methodName, \&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                getNameCode = String.format(<span class="string">&quot;url.getParameter(\&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="comment">//如果是protocol，取defaultExtName，也就是SPI的value</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">&quot;( url.getProtocol() == null ? \&quot;%s\&quot; : url.getProtocol() )&quot;</span>, defaultExtName);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="string">&quot;protocol&quot;</span>.equals(value[i]))</span><br><span class="line">                            <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                                getNameCode = String.format(<span class="string">&quot;url.getMethodParameter(methodName, \&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                getNameCode = String.format(<span class="string">&quot;url.getParameter(\&quot;%s\&quot;)&quot;</span>, value[i]);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            getNameCode = <span class="string">&quot;url.getProtocol()&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">&quot;protocol&quot;</span>.equals(value[i]))</span><br><span class="line">                        <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                            getNameCode = String.format(<span class="string">&quot;url.getMethodParameter(methodName, \&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">&quot;url.getParameter(\&quot;%s\&quot;, %s)&quot;</span>, value[i], getNameCode);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        getNameCode = String.format(<span class="string">&quot;url.getProtocol() == null ? (%s) : url.getProtocol()&quot;</span>, getNameCode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            code.append(<span class="string">&quot;\nString extName = &quot;</span>).append(getNameCode).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">            <span class="comment">// check extName == null?</span></span><br><span class="line">            String s = String.format(<span class="string">&quot;\nif(extName == null) &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;throw new IllegalStateException(\&quot;Fail to get extension(%s) name from url(\&quot; + url.toString() + \&quot;) use keys(%s)\&quot;);&quot;</span>,</span><br><span class="line">                    type.getName(), Arrays.toString(value));</span><br><span class="line">            code.append(s);</span><br><span class="line"></span><br><span class="line">            s = String.format(<span class="string">&quot;\n%s extension = (%&lt;s)%s.getExtensionLoader(%s.class).getExtension(extName);&quot;</span>,</span><br><span class="line">                    type.getName(), ExtensionLoader.class.getSimpleName(), type.getName());</span><br><span class="line">            code.append(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// return statement</span></span><br><span class="line">            <span class="keyword">if</span> (!rt.equals(<span class="keyword">void</span>.class)) &#123;</span><br><span class="line">                code.append(<span class="string">&quot;\nreturn &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            s = String.format(<span class="string">&quot;extension.%s(&quot;</span>, method.getName());</span><br><span class="line">            code.append(s);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                    code.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                code.append(<span class="string">&quot;arg&quot;</span>).append(i);</span><br><span class="line">            &#125;</span><br><span class="line">            code.append(<span class="string">&quot;);&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        codeBuidler.append(<span class="string">&quot;\npublic &quot;</span> + rt.getCanonicalName() + <span class="string">&quot; &quot;</span> + method.getName() + <span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                codeBuidler.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            codeBuidler.append(pts[i].getCanonicalName());</span><br><span class="line">            codeBuidler.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            codeBuidler.append(<span class="string">&quot;arg&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        codeBuidler.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ets.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            codeBuidler.append(<span class="string">&quot; throws &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ets.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    codeBuidler.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                codeBuidler.append(ets[i].getCanonicalName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        codeBuidler.append(<span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line">        codeBuidler.append(code.toString());</span><br><span class="line">        codeBuidler.append(<span class="string">&quot;\n&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    codeBuidler.append(<span class="string">&quot;\n&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(codeBuidler.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> codeBuidler.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们还有个疑问？如果只分析这些代码,会认为最开始的解析一例子，暴露的是RegistryProtocol，然而外面又包裹了两层：ProtocolListenerWrapper和ProtocolFilterWrapper，这是如何实现的呢？</p><p><code> com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</code></p><p>拿到的是ProtocolListenerWrapper，下面我们分析下getExtension，他最终通过createExtension创建对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createExtension</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取从配置文件得到的类</span></span><br><span class="line">    Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> findException(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//得到实例</span></span><br><span class="line">        T instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            EXTENSION_INSTANCES.putIfAbsent(clazz, (T) clazz.newInstance());</span><br><span class="line">            instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将其他实例注入这个实例的set方法</span></span><br><span class="line">        <span class="comment">//这里是RegistryProtocol的实例</span></span><br><span class="line">        injectExtension(instance);</span><br><span class="line">        <span class="comment">//获取接口的所有实现类 ，ProtocolFilterWrapper、ProtocolListenerWrapper</span></span><br><span class="line">        <span class="comment">//RegistryProtocol注入ProtocolFilterWrapper构造方法得到实例，接着注入ProtocolListenerWrapper得到实例</span></span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class="line">        <span class="keyword">if</span> (wrapperClasses != <span class="keyword">null</span> &amp;&amp; !wrapperClasses.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class="line">                instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回ProtocolListenerWrapper</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Extension instance(name: &quot;</span> + name + <span class="string">&quot;, class: &quot;</span> +</span><br><span class="line">                type + <span class="string">&quot;)  could not be instantiated: &quot;</span> + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc源码解析-sql解析（五）</title>
      <link href="/hexo/post/8ce3a370.html"/>
      <url>/hexo/post/8ce3a370.html</url>
      
        <content type="html"><![CDATA[<h2 id="SQL解析流程"><a href="#SQL解析流程" class="headerlink" title="SQL解析流程"></a>SQL解析流程</h2><p><img src="https://user-images.githubusercontent.com/7789698/40620293-e0708094-62ca-11e8-8fa9-df9a742d7673.jpg" alt="sequencediagram01"></p><h2 id="SQL解析引擎"><a href="#SQL解析引擎" class="headerlink" title="SQL解析引擎"></a>SQL解析引擎</h2><h3 id="SQLParsingEngine"><a href="#SQLParsingEngine" class="headerlink" title="SQLParsingEngine"></a>SQLParsingEngine</h3><p>sql分析引擎</p><p>会先使用词法分析引擎进行词法分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLParsingEngine</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数据库类型，如mysql</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatabaseType dbType;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String sql;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShardingRule shardingRule;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parse SQL.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> parsed SQL statement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SQLStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据sql和数据库类型创建词法分析引擎</span></span><br><span class="line">        LexerEngine lexerEngine = LexerEngineFactory.newInstance(dbType, sql);</span><br><span class="line">        <span class="comment">//读入第一个标记</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        <span class="comment">//使用sql解析工厂创建sql解析器并解析</span></span><br><span class="line">        <span class="keyword">return</span> SQLParserFactory.newInstance(dbType, lexerEngine.getCurrentToken().getType(), shardingRule, lexerEngine).parse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQLParserFactory"><a href="#SQLParserFactory" class="headerlink" title="SQLParserFactory"></a>SQLParserFactory</h3><p>sql解析器工厂，负责根据sql第一个标记类型创建出相应的解析器</p><ul><li><p>解析器工厂（负责根据数据库类型选择具体解析器）分类：</p><p>SELECT&lt;—&gt;SelectParserFactory、INSERT&lt;—&gt;InsertParserFactory、UPDATE&lt;—&gt;UpdateParserFactory、DELETE&lt;—&gt;DeleteParserFactory、CREATE&lt;—&gt;CreateParserFactory、ALTER&lt;—&gt;AlterParserFactory、DROP&lt;—&gt;DropParserFactory、TRUNCATE&lt;—&gt;TruncateParserFactory</p></li><li><p>解析器分类：</p><p>SELECT&lt;—&gt;AbstractSelectParser、INSERT&lt;—&gt;AbstractInsertParser、UPDATE&lt;—&gt;AbstractUpdateParser、DELETE&lt;—&gt;AbstractDeleteParser、CREATE&lt;—&gt;AbstractCreateParser、ALTER&lt;—&gt;AbstractAlterParser、DROP&lt;—&gt;AbstractDropParser、TRUNCATE&lt;—&gt;AbstractTruncateParser</p></li></ul><h2 id="SQL解析器"><a href="#SQL解析器" class="headerlink" title="SQL解析器"></a>SQL解析器</h2><h3 id="SQLParser"><a href="#SQLParser" class="headerlink" title="SQLParser"></a>SQLParser</h3><p>解析器</p><p><img src="https://user-images.githubusercontent.com/7789698/40277466-dbb0dcae-5c51-11e8-8e48-eb1f17b7d257.jpg" alt="diagram"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SQLParser</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parse SQL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SQL statement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SQLStatement <span class="title">parse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>以插入为例</p><p><img src="https://user-images.githubusercontent.com/7789698/40279805-b948e74a-5c7b-11e8-8c09-d184ca02db14.png" alt="2121212"></p><h3 id="插入语句解析器"><a href="#插入语句解析器" class="headerlink" title="插入语句解析器"></a>插入语句解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInsertParser</span> <span class="keyword">implements</span> <span class="title">SQLParser</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter(AccessLevel.PROTECTED)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShardingRule shardingRule;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter(AccessLevel.PROTECTED)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LexerEngine lexerEngine;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractInsertClauseParserFacade insertClauseParserFacade;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractInsertParser</span><span class="params">(<span class="keyword">final</span> ShardingRule shardingRule, <span class="keyword">final</span> LexerEngine lexerEngine, <span class="keyword">final</span> AbstractInsertClauseParserFacade insertClauseParserFacade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shardingRule = shardingRule;</span><br><span class="line">        <span class="keyword">this</span>.lexerEngine = lexerEngine;</span><br><span class="line">        <span class="keyword">this</span>.insertClauseParserFacade = insertClauseParserFacade;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> DMLStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取下一个标记，比如INSERT INTO t_order (user_id, status) VALUES (10, &#x27;INIT&#x27;)</span></span><br><span class="line">        <span class="comment">//就读取到INTO</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        <span class="comment">//创建InsertStatement</span></span><br><span class="line">        InsertStatement result = <span class="keyword">new</span> InsertStatement();</span><br><span class="line">        <span class="comment">//读取INTO后面的表名</span></span><br><span class="line">        insertClauseParserFacade.getInsertIntoClauseParser().parse(result);</span><br><span class="line">        <span class="comment">//读取插入的列</span></span><br><span class="line">        insertClauseParserFacade.getInsertColumnsClauseParser().parse(result);</span><br><span class="line">        <span class="comment">//不支持INSERT SELECT</span></span><br><span class="line">        <span class="keyword">if</span> (lexerEngine.equalAny(DefaultKeyword.SELECT, Symbol.LEFT_PAREN)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Cannot INSERT SELECT&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读取VALUES 后面</span></span><br><span class="line">        insertClauseParserFacade.getInsertValuesClauseParser().parse(result);</span><br><span class="line">         <span class="comment">//读取SET 后面</span></span><br><span class="line">        insertClauseParserFacade.getInsertSetClauseParser().parse(result);</span><br><span class="line">        <span class="comment">//处理自增键转化为GeneratedKeyToken</span></span><br><span class="line">        appendGenerateKey(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">appendGenerateKey</span><span class="params">(<span class="keyword">final</span> InsertStatement insertStatement)</span> </span>&#123;</span><br><span class="line">        String tableName = insertStatement.getTables().getSingleTableName();</span><br><span class="line">        <span class="comment">//获取自增列列名</span></span><br><span class="line">        Optional&lt;String&gt; generateKeyColumn = shardingRule.getGenerateKeyColumn(tableName);</span><br><span class="line">        <span class="keyword">if</span> (!generateKeyColumn.isPresent() || <span class="keyword">null</span> != insertStatement.getGeneratedKey()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//拿到刚才解析的所有列名</span></span><br><span class="line">        ItemsToken columnsToken = <span class="keyword">new</span> ItemsToken(insertStatement.getColumnsListLastPosition());</span><br><span class="line">        columnsToken.getItems().add(generateKeyColumn.get());</span><br><span class="line">        insertStatement.getSqlTokens().add(columnsToken);</span><br><span class="line">        <span class="comment">//处理自增id</span></span><br><span class="line">        insertStatement.getSqlTokens().add(<span class="keyword">new</span> GeneratedKeyToken(insertStatement.getValuesListLastPosition()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/40279597-c877da7c-5c77-11e8-9ddd-6840e7800550.png" alt="diagram"></p><h3 id="AbstractInsertClauseParserFacade"><a href="#AbstractInsertClauseParserFacade" class="headerlink" title="AbstractInsertClauseParserFacade"></a>AbstractInsertClauseParserFacade</h3><p>门面模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInsertClauseParserFacade</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InsertIntoClauseParser insertIntoClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InsertColumnsClauseParser insertColumnsClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InsertValuesClauseParser insertValuesClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InsertSetClauseParser insertSetClauseParser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/40279583-adb78570-5c77-11e8-8c00-d7f582f5be96.png" alt="diagram"></p><h3 id="InsertIntoClauseParser"><a href="#InsertIntoClauseParser" class="headerlink" title="InsertIntoClauseParser"></a>InsertIntoClauseParser</h3><p>INTO 部分解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">final</span> InsertStatement insertStatement)</span> </span>&#123;</span><br><span class="line">    lexerEngine.unsupportedIfEqual(getUnsupportedKeywordsBeforeInto());</span><br><span class="line">    <span class="comment">//一直读取直到结束或者 &quot;INTO&quot;</span></span><br><span class="line">    lexerEngine.skipUntil(DefaultKeyword.INTO);</span><br><span class="line">    <span class="comment">//读取&quot;INTO&quot;下一个标记</span></span><br><span class="line">    lexerEngine.nextToken();</span><br><span class="line">    <span class="comment">//解析表</span></span><br><span class="line">    tableReferencesClauseParser.parse(insertStatement, <span class="keyword">true</span>);</span><br><span class="line">    skipBetweenTableAndValues(insertStatement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表解析器MySQLTableReferencesClauseParser"><a href="#表解析器MySQLTableReferencesClauseParser" class="headerlink" title="表解析器MySQLTableReferencesClauseParser"></a>表解析器MySQLTableReferencesClauseParser</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> <span class="keyword">boolean</span> isSingleTableOnly)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        parseTableReference(sqlStatement, isSingleTableOnly);</span><br><span class="line">        <span class="comment">//&#x27;,&#x27;分割</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (lexerEngine.skipIfEqual(Symbol.COMMA));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseTableReference</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> <span class="keyword">boolean</span> isSingleTableOnly)</span> </span>&#123;</span><br><span class="line">        parseTableFactor(sqlStatement, isSingleTableOnly);</span><br><span class="line">        <span class="comment">//解析PARTITION，Mysql不支持。</span></span><br><span class="line">        parsePartition();</span><br><span class="line">        <span class="comment">//解析使用索引</span></span><br><span class="line">        parseIndexHint(sqlStatement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseTableFactor</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> <span class="keyword">boolean</span> isSingleTableOnly)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//&quot;INTO&quot;下一个标记开始的下标</span></span><br><span class="line">     <span class="comment">//如：INSERT INTO t_order (user_id, status) VALUES (10, &#x27;INIT&#x27;) </span></span><br><span class="line">     <span class="comment">//是12</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> beginPosition = lexerEngine.getCurrentToken().getEndPosition() - lexerEngine.getCurrentToken().getLiterals().length();</span><br><span class="line">     <span class="comment">//&quot;INTO&quot;下一个字面量，就是逻辑表名</span></span><br><span class="line">     <span class="comment">//如：INSERT INTO t_order (user_id, status) VALUES (10, &#x27;INIT&#x27;) </span></span><br><span class="line">     <span class="comment">//是t_order</span></span><br><span class="line">        String literals = lexerEngine.getCurrentToken().getLiterals();</span><br><span class="line">     <span class="comment">//下一个标记，如(、AS等，</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">     <span class="comment">//不能支持`schema.table`</span></span><br><span class="line">        <span class="keyword">if</span> (lexerEngine.equalAny(Symbol.DOT)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Cannot support SQL for `schema.table`&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//移除 &#x27;`&#x27;和 &#x27;&quot;&#x27;</span></span><br><span class="line">        String tableName = SQLUtil.getExactlyValue(literals);</span><br><span class="line">     <span class="comment">//解析 AS ，拿到别名，并跳到别名下一个标记</span></span><br><span class="line">        Optional&lt;String&gt; alias = aliasClauseParser.parse();</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (isSingleTableOnly || shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()</span><br><span class="line">                || shardingRule.getDataSourceMap().containsKey(shardingRule.getDefaultDataSourceName())) &#123;</span><br><span class="line">            <span class="comment">//添加sqlToken （12，t_order）</span></span><br><span class="line">            sqlStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(beginPosition, literals));</span><br><span class="line">            <span class="comment">//添加表名和别名</span></span><br><span class="line">            sqlStatement.getTables().add(<span class="keyword">new</span> Table(tableName, alias));</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//解析join</span></span><br><span class="line">        parseJoinTable(sqlStatement);</span><br><span class="line">        <span class="keyword">if</span> (isSingleTableOnly &amp;&amp; !sqlStatement.getTables().isSingleTable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Cannot support Multiple-Table.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseIndexHint</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//USE、IGNORE、FORCE</span></span><br><span class="line">        <span class="keyword">if</span> (getLexerEngine().skipIfEqual(DefaultKeyword.USE, MySQLKeyword.IGNORE, MySQLKeyword.FORCE)) &#123;</span><br><span class="line">            <span class="comment">//INDEX、KEY、FOR、JOIN、ORDER、GROUP、BY</span></span><br><span class="line">            getLexerEngine().skipAll(DefaultKeyword.INDEX, DefaultKeyword.KEY, DefaultKeyword.FOR, DefaultKeyword.JOIN, DefaultKeyword.ORDER, DefaultKeyword.GROUP, DefaultKeyword.BY);</span><br><span class="line">            getLexerEngine().skipParentheses(sqlStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="别名解析器AliasClauseParser"><a href="#别名解析器AliasClauseParser" class="headerlink" title="别名解析器AliasClauseParser"></a>别名解析器AliasClauseParser</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析到AS了，就在往下读一个标记</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(DefaultKeyword.AS)) &#123;</span><br><span class="line">        <span class="comment">//读到符号返回不存在</span></span><br><span class="line">        <span class="keyword">if</span> (lexerEngine.equalAny(Symbol.values())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.absent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//接下来的字面量去 &#x27;`&#x27;和 &#x27;&quot;&#x27;</span></span><br><span class="line">        String result = SQLUtil.getExactlyValue(lexerEngine.getCurrentToken().getLiterals());</span><br><span class="line">        <span class="comment">//往下读</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        <span class="comment">//返回别名</span></span><br><span class="line">        <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直接别名的</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.equalAny(</span><br><span class="line">            Literals.IDENTIFIER, Literals.CHARS, DefaultKeyword.USER, DefaultKeyword.END, DefaultKeyword.CASE, DefaultKeyword.KEY, DefaultKeyword.INTERVAL, DefaultKeyword.CONSTRAINT)) &#123;</span><br><span class="line">        String result = SQLUtil.getExactlyValue(lexerEngine.getCurrentToken().getLiterals());</span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        <span class="comment">//返回别名</span></span><br><span class="line">        <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.absent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InsertColumnsClauseParser"><a href="#InsertColumnsClauseParser" class="headerlink" title="InsertColumnsClauseParser"></a>InsertColumnsClauseParser</h4><p>列 部分解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">final</span> InsertStatement insertStatement)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Column&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// &quot;(&quot;开头</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.equalAny(Symbol.LEFT_PAREN)) &#123;</span><br><span class="line">        <span class="comment">//刚才解析出来的表名</span></span><br><span class="line">        String tableName = insertStatement.getTables().getSingleTableName();</span><br><span class="line">        <span class="comment">//获取该表的分片规则列的列名</span></span><br><span class="line">        Optional&lt;String&gt; generateKeyColumn = shardingRule.getGenerateKeyColumn(tableName);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//读取INTO 的所有列名</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            lexerEngine.nextToken();</span><br><span class="line">            String columnName = SQLUtil.getExactlyValue(lexerEngine.getCurrentToken().getLiterals());</span><br><span class="line">            result.add(<span class="keyword">new</span> Column(columnName, tableName));</span><br><span class="line">            lexerEngine.nextToken();</span><br><span class="line">            <span class="keyword">if</span> (generateKeyColumn.isPresent() &amp;&amp; generateKeyColumn.get().equalsIgnoreCase(columnName)) &#123;</span><br><span class="line">                <span class="comment">//记下需要自增的列的位置</span></span><br><span class="line">                insertStatement.setGenerateKeyColumnIndex(count);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!lexerEngine.equalAny(Symbol.RIGHT_PAREN) &amp;&amp; !lexerEngine.equalAny(Assist.END));      </span><br><span class="line"><span class="comment">//记录最后一列结束位置</span></span><br><span class="line">        insertStatement.setColumnsListLastPosition(lexerEngine.getCurrentToken().getEndPosition() - lexerEngine.getCurrentToken().getLiterals().length());</span><br><span class="line">        <span class="comment">//跳过&quot;)&quot;</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置列名</span></span><br><span class="line">    insertStatement.getColumns().addAll(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InsertValuesClauseParser"><a href="#InsertValuesClauseParser" class="headerlink" title="InsertValuesClauseParser"></a>InsertValuesClauseParser</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">final</span> InsertStatement insertStatement)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Keyword&gt; valueKeywords = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">//VALUES</span></span><br><span class="line">    valueKeywords.add(DefaultKeyword.VALUES);</span><br><span class="line">    <span class="comment">//mysql是VALUE</span></span><br><span class="line">    valueKeywords.addAll(Arrays.asList(getSynonymousKeywordsForValues()));</span><br><span class="line">    <span class="comment">//读到VALUES或VALUE，接着读下一个</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(valueKeywords.toArray(<span class="keyword">new</span> Keyword[valueKeywords.size()]))) &#123;</span><br><span class="line">        <span class="comment">//记录VALUES或VALUE后面开始的位置</span></span><br><span class="line">        insertStatement.setAfterValuesPosition(lexerEngine.getCurrentToken().getEndPosition() - lexerEngine.getCurrentToken().getLiterals().length());</span><br><span class="line">        <span class="comment">//VALUES或VALUE的值和表名组成Condition</span></span><br><span class="line">        parseValues(insertStatement);</span><br><span class="line">        <span class="comment">//如果是&quot;,&quot;表示批量插入的写法</span></span><br><span class="line">        <span class="keyword">if</span> (lexerEngine.equalAny(Symbol.COMMA)) &#123;</span><br><span class="line">            parseMultipleValues(insertStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseValues</span><span class="params">(<span class="keyword">final</span> InsertStatement insertStatement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//跳过&quot;(&quot;</span></span><br><span class="line">        lexerEngine.accept(Symbol.LEFT_PAREN);</span><br><span class="line">        List&lt;SQLExpression&gt; sqlExpressions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//表达式，就是每一个值，逗号隔开</span></span><br><span class="line">            sqlExpressions.add(expressionClauseParser.parse(insertStatement));</span><br><span class="line">        &#125; <span class="keyword">while</span> (lexerEngine.skipIfEqual(Symbol.COMMA));</span><br><span class="line">  <span class="comment">//记录结束位置      </span></span><br><span class="line">  insertStatement.setValuesListLastPosition(lexerEngine.getCurrentToken().getEndPosition() - lexerEngine.getCurrentToken().getLiterals().length());</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//列名和值组装成条件Condition</span></span><br><span class="line">        <span class="keyword">for</span> (Column each : insertStatement.getColumns()) &#123;</span><br><span class="line">            SQLExpression sqlExpression = sqlExpressions.get(count);</span><br><span class="line">            insertStatement.getConditions().add(<span class="keyword">new</span> Condition(each, sqlExpression), shardingRule);</span><br><span class="line">            <span class="keyword">if</span> (insertStatement.getGenerateKeyColumnIndex() == count) &#123;</span><br><span class="line">                insertStatement.setGeneratedKey(createGeneratedKey(each, sqlExpression));</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//跳过&quot;)&quot;</span></span><br><span class="line">        lexerEngine.accept(Symbol.RIGHT_PAREN);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>select语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW ]</span><br><span class="line">      [HIGH_PRIORITY]</span><br><span class="line">      [STRAIGHT_JOIN]</span><br><span class="line">      [SQL_SMALL_RESULT][SQL_BIG_RESULT] [SQL_BUFFER_RESULT]</span><br><span class="line">      [SQL_CACHE <span class="operator">|</span> SQL_NO_CACHE][SQL_CALC_FOUND_ROWS]</span><br><span class="line">    select_expr [, select_expr ...]</span><br><span class="line">    [<span class="keyword">FROM</span> table_references</span><br><span class="line">      [<span class="keyword">PARTITION</span> partition_list]</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name <span class="operator">|</span> expr <span class="operator">|</span> position&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">    [<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name <span class="operator">|</span> expr <span class="operator">|</span> position&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ...]</span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,] row_count <span class="operator">|</span> row_count <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">    [<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</span><br><span class="line">    [<span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;file_name&#x27;</span></span><br><span class="line">        [<span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name]</span><br><span class="line">        export_options</span><br><span class="line">      <span class="operator">|</span> <span class="keyword">INTO</span> DUMPFILE <span class="string">&#x27;file_name&#x27;</span></span><br><span class="line">      <span class="operator">|</span> <span class="keyword">INTO</span> var_name [, var_name]]</span><br><span class="line">    [<span class="keyword">FOR</span> UPDATE <span class="operator">|</span> LOCK <span class="keyword">IN</span> SHARE MODE]]</span><br></pre></td></tr></table></figure><p><em>select_expr</em> 指的是你想获取的列，至少要有一个</p><p><em>table_references</em> 指的是表或者表中的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tbl_name [[<span class="keyword">AS</span>] alias] [index_hint_list]</span><br><span class="line"></span><br><span class="line">index_hint_list:</span><br><span class="line">    index_hint [index_hint] ...</span><br><span class="line"></span><br><span class="line">index_hint:</span><br><span class="line">    USE &#123;INDEX<span class="operator">|</span>KEY&#125;</span><br><span class="line">      [<span class="keyword">FOR</span> &#123;<span class="keyword">JOIN</span><span class="operator">|</span><span class="keyword">ORDER</span> <span class="keyword">BY</span><span class="operator">|</span><span class="keyword">GROUP</span> <span class="keyword">BY</span>&#125;] ([index_list])</span><br><span class="line">  <span class="operator">|</span> IGNORE &#123;INDEX<span class="operator">|</span>KEY&#125;</span><br><span class="line">      [<span class="keyword">FOR</span> &#123;<span class="keyword">JOIN</span><span class="operator">|</span><span class="keyword">ORDER</span> <span class="keyword">BY</span><span class="operator">|</span><span class="keyword">GROUP</span> <span class="keyword">BY</span>&#125;] (index_list)</span><br><span class="line">  <span class="operator">|</span> FORCE &#123;INDEX<span class="operator">|</span>KEY&#125;</span><br><span class="line">      [<span class="keyword">FOR</span> &#123;<span class="keyword">JOIN</span><span class="operator">|</span><span class="keyword">ORDER</span> <span class="keyword">BY</span><span class="operator">|</span><span class="keyword">GROUP</span> <span class="keyword">BY</span>&#125;] (index_list)</span><br><span class="line"></span><br><span class="line">index_list:</span><br><span class="line">    index_name [, index_name] ...</span><br></pre></td></tr></table></figure><p><em>select … partition</em> 分区 。<a href="https://dev.mysql.com/doc/refman/5.7/en/partitioning-selection.html">https://dev.mysql.com/doc/refman/5.7/en/partitioning-selection.html</a></p><p><em>Expression Syntax</em> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">expr:</span><br><span class="line">    expr <span class="keyword">OR</span> expr</span><br><span class="line">  <span class="operator">|</span> expr <span class="operator">||</span> expr</span><br><span class="line">  <span class="operator">|</span> expr XOR expr</span><br><span class="line">  <span class="operator">|</span> expr <span class="keyword">AND</span> expr</span><br><span class="line">  <span class="operator">|</span> expr <span class="operator">&amp;&amp;</span> expr</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">NOT</span> expr</span><br><span class="line">  <span class="operator">|</span> <span class="operator">!</span> expr</span><br><span class="line">  <span class="operator">|</span> boolean_primary <span class="keyword">IS</span> [<span class="keyword">NOT</span>] &#123;<span class="literal">TRUE</span> <span class="operator">|</span> <span class="literal">FALSE</span> <span class="operator">|</span> <span class="literal">UNKNOWN</span>&#125;</span><br><span class="line">  <span class="operator">|</span> boolean_primary</span><br><span class="line"></span><br><span class="line">boolean_primary:</span><br><span class="line">    boolean_primary <span class="keyword">IS</span> [<span class="keyword">NOT</span>] <span class="keyword">NULL</span></span><br><span class="line">  <span class="operator">|</span> boolean_primary <span class="operator">&lt;=&gt;</span> predicate</span><br><span class="line">  <span class="operator">|</span> boolean_primary comparison_operator predicate</span><br><span class="line">  <span class="operator">|</span> boolean_primary comparison_operator &#123;<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">ANY</span>&#125; (subquery)</span><br><span class="line">  <span class="operator">|</span> predicate</span><br><span class="line"></span><br><span class="line">comparison_operator: <span class="operator">=</span> <span class="operator">|</span> <span class="operator">&gt;=</span> <span class="operator">|</span> <span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;=</span> <span class="operator">|</span> <span class="operator">&lt;</span> <span class="operator">|</span> <span class="operator">&lt;&gt;</span> <span class="operator">|</span> <span class="operator">!=</span></span><br><span class="line"></span><br><span class="line">predicate:</span><br><span class="line">    bit_expr [<span class="keyword">NOT</span>] <span class="keyword">IN</span> (subquery)</span><br><span class="line">  <span class="operator">|</span> bit_expr [<span class="keyword">NOT</span>] <span class="keyword">IN</span> (expr [, expr] ...)</span><br><span class="line">  <span class="operator">|</span> bit_expr [<span class="keyword">NOT</span>] <span class="keyword">BETWEEN</span> bit_expr <span class="keyword">AND</span> predicate</span><br><span class="line">  <span class="operator">|</span> bit_expr SOUNDS <span class="keyword">LIKE</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr [<span class="keyword">NOT</span>] <span class="keyword">LIKE</span> simple_expr [<span class="keyword">ESCAPE</span> simple_expr]</span><br><span class="line">  <span class="operator">|</span> bit_expr [<span class="keyword">NOT</span>] REGEXP bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr</span><br><span class="line"></span><br><span class="line">bit_expr:</span><br><span class="line">    bit_expr <span class="operator">|</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">&amp;</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">&lt;&lt;</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">&gt;&gt;</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">+</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">-</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">*</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">/</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr DIV bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr MOD bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">%</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">^</span> bit_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">+</span> interval_expr</span><br><span class="line">  <span class="operator">|</span> bit_expr <span class="operator">-</span> interval_expr</span><br><span class="line">  <span class="operator">|</span> simple_expr</span><br><span class="line"></span><br><span class="line">simple_expr:</span><br><span class="line">    literal</span><br><span class="line">  <span class="operator">|</span> identifier</span><br><span class="line">  <span class="operator">|</span> function_call</span><br><span class="line">  <span class="operator">|</span> simple_expr <span class="keyword">COLLATE</span> collation_name</span><br><span class="line">  <span class="operator">|</span> param_marker</span><br><span class="line">  <span class="operator">|</span> variable</span><br><span class="line">  <span class="operator">|</span> simple_expr <span class="operator">||</span> simple_expr</span><br><span class="line">  <span class="operator">|</span> <span class="operator">+</span> simple_expr</span><br><span class="line">  <span class="operator">|</span> <span class="operator">-</span> simple_expr</span><br><span class="line">  <span class="operator">|</span> <span class="operator">~</span> simple_expr</span><br><span class="line">  <span class="operator">|</span> <span class="operator">!</span> simple_expr</span><br><span class="line">  <span class="operator">|</span> <span class="type">BINARY</span> simple_expr</span><br><span class="line">  <span class="operator">|</span> (expr [, expr] ...)</span><br><span class="line">  <span class="operator">|</span> <span class="type">ROW</span> (expr, expr [, expr] ...)</span><br><span class="line">  <span class="operator">|</span> (subquery)</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">EXISTS</span> (subquery)</span><br><span class="line">  <span class="operator">|</span> &#123;identifier expr&#125;</span><br><span class="line">  <span class="operator">|</span> match_expr</span><br><span class="line">  <span class="operator">|</span> case_expr</span><br><span class="line">  <span class="operator">|</span> interval_expr</span><br></pre></td></tr></table></figure><p><em>Operator Precedence</em> </p><p>运算符的优先级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">INTERVAL</span></span><br><span class="line"><span class="type">BINARY</span>, <span class="keyword">COLLATE</span></span><br><span class="line"><span class="operator">!</span></span><br><span class="line"><span class="operator">-</span> (unary minus), <span class="operator">~</span> (unary bit inversion)</span><br><span class="line"><span class="operator">^</span></span><br><span class="line"><span class="operator">*</span>, <span class="operator">/</span>, DIV, <span class="operator">%</span>, MOD</span><br><span class="line"><span class="operator">-</span>, <span class="operator">+</span></span><br><span class="line"><span class="operator">&lt;&lt;</span>, <span class="operator">&gt;&gt;</span></span><br><span class="line"><span class="operator">&amp;</span></span><br><span class="line"><span class="operator">|</span></span><br><span class="line"><span class="operator">=</span> (comparison), <span class="operator">&lt;=&gt;</span>, <span class="operator">&gt;=</span>, <span class="operator">&gt;</span>, <span class="operator">&lt;=</span>, <span class="operator">&lt;</span>, <span class="operator">&lt;&gt;</span>, <span class="operator">!=</span>, <span class="keyword">IS</span>, <span class="keyword">LIKE</span>, REGEXP, <span class="keyword">IN</span></span><br><span class="line"><span class="keyword">BETWEEN</span>, <span class="keyword">CASE</span>, <span class="keyword">WHEN</span>, <span class="keyword">THEN</span>, <span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">NOT</span></span><br><span class="line"><span class="keyword">AND</span>, <span class="operator">&amp;&amp;</span></span><br><span class="line">XOR</span><br><span class="line"><span class="keyword">OR</span>, <span class="operator">||</span></span><br><span class="line"><span class="operator">=</span> (assignment), :<span class="operator">=</span></span><br></pre></td></tr></table></figure><h3 id="查询语句解析器"><a href="#查询语句解析器" class="headerlink" title="查询语句解析器"></a>查询语句解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter(AccessLevel.PROTECTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSelectParser</span> <span class="keyword">implements</span> <span class="title">SQLParser</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DERIVED_COUNT_ALIAS = <span class="string">&quot;AVG_DERIVED_COUNT_%s&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DERIVED_SUM_ALIAS = <span class="string">&quot;AVG_DERIVED_SUM_%s&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_BY_DERIVED_ALIAS = <span class="string">&quot;ORDER_BY_DERIVED_%s&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_BY_DERIVED_ALIAS = <span class="string">&quot;GROUP_BY_DERIVED_%s&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShardingRule shardingRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LexerEngine lexerEngine;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractSelectClauseParserFacade selectClauseParserFacade;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SelectItem&gt; items = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SelectStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//解析成SelectStatement</span></span><br><span class="line">        SelectStatement result = parseInternal();</span><br><span class="line">        <span class="comment">//是否包含子查询，包含的话合并子查询语句</span></span><br><span class="line">        <span class="keyword">if</span> (result.containsSubQuery()) &#123;</span><br><span class="line">            result = result.mergeSubQueryStatement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO move to rewrite</span></span><br><span class="line">        appendDerivedColumns(result);</span><br><span class="line">        appendDerivedOrderBy(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">private</span> SelectStatement <span class="title">parseInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SelectStatement result = <span class="keyword">new</span> SelectStatement();</span><br><span class="line">       <span class="comment">//跳过第一个SELECT</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        parseInternal(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MySQLSelectParser"><a href="#MySQLSelectParser" class="headerlink" title="MySQLSelectParser"></a>MySQLSelectParser</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseInternal</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析distinct</span></span><br><span class="line">    parseDistinct();</span><br><span class="line">    <span class="comment">//解析Option</span></span><br><span class="line">    parseSelectOption();</span><br><span class="line">    <span class="comment">//解析列</span></span><br><span class="line">    parseSelectList(selectStatement, getItems());</span><br><span class="line">    <span class="comment">//解析from</span></span><br><span class="line">    parseFrom(selectStatement);</span><br><span class="line">    <span class="comment">//解析WHERE</span></span><br><span class="line">    parseWhere(getShardingRule(), selectStatement, getItems());</span><br><span class="line">    <span class="comment">//解析Group By</span></span><br><span class="line">    parseGroupBy(selectStatement);</span><br><span class="line">    <span class="comment">//解析Having</span></span><br><span class="line">    parseHaving();</span><br><span class="line">    <span class="comment">//解析Order By</span></span><br><span class="line">    parseOrderBy(selectStatement);</span><br><span class="line">    <span class="comment">//解析Limit</span></span><br><span class="line">    parseLimit(selectStatement);</span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    parseSelectRest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractSelectClauseParserFacade"><a href="#AbstractSelectClauseParserFacade" class="headerlink" title="AbstractSelectClauseParserFacade"></a>AbstractSelectClauseParserFacade</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSelectClauseParserFacade</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DistinctClauseParser distinctClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SelectListClauseParser selectListClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TableReferencesClauseParser tableReferencesClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WhereClauseParser whereClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GroupByClauseParser groupByClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HavingClauseParser havingClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderByClauseParser orderByClauseParser;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SelectRestClauseParser selectRestClauseParser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析Distinct"><a href="#解析Distinct" class="headerlink" title="解析Distinct"></a>解析Distinct</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistinctClauseParser</span> <span class="keyword">implements</span> <span class="title">SQLClauseParser</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LexerEngine lexerEngine;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parse distinct.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lexerEngine.skipAll(DefaultKeyword.ALL);</span><br><span class="line">        Collection&lt;Keyword&gt; distinctKeywords = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        distinctKeywords.add(DefaultKeyword.DISTINCT);</span><br><span class="line">        distinctKeywords.addAll(Arrays.asList(getSynonymousKeywordsForDistinct()));</span><br><span class="line">        lexerEngine.unsupportedIfEqual(distinctKeywords.toArray(<span class="keyword">new</span> Keyword[distinctKeywords.size()]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Keyword[] getSynonymousKeywordsForDistinct() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Keyword[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析Option"><a href="#解析Option" class="headerlink" title="解析Option"></a>解析Option</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLSelectOptionClauseParser</span> <span class="keyword">implements</span> <span class="title">SQLClauseParser</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LexerEngine lexerEngine;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析Option.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//HIGH_PRIORITY、STRAIGHT_JOIN、SQL_SMALL_RESULT、SQL_BIG_RESULT、SQL_BUFFER_RESULT、SQL_CACHE、SQL_NO_CACHE、SQL_CALC_FOUND_ROWS</span></span><br><span class="line">        lexerEngine.skipAll(MySQLKeyword.HIGH_PRIORITY, MySQLKeyword.STRAIGHT_JOIN, </span><br><span class="line">                MySQLKeyword.SQL_SMALL_RESULT, MySQLKeyword.SQL_BIG_RESULT, MySQLKeyword.SQL_BUFFER_RESULT, MySQLKeyword.SQL_CACHE, MySQLKeyword.SQL_NO_CACHE, MySQLKeyword.SQL_CALC_FOUND_ROWS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析列"><a href="#解析列" class="headerlink" title="解析列"></a>解析列</h4><p>SelectListClauseParser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement, <span class="keyword">final</span> List&lt;SelectItem&gt; items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        selectStatement.getItems().add(parseSelectItem(selectStatement));</span><br><span class="line">     <span class="comment">//&#x27;,&#x27;分割</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (lexerEngine.skipIfEqual(Symbol.COMMA));</span><br><span class="line">    selectStatement.setSelectListLastPosition(lexerEngine.getCurrentToken().getEndPosition() - lexerEngine.getCurrentToken().getLiterals().length());</span><br><span class="line">    items.addAll(selectStatement.getItems());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析列</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SelectItem <span class="title">parseSelectItem</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//跳过CONNECT_BY_ROOT</span></span><br><span class="line">        lexerEngine.skipIfEqual(getSkippedKeywordsBeforeSelectItem());</span><br><span class="line">        SelectItem result;</span><br><span class="line">        <span class="comment">//Mysql是false，没有行号。sqlserver是ROW_NUMBER</span></span><br><span class="line">        <span class="keyword">if</span> (isRowNumberSelectItem()) &#123;</span><br><span class="line">            result = parseRowNumberSelectItem(selectStatement);</span><br><span class="line">        <span class="comment">// 解析&#x27;*&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isStarSelectItem()) &#123;</span><br><span class="line">            selectStatement.setContainStar(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//StarSelectItem</span></span><br><span class="line">            result = parseStarSelectItem();</span><br><span class="line">        <span class="comment">//解析MAX, MIN, SUM, AVG, COUNT</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isAggregationSelectItem()) &#123;</span><br><span class="line">            <span class="comment">//转化AggregationSelectItem</span></span><br><span class="line">            result = parseAggregationSelectItem(selectStatement);</span><br><span class="line">            parseRestSelectItem(selectStatement);</span><br><span class="line">        <span class="comment">//其他情况，也就是直接列名的</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">new</span> CommonSelectItem(SQLUtil.getExactlyValue(parseCommonSelectItem(selectStatement) + parseRestSelectItem(selectStatement)), aliasClauseParser.parse());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">parseCommonSelectItem</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">    String literals = lexerEngine.getCurrentToken().getLiterals();</span><br><span class="line">    <span class="keyword">int</span> position = lexerEngine.getCurrentToken().getEndPosition() - literals.length();</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    result.append(literals);</span><br><span class="line">    lexerEngine.nextToken();</span><br><span class="line">    <span class="comment">//&#x27;(&#x27;开头</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.equalAny(Symbol.LEFT_PAREN)) &#123;</span><br><span class="line">        <span class="comment">//跳过括号内所有令牌,并返回括号内内容</span></span><br><span class="line">        result.append(lexerEngine.skipParentheses(selectStatement));</span><br><span class="line">    <span class="comment">//字面量带&#x27;.&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexerEngine.equalAny(Symbol.DOT)) &#123;</span><br><span class="line">        <span class="comment">//解析表名</span></span><br><span class="line">        String tableName = SQLUtil.getExactlyValue(literals);</span><br><span class="line">        <span class="comment">//看绑定的逻辑表名有没有</span></span><br><span class="line">        <span class="keyword">if</span> (shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()) &#123;</span><br><span class="line">            <span class="comment">//添加到TableToken</span></span><br><span class="line">            selectStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(position, literals));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        result.append(lexerEngine.getCurrentToken().getLiterals());</span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        <span class="comment">//列名</span></span><br><span class="line">        result.append(lexerEngine.getCurrentToken().getLiterals());</span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">parseRestSelectItem</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span> (lexerEngine.equalAny(Symbol.getOperators())) &#123;</span><br><span class="line">        result.append(lexerEngine.getCurrentToken().getLiterals());</span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        result.append(parseCommonSelectItem(selectStatement));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析FROM"><a href="#解析FROM" class="headerlink" title="解析FROM"></a>解析FROM</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseFrom</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不支持SELECT * INTO</span></span><br><span class="line">    lexerEngine.unsupportedIfEqual(DefaultKeyword.INTO);</span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(DefaultKeyword.FROM)) &#123;</span><br><span class="line">        parseTable(selectStatement);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseTable</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//&#x27;(&#x27;，解析子查询</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(Symbol.LEFT_PAREN)) &#123;</span><br><span class="line">        <span class="comment">//子查询，在调用一次parseInternal</span></span><br><span class="line">         selectStatement.setSubQueryStatement(parseInternal());</span><br><span class="line">        <span class="comment">//跳过WHERE </span></span><br><span class="line">         <span class="keyword">if</span> (lexerEngine.equalAny(DefaultKeyword.WHERE, Assist.END)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//解析表名。TableReferencesClauseParser已经分析过了</span></span><br><span class="line">   selectClauseParserFacade.getTableReferencesClauseParser().parse(selectStatement, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析Where"><a href="#解析Where" class="headerlink" title="解析Where"></a>解析Where</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseWhere</span><span class="params">(<span class="keyword">final</span> ShardingRule shardingRule, <span class="keyword">final</span> SelectStatement selectStatement, <span class="keyword">final</span> List&lt;SelectItem&gt; items)</span> </span>&#123;</span><br><span class="line">    selectClauseParserFacade.getWhereClauseParser().parse(shardingRule, selectStatement, items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">final</span> ShardingRule shardingRule, <span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> List&lt;SelectItem&gt; items)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//AliasClauseParser 别名解析器，分析过了</span></span><br><span class="line">   aliasClauseParser.parse();</span><br><span class="line">    <span class="comment">//Where</span></span><br><span class="line">   <span class="keyword">if</span> (lexerEngine.skipIfEqual(DefaultKeyword.WHERE)) &#123;</span><br><span class="line">        parseConditions(shardingRule, sqlStatement, items);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConditions</span><span class="params">(<span class="keyword">final</span> ShardingRule shardingRule, <span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> List&lt;SelectItem&gt; items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        parseComparisonCondition(shardingRule, sqlStatement, items);</span><br><span class="line">    &#125; <span class="keyword">while</span> (lexerEngine.skipIfEqual(DefaultKeyword.AND));</span><br><span class="line">    <span class="comment">//不支持OR，3.X支持了。。。我这里源码是2.x的所以没有</span></span><br><span class="line">    lexerEngine.unsupportedIfEqual(DefaultKeyword.OR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseComparisonCondition</span><span class="params">(<span class="keyword">final</span> ShardingRule shardingRule, <span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> List&lt;SelectItem&gt; items)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//跳过&#x27;(&#x27;</span></span><br><span class="line">    lexerEngine.skipIfEqual(Symbol.LEFT_PAREN);</span><br><span class="line">    <span class="comment">//表达式解析器</span></span><br><span class="line">    SQLExpression left = expressionClauseParser.parse(sqlStatement);</span><br><span class="line">    <span class="comment">//&#x27;=&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(Symbol.EQ)) &#123;</span><br><span class="line">        parseEqualCondition(shardingRule, sqlStatement, left);</span><br><span class="line">        lexerEngine.skipIfEqual(Symbol.RIGHT_PAREN);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//IN</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(DefaultKeyword.IN)) &#123;</span><br><span class="line">        parseInCondition(shardingRule, sqlStatement, left);</span><br><span class="line">        lexerEngine.skipIfEqual(Symbol.RIGHT_PAREN);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//BETWEEN</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(DefaultKeyword.BETWEEN)) &#123;</span><br><span class="line">        parseBetweenCondition(shardingRule, sqlStatement, left);</span><br><span class="line">        lexerEngine.skipIfEqual(Symbol.RIGHT_PAREN);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理rowNumber</span></span><br><span class="line">    <span class="keyword">if</span> (sqlStatement <span class="keyword">instanceof</span> SelectStatement &amp;&amp; isRowNumberCondition(items, left)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lexerEngine.skipIfEqual(Symbol.LT, Symbol.LT_EQ)) &#123;</span><br><span class="line">            parseRowCountCondition((SelectStatement) sqlStatement);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lexerEngine.skipIfEqual(Symbol.GT, Symbol.GT_EQ)) &#123;</span><br><span class="line">            parseOffsetCondition((SelectStatement) sqlStatement);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理其他自定义条件，mysql就是REGEXP</span></span><br><span class="line">    List&lt;Keyword&gt; otherConditionOperators = <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(getCustomizedOtherConditionOperators()));</span><br><span class="line">    <span class="comment">//&#x27;&lt;&#x27;、&#x27;&lt;=&#x27;、&#x27;&gt;&#x27;、&#x27;&gt;=&#x27;、&#x27;&lt;&gt;&#x27;、&#x27;!=&#x27;、&#x27;!&gt;&#x27;、&#x27;!&lt;&#x27;、&#x27;LIKE&#x27;、&#x27;IS&#x27;</span></span><br><span class="line">    otherConditionOperators.addAll(</span><br><span class="line">            Arrays.asList(Symbol.LT, Symbol.LT_EQ, Symbol.GT, Symbol.GT_EQ, Symbol.LT_GT, Symbol.BANG_EQ, Symbol.BANG_GT, Symbol.BANG_LT, DefaultKeyword.LIKE, DefaultKeyword.IS));</span><br><span class="line">    <span class="comment">//处理条件</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(otherConditionOperators.toArray(<span class="keyword">new</span> Keyword[otherConditionOperators.size()]))) &#123;</span><br><span class="line">        parseOtherCondition(sqlStatement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理NOT</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.skipIfEqual(DefaultKeyword.NOT)) &#123;</span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        lexerEngine.skipIfEqual(Symbol.LEFT_PAREN);</span><br><span class="line">        parseOtherCondition(sqlStatement);</span><br><span class="line">        lexerEngine.skipIfEqual(Symbol.RIGHT_PAREN);</span><br><span class="line">    &#125;</span><br><span class="line">    lexerEngine.skipIfEqual(Symbol.RIGHT_PAREN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析Group-By"><a href="#解析Group-By" class="headerlink" title="解析Group By"></a>解析Group By</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!lexerEngine.skipIfEqual(DefaultKeyword.GROUP)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lexerEngine.accept(DefaultKeyword.BY);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        addGroupByItem(expressionClauseParser.parse(selectStatement), selectStatement);</span><br><span class="line">        <span class="comment">//不是&#x27;,&#x27;，也就是不是多个就跳出</span></span><br><span class="line">        <span class="keyword">if</span> (!lexerEngine.equalAny(Symbol.COMMA)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理下一个</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//WITH、ROLLUP</span></span><br><span class="line">    lexerEngine.skipAll(getSkippedKeywordAfterGroupBy());</span><br><span class="line">    selectStatement.setGroupByLastPosition(lexerEngine.getCurrentToken().getEndPosition() - lexerEngine.getCurrentToken().getLiterals().length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于ROLLUP <a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-modifiers.html">https://dev.mysql.com/doc/refman/5.7/en/group-by-modifiers.html</a></p><p>解析Group By后面的东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addGroupByItem</span><span class="params">(<span class="keyword">final</span> SQLExpression sqlExpression, <span class="keyword">final</span> SelectStatement selectStatement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果是Oracle不支持ROLLUP、CUBE、GROUPING</span></span><br><span class="line">    lexerEngine.unsupportedIfEqual(getUnsupportedKeywordBeforeGroupByItem());</span><br><span class="line">    OrderType orderByType = OrderType.ASC;</span><br><span class="line">    <span class="comment">//ASC,默认ASC</span></span><br><span class="line">    <span class="keyword">if</span> (lexerEngine.equalAny(DefaultKeyword.ASC)) &#123;</span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">    <span class="comment">//DESC</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexerEngine.skipIfEqual(DefaultKeyword.DESC)) &#123;</span><br><span class="line">        orderByType = OrderType.DESC;</span><br><span class="line">    &#125;</span><br><span class="line">    OrderItem orderItem;</span><br><span class="line">    <span class="keyword">if</span> (sqlExpression <span class="keyword">instanceof</span> SQLPropertyExpression) &#123;</span><br><span class="line">        SQLPropertyExpression sqlPropertyExpression = (SQLPropertyExpression) sqlExpression;</span><br><span class="line">        orderItem = <span class="keyword">new</span> OrderItem(SQLUtil.getExactlyValue(sqlPropertyExpression.getOwner().getName()), SQLUtil.getExactlyValue(sqlPropertyExpression.getName()), orderByType, OrderType.ASC,</span><br><span class="line">                selectStatement.getAlias(SQLUtil.getExactlyValue(sqlPropertyExpression.getOwner() + <span class="string">&quot;.&quot;</span> + SQLUtil.getExactlyValue(sqlPropertyExpression.getName()))));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlExpression <span class="keyword">instanceof</span> SQLIdentifierExpression) &#123;</span><br><span class="line">        SQLIdentifierExpression sqlIdentifierExpression = (SQLIdentifierExpression) sqlExpression;</span><br><span class="line">        orderItem = <span class="keyword">new</span> OrderItem(</span><br><span class="line">                SQLUtil.getExactlyValue(sqlIdentifierExpression.getName()), orderByType, OrderType.ASC, selectStatement.getAlias(SQLUtil.getExactlyValue(sqlIdentifierExpression.getName())));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlExpression <span class="keyword">instanceof</span> SQLIgnoreExpression) &#123;</span><br><span class="line">        SQLIgnoreExpression sqlIgnoreExpression = (SQLIgnoreExpression) sqlExpression;</span><br><span class="line">        orderItem = <span class="keyword">new</span> OrderItem(sqlIgnoreExpression.getExpression(), orderByType, OrderType.ASC, selectStatement.getAlias(sqlIgnoreExpression.getExpression()));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    selectStatement.getGroupByItems().add(orderItem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="合并子查询"><a href="#合并子查询" class="headerlink" title="合并子查询"></a>合并子查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SelectStatement <span class="title">mergeSubQueryStatement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SelectStatement result = processLimitForSubQuery();</span><br><span class="line">    processItems(result);</span><br><span class="line">    processOrderByItems(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharding-jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc源码解析-分库分表（四）</title>
      <link href="/hexo/post/38641c2c.html"/>
      <url>/hexo/post/38641c2c.html</url>
      
        <content type="html"><![CDATA[<h2 id="分库分表配置"><a href="#分库分表配置" class="headerlink" title="分库分表配置"></a>分库分表配置</h2><p>TableRuleConfiguration##build—&gt;TableRule</p><h3 id="TableRuleConfiguration"><a href="#TableRuleConfiguration" class="headerlink" title="TableRuleConfiguration"></a>TableRuleConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑表,表名</span></span><br><span class="line"><span class="comment">//例：订单数据根据主键尾数拆分为10张表,分别是t_order_0到t_order_9，他们的逻辑表名为t_order。</span></span><br><span class="line"><span class="keyword">private</span> String logicTable;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//如：ds_jdbc.t_order_$&#123;0..9&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> String actualDataNodes;</span><br><span class="line"><span class="comment">//数据库分库策略</span></span><br><span class="line"><span class="keyword">private</span> ShardingStrategyConfiguration databaseShardingStrategyConfig;</span><br><span class="line"><span class="comment">//分表策略</span></span><br><span class="line"><span class="keyword">private</span> ShardingStrategyConfiguration tableShardingStrategyConfig;</span><br><span class="line"><span class="comment">//自增列</span></span><br><span class="line"><span class="keyword">private</span> String keyGeneratorColumnName;</span><br><span class="line"><span class="comment">//id生成器类名</span></span><br><span class="line"><span class="keyword">private</span> String keyGeneratorClass;</span><br></pre></td></tr></table></figure><ul><li>actualDataNodes</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用groovy表达式解析出真实数据库节点</span></span><br><span class="line">List&lt;String&gt; actualDataNodes = <span class="keyword">new</span> InlineExpressionParser(<span class="keyword">this</span>.actualDataNodes).evaluate();</span><br></pre></td></tr></table></figure><h4 id="InlineExpressionParser"><a href="#InlineExpressionParser" class="headerlink" title="InlineExpressionParser"></a>InlineExpressionParser</h4><p>内联表达式解析器</p><p>inlineExpression是它唯一的参数和构造参数。如ds_jdbc.t_order_${[0, 9]}这样的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == inlineExpression) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flatten(evaluate(split()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ds_jdbc.t_order_$&#123;[0,9]&#125; ,ds_jdbc.t_order_$&#123;1..8&#125;  </span></span><br><span class="line"><span class="comment">//result: [&quot;ds_jdbc.t_order_$&#123;[0,9]&#125;&quot;, &quot;ds_jdbc.t_order_$&#123;1..8&#125;&quot;] </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">split</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     StringBuilder segment = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">     <span class="keyword">int</span> bracketsDepth = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inlineExpression.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> each = inlineExpression.charAt(i);</span><br><span class="line">        <span class="keyword">switch</span> (each) &#123;</span><br><span class="line">            <span class="comment">// &#x27;,&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> SPLITTER:</span><br><span class="line">               <span class="keyword">if</span> (bracketsDepth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    segment.append(each);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.add(segment.toString().trim());</span><br><span class="line">                    segment.setLength(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">               <span class="keyword">if</span> (<span class="string">&#x27;&#123;&#x27;</span> == inlineExpression.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                    bracketsDepth++;</span><br><span class="line">               &#125;</span><br><span class="line">               segment.append(each);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">               <span class="keyword">if</span> (bracketsDepth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   bracketsDepth--;</span><br><span class="line">               &#125;</span><br><span class="line">               segment.append(each);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">               segment.append(each);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (segment.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         result.add(segment.toString().trim());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Groovy表达式</span></span><br><span class="line"><span class="comment">//inlineExpressions: &quot;ds_jdbc.t_order_$&#123;[0,9]&#125; ,ds_jdbc.t_order_$&#123;1..8&#125;&quot;    </span></span><br><span class="line"><span class="comment">//result : [ds_jdbc.t_order_[0, 9], ds_jdbc.t_order_[1, 2, 3, 4, 5, 6, 7, 8]]  -&gt; List&lt;GString&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Object&gt; <span class="title">evaluate</span><span class="params">(<span class="keyword">final</span> List&lt;String&gt; inlineExpressions)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(inlineExpressions.size());</span><br><span class="line">        GroovyShell shell = <span class="keyword">new</span> GroovyShell();</span><br><span class="line">        <span class="keyword">for</span> (String each : inlineExpressions) &#123;</span><br><span class="line">            StringBuilder expression = <span class="keyword">new</span> StringBuilder(each);</span><br><span class="line">            <span class="keyword">if</span> (!each.startsWith(<span class="string">&quot;\&quot;&quot;</span>)) &#123;</span><br><span class="line">                expression.insert(<span class="number">0</span>, <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!each.endsWith(<span class="string">&quot;\&quot;&quot;</span>)) &#123;</span><br><span class="line">                expression.append(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(shell.evaluate(expression.toString()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//segments: &quot;[ds_jdbc.t_order_[0, 9], ds_jdbc.t_order_[1, 2, 3, 4, 5, 6, 7, 8]]&quot;  -&gt; List&lt;GString&gt;</span></span><br><span class="line"><span class="comment">//result : &quot;ds_jdbc.t_order_0&quot;,&quot;ds_jdbc.t_order_1&quot;,&quot;ds_jdbc.t_order_2&quot;,&quot;ds_jdbc.t_order_3&quot;,&quot;ds_jdbc.t_order_4&quot;,&quot;ds_jdbc.t_order_5&quot;,&quot;ds_jdbc.t_order_6&quot;,&quot;ds_jdbc.t_order_7&quot;,&quot;ds_jdbc.t_order_8&quot;,&quot;ds_jdbc.t_order_9&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">flatten</span><span class="params">(<span class="keyword">final</span> List&lt;Object&gt; segments)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object each : segments) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each <span class="keyword">instanceof</span> GString) &#123;</span><br><span class="line">                result.addAll(assemblyCartesianSegments((GString) each));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.add(each.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="TableRule"><a href="#TableRule" class="headerlink" title="TableRule"></a>TableRule</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String logicTable;</span><br><span class="line"><span class="comment">//静态分库分表数据单元</span></span><br><span class="line"><span class="comment">//&quot;ds_jdbc.t_order_0&quot;,&quot;ds_jdbc.t_order_1&quot;,&quot;ds_jdbc.t_order_2&quot;,&quot;ds_jdbc.t_order_3&quot;,&quot;ds_jdbc.t_order_4&quot;,&quot;ds_jdbc.t_order_5&quot;,&quot;ds_jdbc.t_order_6&quot;,&quot;ds_jdbc.t_order_7&quot;,&quot;ds_jdbc.t_order_8&quot;,&quot;ds_jdbc.t_order_9&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;DataNode&gt; actualDataNodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ShardingStrategy databaseShardingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ShardingStrategy tableShardingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String generateKeyColumn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> KeyGenerator keyGenerator;</span><br></pre></td></tr></table></figure><h4 id="ShardingStrategyConfiguration"><a href="#ShardingStrategyConfiguration" class="headerlink" title="ShardingStrategyConfiguration"></a>ShardingStrategyConfiguration</h4><ul><li><p>StandardShardingStrategyConfiguration 标准分片策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分片列名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String shardingColumn;</span><br><span class="line"><span class="comment">//用于处理=和IN的分片</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String preciseAlgorithmClassName;</span><br><span class="line"><span class="comment">//处理BETWEEN AND分片</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String rangeAlgorithmClassName;</span><br></pre></td></tr></table></figure></li><li><p>ComplexShardingStrategyConfiguration</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String shardingColumns;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String algorithmClassName;</span><br></pre></td></tr></table></figure><ul><li>InlineShardingStrategyConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String shardingColumn;</span><br><span class="line"><span class="comment">//分片表达式，</span></span><br><span class="line"><span class="comment">//如：t_user_$&#123;u_id % 8&#125; 表示t_user表按照u_id按8取模分成8个表，表名称为t_user_0到t_user_7。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String algorithmExpression;</span><br></pre></td></tr></table></figure><ul><li>HintShardingStrategyConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String algorithmClassName;</span><br></pre></td></tr></table></figure><ul><li>NoneShardingStrategyConfiguration</li></ul><h4 id="ShardingStrategy"><a href="#ShardingStrategy" class="headerlink" title="ShardingStrategy"></a>ShardingStrategy</h4><ul><li>StandardShardingStrategy</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String shardingColumn;</span><br><span class="line"><span class="comment">//用于处理=和IN的算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PreciseShardingAlgorithm preciseShardingAlgorithm;</span><br><span class="line"><span class="comment">//这个是可选的，处理BETWEEN AND算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Optional&lt;RangeShardingAlgorithm&gt; rangeShardingAlgorithm;</span><br></pre></td></tr></table></figure><ul><li>ComplexShardingStrategy  复合分片策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;String&gt; shardingColumns;</span><br><span class="line"><span class="comment">//复合分片算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ComplexKeysShardingAlgorithm shardingAlgorithm;</span><br></pre></td></tr></table></figure><ul><li>InlineShardingStrategy  行表达式分片策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String shardingColumn;</span><br><span class="line"><span class="comment">//表达式转化成groovy闭包</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Closure&lt;?&gt; closure;</span><br></pre></td></tr></table></figure><ul><li>HintShardingStrategy 通过Hint而非SQL解析的方式分片的策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;String&gt; shardingColumns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HintShardingAlgorithm shardingAlgorithm;</span><br></pre></td></tr></table></figure><ul><li>NoneShardingStrategy 不分片的策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;String&gt; shardingColumns = Collections.emptyList();</span><br></pre></td></tr></table></figure><h3 id="ShardingRuleConfiguration"><a href="#ShardingRuleConfiguration" class="headerlink" title="ShardingRuleConfiguration"></a>ShardingRuleConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> String defaultDataSourceName;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Collection&lt;TableRuleConfiguration&gt; tableRuleConfigs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Collection&lt;String&gt; bindingTableGroups = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> ShardingStrategyConfiguration defaultDatabaseShardingStrategyConfig;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> ShardingStrategyConfiguration defaultTableShardingStrategyConfig;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> String defaultKeyGeneratorClass;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Collection&lt;MasterSlaveRuleConfiguration&gt; masterSlaveRuleConfigs = </span><br><span class="line">    <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="ShardingRule"><a href="#ShardingRule" class="headerlink" title="ShardingRule"></a>ShardingRule</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String defaultDataSourceName;</span><br><span class="line"><span class="comment">//表规则配置对象集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;TableRule&gt; tableRules;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;BindingTableRule&gt; bindingTableRules = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="comment">//分库策略</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ShardingStrategy defaultDatabaseShardingStrategy;</span><br><span class="line"><span class="comment">//分表策略</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ShardingStrategy defaultTableShardingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> KeyGenerator defaultKeyGenerator;</span><br></pre></td></tr></table></figure><h2 id="重要的接口"><a href="#重要的接口" class="headerlink" title="重要的接口"></a>重要的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分片值规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShardingValue</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取逻辑表名</span></span><br><span class="line">    <span class="function">String <span class="title">getLogicTableName</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取列名</span></span><br><span class="line">    <span class="function">String <span class="title">getColumnName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表映射单元</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TableUnit</span> </span>&#123;</span><br><span class="line">    <span class="comment">//真实数据源名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String dataSourceName;</span><br><span class="line">    <span class="comment">//逻辑表名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String logicTableName;</span><br><span class="line">    <span class="comment">//真实表名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String actualTableName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SQL执行单元</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLExecutionUnit</span> </span>&#123;</span><br><span class="line">    <span class="comment">//真实数据源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String dataSource;</span><br><span class="line">    <span class="comment">//真实sql</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String sql;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SQL路由结果</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLRouteResult</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SQLStatement sqlStatement;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;SQLExecutionUnit&gt; executionUnits = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Number&gt; generatedKeys = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="https://user-images.githubusercontent.com/7789698/40271273-97779b9c-5bcd-11e8-8a63-f7736a1d752b.png" alt="121212"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="SQLRouter"><a href="#SQLRouter" class="headerlink" title="SQLRouter"></a>SQLRouter</h3><p>SQL 路由器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SQLRouter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析sql</span></span><br><span class="line">    <span class="function">SQLStatement <span class="title">parse</span><span class="params">(String logicSQL, <span class="keyword">int</span> parametersSize)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//路由sql</span></span><br><span class="line">    <span class="function">SQLRouteResult <span class="title">route</span><span class="params">(String logicSQL, List&lt;Object&gt; parameters, SQLStatement sqlStatement)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两种实现：</p><ul><li>DatabaseHintSQLRouter：通过提示且仅路由至数据库的SQL路由器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SQLStatement <span class="title">parse</span><span class="params">(<span class="keyword">final</span> String logicSQL, <span class="keyword">final</span> <span class="keyword">int</span> parametersSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过词法分析分析出sql的类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQLJudgeEngine(logicSQL).judge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// TODO insert SQL need parse gen key</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SQLRouteResult <span class="title">route</span><span class="params">(<span class="keyword">final</span> String logicSQL, <span class="keyword">final</span> List&lt;Object&gt; parameters, <span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//SQL路由结果</span></span><br><span class="line">    SQLRouteResult result = <span class="keyword">new</span> SQLRouteResult(sqlStatement);</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    RoutingResult routingResult = <span class="keyword">new</span> DatabaseHintRoutingEngine(shardingRule.getDataSourceMap(), (HintShardingStrategy) shardingRule.getDefaultDatabaseShardingStrategy()).route();</span><br><span class="line">    <span class="keyword">for</span> (TableUnit each : routingResult.getTableUnits().getTableUnits()) &#123;</span><br><span class="line">        result.getExecutionUnits().add(<span class="keyword">new</span> SQLExecutionUnit(each.getDataSourceName(), logicSQL));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印sql</span></span><br><span class="line">    <span class="keyword">if</span> (showSQL) &#123;</span><br><span class="line">        SQLLogger.logSQL(logicSQL, sqlStatement, result.getExecutionUnits(), parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DatabaseHintRoutingEngine 数据库提示路由引擎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap;</span><br><span class="line"><span class="comment">//hint路由策略</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HintShardingStrategy databaseShardingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RoutingResult <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取分片键值</span></span><br><span class="line">    Optional&lt;ShardingValue&gt; shardingValue = HintManagerHolder.getDatabaseShardingValue(<span class="keyword">new</span> ShardingKey(HintManagerHolder.DB_TABLE_NAME, HintManagerHolder.DB_COLUMN_NAME));</span><br><span class="line">    Preconditions.checkState(shardingValue.isPresent());</span><br><span class="line">    log.debug(<span class="string">&quot;Before database sharding only db:&#123;&#125; sharding values: &#123;&#125;&quot;</span>, dataSourceMap.keySet(), shardingValue.get());</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    Collection&lt;String&gt; routingDataSources;</span><br><span class="line">    routingDataSources = databaseShardingStrategy.doSharding(dataSourceMap.keySet(), Collections.singletonList(shardingValue.get()));</span><br><span class="line">    Preconditions.checkState(!routingDataSources.isEmpty(), <span class="string">&quot;no database route info&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;After database sharding only result: &#123;&#125;&quot;</span>, routingDataSources);</span><br><span class="line">    RoutingResult result = <span class="keyword">new</span> RoutingResult();</span><br><span class="line">    <span class="comment">//TableUnit</span></span><br><span class="line">    <span class="keyword">for</span> (String each : routingDataSources) &#123;</span><br><span class="line">        result.getTableUnits().getTableUnits().add(<span class="keyword">new</span> TableUnit(each, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HintShardingStrategy  hint路由策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; availableTargetNames, <span class="keyword">final</span> Collection&lt;ShardingValue&gt; shardingValues)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过HintShardingAlgorithm接口路由</span></span><br><span class="line">    Collection&lt;String&gt; shardingResult = shardingAlgorithm.doSharding(availableTargetNames, shardingValues.iterator().next());</span><br><span class="line">    Collection&lt;String&gt; result = <span class="keyword">new</span> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">    result.addAll(shardingResult);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>ParsingSQLRouter：需要解析的SQL路由器</p><p>解析</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SQLStatement <span class="title">parse</span><span class="params">(<span class="keyword">final</span> String logicSQL, <span class="keyword">final</span> <span class="keyword">int</span> parametersSize)</span> </span>&#123;</span><br><span class="line">    SQLParsingEngine parsingEngine = <span class="keyword">new</span> SQLParsingEngine(databaseType, logicSQL, shardingRule);</span><br><span class="line">    SQLStatement result = parsingEngine.parse();</span><br><span class="line">    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> InsertStatement) &#123;</span><br><span class="line">        ((InsertStatement) result).appendGenerateKeyToken(shardingRule, parametersSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SQLParsingEngine 是sql解析引擎，下一章讲到。经过sql解析引擎解析后得到SQLStatement，如果是InsertStatement会改写sql处理 GenerateKeyToken。关于sql改写后面会讲到。</p><h3 id="InsertStatement"><a href="#InsertStatement" class="headerlink" title="InsertStatement"></a>InsertStatement</h3><p>被sql解析引擎解析后，最重要的是返回了SQLStatement，拿insert举例就是InsertStatement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sql类型，比如DML</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SQLType type;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Tables tables = <span class="keyword">new</span> Tables();</span><br><span class="line"><span class="comment">//条件&lt;列名，值&gt; </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Conditions conditions = <span class="keyword">new</span> Conditions();</span><br><span class="line"><span class="comment">//所有token，比如TableToken（t_order）、ItemToken(order_id)、GeneratedKeyToken(57)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SQLToken&gt; sqlTokens = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> parametersIndex;</span><br><span class="line"><span class="comment">//所有列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;Column&gt; columns = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="comment">//批量条件&lt;列名，值&gt;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Conditions&gt; multipleConditions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="comment">//最后一列结束位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> columnsListLastPosition;</span><br><span class="line"><span class="comment">//自增列是第几个，-1表示没有</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> generateKeyColumnIndex = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//VALUES或VALUE后面值开始的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> afterValuesPosition;</span><br><span class="line"><span class="comment">//VALUES或VALUE后面值结束位置 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> valuesListLastPosition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> GeneratedKey generatedKey;</span><br></pre></td></tr></table></figure><p>  路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SQLRouteResult <span class="title">route</span><span class="params">(<span class="keyword">final</span> String logicSQL, <span class="keyword">final</span> List&lt;Object&gt; parameters, <span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//SQL路由结果</span></span><br><span class="line">    SQLRouteResult result = <span class="keyword">new</span> SQLRouteResult(sqlStatement);</span><br><span class="line">    <span class="keyword">if</span> (sqlStatement <span class="keyword">instanceof</span> InsertStatement &amp;&amp; <span class="keyword">null</span> != ((InsertStatement) sqlStatement).getGeneratedKey()) &#123;</span><br><span class="line">        <span class="comment">//处理插入sql的主键</span></span><br><span class="line">        processGeneratedKey(parameters, (InsertStatement) sqlStatement, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    RoutingResult routingResult = route(parameters, sqlStatement);</span><br><span class="line">    <span class="comment">//SQL重写引擎</span></span><br><span class="line">    SQLRewriteEngine rewriteEngine = <span class="keyword">new</span> SQLRewriteEngine(shardingRule, logicSQL, databaseType, sqlStatement);</span><br><span class="line">    <span class="keyword">boolean</span> isSingleRouting = routingResult.isSingleRouting();</span><br><span class="line">    <span class="keyword">if</span> (sqlStatement <span class="keyword">instanceof</span> SelectStatement &amp;&amp; <span class="keyword">null</span> != ((SelectStatement) sqlStatement).getLimit()) &#123;</span><br><span class="line">        <span class="comment">// 处理分页</span></span><br><span class="line">        processLimit(parameters, (SelectStatement) sqlStatement, isSingleRouting);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写</span></span><br><span class="line">    SQLBuilder sqlBuilder = rewriteEngine.rewrite(!isSingleRouting);</span><br><span class="line">    <span class="comment">// 笛卡尔积结果生成 ExecutionUnit</span></span><br><span class="line">    <span class="keyword">if</span> (routingResult <span class="keyword">instanceof</span> CartesianRoutingResult) &#123;</span><br><span class="line">        <span class="keyword">for</span> (CartesianDataSource cartesianDataSource : ((CartesianRoutingResult) routingResult).getRoutingDataSources()) &#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">for</span> (CartesianTableReference cartesianTableReference : cartesianDataSource.getRoutingTableReferences()) &#123;</span><br><span class="line">                result.getExecutionUnits().add(<span class="keyword">new</span> SQLExecutionUnit(cartesianDataSource.getDataSource(), rewriteEngine.generateSQL(cartesianTableReference, sqlBuilder)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//将每个逻辑表名转化成真实表名</span></span><br><span class="line">        <span class="keyword">for</span> (TableUnit each : routingResult.getTableUnits().getTableUnits()) &#123;</span><br><span class="line">            result.getExecutionUnits().add(<span class="keyword">new</span> SQLExecutionUnit(each.getDataSourceName(), rewriteEngine.generateSQL(each, sqlBuilder)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印 SQL</span></span><br><span class="line">    <span class="keyword">if</span> (showSQL) &#123;</span><br><span class="line">        SQLLogger.logSQL(logicSQL, sqlStatement, result.getExecutionUnits(), parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> RoutingResult <span class="title">route</span><span class="params">(<span class="keyword">final</span> List&lt;Object&gt; parameters, <span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//获取所有sql语句中的逻辑表名</span></span><br><span class="line">        Collection&lt;String&gt; tableNames = sqlStatement.getTables().getTableNames();</span><br><span class="line">        RoutingEngine routingEngine;</span><br><span class="line">        <span class="keyword">if</span> (tableNames.isEmpty()) &#123;</span><br><span class="line">            routingEngine = <span class="keyword">new</span> DatabaseAllRoutingEngine(shardingRule.getDataSourceMap());</span><br><span class="line">            <span class="comment">//1.只有一个逻辑表名2.是否表名全为BindingTable3.所有逻辑表名都在默认数据库</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == tableNames.size() || shardingRule.isAllBindingTables(tableNames) || shardingRule.isAllInDefaultDataSource(tableNames)) &#123;</span><br><span class="line">            <span class="comment">//使用第一个表名做路由。</span></span><br><span class="line">            <span class="comment">//如：SELECT * FROM t_order o join t_order_item i ON o.order_id = i.order_id 则使用t_order</span></span><br><span class="line">            routingEngine = <span class="keyword">new</span> SimpleRoutingEngine(shardingRule, parameters, tableNames.iterator().next(), sqlStatement);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// TODO config for cartesian set</span></span><br><span class="line">            <span class="comment">//可配置是否执行笛卡尔积</span></span><br><span class="line">            routingEngine = <span class="keyword">new</span> ComplexRoutingEngine(shardingRule, parameters, tableNames, sqlStatement);</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//路由</span></span><br><span class="line">        <span class="keyword">return</span> routingEngine.route();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="路由引擎"><a href="#路由引擎" class="headerlink" title="路由引擎"></a>路由引擎</h2><h3 id="RoutingEngine"><a href="#RoutingEngine" class="headerlink" title="RoutingEngine"></a>RoutingEngine</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoutingEngine</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Route.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> routing result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RoutingResult <span class="title">route</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleRoutingEngine"><a href="#SimpleRoutingEngine" class="headerlink" title="SimpleRoutingEngine"></a>SimpleRoutingEngine</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ShardingRule shardingRule;</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Object&gt; parameters;</span><br><span class="line"><span class="comment">//逻辑表名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String logicTableName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SQLStatement sqlStatement;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RoutingResult <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取规则</span></span><br><span class="line">    TableRule tableRule = shardingRule.getTableRule(logicTableName);</span><br><span class="line">    <span class="comment">//Hint则使用分片管理器获取，否则使用数据库分片算法。获取逻辑表、列名、条件值</span></span><br><span class="line">    List&lt;ShardingValue&gt; databaseShardingValues = getDatabaseShardingValues(tableRule);</span><br><span class="line">    <span class="comment">//表分片算法。获取逻辑表、列名、条件值</span></span><br><span class="line">    List&lt;ShardingValue&gt; tableShardingValues = getTableShardingValues(tableRule);</span><br><span class="line">    <span class="comment">//根据逻辑表、列名、条件值路由出真实数据库节点</span></span><br><span class="line">    Collection&lt;String&gt; routedDataSources = routeDataSources(tableRule, databaseShardingValues);</span><br><span class="line">    Collection&lt;DataNode&gt; routedDataNodes = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String each : routedDataSources) &#123;</span><br><span class="line">        routedDataNodes.addAll(routeTables(tableRule, each, tableShardingValues));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成RoutingResult。包含TableUnit集合。TableUnit包括真实数据源、逻辑表名、真实表名</span></span><br><span class="line">    <span class="keyword">return</span> generateRoutingResult(routedDataNodes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;String&gt; <span class="title">routeDataSources</span><span class="params">(<span class="keyword">final</span> TableRule tableRule, <span class="keyword">final</span> List&lt;ShardingValue&gt; databaseShardingValues)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取所有真实数据库名</span></span><br><span class="line">        Collection&lt;String&gt; availableTargetDatabases = tableRule.getActualDatasourceNames();</span><br><span class="line">        <span class="keyword">if</span> (databaseShardingValues.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> availableTargetDatabases;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//ShardingStrategy#doSharding</span></span><br><span class="line">        Collection&lt;String&gt; result = shardingRule.getDatabaseShardingStrategy(tableRule).doSharding(availableTargetDatabases, databaseShardingValues);</span><br><span class="line">        Preconditions.checkState(!result.isEmpty(), <span class="string">&quot;no database route info&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="分库规则"><a href="#分库规则" class="headerlink" title="分库规则"></a>分库规则</h4><p>假如user_id模2分库，demo_ds_0、demo_ds_1    <code>shardingRuleConfig.setDefaultDatabaseShardingStrategyConfig(new InlineShardingStrategyConfiguration(&quot;user_id&quot;, &quot;demo_ds_$&#123;user_id % 2&#125;&quot;));</code></p><p>如SELECT o.* FROM t_order o  WHERE o.user_id= 10</p><p>则返回ListShardingValue ,t_order（逻辑表）、user_id（列名）、10（值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ShardingValue&gt; <span class="title">getDatabaseShardingValues</span><span class="params">(<span class="keyword">final</span> TableRule tableRule)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取分库规则</span></span><br><span class="line">    ShardingStrategy strategy = shardingRule.getDatabaseShardingStrategy(tableRule);</span><br><span class="line">    <span class="comment">//分库的列名</span></span><br><span class="line">    <span class="keyword">return</span> HintManagerHolder.isUseShardingHint() ? getDatabaseShardingValuesFromHint(strategy.getShardingColumns()) : getShardingValues(strategy.getShardingColumns());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ShardingValue&gt; <span class="title">getShardingValues</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; shardingColumns)</span> </span>&#123;</span><br><span class="line">    List&lt;ShardingValue&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(shardingColumns.size());</span><br><span class="line">    <span class="comment">//查看sql的条件里面是否能找到分库规则使用的列名</span></span><br><span class="line">    <span class="keyword">for</span> (String each : shardingColumns) &#123;</span><br><span class="line">        Optional&lt;Condition&gt; condition = sqlStatement.getConditions().find(<span class="keyword">new</span> Column(each, logicTableName));</span><br><span class="line">        <span class="keyword">if</span> (condition.isPresent()) &#123;</span><br><span class="line">            result.add(condition.get().getShardingValue(parameters));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Condition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ShardingValue <span class="title">getShardingValue</span><span class="params">(<span class="keyword">final</span> List&lt;Object&gt; parameters)</span> </span>&#123;</span><br><span class="line">    List&lt;Comparable&lt;?&gt;&gt; conditionValues = getValues(parameters);</span><br><span class="line">    <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">            <span class="comment">//&#x27;=&#x27;或者&quot;IN&quot;返回 ListShardingValue</span></span><br><span class="line">        <span class="keyword">case</span> EQUAL:</span><br><span class="line">        <span class="keyword">case</span> IN:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListShardingValue&lt;&gt;(column.getTableName(), column.getName(), conditionValues);</span><br><span class="line">            <span class="comment">//&quot;BETWEEN&quot;返回RangeShardingValue</span></span><br><span class="line">        <span class="keyword">case</span> BETWEEN:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RangeShardingValue&lt;&gt;(column.getTableName(), column.getName(), Range.range(conditionValues.get(<span class="number">0</span>), BoundType.CLOSED, conditionValues.get(<span class="number">1</span>), BoundType.CLOSED));</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(operator.getExpression());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分表规则"><a href="#分表规则" class="headerlink" title="分表规则"></a>分表规则</h4><p>假如按order_id模2分表   <code>shardingRuleConfig.setDefaultTableShardingStrategyConfig(new StandardShardingStrategyConfiguration(&quot;order_id&quot;, ModuloShardingTableAlgorithm.class.getName()));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ShardingValue&gt; <span class="title">getTableShardingValues</span><span class="params">(<span class="keyword">final</span> TableRule tableRule)</span> </span>&#123;</span><br><span class="line">    ShardingStrategy strategy = shardingRule.getTableShardingStrategy(tableRule);</span><br><span class="line">    <span class="keyword">return</span> HintManagerHolder.isUseShardingHint() ? getTableShardingValuesFromHint(strategy.getShardingColumns()) : getShardingValues(strategy.getShardingColumns());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分片策略实现"><a href="#分片策略实现" class="headerlink" title="分片策略实现"></a>分片策略实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShardingStrategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//availableTargetNames真实数据库名集合</span></span><br><span class="line">    <span class="comment">//SQL 的逻辑表、列名、条件（分片值）集合</span></span><br><span class="line">    <span class="function">Collection&lt;String&gt; <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, Collection&lt;ShardingValue&gt; shardingValues)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="StandardShardingStrategy"><a href="#StandardShardingStrategy" class="headerlink" title="StandardShardingStrategy"></a>StandardShardingStrategy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; availableTargetNames, <span class="keyword">final</span> Collection&lt;ShardingValue&gt; shardingValues)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取第一个分片值</span></span><br><span class="line">    ShardingValue shardingValue = shardingValues.iterator().next();</span><br><span class="line">    Collection&lt;String&gt; shardingResult = shardingValue <span class="keyword">instanceof</span> ListShardingValue</span><br><span class="line">            ? doSharding(availableTargetNames, (ListShardingValue) shardingValue) : doSharding(availableTargetNames, (RangeShardingValue) shardingValue);</span><br><span class="line">    Collection&lt;String&gt; result = <span class="keyword">new</span> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">    result.addAll(shardingResult);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;String&gt; <span class="title">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; availableTargetNames, <span class="keyword">final</span> ListShardingValue&lt;?&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//ListShardingValue-》List&lt;PreciseShardingValue&gt;</span></span><br><span class="line">        <span class="comment">//每个值都划出来，使用preciseShardingAlgorithm策略，获取真实数据库名</span></span><br><span class="line">        <span class="keyword">for</span> (PreciseShardingValue&lt;?&gt; each : transferToPreciseShardingValues(shardingValue)) &#123;</span><br><span class="line">            result.add(preciseShardingAlgorithm.doSharding(availableTargetNames, each));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;String&gt; <span class="title">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; availableTargetNames, <span class="keyword">final</span> RangeShardingValue&lt;?&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!rangeShardingAlgorithm.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Cannot find range sharding strategy in sharding rule.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//rangeShardingAlgorithm策略获取真实数据库名</span></span><br><span class="line">        <span class="keyword">return</span> rangeShardingAlgorithm.get().doSharding(availableTargetNames, shardingValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuloShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title">PreciseShardingAlgorithm</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; availableTargetNames, <span class="keyword">final</span> PreciseShardingValue&lt;Integer&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String each : availableTargetNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each.endsWith(shardingValue.getValue() % <span class="number">2</span> + <span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SQL重写"><a href="#SQL重写" class="headerlink" title="SQL重写"></a>SQL重写</h2><h3 id="SQLRewriteEngine"><a href="#SQLRewriteEngine" class="headerlink" title="SQLRewriteEngine"></a>SQLRewriteEngine</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ShardingRule shardingRule;</span><br><span class="line"><span class="comment">//原始sql</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String originalSQL;</span><br><span class="line"><span class="comment">//数据库类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DatabaseType databaseType;</span><br><span class="line"><span class="comment">//所有的SQL词根</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SQLToken&gt; sqlTokens = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SQLStatement sqlStatement;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SQLBuilder <span class="title">rewrite</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isRewriteLimit)</span> </span>&#123;</span><br><span class="line">    SQLBuilder result = <span class="keyword">new</span> SQLBuilder();</span><br><span class="line">    <span class="keyword">if</span> (sqlTokens.isEmpty()) &#123;</span><br><span class="line">        result.appendLiterals(originalSQL);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//sqlTokens按beginPos次序排序</span></span><br><span class="line">    sortByBeginPosition();</span><br><span class="line">    <span class="keyword">for</span> (SQLToken each : sqlTokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == count) &#123;</span><br><span class="line">            <span class="comment">//第一个词素加入</span></span><br><span class="line">            result.appendLiterals(originalSQL.substring(<span class="number">0</span>, each.getBeginPosition()));</span><br><span class="line">        &#125;</span><br><span class="line">        TableToken（t_order）、ItemToken(order_id)、GeneratedKeyToken(<span class="number">57</span>)</span><br><span class="line">        <span class="comment">//表名</span></span><br><span class="line">        <span class="keyword">if</span> (each <span class="keyword">instanceof</span> TableToken) &#123;</span><br><span class="line">            appendTableToken(result, (TableToken) each, count, sqlTokens);</span><br><span class="line">        <span class="comment">//ItemToken 如列名</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (each <span class="keyword">instanceof</span> ItemsToken) &#123;</span><br><span class="line">            appendItemsToken(result, (ItemsToken) each, count, sqlTokens);</span><br><span class="line">        <span class="comment">//limit 后面的rowCount、offset</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (each <span class="keyword">instanceof</span> RowCountToken) &#123;</span><br><span class="line">            appendLimitRowCount(result, (RowCountToken) each, count, sqlTokens, isRewriteLimit);</span><br><span class="line">          <span class="comment">//limit 后面的offset</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (each <span class="keyword">instanceof</span> OffsetToken) &#123;</span><br><span class="line">            appendLimitOffsetToken(result, (OffsetToken) each, count, sqlTokens, isRewriteLimit);</span><br><span class="line">          <span class="comment">//转换order</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (each <span class="keyword">instanceof</span> OrderByToken) &#123;</span><br><span class="line">            appendOrderByToken(result, count, sqlTokens);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">generateSQL</span><span class="params">(<span class="keyword">final</span> TableUnit tableUnit, <span class="keyword">final</span> SQLBuilder sqlBuilder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlBuilder.toSQL(getTableTokens(tableUnit));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据TableUnit转换逻辑表名和真实表名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getTableTokens</span><span class="params">(<span class="keyword">final</span> TableUnit tableUnit)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; tableTokens = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    tableTokens.put(tableUnit.getLogicTableName(), tableUnit.getActualTableName());</span><br><span class="line">    Optional&lt;BindingTableRule&gt; bindingTableRule = shardingRule.findBindingTableRule(tableUnit.getLogicTableName());</span><br><span class="line">    <span class="keyword">if</span> (bindingTableRule.isPresent()) &#123;</span><br><span class="line">        tableTokens.putAll(getBindingTableTokens(tableUnit, bindingTableRule.get()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tableTokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理自增键"><a href="#处理自增键" class="headerlink" title="处理自增键"></a>处理自增键</h2><h3 id="ParsingSQLRouter"><a href="#ParsingSQLRouter" class="headerlink" title="ParsingSQLRouter"></a>ParsingSQLRouter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processGeneratedKey</span><span class="params">(<span class="keyword">final</span> List&lt;Object&gt; parameters, <span class="keyword">final</span> InsertStatement insertStatement, <span class="keyword">final</span> SQLRouteResult sqlRouteResult)</span> </span>&#123;</span><br><span class="line">    GeneratedKey generatedKey = insertStatement.getGeneratedKey();</span><br><span class="line">    <span class="keyword">if</span> (parameters.isEmpty()) &#123;</span><br><span class="line">        sqlRouteResult.getGeneratedKeys().add(generatedKey.getValue());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameters.size() == generatedKey.getIndex()) &#123;</span><br><span class="line">        Number key = shardingRule.generateKey(insertStatement.getTables().getSingleTableName());</span><br><span class="line">        parameters.add(key);</span><br><span class="line">        setGeneratedKeys(sqlRouteResult, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (-<span class="number">1</span> != generatedKey.getIndex()) &#123;</span><br><span class="line">        setGeneratedKeys(sqlRouteResult, (Number) parameters.get(generatedKey.getIndex()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShardingRule-1"><a href="#ShardingRule-1" class="headerlink" title="ShardingRule"></a>ShardingRule</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Number <span class="title">generateKey</span><span class="params">(<span class="keyword">final</span> String logicTableName)</span> </span>&#123;</span><br><span class="line">    Optional&lt;TableRule&gt; tableRule = tryFindTableRule(logicTableName);</span><br><span class="line">    <span class="keyword">if</span> (!tableRule.isPresent()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ShardingJdbcException(<span class="string">&quot;Cannot find strategy for generate keys.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != tableRule.get().getKeyGenerator()) &#123;</span><br><span class="line">        <span class="keyword">return</span> tableRule.get().getKeyGenerator().generateKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> defaultKeyGenerator.generateKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyGenerator</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Generate key.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> generated key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Number <span class="title">generateKey</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharding-jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc源码解析-词法分析（三）</title>
      <link href="/hexo/post/87f178fd.html"/>
      <url>/hexo/post/87f178fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>先普及几个词汇</p><p>Lexer： 词法分析器。Lexical analyzer，简称Lexer</p><p>Literals ：字面量</p><p>Symbol： 词法符号</p><p>Dictionary： 字典</p><p>tokenize： 标记化</p><p>lexeme： 词素。词素是组成编程语言的最小的有意义的单元实体。生成的词素最后会组成一个token列表，每一个token都包含一个lexeme</p><p>Token: 标记。一个字符串，是构成<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>的最小单位。从输入字符流中生成标记的过程叫作<strong>标记化</strong>（tokenization），在这个过程中，词法分析器还会对标记进行分类。</p><h3 id="LexerEngine"><a href="#LexerEngine" class="headerlink" title="LexerEngine"></a>LexerEngine</h3><p>词法分析引擎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LexerEngine</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lexer lexer;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get input string.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> inputted string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lexer.getInput();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Analyse next token.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lexer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get current token.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> current token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Token <span class="title">getCurrentToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lexer.getCurrentToken();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳过括号内所有令牌,并返回括号内内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlStatement SQL statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> skipped string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">skipParentheses</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//&#x27;(&#x27;开头</span></span><br><span class="line">        <span class="keyword">if</span> (Symbol.LEFT_PAREN == lexer.getCurrentToken().getType()) &#123;</span><br><span class="line">            <span class="comment">//括号后的下标</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> beginPosition = lexer.getCurrentToken().getEndPosition();</span><br><span class="line">            <span class="comment">//&#x27;(&#x27;</span></span><br><span class="line">            result.append(Symbol.LEFT_PAREN.getLiterals());</span><br><span class="line">            <span class="comment">//接着读取</span></span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是&#x27;?&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> (equalAny(Symbol.QUESTION)) &#123;</span><br><span class="line">                    <span class="comment">//参数下标加1</span></span><br><span class="line">                    sqlStatement.increaseParametersIndex();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//结束或者&#x27;)&#x27;跳出</span></span><br><span class="line">                <span class="keyword">if</span> (Assist.END == lexer.getCurrentToken().getType() || (Symbol.RIGHT_PAREN == lexer.getCurrentToken().getType() &amp;&amp; <span class="number">0</span> == count)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//还是&#x27;(&#x27;记下层数</span></span><br><span class="line">                <span class="keyword">if</span> (Symbol.LEFT_PAREN == lexer.getCurrentToken().getType()) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                <span class="comment">//&#x27;)&#x27;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Symbol.RIGHT_PAREN == lexer.getCurrentToken().getType()) &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//接着读取</span></span><br><span class="line">                lexer.nextToken();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//括号里的都加进去</span></span><br><span class="line">            result.append(lexer.getInput().substring(beginPosition, lexer.getCurrentToken().getEndPosition()));</span><br><span class="line">            <span class="comment">//跳过&#x27;)&#x27;</span></span><br><span class="line">            lexer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Assert current token type should equals input token and go to next token type.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenType token type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">final</span> TokenType tokenType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lexer.getCurrentToken().getType() != tokenType) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingException(lexer, tokenType);</span><br><span class="line">        &#125;</span><br><span class="line">        lexer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adjust current token equals one of input tokens or not.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenTypes to be adjusted token types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> current token equals one of input tokens or not</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalAny</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TokenType each : tokenTypes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each == lexer.getCurrentToken().getType()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Skip current token if equals one of input tokens.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenTypes to be adjusted token types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> skipped current token or not</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">skipIfEqual</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (equalAny(tokenTypes)) &#123;</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Skip all input tokens.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenTypes to be skipped token types</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skipAll</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</span><br><span class="line">        Set&lt;TokenType&gt; tokenTypeSet = Sets.newHashSet(tokenTypes);</span><br><span class="line">        <span class="keyword">while</span> (tokenTypeSet.contains(lexer.getCurrentToken().getType())) &#123;</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Skip until one of input tokens.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenTypes to be skipped untiled token types</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skipUntil</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</span><br><span class="line">        Set&lt;TokenType&gt; tokenTypeSet = Sets.newHashSet(tokenTypes);</span><br><span class="line">        tokenTypeSet.add(Assist.END);</span><br><span class="line">        <span class="keyword">while</span> (!tokenTypeSet.contains(lexer.getCurrentToken().getType())) &#123;</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Throw unsupported exception if current token equals one of input tokens.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenTypes to be adjusted token types</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsupportedIfEqual</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (equalAny(tokenTypes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(lexer.getCurrentToken().getType());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Throw unsupported exception if current token not equals one of input tokens.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenTypes to be adjusted token types</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsupportedIfNotSkip</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!skipIfEqual(tokenTypes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(lexer.getCurrentToken().getType());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get database type.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> database type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DatabaseType <span class="title">getDatabaseType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lexer <span class="keyword">instanceof</span> MySQLLexer) &#123;</span><br><span class="line">            <span class="keyword">return</span> DatabaseType.MySQL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lexer <span class="keyword">instanceof</span> OracleLexer) &#123;</span><br><span class="line">            <span class="keyword">return</span> DatabaseType.Oracle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lexer <span class="keyword">instanceof</span> SQLServerLexer) &#123;</span><br><span class="line">            <span class="keyword">return</span> DatabaseType.SQLServer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lexer <span class="keyword">instanceof</span> PostgreSQLLexer) &#123;</span><br><span class="line">            <span class="keyword">return</span> DatabaseType.PostgreSQL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(String.format(<span class="string">&quot;Cannot support lexer class: %s&quot;</span>, lexer.getClass().getCanonicalName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lexer"><a href="#Lexer" class="headerlink" title="Lexer"></a>Lexer</h3><p><img src="https://user-images.githubusercontent.com/7789698/39862320-081c0a18-5476-11e8-8d52-2477519c9dd7.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lexer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//sql</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String input;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dictionary dictionary;</span><br><span class="line">    <span class="comment">//偏移量，从0开始</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> offset;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> Token currentToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Analyse next token.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">nextToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//跳过空白字符、注释</span></span><br><span class="line">      skipIgnoredToken();</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      <span class="comment">//判断变量，MySQLLexer是&#x27;@&#x27;开头</span></span><br><span class="line">      <span class="keyword">if</span> (isVariableBegin()) &#123;</span><br><span class="line">          <span class="comment">//扫描变量</span></span><br><span class="line">          currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanVariable();</span><br><span class="line">          <span class="comment">//mysql没有Nchar。sqlserver有。不详细展开，就是扫描nchar的</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNCharBegin()) &#123;</span><br><span class="line">          currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, ++offset).scanChars();</span><br><span class="line">          <span class="comment">//字母、&#x27;`&#x27;、&#x27;_&#x27;、&#x27;$&#x27; 开头的</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isIdentifierBegin()) &#123;</span><br><span class="line">          currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanIdentifier();</span><br><span class="line">          <span class="comment">//&#x27;0x&#x27;开头，十六进制</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isHexDecimalBegin()) &#123;</span><br><span class="line">          <span class="comment">//扫描十六进制</span></span><br><span class="line">          currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanHexDecimal();</span><br><span class="line">         <span class="comment">//数字开头、非标识符+&#x27;.&#x27;+数字、&quot;-.&quot;、&#x27;-&#x27;+数字</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNumberBegin()) &#123;</span><br><span class="line">          <span class="comment">//扫描数字</span></span><br><span class="line">          currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanNumber();</span><br><span class="line">          <span class="comment">//符号&#x27;(&#x27; 、&#x27;)&#x27; 、&#x27;[&#x27; 、 &#x27;]&#x27;、&#x27;&#123;&#x27;、&#x27;&#125;&#x27;、 &#x27;+&#x27; 、 &#x27;-&#x27; 、 &#x27;*&#x27; 、 &#x27;/&#x27; 、&#x27;%&#x27; 、 &#x27;^&#x27; 、&#x27;=&#x27;、 &#x27;&gt;&#x27; 、&#x27;&lt;&#x27; 、 &#x27;~&#x27; 、&#x27;!&#x27;、 &#x27;?&#x27;、 &#x27;&amp;&#x27; 、&#x27;|&#x27; 、&#x27;.&#x27;、&#x27;:&#x27; 、 &#x27;#&#x27;、 &#x27;,&#x27; 、 &#x27;;&#x27; </span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSymbolBegin()) &#123;</span><br><span class="line">          <span class="comment">//扫描符号</span></span><br><span class="line">          currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanSymbol();</span><br><span class="line">         <span class="comment">//  &#x27;\&#x27;&#x27; 或&#x27;\&quot;&#x27;开头的字符</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCharsBegin()) &#123;</span><br><span class="line">          <span class="comment">//扫描单引号&#x27;或双引号&quot;括起来的东西</span></span><br><span class="line">          currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanChars();</span><br><span class="line">          <span class="comment">//读完了</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isEnd()) &#123;</span><br><span class="line">          currentToken = <span class="keyword">new</span> Token(Assist.END, <span class="string">&quot;&quot;</span>, offset);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingException(<span class="keyword">this</span>, Assist.ERROR);</span><br><span class="line">      &#125;</span><br><span class="line">      offset = currentToken.getEndPosition();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>标识符开头：字母、’`’、’_’、’$’ 开头的</p><h4 id="skipIgnoredToken"><a href="#skipIgnoredToken" class="headerlink" title="skipIgnoredToken"></a>skipIgnoredToken</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skipIgnoredToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//跳过空白符</span></span><br><span class="line">      offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</span><br><span class="line">      <span class="comment">//MySQLLexer是  &#x27;/&#x27; == getCurrentChar(0) &amp;&amp; &#x27;*&#x27; == getCurrentChar(1) &amp;&amp; &#x27;!&#x27; == getCurrentChar(2)</span></span><br><span class="line">      <span class="comment">//注释开头</span></span><br><span class="line">      <span class="keyword">while</span> (isHintBegin()) &#123;</span><br><span class="line">          <span class="comment">//算到注释结束</span></span><br><span class="line">          offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipHint();</span><br><span class="line">          <span class="comment">//跳过空白符</span></span><br><span class="line">          offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//跳过单行注释、多行注释</span></span><br><span class="line">    <span class="comment">// &#x27;//&#x27;或&#x27;--&#x27;或&#x27;/*&#x27;开头</span></span><br><span class="line">      <span class="keyword">while</span> (isCommentBegin()) &#123;</span><br><span class="line">          offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipComment();</span><br><span class="line">          <span class="comment">//跳过空白符</span></span><br><span class="line">          offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h4 id="skipHint"><a href="#skipHint" class="headerlink" title="skipHint"></a>skipHint</h4><p>处理开头*/结束的东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">skipHint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//   HINT_BEGIN_SYMBOL_LENGTH = 3</span></span><br><span class="line">    <span class="keyword">return</span> untilCommentAndHintTerminateSign(HINT_BEGIN_SYMBOL_LENGTH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">untilCommentAndHintTerminateSign</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> beginSymbolLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = beginSymbolLength;</span><br><span class="line">    <span class="comment">//非 */</span></span><br><span class="line">        <span class="keyword">while</span> (!isMultipleLineCommentEnd(charAt(offset + length), charAt(offset + length + <span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="comment">//如果是EOI = &#x27;0x1A&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> (CharType.isEndOfInput(charAt(offset + length))) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnterminatedCharException(<span class="string">&quot;*/&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//offset加中间字符加*/的长度，COMMENT_AND_HINT_END_SYMBOL_LENGTH = 2</span></span><br><span class="line">        <span class="keyword">return</span> offset + length + COMMENT_AND_HINT_END_SYMBOL_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMultipleLineCommentEnd</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch, <span class="keyword">final</span> <span class="keyword">char</span> next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span> == ch &amp;&amp; <span class="string">&#x27;/&#x27;</span> == next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="skipComment"><a href="#skipComment" class="headerlink" title="skipComment"></a>skipComment</h4><p>处理注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">skipComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当前字符</span></span><br><span class="line">    <span class="keyword">char</span> current = charAt(offset);</span><br><span class="line">    <span class="comment">//下一个</span></span><br><span class="line">    <span class="keyword">char</span> next = charAt(offset + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 单行注释  &#x27;//&#x27; 或者&#x27;--&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (isSingleLineCommentBegin(current, next)) &#123;</span><br><span class="line">        <span class="comment">//跳过这行</span></span><br><span class="line">        <span class="keyword">return</span> skipSingleLineComment(COMMENT_BEGIN_SYMBOL_LENGTH);</span><br><span class="line">        <span class="comment">//一个&#x27;#&#x27; </span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;#&#x27;</span> == current) &#123;</span><br><span class="line">        <span class="comment">//跳过这行</span></span><br><span class="line">        <span class="keyword">return</span> skipSingleLineComment(MYSQL_SPECIAL_COMMENT_BEGIN_SYMBOL_LENGTH);</span><br><span class="line">        <span class="comment">//跳过多行注释</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isMultipleLineCommentBegin(current, next)) &#123;</span><br><span class="line">        <span class="keyword">return</span> skipMultiLineComment();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSingleLineCommentBegin</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch, <span class="keyword">final</span> <span class="keyword">char</span> next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span> == ch &amp;&amp; <span class="string">&#x27;/&#x27;</span> == next || <span class="string">&#x27;-&#x27;</span> == ch &amp;&amp; <span class="string">&#x27;-&#x27;</span> == next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">skipSingleLineComment</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> commentSymbolLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = commentSymbolLength;</span><br><span class="line">        <span class="comment">//非 EOI  = &#x27;0x1A&#x27;或&#x27;\n&#x27;换行</span></span><br><span class="line">        <span class="keyword">while</span> (!CharType.isEndOfInput(charAt(offset + length)) &amp;&amp; <span class="string">&#x27;\n&#x27;</span> != charAt(offset + length)) &#123;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> offset + length + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="scanVariable"><a href="#scanVariable" class="headerlink" title="scanVariable"></a>scanVariable</h4><p>处理变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanVariable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 第二个也是&#x27;@&#x27;  就是局部变量@@</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;@&#x27;</span> == charAt(offset + <span class="number">1</span>)) &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//变量的符号</span></span><br><span class="line">    <span class="keyword">while</span> (isVariableChar(charAt(offset + length))) &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.VARIABLE, input.substring(offset, offset + length), offset + length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVariableChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//变量标识符或者&#x27;.&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> isIdentifierChar(ch) || <span class="string">&#x27;.&#x27;</span> == ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIdentifierChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//字母、数字、&#x27;_&#x27;、&#x27;$&#x27;、&#x27;#&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> CharType.isAlphabet(ch) || CharType.isDigital(ch) || <span class="string">&#x27;_&#x27;</span> == ch || <span class="string">&#x27;$&#x27;</span> == ch || <span class="string">&#x27;#&#x27;</span> == ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="scanIdentifier"><a href="#scanIdentifier" class="headerlink" title="scanIdentifier"></a>scanIdentifier</h4><p>处理标识符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanIdentifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个字符是&#x27;`&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;`&#x27;</span> == charAt(offset)) &#123;</span><br><span class="line">        <span class="comment">//比如  &quot;`a`&quot; 就长度3</span></span><br><span class="line">        <span class="keyword">int</span> length = getLengthUntilTerminatedChar(<span class="string">&#x27;`&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.IDENTIFIER, input.substring(offset, offset + length), offset + length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//字母、数字、&#x27;_&#x27;、&#x27;$&#x27;、&#x27;#&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> (isIdentifierChar(charAt(offset + length))) &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出标识符</span></span><br><span class="line">    String literals = input.substring(offset, offset + length);</span><br><span class="line">    <span class="comment">//Order 或者 Group</span></span><br><span class="line">    <span class="keyword">if</span> (isAmbiguousIdentifier(literals)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(processAmbiguousIdentifier(offset + length, literals), literals, offset + length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 识别关键字，返回类型，不是关键字则使用IDENTIFIER类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Token(dictionary.findTokenType(literals, Literals.IDENTIFIER), literals, offset + length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLengthUntilTerminatedChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> terminatedChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">     <span class="comment">// 接下来不是 &#x27;`&#x27;或者连续两个&#x27;`&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> (terminatedChar != charAt(offset + length) || hasEscapeChar(terminatedChar, offset + length)) &#123;</span><br><span class="line">            <span class="comment">//一直匹配不到结束，写的sql有问题</span></span><br><span class="line">            <span class="keyword">if</span> (offset + length &gt;= input.length()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnterminatedCharException(terminatedChar);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//连续两个&#x27;`&#x27;的，往后再多走一位。走两位</span></span><br><span class="line">            <span class="keyword">if</span> (hasEscapeChar(terminatedChar, offset + length)) &#123;</span><br><span class="line">                length++;</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasEscapeChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> charIdentifier, <span class="keyword">final</span> <span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> charIdentifier == charAt(offset) &amp;&amp; charIdentifier == charAt(offset + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TokenType <span class="title">processAmbiguousIdentifier</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> offset, <span class="keyword">final</span> String literals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (CharType.isWhitespace(charAt(offset + i))) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DefaultKeyword.BY.name().equalsIgnoreCase(String.valueOf(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123;charAt(offset + i), charAt(offset + i + <span class="number">1</span>)&#125;))) &#123;</span><br><span class="line">            <span class="comment">//查找关键字类型GROUP或者Order</span></span><br><span class="line">            <span class="keyword">return</span> dictionary.findTokenType(literals);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Literals.IDENTIFIER;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="scanHexDecimal"><a href="#scanHexDecimal" class="headerlink" title="scanHexDecimal"></a>scanHexDecimal</h4><p>处理十六进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanHexDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = HEX_BEGIN_SYMBOL_LENGTH;</span><br><span class="line">    <span class="comment">//负数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;-&#x27;</span> == charAt(offset + length)) &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (isHex(charAt(offset + length))) &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.HEX, input.substring(offset, offset + length), offset + length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isHex</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;F&#x27;</span> || ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;f&#x27;</span> || CharType.isDigital(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scanNumber"><a href="#scanNumber" class="headerlink" title="scanNumber"></a>scanNumber</h4><p>处理数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//负数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;-&#x27;</span> == charAt(offset + length)) &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数字长度</span></span><br><span class="line">    length += getDigitalLength(offset + length);</span><br><span class="line">    <span class="keyword">boolean</span> isFloat = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//小数部分</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;.&#x27;</span> == charAt(offset + length)) &#123;</span><br><span class="line">        isFloat = <span class="keyword">true</span>;</span><br><span class="line">        length++;</span><br><span class="line">        length += getDigitalLength(offset + length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//科学技术法 &#x27;e&#x27;或&#x27;E&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (isScientificNotation(offset + length)) &#123;</span><br><span class="line">        isFloat = <span class="keyword">true</span>;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;+&#x27;</span> == charAt(offset + length) || <span class="string">&#x27;-&#x27;</span> == charAt(offset + length)) &#123;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        length += getDigitalLength(offset + length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&#x27;f&#x27;、&#x27;F&#x27;、&#x27;d&#x27;、&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (isBinaryNumber(offset + length)) &#123;</span><br><span class="line">        isFloat = <span class="keyword">true</span>;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Token(isFloat ? Literals.FLOAT : Literals.INT, input.substring(offset, offset + length), offset + length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scanSymbol"><a href="#scanSymbol" class="headerlink" title="scanSymbol"></a>scanSymbol</h4><p>处理符号包起来的</p><p>其中Symbol后面讲述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanSymbol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//跳过符号</span></span><br><span class="line">    <span class="keyword">while</span> (CharType.isSymbol(charAt(offset + length))) &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    String literals = input.substring(offset, offset + length);</span><br><span class="line">    Symbol symbol;</span><br><span class="line">    <span class="comment">//通过字面量查找词法符号.</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">null</span> == (symbol = Symbol.literalsOf(literals))) &#123;</span><br><span class="line">        literals = input.substring(offset, offset + --length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Token(symbol, literals, offset + length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scanChars"><a href="#scanChars" class="headerlink" title="scanChars"></a>scanChars</h4><p>处理单引号或双引号扩起来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanChars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scanChars(charAt(offset));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如&#x27;avv&#x27;、&quot;abb&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Token <span class="title">scanChars</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> terminatedChar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = getLengthUntilTerminatedChar(terminatedChar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.CHARS, input.substring(offset + <span class="number">1</span>, offset + length - <span class="number">1</span>), offset + length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>Token有三个参数：</p><ul><li>type(TokenType): INT, FLOAT, HEX, CHARS, IDENTIFIER, VARIABLE</li><li>literals(String): 字面量</li><li>endPosition(int): 字符结束的位置</li></ul><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><p>字典</p><p>  包含一个map，包含每个关键字，Keyword的实现类都是一些枚举常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//所有关键字</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Keyword&gt; tokens = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><p>比如MySQLLexer 实现的时候就是使用MySQLKeyword.values()作为构造参数，构造后填充tokens</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">(<span class="keyword">final</span> Keyword... dialectKeywords)</span> </span>&#123;</span><br><span class="line">        fill(dialectKeywords);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">final</span> Keyword... dialectKeywords)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (DefaultKeyword each : DefaultKeyword.values()) &#123;</span><br><span class="line">            tokens.put(each.name(), each);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Keyword each : dialectKeywords) &#123;</span><br><span class="line">            tokens.put(each.toString(), each);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/39878798-d15fb552-54ab-11e8-9111-6bd07a66fcbc.png" alt="image"></p><p>下面这两个方法用来进行词法分析的时候根据字典识别出类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TokenType <span class="title">findTokenType</span><span class="params">(<span class="keyword">final</span> String literals, <span class="keyword">final</span> TokenType defaultTokenType)</span> </span>&#123;</span><br><span class="line">    String key = <span class="keyword">null</span> == literals ? <span class="keyword">null</span> : literals.toUpperCase();</span><br><span class="line">    <span class="keyword">return</span> tokens.containsKey(key) ? tokens.get(key) : defaultTokenType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TokenType <span class="title">findTokenType</span><span class="params">(<span class="keyword">final</span> String literals)</span> </span>&#123;</span><br><span class="line">    String key = <span class="keyword">null</span> == literals ? <span class="keyword">null</span> : literals.toUpperCase();</span><br><span class="line">    <span class="keyword">if</span> (tokens.containsKey(key)) &#123;</span><br><span class="line">        <span class="keyword">return</span> tokens.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>词法符号</p><p>包含一个map，包含每个符号，Symbol的都是一些枚举常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Symbol&gt; symbols = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">128</span>);</span><br></pre></td></tr></table></figure><p>获取符号具体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Symbol <span class="title">literalsOf</span><span class="params">(<span class="keyword">final</span> String literals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> symbols.get(literals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharding-jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc源码解析-读写分离（二）</title>
      <link href="/hexo/post/5cbcca12.html"/>
      <url>/hexo/post/5cbcca12.html</url>
      
        <content type="html"><![CDATA[<p>调用流程</p><p><img src="https://user-images.githubusercontent.com/7789698/39745015-a9f08048-52d8-11e8-8a74-9d504e46f3a8.jpg" alt="sequencediagram1"></p><p>执行sql的时候，sql根据词法分析出sql的类型从而判断走主库还是从库</p><h3 id="MasterSlaveDataSource"><a href="#MasterSlaveDataSource" class="headerlink" title="MasterSlaveDataSource"></a>MasterSlaveDataSource</h3><p>从<code>MasterSlaveDataSourceFactory.createDataSource(createDataSourceMap(), masterSlaveRuleConfig)</code>我们可以找到读写分离实现最重要的在于MasterSlaveDataSource这个数据源的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterSlaveDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractDataSourceAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数据源映射</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, DataSource&gt; dataSourceMap;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> MasterSlaveRule masterSlaveRule;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MasterSlaveDataSource</span><span class="params">(<span class="keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap, <span class="keyword">final</span> MasterSlaveRuleConfiguration masterSlaveRuleConfig, <span class="keyword">final</span> Map&lt;String, Object&gt; configMap)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(getAllDataSources(dataSourceMap, masterSlaveRuleConfig.getMasterDataSourceName(), masterSlaveRuleConfig.getSlaveDataSourceNames()));</span><br><span class="line">        <span class="keyword">this</span>.dataSourceMap = dataSourceMap;</span><br><span class="line">        <span class="keyword">this</span>.masterSlaveRule = <span class="keyword">new</span> MasterSlaveRule(masterSlaveRuleConfig);</span><br><span class="line">        <span class="keyword">if</span> (!configMap.isEmpty()) &#123;</span><br><span class="line">            ConfigMapContext.getInstance().getMasterSlaveConfig().putAll(configMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Collection&lt;DataSource&gt; <span class="title">getAllDataSources</span><span class="params">(<span class="keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap, <span class="keyword">final</span> String masterDataSourceName, <span class="keyword">final</span> Collection&lt;String&gt; slaveDataSourceNames)</span> </span>&#123;</span><br><span class="line">        Collection&lt;DataSource&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        result.add(dataSourceMap.get(masterDataSourceName));</span><br><span class="line">        <span class="keyword">for</span> (String each : slaveDataSourceNames) &#123;</span><br><span class="line">            result.add(dataSourceMap.get(each));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get map of all actual data source name and all actual data sources.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map of all actual data source name and all actual data sources</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, DataSource&gt; <span class="title">getAllDataSources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, DataSource&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(masterSlaveRule.getSlaveDataSourceNames().size() + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        result.put(masterSlaveRule.getMasterDataSourceName(), dataSourceMap.get(masterSlaveRule.getMasterDataSourceName()));</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRule.getSlaveDataSourceNames()) &#123;</span><br><span class="line">            result.put(each, dataSourceMap.get(each));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Renew master-slave data source.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSourceMap data source map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> masterSlaveRuleConfig new master-slave rule configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">renew</span><span class="params">(<span class="keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap, <span class="keyword">final</span> MasterSlaveRuleConfiguration masterSlaveRuleConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSourceMap = dataSourceMap;</span><br><span class="line">        <span class="keyword">this</span>.masterSlaveRule = <span class="keyword">new</span> MasterSlaveRule(masterSlaveRuleConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MasterSlaveConnection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MasterSlaveConnection(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MasterSlaveConnection"><a href="#MasterSlaveConnection" class="headerlink" title="MasterSlaveConnection"></a>MasterSlaveConnection</h3><p>基本上没啥好看的直接都是跟后面两个相关</p><h3 id="MasterSlaveStatement"><a href="#MasterSlaveStatement" class="headerlink" title="MasterSlaveStatement"></a>MasterSlaveStatement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterSlaveStatement</span> <span class="keyword">extends</span> <span class="title">AbstractStatementAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MasterSlaveConnection connection;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MasterSlaveRouter masterSlaveRouter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> resultSetType;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> resultSetConcurrency;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> resultSetHoldability;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;Statement&gt; routedStatements = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MasterSlaveStatement</span><span class="params">(<span class="keyword">final</span> MasterSlaveConnection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(connection, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MasterSlaveStatement</span><span class="params">(<span class="keyword">final</span> MasterSlaveConnection connection, <span class="keyword">final</span> <span class="keyword">int</span> resultSetType, <span class="keyword">final</span> <span class="keyword">int</span> resultSetConcurrency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(connection, resultSetType, resultSetConcurrency, ResultSet.HOLD_CURSORS_OVER_COMMIT);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MasterSlaveStatement</span><span class="params">(<span class="keyword">final</span> MasterSlaveConnection connection, <span class="keyword">final</span> <span class="keyword">int</span> resultSetType, <span class="keyword">final</span> <span class="keyword">int</span> resultSetConcurrency, <span class="keyword">final</span> <span class="keyword">int</span> resultSetHoldability)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Statement.class);</span><br><span class="line">        <span class="keyword">this</span>.connection = connection;</span><br><span class="line">        masterSlaveRouter = <span class="keyword">new</span> MasterSlaveRouter(connection.getMasterSlaveDataSource().getMasterSlaveRule());</span><br><span class="line">        <span class="keyword">this</span>.resultSetType = resultSetType;</span><br><span class="line">        <span class="keyword">this</span>.resultSetConcurrency = resultSetConcurrency;</span><br><span class="line">        <span class="keyword">this</span>.resultSetHoldability = resultSetHoldability;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">executeQuery</span><span class="params">(<span class="keyword">final</span> String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        Collection&lt;String&gt; dataSourceNames = masterSlaveRouter.route(sqlStatement.getType());</span><br><span class="line">        Preconditions.checkState(<span class="number">1</span> == dataSourceNames.size(), <span class="string">&quot;Cannot support executeQuery for DML or DDL&quot;</span>);</span><br><span class="line">        Statement statement = connection.getConnection(dataSourceNames.iterator().next()).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">        routedStatements.add(statement);</span><br><span class="line">        <span class="keyword">return</span> statement.executeQuery(sql);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(<span class="keyword">final</span> String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result += statement.executeUpdate(sql);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> <span class="keyword">int</span> autoGeneratedKeys)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result += statement.executeUpdate(sql, autoGeneratedKeys);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> <span class="keyword">int</span>[] columnIndexes)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result += statement.executeUpdate(sql, columnIndexes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> String[] columnNames)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result += statement.executeUpdate(sql, columnNames);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//根据sql语句判断出是哪种SQLStatement</span></span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result = statement.execute(sql);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> <span class="keyword">int</span> autoGeneratedKeys)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result = statement.execute(sql, autoGeneratedKeys);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> <span class="keyword">int</span>[] columnIndexes)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result = statement.execute(sql, columnIndexes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> String[] columnNames)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        SQLStatement sqlStatement = <span class="keyword">new</span> SQLJudgeEngine(sql).judge();</span><br><span class="line">        <span class="keyword">for</span> (String each : masterSlaveRouter.route(sqlStatement.getType())) &#123;</span><br><span class="line">            Statement statement = connection.getConnection(each).createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);</span><br><span class="line">            routedStatements.add(statement);</span><br><span class="line">            result = statement.execute(sql, columnNames);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">getGeneratedKeys</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Preconditions.checkState(<span class="number">1</span> == routedStatements.size());</span><br><span class="line">        <span class="keyword">return</span> routedStatements.iterator().next().getGeneratedKeys();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">getResultSet</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Preconditions.checkState(<span class="number">1</span> == routedStatements.size());</span><br><span class="line">        <span class="keyword">return</span> routedStatements.iterator().next().getResultSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MasterSlaveRouter（4月份新加的）"><a href="#MasterSlaveRouter（4月份新加的）" class="headerlink" title="MasterSlaveRouter（4月份新加的）"></a>MasterSlaveRouter（4月份新加的）</h3><p>根据sql类型判断主从</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterSlaveRouter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MasterSlaveRule masterSlaveRule;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Route Master slave.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlType SQL type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// TODO for multiple masters may return more than one data source</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">route</span><span class="params">(<span class="keyword">final</span> SQLType sqlType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMasterRoute(sqlType)) &#123;</span><br><span class="line">            MasterVisitedManager.setMasterVisited();</span><br><span class="line">            <span class="keyword">return</span> Collections.singletonList(masterSlaveRule.getMasterDataSourceName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.singletonList(masterSlaveRule.getLoadBalanceAlgorithm().getDataSource(</span><br><span class="line">                    masterSlaveRule.getName(), masterSlaveRule.getMasterDataSourceName(), <span class="keyword">new</span> ArrayList&lt;&gt;(masterSlaveRule.getSlaveDataSourceNames())));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMasterRoute</span><span class="params">(<span class="keyword">final</span> SQLType sqlType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.非SELECT语句2.判断过放到ThreadLocal里3.通过Hint管理器设置强制masterRouteOnly</span></span><br><span class="line">        <span class="keyword">return</span> SQLType.DQL != sqlType || MasterVisitedManager.isMasterVisited() || HintManagerHolder.isMasterRouteOnly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQLJudgeEngine"><a href="#SQLJudgeEngine" class="headerlink" title="SQLJudgeEngine"></a>SQLJudgeEngine</h3><p>通过词法分析分析出sql的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLJudgeEngine</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String sql;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * judge SQL Type only.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SQL statement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SQLStatement <span class="title">judge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LexerEngine lexerEngine = LexerEngineFactory.newInstance(DatabaseType.MySQL, sql);</span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//获取token的type</span></span><br><span class="line">            TokenType tokenType = lexerEngine.getCurrentToken().getType();</span><br><span class="line">            <span class="keyword">if</span> (tokenType <span class="keyword">instanceof</span> Keyword) &#123;</span><br><span class="line">                <span class="comment">//select</span></span><br><span class="line">                <span class="keyword">if</span> (isDQL(tokenType)) &#123;</span><br><span class="line">                    <span class="comment">//SelectStatement</span></span><br><span class="line">                    <span class="keyword">return</span> getDQLStatement();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//INSERT、UPDATE、DELETE</span></span><br><span class="line">                <span class="keyword">if</span> (isDML(tokenType)) &#123;</span><br><span class="line">                    <span class="comment">//InsertStatement 或者DMLStatement</span></span><br><span class="line">                    <span class="keyword">return</span> getDMLStatement(tokenType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//CREATE、ALTER、DROP、TRUNCATE</span></span><br><span class="line">                <span class="keyword">if</span> (isDDL(tokenType)) &#123;</span><br><span class="line">                    <span class="comment">//DDLStatement</span></span><br><span class="line">                    <span class="keyword">return</span> getDDLStatement();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//SET、COMMIT、ROLLBACK、SAVEPOINT、BEGIN</span></span><br><span class="line">                <span class="keyword">if</span> (isTCL(tokenType)) &#123;</span><br><span class="line">                    <span class="comment">//TCLStatement</span></span><br><span class="line">                    <span class="keyword">return</span> getTCLStatement();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//USE、DESC、DESCRIBE、SHOW</span></span><br><span class="line">                <span class="keyword">if</span> (isDAL(tokenType)) &#123;</span><br><span class="line">                    <span class="comment">//UseStatement或DescribeStatement或ShowxxxStatement</span></span><br><span class="line">                    <span class="keyword">return</span> getDALStatement(tokenType, lexerEngine);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tokenType <span class="keyword">instanceof</span> Assist &amp;&amp; Assist.END == tokenType) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingException(<span class="string">&quot;Unsupported SQL statement: [%s]&quot;</span>, sql);</span><br><span class="line">            &#125;</span><br><span class="line">            lexerEngine.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDAL</span><span class="params">(<span class="keyword">final</span> TokenType tokenType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DefaultKeyword.USE == tokenType || DefaultKeyword.DESC == tokenType || MySQLKeyword.DESCRIBE == tokenType || MySQLKeyword.SHOW == tokenType;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> SQLStatement <span class="title">getDALStatement</span><span class="params">(<span class="keyword">final</span> TokenType tokenType, <span class="keyword">final</span> LexerEngine lexerEngine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DefaultKeyword.USE == tokenType) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UseStatement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DefaultKeyword.DESC == tokenType || MySQLKeyword.DESCRIBE == tokenType) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DescribeStatement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getShowStatement(lexerEngine);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> SQLStatement <span class="title">getShowStatement</span><span class="params">(<span class="keyword">final</span> LexerEngine lexerEngine)</span> </span>&#123;</span><br><span class="line">        lexerEngine.nextToken();</span><br><span class="line">        <span class="keyword">if</span> (MySQLKeyword.DATABASES == lexerEngine.getCurrentToken().getType()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ShowDatabasesStatement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (MySQLKeyword.TABLES == lexerEngine.getCurrentToken().getType()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ShowTablesStatement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (MySQLKeyword.COLUMNS == lexerEngine.getCurrentToken().getType()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ShowColumnsStatement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShowOtherStatement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LexerEngine"><a href="#LexerEngine" class="headerlink" title="LexerEngine"></a>LexerEngine</h3><p>LexerEngineFactory会根据数据库来选择适合的分词器</p><p>mysql对应MySQLLexer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LexerEngineFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create lexical analysis engine instance.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbType database type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql SQL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> lexical analysis engine instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LexerEngine <span class="title">newInstance</span><span class="params">(<span class="keyword">final</span> DatabaseType dbType, <span class="keyword">final</span> String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (dbType) &#123;</span><br><span class="line">            <span class="keyword">case</span> H2:</span><br><span class="line">            <span class="keyword">case</span> MySQL:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LexerEngine(<span class="keyword">new</span> MySQLLexer(sql));</span><br><span class="line">            <span class="keyword">case</span> Oracle:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LexerEngine(<span class="keyword">new</span> OracleLexer(sql));</span><br><span class="line">            <span class="keyword">case</span> SQLServer:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LexerEngine(<span class="keyword">new</span> SQLServerLexer(sql));</span><br><span class="line">            <span class="keyword">case</span> PostgreSQL:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LexerEngine(<span class="keyword">new</span> PostgreSQLLexer(sql));</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(String.format(<span class="string">&quot;Cannot support database [%s].&quot;</span>, dbType));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于词法分析，下一章单独分析</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharding-jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc源码解析-JDBC实现（一）</title>
      <link href="/hexo/post/b792e0dc.html"/>
      <url>/hexo/post/b792e0dc.html</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC接口"><a href="#JDBC接口" class="headerlink" title="JDBC接口"></a>JDBC接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSource</span>  <span class="keyword">extends</span> <span class="title">CommonDataSource</span>, <span class="title">Wrapper</span> </span>&#123;</span><br><span class="line">  <span class="comment">//建立和数据源的连接</span></span><br><span class="line">  <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/39674488-3df76816-517f-11e8-97b6-343b9894a332.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Connection</span>  <span class="keyword">extends</span> <span class="title">Wrapper</span>, <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Statement对象，可以用来发送sql语句</span></span><br><span class="line">    <span class="function">Statement <span class="title">createStatement</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个PreparedStatement对象，发送参数化的sql语句。sql语句将会被预编译存储在对象</span></span><br><span class="line">    <span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一个CallableStatement对象，发送调用存储过程语句</span></span><br><span class="line">    <span class="function">CallableStatement <span class="title">prepareCall</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将给定的SQL语句转换成系统的原生SQL语法</span></span><br><span class="line">    <span class="function">String <span class="title">nativeSQL</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置自动提交参数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">getAutoCommit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送commit请求</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送rollback请求</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不等到连接自动释放，马上关闭连接</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库元数据</span></span><br><span class="line">    <span class="function">DatabaseMetaData <span class="title">getMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置只读</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setReadOnly</span><span class="params">(<span class="keyword">boolean</span> readOnly)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置catalog（数据库名）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCatalog</span><span class="params">(String catalog)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getCatalog</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A constant indicating that transactions are not supported.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> TRANSACTION_NONE             = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读未提交级别</span></span><br><span class="line">    <span class="keyword">int</span> TRANSACTION_READ_UNCOMMITTED = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读提交级别rc</span></span><br><span class="line">    <span class="keyword">int</span> TRANSACTION_READ_COMMITTED   = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可重复读rr</span></span><br><span class="line">    <span class="keyword">int</span> TRANSACTION_REPEATABLE_READ  = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//串行化</span></span><br><span class="line">    <span class="keyword">int</span> TRANSACTION_SERIALIZABLE     = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置连接的事务隔离级别</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTransactionIsolation</span><span class="params">(<span class="keyword">int</span> level)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTransactionIsolation</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取此 Connection 对象上的调用报告的第一个警告。如果有多个警告，则后续警告将被链接到第一个警告，可以通过对之前获得的警告调用 SQLWarning.getNextWarning 方法获取。</span></span><br><span class="line">    <span class="function">SQLWarning <span class="title">getWarnings</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除为此 Connection 对象报告的所有警告。调用此方法后，在为此 Connection 对象报告新的警告前，getWarnings 方法将返回 null。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearWarnings</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------JDBC 2.0-----------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个 Statement 对象，该对象将生成具有给定类型和并发性的 ResultSet 对象。此方法与上述 createStatement 方法相同，但它允许重写默认结果集类型和并发性。</span></span><br><span class="line">    <span class="comment">//resultSetType - 结果集类型，它是 ResultSet.TYPE_FORWARD_ONLY、ResultSet.TYPE_SCROLL_INSENSITIVE 或 ResultSet.TYPE_SCROLL_SENSITIVE 之一</span></span><br><span class="line">    <span class="comment">//resultSetConcurrency - 并发类型；它是 ResultSet.CONCUR_READ_ONLY 或 ResultSet.CONCUR_UPDATABLE 之一</span></span><br><span class="line">    <span class="function">Statement <span class="title">createStatement</span><span class="params">(<span class="keyword">int</span> resultSetType, <span class="keyword">int</span> resultSetConcurrency)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个 PreparedStatement 对象，该对象将生成具有给定类型和并发性的 ResultSet 对象。此方法与上述 prepareStatement 方法相同，但它允许重写默认结果集类型和并发性。</span></span><br><span class="line"><span class="comment">//resultSetType - 结果集类型，它是 ResultSet.TYPE_FORWARD_ONLY、ResultSet.TYPE_SCROLL_INSENSITIVE 或 ResultSet.TYPE_SCROLL_SENSITIVE 之一</span></span><br><span class="line"><span class="comment">//resultSetConcurrency - 并发类型，它是 ResultSet.CONCUR_READ_ONLY 或 ResultSet.CONCUR_UPDATABLE 之一</span></span><br><span class="line">    <span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">int</span> resultSetConcurrency)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">CallableStatement <span class="title">prepareCall</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="keyword">int</span> resultSetConcurrency)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    java.util.Map&lt;String,Class&lt;?&gt;&gt; getTypeMap() <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTypeMap</span><span class="params">(java.util.Map&lt;String,Class&lt;?&gt;&gt; map)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------JDBC 3.0-----------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHoldability</span><span class="params">(<span class="keyword">int</span> holdability)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHoldability</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有时候一个事务可能是一组复杂的语句，因此可能想要回滚到事务中某个特殊的点。JDBC Savepoint帮我们在事务中创建检查点（checkpoint），这样就可以回滚到指定点。当事务提交或者整个事务回滚后，为事务产生的任何保存点都会自动释放并变为无效。把事务回滚到一个保存点，会使其他所有保存点自动释放并变为无效。</span></span><br><span class="line">    <span class="function">Savepoint <span class="title">setSavepoint</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Savepoint <span class="title">setSavepoint</span><span class="params">(String name)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚到检查点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(Savepoint savepoint)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除检查点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">releaseSavepoint</span><span class="params">(Savepoint savepoint)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Statement <span class="title">createStatement</span><span class="params">(<span class="keyword">int</span> resultSetType, <span class="keyword">int</span> resultSetConcurrency,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> resultSetHoldability)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">int</span> resultSetConcurrency, <span class="keyword">int</span> resultSetHoldability)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">CallableStatement <span class="title">prepareCall</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="keyword">int</span> resultSetConcurrency,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="keyword">int</span> resultSetHoldability)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//autoGeneratedKeys - 标志是否自增key应该返回Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS</span></span><br><span class="line">    <span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> autoGeneratedKeys)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//columnIndexes - 列下标数组指示插入行哪些列应该返回</span></span><br><span class="line">    <span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> columnIndexes[])</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, String columnNames[])</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Clob <span class="title">createClob</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Blob <span class="title">createBlob</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">NClob <span class="title">createNClob</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SQLXML <span class="title">createSQLXML</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">         <span class="function"><span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> timeout)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">setClientInfo</span><span class="params">(String name, String value)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SQLClientInfoException</span>;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">setClientInfo</span><span class="params">(Properties properties)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SQLClientInfoException</span>;</span><br><span class="line"></span><br><span class="line">         <span class="function">String <span class="title">getClientInfo</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">         <span class="function">Properties <span class="title">getClientInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="function">Array <span class="title">createArrayOf</span><span class="params">(String typeName, Object[] elements)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">SQLException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="function">Struct <span class="title">createStruct</span><span class="params">(String typeName, Object[] attributes)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//--------------------------JDBC 4.1 -----------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//schema</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSchema</span><span class="params">(String schema)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getSchema</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">abort</span><span class="params">(Executor executor)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNetworkTimeout</span><span class="params">(Executor executor, <span class="keyword">int</span> milliseconds)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNetworkTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/39674502-7550a67e-517f-11e8-9f11-f925695e2111.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Statement</span> <span class="keyword">extends</span> <span class="title">Wrapper</span>, <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句返回一个ResultSet</span></span><br><span class="line">    <span class="function">ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行一个增删改语句，或者没返回值的ddl语句。返回更新行数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回列字符最大字节或二进制最大字节，0表示没有限制</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaxFieldSize</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMaxFieldSize</span><span class="params">(<span class="keyword">int</span> max)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回最大行数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaxRows</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMaxRows</span><span class="params">(<span class="keyword">int</span> max)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true以允许对转义处理。 否则为 false</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEscapeProcessing</span><span class="params">(<span class="keyword">boolean</span> enable)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回语句的等待超时时间，0表示一直等待</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getQueryTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setQueryTimeout</span><span class="params">(<span class="keyword">int</span> seconds)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SQLWarning <span class="title">getWarnings</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearWarnings</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置游标名</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCursorName</span><span class="params">(String name)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------- Multiple Results --------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回true代表是一个ResultSet对象，false无返回或者返回的是更新行数</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResultSet <span class="title">getResultSet</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getUpdateCount</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无返回：((stmt.getMoreResults() == false) &amp;&amp; (stmt.getUpdateCount() == -1))</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">getMoreResults</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------JDBC 2.0-----------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ResultSet.FETCH_FORWARD、ResultSet.FETCH_REVERSE、ResultSet.FETCH_UNKNOWN</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFetchDirection</span><span class="params">(<span class="keyword">int</span> direction)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFetchDirection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//游标拿的行数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFetchSize</span><span class="params">(<span class="keyword">int</span> rows)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFetchSize</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ResultSet.CONCUR_READ_ONLY、ResultSet.CONCUR_UPDATABLE</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getResultSetConcurrency</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ResultSet.TYPE_FORWARD_ONLY、ResultSet.TYPE_SCROLL_INSENSITIVE、ResultSet.TYPE_SCROLL_SENSITIVE</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getResultSetType</span><span class="params">()</span>  <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加sql语句，executeBatch将批量执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBatch</span><span class="params">( String sql )</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearBatch</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量执行返回每一句成功行数</span></span><br><span class="line">    <span class="keyword">int</span>[] executeBatch() <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span>  <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//--------------------------JDBC 3.0-----------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant indicating that the current &lt;code&gt;ResultSet&lt;/code&gt; object</span></span><br><span class="line"><span class="comment">     * should be closed when calling &lt;code&gt;getMoreResults&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> CLOSE_CURRENT_RESULT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant indicating that the current &lt;code&gt;ResultSet&lt;/code&gt; object</span></span><br><span class="line"><span class="comment">     * should not be closed when calling &lt;code&gt;getMoreResults&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> KEEP_CURRENT_RESULT = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant indicating that all &lt;code&gt;ResultSet&lt;/code&gt; objects that</span></span><br><span class="line"><span class="comment">     * have previously been kept open should be closed when calling</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;getMoreResults&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> CLOSE_ALL_RESULTS = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant indicating that a batch statement executed successfully</span></span><br><span class="line"><span class="comment">     * but that no count of the number of rows it affected is available.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> SUCCESS_NO_INFO = -<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant indicating that an error occurred while executing a</span></span><br><span class="line"><span class="comment">     * batch statement.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> EXECUTE_FAILED = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant indicating that generated keys should be made</span></span><br><span class="line"><span class="comment">     * available for retrieval.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> RETURN_GENERATED_KEYS = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant indicating that generated keys should not be made</span></span><br><span class="line"><span class="comment">     * available for retrieval.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> NO_GENERATED_KEYS = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Statement.CLOSE_CURRENT_RESULT、Statement.KEEP_CURRENT_RESULT、Statement.CLOSE_ALL_RESULTS</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">getMoreResults</span><span class="params">(<span class="keyword">int</span> current)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取自增key</span></span><br><span class="line">    <span class="function">ResultSet <span class="title">getGeneratedKeys</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//update，Statement.RETURN_GENERATED_KEYS、Statement.NO_GENERATED_KEY</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql, <span class="keyword">int</span> autoGeneratedKeys)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql, <span class="keyword">int</span> columnIndexes[])</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql, String columnNames[])</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Statement.RETURN_GENERATED_KEYS、Statement.NO_GENERATED_KEY</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql, <span class="keyword">int</span> autoGeneratedKeys)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参数</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql, <span class="keyword">int</span> columnIndexes[])</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql, String columnNames[])</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getResultSetHoldability</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setPoolable</span><span class="params">(<span class="keyword">boolean</span> poolable)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isPoolable</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/39674533-f0594a88-517f-11e8-8fc4-568fb50f671f.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PreparedStatement</span> <span class="keyword">extends</span> <span class="title">Statement</span> </span>&#123;</span><br><span class="line">    <span class="function">ResultSet <span class="title">executeQuery</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setxxx</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearParameters</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObject</span><span class="params">(<span class="keyword">int</span> parameterIndex, Object x, <span class="keyword">int</span> targetSqlType)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObject</span><span class="params">(<span class="keyword">int</span> parameterIndex, Object x)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------JDBC 2.0-----------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBatch</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setxxxx</span></span><br><span class="line"></span><br><span class="line">    <span class="function">ResultSetMetaData <span class="title">getMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------- JDBC 3.0 -----------------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setURL</span><span class="params">(<span class="keyword">int</span> parameterIndex, java.net.URL x)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParameterMetaData <span class="title">getParameterMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------- JDBC 4.0 -----------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRowId</span><span class="params">(<span class="keyword">int</span> parameterIndex, RowId x)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//setxxx</span></span><br><span class="line">    <span class="comment">//-----</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/39674527-dd1cb2c0-517f-11e8-8f7f-65fe642ddd39.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/39683937-1a735c1c-51eb-11e8-8701-b9e984d585b7.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此接口描述访问哪些由代理代表的包装资源的标准机制，允许对资源代理的直接访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Wrapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回一个对象，该对象实现给定接口，以允许访问非标准方法或代理未公开的标准方法</span></span><br><span class="line">        &lt;T&gt; <span class="function">T <span class="title">unwrap</span><span class="params">(java.lang.Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果调用此方法的对象实现接口参数，或者是实现接口参数的对象的直接或间接包装器，则返回 true</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isWrapperFor</span><span class="params">(java.lang.Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unsupported包"><a href="#unsupported包" class="headerlink" title="unsupported包"></a>unsupported包</h2><p>sharding-jdbc-core/java.io.shardingjdbc.core.jdbc.unsupported下都是一些抽象类，对不支持的方法返回SQLFeatureNotSupportedException</p><p><img src="https://user-images.githubusercontent.com/7789698/39684009-8b8f4ae6-51eb-11e8-9e67-949bb46b54d7.png" alt="image"></p><h2 id="adapter包"><a href="#adapter包" class="headerlink" title="adapter包"></a>adapter包</h2><p>sharding-jdbc-core/java.io.shardingjdbc.core.jdbc.adapter里面都是一些适配类</p><h3 id="WrapperAdapter"><a href="#WrapperAdapter" class="headerlink" title="WrapperAdapter"></a>WrapperAdapter</h3><p>实现wrapper接口unwrap和isWrapperFor。另外提供给子类recordMethodInvocation、replayMethodsInvocation、throwSQLExceptionIfNecessary</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperAdapter</span> <span class="keyword">implements</span> <span class="title">Wrapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;JdbcMethodInvocation&gt; jdbcMethodInvocations = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">T <span class="title">unwrap</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isWrapperFor(iface)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(String.format(<span class="string">&quot;[%s] cannot be unwrapped as [%s]&quot;</span>, getClass().getName(), iface.getName()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isWrapperFor</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; iface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iface.isInstance(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录方法调用.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass 目标类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName 方法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argumentTypes 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arguments 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">recordMethodInvocation</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; targetClass, <span class="keyword">final</span> String methodName, <span class="keyword">final</span> Class&lt;?&gt;[] argumentTypes, <span class="keyword">final</span> Object[] arguments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jdbcMethodInvocations.add(<span class="keyword">new</span> JdbcMethodInvocation(targetClass.getMethod(methodName, argumentTypes), arguments));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ShardingJdbcException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回放记录的方法调用.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">replayMethodsInvocation</span><span class="params">(<span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (JdbcMethodInvocation each : jdbcMethodInvocations) &#123;</span><br><span class="line">            each.invoke(target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">throwSQLExceptionIfNecessary</span><span class="params">(<span class="keyword">final</span> Collection&lt;SQLException&gt; exceptions)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exceptions.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SQLException ex = <span class="keyword">new</span> SQLException();</span><br><span class="line">        <span class="keyword">for</span> (SQLException each : exceptions) &#123;</span><br><span class="line">            ex.setNextException(each);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JdbcMethodInvocation"><a href="#JdbcMethodInvocation" class="headerlink" title="JdbcMethodInvocation"></a>JdbcMethodInvocation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcMethodInvocation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] arguments;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoke JDBC method.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target target object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method.invoke(target, arguments);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IllegalAccessException | InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ShardingJdbcException(<span class="string">&quot;Invoke jdbc method exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractDataSourceAdapter"><a href="#AbstractDataSourceAdapter" class="headerlink" title="AbstractDataSourceAdapter"></a>AbstractDataSourceAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDataSourceAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractUnsupportedOperationDataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatabaseType databaseType;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> PrintWriter logWriter = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractDataSourceAdapter</span><span class="params">(<span class="keyword">final</span> Collection&lt;DataSource&gt; dataSources)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        databaseType = getDatabaseType(dataSources);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DatabaseType <span class="title">getDatabaseType</span><span class="params">(<span class="keyword">final</span> Collection&lt;DataSource&gt; dataSources)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DatabaseType result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (DataSource each : dataSources) &#123;</span><br><span class="line">            DatabaseType databaseType = getDatabaseType(each);</span><br><span class="line">            Preconditions.checkState(<span class="keyword">null</span> == result || result.equals(databaseType), String.format(<span class="string">&quot;Database type inconsistent with &#x27;%s&#x27; and &#x27;%s&#x27;&quot;</span>, result, databaseType));</span><br><span class="line">            result = databaseType;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> DatabaseType <span class="title">getDatabaseType</span><span class="params">(<span class="keyword">final</span> DataSource dataSource)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource <span class="keyword">instanceof</span> AbstractDataSourceAdapter) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((AbstractDataSourceAdapter) dataSource).databaseType;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = dataSource.getConnection()) &#123;</span><br><span class="line">            <span class="keyword">return</span> DatabaseType.valueFrom(connection.getMetaData().getDatabaseProductName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> PrintWriter <span class="title">getLogWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> logWriter;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setLogWriter</span><span class="params">(<span class="keyword">final</span> PrintWriter out)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logWriter = out;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Connection <span class="title">getConnection</span><span class="params">(<span class="keyword">final</span> String username, <span class="keyword">final</span> String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractConnectionAdapter"><a href="#AbstractConnectionAdapter" class="headerlink" title="AbstractConnectionAdapter"></a>AbstractConnectionAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractConnectionAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractUnsupportedOperationConnection</span> </span>&#123;</span><br><span class="line">    <span class="comment">//缓存数据源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Connection&gt; cachedConnections = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> autoCommit = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> readOnly = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> closed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> transactionIsolation = TRANSACTION_READ_UNCOMMITTED;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get database connection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSourceName data source name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> database connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Connection <span class="title">getConnection</span><span class="params">(<span class="keyword">final</span> String dataSourceName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cachedConnections.containsKey(dataSourceName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedConnections.get(dataSourceName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从子类获取数据源</span></span><br><span class="line">        DataSource dataSource = getDataSourceMap().get(dataSourceName);</span><br><span class="line">        Preconditions.checkState(<span class="keyword">null</span> != dataSource, <span class="string">&quot;Missing the data source name: &#x27;%s&#x27;&quot;</span>, dataSourceName);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection result = dataSource.getConnection();</span><br><span class="line">        cachedConnections.put(dataSourceName, result);</span><br><span class="line">        <span class="comment">//回放记录的方法调用</span></span><br><span class="line">        replayMethodsInvocation(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Map&lt;String, DataSource&gt; <span class="title">getDataSourceMap</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeCache</span><span class="params">(<span class="keyword">final</span> Connection connection)</span> </span>&#123;</span><br><span class="line">        cachedConnections.values().remove(connection);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">getAutoCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> autoCommit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> autoCommit)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.autoCommit = autoCommit;</span><br><span class="line">        <span class="comment">//记录方法调用</span></span><br><span class="line">        recordMethodInvocation(Connection.class, <span class="string">&quot;setAutoCommit&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">boolean</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;autoCommit&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Connection each : cachedConnections.values()) &#123;</span><br><span class="line">            each.setAutoCommit(autoCommit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Connection each : cachedConnections.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.commit();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Connection each : cachedConnections.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        closed = <span class="keyword">true</span>;</span><br><span class="line">        HintManagerHolder.clear();</span><br><span class="line">        MasterVisitedManager.clear();</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Connection each : cachedConnections.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> closed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readOnly;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setReadOnly</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> readOnly)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.readOnly = readOnly;</span><br><span class="line">        recordMethodInvocation(Connection.class, <span class="string">&quot;setReadOnly&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">boolean</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;readOnly&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Connection each : cachedConnections.values()) &#123;</span><br><span class="line">            each.setReadOnly(readOnly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getTransactionIsolation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> transactionIsolation;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTransactionIsolation</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> level)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        transactionIsolation = level;</span><br><span class="line">        <span class="comment">//记录</span></span><br><span class="line">        recordMethodInvocation(Connection.class, <span class="string">&quot;setTransactionIsolation&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">int</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;level&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Connection each : cachedConnections.values()) &#123;</span><br><span class="line">            each.setTransactionIsolation(level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ------- Consist with MySQL driver implementation -------</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SQLWarning <span class="title">getWarnings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearWarnings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getHoldability</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultSet.CLOSE_CURSORS_AT_COMMIT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setHoldability</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> holdability)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractStatementAdapter"><a href="#AbstractStatementAdapter" class="headerlink" title="AbstractStatementAdapter"></a>AbstractStatementAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStatementAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractUnsupportedOperationStatement</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Statement&gt; targetClass;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> closed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolable;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fetchSize;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        closed = <span class="keyword">true</span>;</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        getRoutedStatements().clear();</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> closed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isPoolable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> poolable;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPoolable</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> poolable)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.poolable = poolable;</span><br><span class="line">        <span class="comment">//记录调用</span></span><br><span class="line">        recordMethodInvocation(targetClass, <span class="string">&quot;setPoolable&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">boolean</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;poolable&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            each.setPoolable(poolable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getFetchSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fetchSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setFetchSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> rows)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fetchSize = rows;</span><br><span class="line">        recordMethodInvocation(targetClass, <span class="string">&quot;setFetchSize&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">int</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;rows&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            each.setFetchSize(rows);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setEscapeProcessing</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> enable)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        recordMethodInvocation(targetClass, <span class="string">&quot;setEscapeProcessing&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">boolean</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;enable&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            each.setEscapeProcessing(enable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            each.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getUpdateCount</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> hasResult = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each.getUpdateCount() &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                hasResult = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//累加起来</span></span><br><span class="line">            result += each.getUpdateCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">            result = Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasResult ? Long.valueOf(result).intValue() : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SQLWarning <span class="title">getWarnings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearWarnings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">getMoreResults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">getMoreResults</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMaxFieldSize</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRoutedStatements().isEmpty() ? <span class="number">0</span> : getRoutedStatements().iterator().next().getMaxFieldSize();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setMaxFieldSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> max)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        recordMethodInvocation(targetClass, <span class="string">&quot;setMaxFieldSize&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">int</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;max&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            each.setMaxFieldSize(max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO Confirm MaxRows for multiple databases is need special handle. eg: 10 statements maybe MaxRows / 10</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMaxRows</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRoutedStatements().isEmpty() ? -<span class="number">1</span> : getRoutedStatements().iterator().next().getMaxRows();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setMaxRows</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> max)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        recordMethodInvocation(targetClass, <span class="string">&quot;setMaxRows&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">int</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;max&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            each.setMaxRows(max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getQueryTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRoutedStatements().isEmpty() ? <span class="number">0</span> : getRoutedStatements().iterator().next().getQueryTimeout();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setQueryTimeout</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> seconds)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        recordMethodInvocation(targetClass, <span class="string">&quot;setQueryTimeout&quot;</span>, <span class="keyword">new</span> Class[] &#123;<span class="keyword">int</span>.class&#125;, <span class="keyword">new</span> Object[] &#123;seconds&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Statement each : getRoutedStatements()) &#123;</span><br><span class="line">            each.setQueryTimeout(seconds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象，子类实现，路由语句对象集合</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Collection&lt;? extends Statement&gt; getRoutedStatements();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractShardingPreparedStatementAdapter"><a href="#AbstractShardingPreparedStatementAdapter" class="headerlink" title="AbstractShardingPreparedStatementAdapter"></a>AbstractShardingPreparedStatementAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractShardingPreparedStatementAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractUnsupportedOperationPreparedStatement</span> </span>&#123;</span><br><span class="line">    <span class="comment">//记录的设置参数方法数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SetParameterMethodInvocation&gt; setParameterMethodInvocations = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Object&gt; parameters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//记录占位符参数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> parameterIndex, <span class="keyword">final</span> Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parameters.size() == parameterIndex - <span class="number">1</span>) &#123;</span><br><span class="line">            parameters.add(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = parameters.size(); i &lt;= parameterIndex - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            parameters.add(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        parameters.set(parameterIndex - <span class="number">1</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录设置参数方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recordSetParameter</span><span class="params">(<span class="keyword">final</span> String methodName, <span class="keyword">final</span> Class[] argumentTypes, <span class="keyword">final</span> Object... arguments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            setParameterMethodInvocations.add(<span class="keyword">new</span> SetParameterMethodInvocation(PreparedStatement.class.getMethod(methodName, argumentTypes), arguments, arguments[<span class="number">1</span>]));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ShardingJdbcException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回放记录的设置参数方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">replaySetParameter</span><span class="params">(<span class="keyword">final</span> PreparedStatement preparedStatement, <span class="keyword">final</span> List&lt;Object&gt; parameters)</span> </span>&#123;</span><br><span class="line">        setParameterMethodInvocations.clear();</span><br><span class="line">        addParameters(parameters);</span><br><span class="line">        <span class="keyword">for</span> (SetParameterMethodInvocation each : setParameterMethodInvocations) &#123;</span><br><span class="line">            each.invoke(preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addParameters</span><span class="params">(<span class="keyword">final</span> List&lt;Object&gt; parameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.size(); i++) &#123;</span><br><span class="line">            recordSetParameter(<span class="string">&quot;setObject&quot;</span>, <span class="keyword">new</span> Class[]&#123;<span class="keyword">int</span>.class, Object.class&#125;, i + <span class="number">1</span>, parameters.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clearParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        parameters.clear();</span><br><span class="line">        setParameterMethodInvocations.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SetParameterMethodInvocation</span> <span class="keyword">extends</span> <span class="title">JdbcMethodInvocation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetParameterMethodInvocation</span><span class="params">(<span class="keyword">final</span> Method method, <span class="keyword">final</span> Object[] arguments, <span class="keyword">final</span> Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, arguments);</span><br><span class="line">        <span class="keyword">this</span>.index = (<span class="keyword">int</span>) arguments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set argument.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value argument value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValueArgument</span><span class="params">(<span class="keyword">final</span> Object value)</span> </span>&#123;</span><br><span class="line">        getArguments()[<span class="number">1</span>] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractResultSetAdapter"><a href="#AbstractResultSetAdapter" class="headerlink" title="AbstractResultSetAdapter"></a>AbstractResultSetAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractResultSetAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractUnsupportedOperationResultSet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ResultSet&gt; resultSets;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Statement statement;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> closed;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractResultSetAdapter</span><span class="params">(<span class="keyword">final</span> List&lt;ResultSet&gt; resultSets, <span class="keyword">final</span> Statement statement)</span> </span>&#123;</span><br><span class="line">        Preconditions.checkArgument(!resultSets.isEmpty());</span><br><span class="line">        <span class="keyword">this</span>.resultSets = resultSets;</span><br><span class="line">        <span class="keyword">this</span>.statement = statement;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ResultSetMetaData <span class="title">getMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultSets.get(<span class="number">0</span>).getMetaData();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findColumn</span><span class="params">(<span class="keyword">final</span> String columnLabel)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultSets.get(<span class="number">0</span>).findColumn(columnLabel);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        closed = <span class="keyword">true</span>;</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ResultSet each : resultSets) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> closed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setFetchDirection</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> direction)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ResultSet each : resultSets) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.setFetchDirection(direction);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getFetchDirection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultSets.get(<span class="number">0</span>).getFetchDirection();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setFetchSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> rows)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ResultSet each : resultSets) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.setFetchSize(rows);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getFetchSize</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultSets.get(<span class="number">0</span>).getFetchSize();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultSets.get(<span class="number">0</span>).getType();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getConcurrency</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultSets.get(<span class="number">0</span>).getConcurrency();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SQLWarning <span class="title">getWarnings</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultSets.get(<span class="number">0</span>).getWarnings();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clearWarnings</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Collection&lt;SQLException&gt; exceptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ResultSet each : resultSets) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                each.clearWarnings();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException ex) &#123;</span><br><span class="line">                exceptions.add(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throwSQLExceptionIfNecessary(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharding-jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc源码解析-入门使用（序言）</title>
      <link href="/hexo/post/1442ae52.html"/>
      <url>/hexo/post/1442ae52.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Sharding-JDBC是一个开源的分布式数据库中间件解决方案。它在Java的JDBC层以对业务应用零侵入的方式额外提供数据分片，读写分离，柔性事务和分布式治理能力。并在其基础上提供封装了MySQL协议的服务端版本，用于完成对异构语言的支持。</p><p>(还没写完这个系列的时候就已经更名成sharding-sphere了)</p><p>官方文档：<a href="http://shardingjdbc.io/docs_cn/00-overview/">http://shardingjdbc.io/docs_cn/00-overview/</a></p><p><a href="http://shardingsphere.io/document/cn/overview/">http://shardingsphere.io/document/cn/overview/</a></p><p>官方github地址：<a href="https://github.com/shardingjdbc/sharding-jdbc">https://github.com/shardingjdbc/sharding-jdbc</a></p><p><a href="https://github.com/sharding-sphere/sharding-sphere">https://github.com/sharding-sphere/sharding-sphere</a></p><h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><h4 id="1-数据分片"><a href="#1-数据分片" class="headerlink" title="1. 数据分片"></a>1. 数据分片</h4><ul><li>支持分库 + 分表</li><li>支持聚合，分组，排序，分页，关联查询等复杂查询语句</li><li>支持常见的DML，DDL，TCL以及数据库管理语句</li><li>支持=，BETWEEN，IN的分片操作符</li><li>自定义的灵活分片策略，支持多分片键共用，支持inline表达式</li><li>基于Hint的强制路由</li><li>支持分布式主键</li></ul><h4 id="2-读写分离"><a href="#2-读写分离" class="headerlink" title="2. 读写分离"></a>2. 读写分离</h4><ul><li>支持一主多从的读写分离</li><li>支持同一线程内的数据一致性</li><li>支持分库分表与读写分离共同使用</li><li>支持基于Hint的强制主库路由</li></ul><h4 id="3-柔性事务"><a href="#3-柔性事务" class="headerlink" title="3. 柔性事务"></a>3. 柔性事务</h4><ul><li>最大努力送达型事务</li><li>TCC型事务(TBD)</li></ul><h4 id="4-分布式治理"><a href="#4-分布式治理" class="headerlink" title="4. 分布式治理"></a>4. 分布式治理</h4><ul><li>支持配置中心，可动态修改配置</li><li>支持客户端熔断和失效转移</li><li>支持Open Tracing协议</li></ul><span id="more"></span><h3 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h3><h4 id="Sharding-JDBC-Driver"><a href="#Sharding-JDBC-Driver" class="headerlink" title="Sharding-JDBC-Driver"></a>Sharding-JDBC-Driver</h4><p>通过客户端分片的方式由应用程序直连数据库，减少二次转发成本，性能最高，适合线上程序使用。</p><ul><li><p>可适用于任何基于Java的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</p></li><li><p>可基于任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid等。</p></li><li><p>可支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer和PostgreSQL。</p></li></ul><p><img src="https://user-images.githubusercontent.com/7789698/39663686-51e91372-50aa-11e8-96b5-d383f1b02f55.png" alt="image"></p><h4 id="Sharding-JDBC-Server"><a href="#Sharding-JDBC-Server" class="headerlink" title="Sharding-JDBC-Server"></a>Sharding-JDBC-Server</h4><p>通过代理服务器连接数据库(目前仅支持MySQL)，适合其他开发语言或MySQL客户端操作数据。</p><ul><li>向应用程序完全透明，可直接当做MySQL使用。</li><li>可适用于任何兼容MySQL协议的的客户端。</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/39663693-8c4d6266-50aa-11e8-939a-e8779641a35b.png" alt="image"></p><h4 id="Sharding-JDBC-Sidecar-TBD"><a href="#Sharding-JDBC-Sidecar-TBD" class="headerlink" title="Sharding-JDBC-Sidecar(TBD)"></a>Sharding-JDBC-Sidecar(TBD)</h4><p>通过sidecar分片的方式，由IPC代替RPC，自动代理SQL分片，适合与Kubernetes或Mesos配合使用。</p><p><img src="https://user-images.githubusercontent.com/7789698/39663709-c6aa7d68-50aa-11e8-8052-b3b86afba760.png" alt="image"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>为了缓解数据库压力，将写入和读取操作分离为不同数据源，写库称为主库，读库称为从库，一主库可配置多从库。</p><p>一主两从，读写分离。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> demo_ds_master;</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> demo_ds_slave_0;</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> demo_ds_slave_1;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order` (</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_item` (</span><br><span class="line">  `item_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`item_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataSource <span class="title">getMasterSlaveDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    MasterSlaveRuleConfiguration masterSlaveRuleConfig = <span class="keyword">new</span> MasterSlaveRuleConfiguration();</span><br><span class="line">    masterSlaveRuleConfig.setName(<span class="string">&quot;demo_ds_master_slave&quot;</span>);</span><br><span class="line">    <span class="comment">//主数据源</span></span><br><span class="line">    masterSlaveRuleConfig.setMasterDataSourceName(<span class="string">&quot;demo_ds_master&quot;</span>);</span><br><span class="line">    <span class="comment">//从数据源</span></span><br><span class="line">    masterSlaveRuleConfig.setSlaveDataSourceNames(Arrays.asList(<span class="string">&quot;demo_ds_slave_0&quot;</span>, <span class="string">&quot;demo_ds_slave_1&quot;</span>));</span><br><span class="line">    <span class="comment">//随机</span></span><br><span class="line">    masterSlaveRuleConfig.setLoadBalanceAlgorithmType(MasterSlaveLoadBalanceAlgorithmType.RANDOM);      </span><br><span class="line">    <span class="keyword">return</span> MasterSlaveDataSourceFactory.createDataSource(createDataSourceMap(), masterSlaveRuleConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, DataSource&gt; <span class="title">createDataSourceMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, DataSource&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">    result.put(<span class="string">&quot;demo_ds_master&quot;</span>, DataSourceUtil.createDataSource(<span class="string">&quot;demo_ds_master&quot;</span>));</span><br><span class="line">    result.put(<span class="string">&quot;demo_ds_slave_0&quot;</span>, DataSourceUtil.createDataSource(<span class="string">&quot;demo_ds_slave_0&quot;</span>));</span><br><span class="line">    result.put(<span class="string">&quot;demo_ds_slave_1&quot;</span>, DataSourceUtil.createDataSource(<span class="string">&quot;demo_ds_slave_1&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;io.shardingjdbc.example.spring.namespace.mybatis&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demo_ds_master&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/demo_ds_master&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demo_ds_slave_0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/demo_ds_slave_0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demo_ds_slave_1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/demo_ds_slave_1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;randomStrategy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.shardingjdbc.core.api.algorithm.masterslave.RandomMasterSlaveLoadBalanceAlgorithm&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">master-slave:data-source</span> <span class="attr">id</span>=<span class="string">&quot;masterSlaveDataSource&quot;</span> <span class="attr">master-data-source-name</span>=<span class="string">&quot;demo_ds_master&quot;</span> <span class="attr">slave-data-source-names</span>=<span class="string">&quot;demo_ds_slave_0, demo_ds_slave_1&quot;</span> <span class="attr">strategy-ref</span>=<span class="string">&quot;randomStrategy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_master:</span> <span class="type">!!org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo_ds_master</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">ds_slave_0:</span> <span class="type">!!org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo_ds_slave_0</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">ds_slave_1:</span> <span class="type">!!org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo_ds_slave_1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">masterSlaveRule:</span></span><br><span class="line">  <span class="attr">name:</span> </span><br><span class="line">    <span class="string">ds_ms</span></span><br><span class="line">  <span class="attr">masterDataSourceName:</span></span><br><span class="line">    <span class="string">ds_master</span></span><br><span class="line">  <span class="attr">slaveDataSourceNames:</span> [<span class="string">ds_slave_0</span>, <span class="string">ds_slave_1</span>]</span><br></pre></td></tr></table></figure><p>springboot:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sharding.jdbc.datasource.names</span>=<span class="string">ds_master,ds_slave_0,ds_slave_1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_master.type</span>=<span class="string">org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_master.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_master.url</span>=<span class="string">jdbc:mysql://localhost:3306/demo_ds_master</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_master.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_master.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_0.type</span>=<span class="string">org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_0.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_0.url</span>=<span class="string">jdbc:mysql://localhost:3306/demo_ds_slave_0</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_0.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_0.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_1.type</span>=<span class="string">org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_1.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_1.url</span>=<span class="string">jdbc:mysql://localhost:3306/demo_ds_slave_1</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_1.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">sharding.jdbc.datasource.ds_slave_1.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="meta">sharding.jdbc.config.masterslave.load-balance-algorithm-type</span>=<span class="string">round_robin</span></span><br><span class="line"><span class="meta">sharding.jdbc.config.masterslave.name</span>=<span class="string">ds_ms</span></span><br><span class="line"><span class="meta">sharding.jdbc.config.masterslave.master-data-source-name</span>=<span class="string">ds_master</span></span><br><span class="line"><span class="meta">sharding.jdbc.config.masterslave.slave-data-source-names</span>=<span class="string">ds_slave_0,ds_slave_1</span></span><br></pre></td></tr></table></figure><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><ul><li><p>数据源分片策略DatabaseShardingStrategy：数据被分配的目标数据源</p></li><li><p>表分片策略TableShardingStrategy：数据被分配的目标表，该目标表存在与该数据的目标数据源内</p></li><li><p>分片键  分片键是分片策略的第一个参数。分片键表示的是SQL语句中WHERE中的条件列。分片键可以配置多个。</p></li><li><p>分片算法</p><p>Sharding-JDBC提供了5种分片策略。由于分片算法和业务实现紧密相关，因此Sharding-JDBC并未提供内置分片算法，而是通过分片策略将各种场景提炼出来，提供更高层级的抽象，并提供接口让应用开发者自行实现分片算法。</p><ul><li>StandardShardingStrategy</li></ul><p>标准分片策略。提供对SQL语句中的=, IN和BETWEEN AND的分片操作支持。StandardShardingStrategy<strong>只支持单分片键</strong>，提供<strong>PreciseShardingAlgorithm</strong>和<strong>RangeShardingAlgorithm</strong>两个分片算法。PreciseShardingAlgorithm是必选的，用于处理**=和IN<strong>的分片。RangeShardingAlgorithm是可选的，用于处理</strong>BETWEEN AND**分片，如果不配置RangeShardingAlgorithm，SQL中的BETWEEN AND将按照全库路由处理。</p><ul><li>ComplexShardingStrategy</li></ul><p>复合分片策略。提供对SQL语句中的=, IN和BETWEEN AND的分片操作支持。ComplexShardingStrategy支持多分片键，由于多分片键之间的关系复杂，因此Sharding-JDBC并未做过多的封装，而是直接将分片键值组合以及分片操作符交于算法接口，完全由应用开发者实现，提供最大的灵活度。</p><ul><li>InlineShardingStrategy</li></ul><p>Inline<strong>表达式</strong>分片策略。使用<strong>Groovy</strong>的Inline表达式，提供对SQL语句中的=和IN的分片操作支持。InlineShardingStrategy只支持单分片键，对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的Java代码开发，如: t<em>user</em>${user_id % 8} 表示t_user表按照user_id按8取模分成8个表，表名称为t_user_0到t_user_7。</p><ul><li>HintShardingStrategy</li></ul><p>通过Hint而非SQL解析的方式分片的策略。</p><ul><li>NoneShardingStrategy</li></ul><p>不分片的策略。</p></li><li><p>级联绑定表</p><p>级联绑定表代表一组表，这组表的逻辑表与实际表之间的映射关系是相同的。比如t_order与t_order_item就是这样一组绑定表关系，它们的分库与分表策略是完全相同的,那么可以使用它们的表规则将它们配置成级联绑定表。</p><p>那么在进行SQL路由时，如果SQL为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> i.<span class="operator">*</span> <span class="keyword">FROM</span> t_order o <span class="keyword">JOIN</span> t_order_item i <span class="keyword">ON</span> o.order_id<span class="operator">=</span>i.order_id <span class="keyword">WHERE</span> o.user_id<span class="operator">=</span>? <span class="keyword">AND</span> o.order_id<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p>其中t_order在FROM的最左侧，Sharding-JDBC将会以它作为整个绑定表的主表。所有路由计算将会只使用主表的策略，那么t_order_item表的分片计算将会使用t_order的条件。故绑定表之间的分区键要完全相同。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataSource <span class="title">getShardingDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ShardingRuleConfiguration shardingRuleConfig = <span class="keyword">new</span> ShardingRuleConfiguration();</span><br><span class="line">    shardingRuleConfig.getTableRuleConfigs().add(getOrderTableRuleConfiguration());</span><br><span class="line">    shardingRuleConfig.getTableRuleConfigs().add(getOrderItemTableRuleConfiguration());</span><br><span class="line">    shardingRuleConfig.getBindingTableGroups().add(<span class="string">&quot;t_order, t_order_item&quot;</span>);</span><br><span class="line">    <span class="comment">//按user_id模2分库，demo_ds_0、demo_ds_1</span></span><br><span class="line">    shardingRuleConfig.setDefaultDatabaseShardingStrategyConfig(<span class="keyword">new</span> InlineShardingStrategyConfiguration(<span class="string">&quot;user_id&quot;</span>, <span class="string">&quot;demo_ds_$&#123;user_id % 2&#125;&quot;</span>));</span><br><span class="line">    <span class="comment">//按order_id模2分表，实现PreciseShardingAlgorithm</span></span><br><span class="line">    shardingRuleConfig.setDefaultTableShardingStrategyConfig(<span class="keyword">new</span> StandardShardingStrategyConfiguration(<span class="string">&quot;order_id&quot;</span>, ModuloShardingTableAlgorithm.class.getName()));</span><br><span class="line">    <span class="comment">//构造ShardingDataSource</span></span><br><span class="line">    <span class="keyword">return</span> ShardingDataSourceFactory.createDataSource(createDataSourceMap(), shardingRuleConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TableRuleConfiguration <span class="title">getOrderTableRuleConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TableRuleConfiguration orderTableRuleConfig = <span class="keyword">new</span> TableRuleConfiguration();</span><br><span class="line">    orderTableRuleConfig.setLogicTable(<span class="string">&quot;t_order&quot;</span>);</span><br><span class="line">    orderTableRuleConfig.setActualDataNodes(<span class="string">&quot;demo_ds_$&#123;0..1&#125;.t_order_$&#123;[0, 1]&#125;&quot;</span>);</span><br><span class="line">    <span class="comment">//配置自增列</span></span><br><span class="line">    orderTableRuleConfig.setKeyGeneratorColumnName(<span class="string">&quot;order_id&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> orderTableRuleConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TableRuleConfiguration <span class="title">getOrderItemTableRuleConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TableRuleConfiguration orderItemTableRuleConfig = <span class="keyword">new</span> TableRuleConfiguration();</span><br><span class="line">    orderItemTableRuleConfig.setLogicTable(<span class="string">&quot;t_order_item&quot;</span>);</span><br><span class="line">    orderItemTableRuleConfig.setActualDataNodes(<span class="string">&quot;demo_ds_$&#123;0..1&#125;.t_order_item_$&#123;[0, 1]&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> orderItemTableRuleConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, DataSource&gt; <span class="title">createDataSourceMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, DataSource&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    result.put(<span class="string">&quot;demo_ds_0&quot;</span>, DataSourceUtil.createDataSource(<span class="string">&quot;demo_ds_0&quot;</span>));</span><br><span class="line">    result.put(<span class="string">&quot;demo_ds_1&quot;</span>, DataSourceUtil.createDataSource(<span class="string">&quot;demo_ds_1&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuloShardingTableAlgorithm</span> <span class="keyword">implements</span> <span class="title">PreciseShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; tableNames, <span class="keyword">final</span> PreciseShardingValue&lt;Long&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String each : tableNames) &#123;</span><br><span class="line">            <span class="comment">//分片键</span></span><br><span class="line">            <span class="keyword">if</span> (each.endsWith(shardingValue.getValue() % <span class="number">2</span> + <span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要同时读写分离，只要加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shardingRuleConfig.setMasterSlaveRuleConfigs(</span><br><span class="line">Lists.newArrayList(masterSlaveRuleConfig1, masterSlaveRuleConfig2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>spring:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;io.shardingjdbc.example.spring.namespace.mybatis&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demo_ds_0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/demo_ds_0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demo_ds_1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/demo_ds_1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sharding:standard-strategy</span> <span class="attr">id</span>=<span class="string">&quot;databaseShardingStrategy&quot;</span> <span class="attr">sharding-column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">precise-algorithm-class</span>=<span class="string">&quot;io.shardingjdbc.example.spring.namespace.mybatis.algorithm.PreciseModuloDatabaseShardingAlgorithm&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sharding:standard-strategy</span> <span class="attr">id</span>=<span class="string">&quot;tableShardingStrategy&quot;</span> <span class="attr">sharding-column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">precise-algorithm-class</span>=<span class="string">&quot;io.shardingjdbc.example.spring.namespace.mybatis.algorithm.PreciseModuloTableShardingAlgorithm&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sharding:data-source</span> <span class="attr">id</span>=<span class="string">&quot;shardingDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sharding:sharding-rule</span> <span class="attr">data-source-names</span>=<span class="string">&quot;demo_ds_0, demo_ds_1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sharding:table-rules</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sharding:table-rule</span> <span class="attr">logic-table</span>=<span class="string">&quot;t_order&quot;</span> <span class="attr">actual-data-nodes</span>=<span class="string">&quot;demo_ds_$&#123;0..1&#125;.t_order_$&#123;0..1&#125;&quot;</span> <span class="attr">database-strategy-ref</span>=<span class="string">&quot;databaseShardingStrategy&quot;</span> <span class="attr">table-strategy-ref</span>=<span class="string">&quot;tableShardingStrategy&quot;</span> <span class="attr">generate-key-column</span>=<span class="string">&quot;order_id&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sharding:table-rule</span> <span class="attr">logic-table</span>=<span class="string">&quot;t_order_item&quot;</span> <span class="attr">actual-data-nodes</span>=<span class="string">&quot;demo_ds_$&#123;0..1&#125;.t_order_item_$&#123;0..1&#125;&quot;</span> <span class="attr">database-strategy-ref</span>=<span class="string">&quot;databaseShardingStrategy&quot;</span> <span class="attr">table-strategy-ref</span>=<span class="string">&quot;tableShardingStrategy&quot;</span> <span class="attr">generate-key-column</span>=<span class="string">&quot;order_item_id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sharding:table-rules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sharding:sharding-rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sharding:data-source</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分片管理器"><a href="#分片管理器" class="headerlink" title="分片管理器"></a>分片管理器</h4><p>com.dangdang.ddframe.rdb.sharding.api.HintManager使用ThreadLocal技术管理分片键值。</p><ul><li>使用hintManager.addDatabaseShardingValue来添加数据源分片键值</li><li>使用hintManager.addTableShardingValue来添加表分片键值</li><li>分片键值保存在ThreadLocal中，所以需要在操作结束时调用hintManager.close()来清除ThreadLocal中的内容。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT * FROM t_order&quot;</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line">        HintManager hintManager = HintManager.getInstance();</span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql)) &#123;</span><br><span class="line">    hintManager.addDatabaseShardingValue(<span class="string">&quot;t_order&quot;</span>, <span class="string">&quot;user_id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    hintManager.addTableShardingValue(<span class="string">&quot;t_order&quot;</span>, <span class="string">&quot;order_id&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">try</span> (ResultSet rs = preparedStatement.executeQuery()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分布式主键"><a href="#分布式主键" class="headerlink" title="分布式主键"></a>分布式主键</h4><h5 id="设置自动生成键"><a href="#设置自动生成键" class="headerlink" title="设置自动生成键"></a>设置自动生成键</h5><ul><li>配置自增列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TableRuleConfiguration tableRuleConfig = <span class="keyword">new</span> TableRuleConfiguration();</span><br><span class="line"> tableRuleConfig.setLogicTable(<span class="string">&quot;t_order&quot;</span>);</span><br><span class="line"> tableRuleConfig.setKeyGeneratorColumnName(<span class="string">&quot;order_id&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>设置Id生成器的实现类</p><p>该类必须实现io.shardingjdbc.core.keygen.KeyGenerator接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyGenerator</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Generate key.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> generated key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Number <span class="title">generateKey</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>配置全局生成器(com.xx.xx.KeyGenerator):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ShardingRuleConfiguration shardingRuleConfig = <span class="keyword">new</span> ShardingRuleConfiguration();</span><br><span class="line">shardingRuleConfig.setDefaultKeyGeneratorClass(<span class="string">&quot;com.xx.xx.KeyGenerator&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h4><p>BASE理论</p><p>（1）BA：Basic Available 基本可用</p><p>整个系统在某些不可抗力的情况下，仍然能够保证“可用性”，即一定时间内仍然能够返回一个明确的结果。只不过“基本可用”和“高可用”的区别是：</p><ul><li>“一定时间”可以适当延长：当举行大促时，响应时间可以适当延长</li><li>给部分用户返回一个降级页面：给部分用户直接返回一个降级页面，从而缓解服务器压力。但要注意，返回降级页面仍然是返回明确结果。</li></ul><p>（2）S：Soft State：柔性状态</p><p>同一数据的不同副本的状态，可以不需要实时一致。</p><p>（3）E：Eventual Consisstency：最终一致性</p><p>同一数据的不同副本的状态，可以不需要实时一致，但一定要保证经过一定时间后仍然是一致的。</p><h5 id="最大努力送达型"><a href="#最大努力送达型" class="headerlink" title="最大努力送达型"></a>最大努力送达型</h5><p>适用场景</p><ul><li>根据主键删除数据。</li><li>更新记录永久状态，如更新通知送达状态。</li></ul><p>使用限制</p><p>使用最大努力送达型柔性事务的SQL需要满足幂等性。</p><ul><li>INSERT语句要求必须包含主键，且不能是自增主键。</li><li>UPDATE语句要求幂等，不能是UPDATE xxx SET x=x+1</li><li>DELETE语句无要求。</li></ul><p>独立部署作业指南</p><ul><li>部署用于存储事务日志的数据库。</li><li>部署用于异步作业使用的Zookeeper。</li><li>配置YAML文件,参照示例。</li><li>下载并解压文件sharding-jdbc-transaction-async-job-$VERSION.tar，通过start.sh脚本启动异步作业。</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/39670535-9ee904f4-5139-11e8-9d60-e485f3c50f54.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 配置SoftTransactionConfiguration</span></span><br><span class="line">SoftTransactionConfiguration transactionConfig = <span class="keyword">new</span> SoftTransactionConfiguration(dataSource);</span><br><span class="line">   transactionConfig.setXXX();</span><br><span class="line">            </span><br><span class="line">   <span class="comment">// 2. 初始化SoftTransactionManager</span></span><br><span class="line">SoftTransactionManager transactionManager = <span class="keyword">new</span> SoftTransactionManager(transactionConfig);</span><br><span class="line">transactionManager.init();</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 3. 获取BEDSoftTransaction</span></span><br><span class="line">BEDSoftTransaction transaction = (BEDSoftTransaction) transactionManager.getTransaction(SoftTransactionType.BestEffortsDelivery);</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 4. 开启事务</span></span><br><span class="line">transaction.begin(connection);</span><br><span class="line">            </span><br><span class="line">           <span class="comment">// 5. 执行JDBC</span></span><br><span class="line">           <span class="comment">/* </span></span><br><span class="line"><span class="comment">               codes here</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.关闭事务</span></span><br><span class="line">transaction.end();</span><br></pre></td></tr></table></figure><p>异步作业YAML文件配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标数据库的数据源.</span></span><br><span class="line"><span class="attr">targetDataSource</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">ds_0</span>: <span class="string">!!org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">    <span class="attr">driverClassName</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/ds_0</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">ds_1</span>: <span class="string">!!org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">    <span class="attr">driverClassName</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/ds_1</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 事务日志的数据源.</span></span><br><span class="line"><span class="attr">transactionLogDataSource</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">ds_trans</span>: <span class="string">!!org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">    <span class="attr">driverClassName</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/trans_log</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123456</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心配置</span></span><br><span class="line"><span class="attr">zkConfig</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  #注册中心的连接地址</span></span><br><span class="line">  <span class="attr">connectionString</span>: <span class="string">localhost:2181</span></span><br><span class="line"><span class="comment">  #作业的命名空间</span></span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">Best-Efforts-Delivery-Job</span></span><br><span class="line"><span class="comment">  #注册中心的等待重试的间隔时间的初始值</span></span><br><span class="line">  <span class="attr">baseSleepTimeMilliseconds</span>: <span class="string">1000</span></span><br><span class="line"><span class="comment">  #注册中心的等待重试的间隔时间的最大值</span></span><br><span class="line">  <span class="attr">maxSleepTimeMilliseconds</span>: <span class="string">3000</span></span><br><span class="line"><span class="comment">  #注册中心的最大重试次数</span></span><br><span class="line">  <span class="attr">maxRetries</span>: <span class="string">3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#作业配置</span></span><br><span class="line"><span class="attr">jobConfig</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  #作业名称</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">bestEffortsDeliveryJob</span></span><br><span class="line"><span class="comment">  #触发作业的cron表达式</span></span><br><span class="line">  <span class="attr">cron</span>: <span class="string">0/5 * * * * ?</span></span><br><span class="line"><span class="comment">  #每次作业获取的事务日志最大数量</span></span><br><span class="line">  <span class="attr">transactionLogFetchDataCount</span>: <span class="string">100</span></span><br><span class="line"><span class="comment">  #事务送达的最大尝试次数.</span></span><br><span class="line">  <span class="attr">maxDeliveryTryTimes</span>: <span class="string">3</span></span><br><span class="line"><span class="comment">  #执行送达事务的延迟毫秒数,早于此间隔时间的入库事务才会被作业执行</span></span><br><span class="line">  <span class="attr">maxDeliveryTryDelayMillis</span>: <span class="string">60000</span></span><br></pre></td></tr></table></figure><h5 id="SoftTransactionConfiguration配置"><a href="#SoftTransactionConfiguration配置" class="headerlink" title="SoftTransactionConfiguration配置"></a>SoftTransactionConfiguration配置</h5><p>用于配置事务管理器。</p><table><thead><tr><th><em>名称</em></th><th><em>类型</em></th><th><em>必填</em></th><th><em>默认值</em></th><th><em>说明</em></th></tr></thead><tbody><tr><td>shardingDataSource</td><td>ShardingDataSource</td><td>是</td><td></td><td>事务管理器管理的数据源</td></tr><tr><td>syncMaxDeliveryTryTimes</td><td>int</td><td>否</td><td>3</td><td>同步的事务送达的最大尝试次数</td></tr><tr><td>storageType</td><td>enum</td><td>否</td><td>RDB</td><td>事务日志存储类型。可选值: RDB,MEMORY。使用RDB类型将自动建表</td></tr><tr><td>transactionLogDataSource</td><td>DataSource</td><td>否</td><td>null</td><td>存储事务日志的数据源，如果storageType为RDB则必填</td></tr><tr><td>bestEffortsDeliveryJobConfiguration</td><td>NestedBestEffortsDeliveryJobConfiguration</td><td>否</td><td>null</td><td>最大努力送达型内嵌异步作业配置对象。如需使用，请参考NestedBestEffortsDeliveryJobConfiguration配置</td></tr></tbody></table><h5 id="NestedBestEffortsDeliveryJobConfiguration配置-仅开发环境"><a href="#NestedBestEffortsDeliveryJobConfiguration配置-仅开发环境" class="headerlink" title="NestedBestEffortsDeliveryJobConfiguration配置 (仅开发环境)"></a>NestedBestEffortsDeliveryJobConfiguration配置 (仅开发环境)</h5><p>用于配置内嵌的异步作业，仅用于开发环境。生产环境应使用独立部署的作业版本。</p><table><thead><tr><th><em>名称</em></th><th><em>类型</em></th><th><em>必填</em></th><th><em>默认值</em></th><th><em>说明</em></th></tr></thead><tbody><tr><td>zookeeperPort</td><td>int</td><td>否</td><td>4181</td><td>内嵌的注册中心端口号</td></tr><tr><td>zookeeperDataDir</td><td>String</td><td>否</td><td>target/test_zk_data/nano/</td><td>内嵌的注册中心的数据存放目录</td></tr><tr><td>asyncMaxDeliveryTryTimes</td><td>int</td><td>否</td><td>3</td><td>异步的事务送达的最大尝试次数</td></tr><tr><td>asyncMaxDeliveryTryDelayMillis</td><td>long</td><td>否</td><td>60000</td><td>执行异步送达事务的延迟毫秒数，早于此间隔时间的入库事务才会被异步作业执行</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharding-jdbc </tag>
            
            <tag> sharding-sphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义spring xml配置</title>
      <link href="/hexo/post/a362c3af.html"/>
      <url>/hexo/post/a362c3af.html</url>
      
        <content type="html"><![CDATA[<p>spring万恶的xml配置虽然恶心，但是也不乏良好的设计。如何自定义xml呢？</p><h2 id="创建XML-Schema文件"><a href="#创建XML-Schema文件" class="headerlink" title="创建XML Schema文件"></a>创建XML Schema文件</h2><h3 id="什么是XML-Schema"><a href="#什么是XML-Schema" class="headerlink" title="什么是XML Schema"></a>什么是XML Schema</h3><ul><li>XML Schema 描述了 XML文档的结构</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:beans</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:tool</span>=<span class="string">&quot;http://www.springframework.org/schema/tool&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetNamespace</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">&quot;http://www.w3.org/XML/1998/namespace&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">&quot;http://www.springframework.org/schema/tool&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;annotationType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:ID&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[ The unique identifier for a bean. ]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;package&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span> <span class="attr">use</span>=<span class="string">&quot;optional&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[ The scan package. ]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">type</span>=<span class="string">&quot;annotationType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[ The annotation config ]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="简易元素"><a href="#简易元素" class="headerlink" title="简易元素"></a>简易元素</h4><p><strong>语法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">type</span>=<span class="string">&quot;yyy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这里的xsd:element 被称为简易元素。name是名称，type是类型。XML Schema 拥有很多内建的数据类型。</p><p><strong>实例</strong></p><p>这是一些 XML 元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Refsnes<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>36<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dateborn</span>&gt;</span>1970-03-27<span class="tag">&lt;/<span class="name">dateborn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是相应的简易元素定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:integer&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;dateborn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="XSD-属性"><a href="#XSD-属性" class="headerlink" title="XSD 属性"></a>XSD 属性</h4><p>简易元素无法拥有属性。假如某个元素拥有属性，它就会被当作某种复合类型。但是属性本身总是作为简易类型被声明的。</p><p><strong>语法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">type</span>=<span class="string">&quot;yyy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>这是一些 XML 元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Refsnes<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>36<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dateborn</span>&gt;</span>1970-03-27<span class="tag">&lt;/<span class="name">dateborn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是相应的简易元素定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:integer&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;dateborn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>当没有其他的值被规定时，默认值就会自动分配给元素。</p><p>在下面的例子中，缺省值是 “red”：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span> <span class="attr">default</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="固定值"><a href="#固定值" class="headerlink" title="固定值"></a>固定值</h4><p>固定值同样会自动分配给元素，并且您无法规定另外一个值。</p><p>在下面的例子中，固定值是 “red”：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span> <span class="attr">fixed</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="可选的和必需的属性"><a href="#可选的和必需的属性" class="headerlink" title="可选的和必需的属性"></a>可选的和必需的属性</h4><p>在缺省的情况下，属性是可选的。如需规定属性为必选，请使用 “use” 属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;lang&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="XSD-限定-Facets"><a href="#XSD-限定-Facets" class="headerlink" title="XSD 限定 / Facets"></a>XSD 限定 / Facets</h4><p>限定（restriction）用于为 XML 元素或者属性定义可接受的值。对 XML 元素的限定被称为 facet。</p><h5 id="对值的限定（minInclusive／maxInclusive）"><a href="#对值的限定（minInclusive／maxInclusive）" class="headerlink" title="对值的限定（minInclusive／maxInclusive）"></a>对值的限定（minInclusive／maxInclusive）</h5><p>下面的例子定义了带有一个限定且名为 “age” 的元素。age 的值不能低于 0 或者高于 120：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:integer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:minInclusive</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:maxInclusive</span> <span class="attr">value</span>=<span class="string">&quot;120&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="对一组值的限定（enumeration）"><a href="#对一组值的限定（enumeration）" class="headerlink" title="对一组值的限定（enumeration）"></a>对一组值的限定（enumeration）</h5><p>如需把 XML 元素的内容限制为一组可接受的值，我们要使用枚举约束（enumeration constraint）。</p><p>下面的例子定义了带有一个限定的名为 “car” 的元素。可接受的值只有：Audi, Golf, BMW：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;Audi&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;Golf&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;BMW&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子也可以被写为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">type</span>=<span class="string">&quot;carType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">&quot;carType&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;Audi&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;Golf&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;BMW&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在这种情况下，类型 “carType” 可被其他元素使用，因为它不是 “car” 元素的组成部分。</p><h5 id="对一系列值的限定（pattern）"><a href="#对一系列值的限定（pattern）" class="headerlink" title="对一系列值的限定（pattern）"></a>对一系列值的限定（pattern）</h5><p>如需把 XML 元素的内容限制定义为一系列可使用的数字或字母，我们要使用模式约束（pattern constraint）。</p><p>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值只有小写字母 a - z 其中的一个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;letter&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;[a-z]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下一个例子定义了带有一个限定的名为 “initials” 的元素。可接受的值是大写字母 A - Z 其中的三个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;initials&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;[A-Z][A-Z][A-Z]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下一个例子也定义了带有一个限定的名为 “initials” 的元素。可接受的值是大写或小写字母 a - z 其中的三个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;initials&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;[a-zA-Z][a-zA-Z][a-zA-Z]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下一个例子定义了带有一个限定的名为 “choice 的元素。可接受的值是字母 x, y 或 z 中的一个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;choice&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;[xyz]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下一个例子定义了带有一个限定的名为 “prodid” 的元素。可接受的值是五个阿拉伯数字的一个序列，且每个数字的范围是 0-9：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;prodid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:integer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;[0-9][0-9][0-9][0-9][0-9]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="对一系列值的其他限定"><a href="#对一系列值的其他限定" class="headerlink" title="对一系列值的其他限定"></a>对一系列值的其他限定</h5><p>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值是 a - z 中零个或多个字母：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;letter&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;([a-z])*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值是一对或多对字母，每对字母由一个小写字母后跟一个大写字母组成。举个例子，”sToP”将会通过这种模式的验证，但是 “Stop”、”STOP” 或者 “stop” 无法通过验证：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;letter&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;([a-z][A-Z])+&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的例子定义了带有一个限定的名为 “gender” 的元素。可接受的值是 male 或者 female：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;male|female&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的例子定义了带有一个限定的名为 “password” 的元素。可接受的值是由 8 个字符组成的一行字符，这些字符必须是大写或小写字母 a - z 亦或数字 0 - 9：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;[a-zA-Z0-9]&#123;8&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="对空白字符的限定（whiteSpace）"><a href="#对空白字符的限定（whiteSpace）" class="headerlink" title="对空白字符的限定（whiteSpace）"></a>对空白字符的限定（whiteSpace）</h5><p>如需规定对空白字符（whitespace characters）的处理方式，我们需要使用 whiteSpace 限定。</p><p>下面的例子定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “preserve”，这意味着 XML 处理器不会移除任何空白字符：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:whiteSpace</span> <span class="attr">value</span>=<span class="string">&quot;preserve&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子也定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “replace”，这意味着 XML 处理器将移除所有空白字符（换行、回车、空格以及制表符）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:whiteSpace</span> <span class="attr">value</span>=<span class="string">&quot;replace&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子也定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “collapse”，这意味着 XML 处理器将移除所有空白字符（换行、回车、空格以及制表符会被替换为空格，开头和结尾的空格会被移除，而多个连续的空格会被缩减为一个单一的空格）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:whiteSpace</span> <span class="attr">value</span>=<span class="string">&quot;collapse&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="对长度的限定（length／minLength／maxLength）"><a href="#对长度的限定（length／minLength／maxLength）" class="headerlink" title="对长度的限定（length／minLength／maxLength）"></a>对长度的限定（length／minLength／maxLength）</h5><p>如需限制元素中值的长度，我们需要使用 length、maxLength 以及 minLength 限定。</p><p>本例定义了带有一个限定且名为 “password” 的元素。其值必须精确到 8 个字符：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:length</span> <span class="attr">value</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子也定义了带有一个限定的名为 “password” 的元素。其值最小为 5 个字符，最大为 8 个字符：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:minLength</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:maxLength</span> <span class="attr">value</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="数据类型的限定"><a href="#数据类型的限定" class="headerlink" title="数据类型的限定"></a>数据类型的限定</h5><table><thead><tr><th>限定</th><th>描述</th></tr></thead><tbody><tr><td>enumeration</td><td>定义可接受值的一个列表</td></tr><tr><td>fractionDigits</td><td>定义所允许的最大的小数位数。必须大于等于0。</td></tr><tr><td>length</td><td>定义所允许的字符或者列表项目的精确数目。必须大于或等于0。</td></tr><tr><td>maxExclusive</td><td>定义数值的上限。所允许的值必须小于此值。</td></tr><tr><td>maxInclusive</td><td>定义数值的上限。所允许的值必须小于或等于此值。</td></tr><tr><td>maxLength</td><td>定义所允许的字符或者列表项目的最大数目。必须大于或等于0。</td></tr><tr><td>minExclusive</td><td>定义数值的下限。所允许的值必需大于此值。</td></tr><tr><td>minInclusive</td><td>定义数值的下限。所允许的值必需大于或等于此值。</td></tr><tr><td>minLength</td><td>定义所允许的字符或者列表项目的最小数目。必须大于或等于0。</td></tr><tr><td>pattern</td><td>定义可接受的字符的精确序列。</td></tr><tr><td>totalDigits</td><td>定义所允许的阿拉伯数字的精确位数。必须大于0。</td></tr><tr><td>whiteSpace</td><td>定义空白字符（换行、回车、空格以及制表符）的处理方式。</td></tr></tbody></table><h4 id="复合元素（complexType）"><a href="#复合元素（complexType）" class="headerlink" title="复合元素（complexType）"></a>复合元素（complexType）</h4><p>复合元素指包含其他元素及/或属性的 XML 元素。</p><ul><li><p>有四种类型的复合元素：</p><ul><li><p>空元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">product</span> <span class="attr">pid</span>=<span class="string">&quot;1345&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;product&quot;</span> <span class="attr">type</span>=<span class="string">&quot;prodtype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;prodtype&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:positiveInteger&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>包含其他元素的元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">employee</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">firstname</span>&gt;</span>John<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">type</span>=<span class="string">&quot;employeetype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;employeetype&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>仅包含文本的元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">food</span> <span class="attr">type</span>=<span class="string">&quot;dessert&quot;</span>&gt;</span>Ice cream<span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;food&quot;</span> <span class="attr">type</span>=<span class="string">&quot;foodtype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;foodtype&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:simpleContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">&quot;xs:string&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;dessert&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:simpleContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>包含元素和文本的元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">It happened on <span class="tag">&lt;<span class="name">date</span>&gt;</span>03.03.99<span class="tag">&lt;/<span class="name">date</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">type</span>=<span class="string">&quot;descriptiontype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;descriptiontype&quot;</span> <span class="attr">mixed</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:date&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="指示器"><a href="#指示器" class="headerlink" title="指示器"></a>指示器</h4><p>有七种指示器：</p><p>Order 指示器：</p><ul><li>All 规定子元素可以按照任意顺序出现，且每个子元素必须只出现一次</li><li>Choice 指示器规定可出现某个子元素或者可出现另外一个子元素（非此即彼）</li><li>Sequence 规定子元素必须按照特定的顺序出现</li></ul><p>Occurrence 指示器：</p><ul><li>maxOccurs 指示器可规定某个元素可出现的最大次数</li><li>minOccurs 指示器可规定某个元素能够出现的最小次数</li></ul><p>Group 指示器：</p><ul><li>Group name 定义相关的数批元素</li><li>attributeGroup name</li></ul><h4 id="元素"><a href="#元素" class="headerlink" title=" 元素"></a><any> 元素</h4><p><any> 元素使我们有能力通过未被 schema 规定的元素来拓展 XML 文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">minOccurs</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假如有另一个xsd定义了chidren节点，我们就可以通过any把children加入person节点之下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">firstname</span>&gt;</span>Hege<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Refsnes<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">children</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childname</span>&gt;</span>Cecilie<span class="tag">&lt;/<span class="name">childname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">children</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">firstname</span>&gt;</span>Stale<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Refsnes<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="元素-1"><a href="#元素-1" class="headerlink" title=" 元素"></a><anyAttribute> 元素</h4><p><anyAttribute> 元素使我们有能力通过未被 schema 规定的属性来扩展 XML 文档</p><h2 id="构造Bean"><a href="#构造Bean" class="headerlink" title="构造Bean"></a>构造Bean</h2><h2 id="META-INF下增加spring-schemas"><a href="#META-INF下增加spring-schemas" class="headerlink" title="META-INF下增加spring.schemas"></a>META-INF下增加spring.schemas</h2><p>如：http://code.alibabatech.com/schema/dubbo/dubbo.xsd=META-INF/dubbo.xsd</p><h2 id="继承NamespaceHandlerSupport实现处理器"><a href="#继承NamespaceHandlerSupport实现处理器" class="headerlink" title="继承NamespaceHandlerSupport实现处理器"></a>继承NamespaceHandlerSupport实现处理器</h2><p><img src="https://user-images.githubusercontent.com/7789698/39589196-18f58e0e-4f30-11e8-8506-2748fd00c55b.png" alt="image"></p><p>继承NamespaceHandlerSupport后需要实现init方法</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;application&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;module&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;registry&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;monitor&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;provider&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;consumer&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;protocol&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;service&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;reference&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;annotation&quot;</span>, <span class="keyword">new</span> AnnotationBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样实现了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* dubbo:application-&gt;ApplicationConfig</span><br><span class="line">* dubbo:module-&gt;ModuleConfig</span><br><span class="line">* dubbo:registry-&gt;RegistryConfig</span><br><span class="line">* dubbo:monitor-&gt;MonitorConfig</span><br><span class="line">* dubbo:provider-&gt;ProviderConfig</span><br><span class="line">* dubbo:consumer-&gt;ConsumerConfig</span><br><span class="line">* dubbo:protocol-&gt;ProtocolConfig</span><br><span class="line">* dubbo:service-&gt;ServiceBean</span><br><span class="line">* dubbo:reference-&gt;ReferenceBean</span><br><span class="line">* dubbo:annotation -&gt;使用继承了AbstractSingleBeanDefinitionParser的解析器AnnotationBeanDefinitionParser</span><br></pre></td></tr></table></figure><h2 id="实现BeanDefinitionParser接口实现多个解析器"><a href="#实现BeanDefinitionParser接口实现多个解析器" class="headerlink" title="实现BeanDefinitionParser接口实现多个解析器"></a>实现BeanDefinitionParser接口实现多个解析器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanDefinitionParser只有一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightningXCacheBeanParser</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; beanClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightningXCacheBeanParser</span><span class="params">(Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanClass = beanClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">        RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line">        beanDefinition.setBeanClass(beanClass);</span><br><span class="line">        beanDefinition.setLazyInit(<span class="keyword">false</span>);</span><br><span class="line">        String application = element.getAttribute(<span class="string">&quot;application&quot;</span>);</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(<span class="string">&quot;application&quot;</span>, application);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册到spring容器</span></span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(beanClass.getName(), beanDefinition);</span><br><span class="line">        <span class="keyword">return</span> beanDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="META-INF下增加spring-handlers"><a href="#META-INF下增加spring-handlers" class="headerlink" title="META-INF下增加spring.handlers"></a>META-INF下增加spring.handlers</h2><p>如：http://code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler</p><p>参考：</p><p><a href="http://www.runoob.com/schema/schema-tutorial.html">http://www.runoob.com/schema/schema-tutorial.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义拓展日志</title>
      <link href="/hexo/post/1ac0c692.html"/>
      <url>/hexo/post/1ac0c692.html</url>
      
        <content type="html"><![CDATA[<p>平常的使用过程中我们经常需要使用日志打印，有些信息比如线程信息、时间戳、日志级别等都可以用一些默认规则很容易的使用。但是如果是一些自定义的信息可能就需要拓展一下了。</p><h2 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h2><p>简单使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapters.introduction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(<span class="string">&quot;chapters.introduction.HelloWorld1&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;Hello world.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>20:49:07.962 [main] DEBUG chapters.introduction.HelloWorld1 - Hello world.</p></blockquote><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapters.configuration;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Foo.class);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;Did it again!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>16:06:09.031 [main] INFO  chapters.configuration.MyApp1 - Entering application.<br>16:06:09.046 [main] DEBUG chapters.configuration.Foo - Did it again!<br>16:06:09.046 [main] INFO  chapters.configuration.MyApp1 - Exiting application.</p></blockquote><p>通过配置规则*%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n*来输出响应信息</p><p>logback主要由三块组成： <code>Logger</code>, <code>Appender</code> and <code>Layout</code></p><p><code>Appender</code>负责把日志事件的任务写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Appender</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">LifeCycle</span>, <span class="title">ContextAware</span>, <span class="title">FilterAttachable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doAppend</span><span class="params">(E event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>encoder</code>将事件转换为一个字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch.qos.logback.core.encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Encoder</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">ContextAware</span>, <span class="title">LifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method is called when the owning appender starts or whenever output</span></span><br><span class="line"><span class="comment">   * needs to be directed to a new OutputStream, for instance as a result of a</span></span><br><span class="line"><span class="comment">   * rollover.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(OutputStream os)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Encode and write an event to the appropriate &#123;<span class="doctag">@link</span> OutputStream&#125;.</span></span><br><span class="line"><span class="comment">   * Implementations are free to defer writing out of the encoded event and</span></span><br><span class="line"><span class="comment">   * instead write in batches.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doEncode</span><span class="params">(E event)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method is called prior to the closing of the underling</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@link</span> OutputStream&#125;. Implementations MUST not close the underlying</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@link</span> OutputStream&#125; which is the responsibility of the owning appender.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>Layout</code>负责将传入的事件转换为一个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Layout</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">ContextAware</span>, <span class="title">LifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">doLayout</span><span class="params">(E event)</span></span>;</span><br><span class="line">  <span class="function">String <span class="title">getFileHeader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">String <span class="title">getPresentationHeader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">String <span class="title">getFileFooter</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">String <span class="title">getPresentationFooter</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全自定义layout"><a href="#完全自定义layout" class="headerlink" title="完全自定义layout"></a>完全自定义layout</h3><h4 id="LayoutBase"><a href="#LayoutBase" class="headerlink" title="LayoutBase"></a>LayoutBase</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;chapters.layouts.MySampleLayout2&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">prefix</span>&gt;</span>MyPrefix<span class="tag">&lt;/<span class="name">prefix</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">printThreadName</span>&gt;</span>false<span class="tag">&lt;/<span class="name">printThreadName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapters.layouts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.ILoggingEvent;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.LayoutBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySampleLayout2</span> <span class="keyword">extends</span> <span class="title">LayoutBase</span>&lt;<span class="title">ILoggingEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  String prefix = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> printThreadName = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrintThreadName</span><span class="params">(<span class="keyword">boolean</span> printThreadName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.printThreadName = printThreadName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">doLayout</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">    StringBuffer sbuf = <span class="keyword">new</span> StringBuffer(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span> (prefix != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sbuf.append(prefix + <span class="string">&quot;: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sbuf.append(event.getTimeStamp() - event.getLoggerContextVO().getBirthTime());</span><br><span class="line">    sbuf.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    sbuf.append(event.getLevel());</span><br><span class="line">    <span class="keyword">if</span> (printThreadName) &#123;</span><br><span class="line">      sbuf.append(<span class="string">&quot; [&quot;</span>);</span><br><span class="line">      sbuf.append(event.getThreadName());</span><br><span class="line">      sbuf.append(<span class="string">&quot;] &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sbuf.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sbuf.append(event.getLoggerName());</span><br><span class="line">    sbuf.append(<span class="string">&quot; - &quot;</span>);</span><br><span class="line">    sbuf.append(event.getFormattedMessage());</span><br><span class="line">    sbuf.append(LINE_SEP);</span><br><span class="line">    <span class="keyword">return</span> sbuf.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PatternLayout"><a href="#PatternLayout" class="headerlink" title="PatternLayout"></a>PatternLayout</h4><p>Logback classic附带一个叫做PatternLayout灵活的布局。所有Layout,PatternLayout负责日志事件并返回一个字符串。这个字符串可以通过调整PatternLayout定制的转换模式。</p><p>你可以在转换模式里面插入任意文字，格式都是以百分号开头，括号括起来的。比如[%thread]</p><h5 id="创建一个自定义转换说明符"><a href="#创建一个自定义转换说明符" class="headerlink" title="创建一个自定义转换说明符"></a>创建一个自定义转换说明符</h5><ol><li>继承ClassicConverter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySampleConverter</span> <span class="keyword">extends</span> <span class="title">ClassicConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> nowInNanos = System.nanoTime();</span><br><span class="line">    <span class="keyword">return</span> Long.toString(nowInNanos-start);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>声明转换文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">  &lt;conversionRule conversionWord=<span class="string">&quot;nanos&quot;</span> </span><br><span class="line">                  converterClass=<span class="string">&quot;chapters.layouts.MySampleConverter&quot;</span> /&gt;</span><br><span class="line">        </span><br><span class="line">  &lt;appender name=<span class="string">&quot;STDOUT&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br><span class="line">    &lt;encoder&gt;</span><br><span class="line">      &lt;pattern&gt;%-6nanos [%thread] - %msg%n&lt;/pattern&gt;</span><br><span class="line">    &lt;/encoder&gt;</span><br><span class="line">  &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">  &lt;root level=<span class="string">&quot;DEBUG&quot;</span>&gt;</span><br><span class="line">    &lt;appender-ref ref=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span><br><span class="line">  &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p>4868695 [main] DEBUG - Everything’s going well<br>5758748 [main] ERROR - maybe not quite…</p></blockquote><p>另外一种方式</p><ol><li>继承PatternLayout，默认转换说明符号多设置一条</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceIdPatternLogbackLayout</span> <span class="keyword">extends</span> <span class="title">PatternLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        defaultConverterMap.put(<span class="string">&quot;traceId&quot;</span>, LogbackPatternConverter.class.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>继承ClassicConverter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackPatternConverter</span> <span class="keyword">extends</span> <span class="title">ClassicConverter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(ILoggingEvent iLoggingEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Strings.isNullOrEmpty(TraceUtil.getTraceId()) ? <span class="string">&quot;N/A&quot;</span> : TraceUtil.getTraceId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置自定义layout配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;com.absurd.logback.TraceIdPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;MM-dd HH:mm:ss.SSS&#125;] [%traceId] [%thread] %-5level %logger[%M] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>简单使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.foo.Bar;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"> <span class="keyword">import</span> org.apache.log4j.BasicConfigurator;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Define a static logger variable so that it references the</span></span><br><span class="line">   <span class="comment">// Logger instance named &quot;MyApp&quot;.</span></span><br><span class="line">   <span class="keyword">static</span> Logger logger = Logger.getLogger(MyApp.class);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 打印到控制台</span></span><br><span class="line">     BasicConfigurator.configure();</span><br><span class="line"></span><br><span class="line">     logger.info(<span class="string">&quot;Entering application.&quot;</span>);</span><br><span class="line">     Bar bar = <span class="keyword">new</span> Bar();</span><br><span class="line">     bar.doIt();</span><br><span class="line">     logger.info(<span class="string">&quot;Exiting application.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>0    [main] INFO  MyApp  - Entering application.<br>36   [main] DEBUG com.foo.Bar  - Did it again!<br>51   [main] INFO  MyApp  - Exiting application.</p></blockquote><p>手动设置配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.foo.Bar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.PropertyConfigurator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Logger logger = Logger.getLogger(MyApp.class.getName());</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// BasicConfigurator replaced with PropertyConfigurator.</span></span><br><span class="line">    PropertyConfigurator.configure(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;Entering application.&quot;</span>);</span><br><span class="line">    Bar bar = <span class="keyword">new</span> Bar();</span><br><span class="line">    bar.doIt();</span><br><span class="line">    logger.info(<span class="string">&quot;Exiting application.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>屏蔽日志</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, A1</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Print the date in ISO 8601 format</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">%d [%t] %-5p %c - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Print only messages of level WARN or above in the package com.foo.</span></span><br><span class="line"><span class="meta">log4j.logger.com.foo</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure><blockquote><p>2000-09-07 14:07:41,508 [main] INFO  MyApp - Entering application.<br>2000-09-07 14:07:41,529 [main] INFO  MyApp - Exiting application.</p></blockquote><p>多个appender</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug, stdout, R</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Pattern to output the caller&#x27;s file name and line number.</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] (%F:%L) - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.R</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.R.File</span>=<span class="string">example.log</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.R.MaxFileSize</span>=<span class="string">100KB</span></span><br><span class="line"><span class="comment"># Keep one backup file</span></span><br><span class="line"><span class="meta">log4j.appender.R.MaxBackupIndex</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.R.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.R.layout.ConversionPattern</span>=<span class="string">%p %t %c - %m%n</span></span><br></pre></td></tr></table></figure><blockquote><p> INFO [main] (MyApp2.java:12) - Entering application.<br>DEBUG [main] (Bar.java:8) - Doing it again!<br> INFO [main] (MyApp2.java:15) - Exiting application.</p></blockquote><p>自定义</p><p>log4j-1.x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceIdPatternConverter</span>  <span class="keyword">extends</span> <span class="title">PatternConverter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">convert</span><span class="params">(LoggingEvent loggingEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Strings.isNullOrEmpty(TraceUtil.getTraceId()) ? <span class="string">&quot;N/A&quot;</span> : TraceUtil.getTraceId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceIdPatternParser</span> <span class="keyword">extends</span> <span class="title">PatternParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TraceIdPatternParser</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalizeConverter</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;T&#x27;</span> == c) &#123;</span><br><span class="line">            addConverter(<span class="keyword">new</span> TraceIdPatternConverter());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.finalizeConverter(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceIdPatternLayout</span> <span class="keyword">extends</span> <span class="title">PatternLayout</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> PatternParser <span class="title">createPatternParser</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TraceIdPatternParser(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=debug, stdout, R</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=com.absurd.log4j.TraceIdPatternLayout</span><br><span class="line"></span><br><span class="line"># Pattern to output the caller&#x27;s file name and line number.</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%T] [%t] (%F:%L) - %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.R=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.R.File=trace.log</span><br><span class="line"></span><br><span class="line">log4j.appender.R.MaxFileSize=100KB</span><br><span class="line"># Keep one backup file</span><br><span class="line">log4j.appender.R.MaxBackupIndex=1</span><br><span class="line"></span><br><span class="line">log4j.appender.R.layout=com.absurd.log4j.TraceIdPatternLayout</span><br><span class="line">log4j.appender.R.layout.ConversionPattern=%p [%T] %t %c - %m%n</span><br></pre></td></tr></table></figure><blockquote><p> INFO [1524824013684_bOcv][main] (TraceTest.java:44) - Entering application.<br> INFO [1524824013684_bOcv][main] (TraceTest.java:45) - Exiting application.</p></blockquote><p>log4j-2.x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Plugin(name = &quot;TraceIdConverter&quot;, category = &quot;Converter&quot;)</span></span><br><span class="line"><span class="meta">@ConverterKeys(&#123;&quot;traceId&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceIdConverter</span> <span class="keyword">extends</span> <span class="title">LogEventPatternConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TraceIdConverter</span><span class="params">(String name, String style)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, style);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TraceIdConverter <span class="title">newInstance</span><span class="params">(String[] options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TraceIdConverter(<span class="string">&quot;traceId&quot;</span>, <span class="string">&quot;traceId&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">format</span><span class="params">(LogEvent event, StringBuilder toAppendTo)</span> </span>&#123;</span><br><span class="line">        Log4j2OutputAppender.append(toAppendTo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4j2OutputAppender</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(StringBuilder toAppendTo)</span> </span>&#123;</span><br><span class="line">        toAppendTo.append(Strings.isNullOrEmpty(TraceUtil.getTraceId()) ? <span class="string">&quot;N/A&quot;</span> : TraceUtil.getTraceId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d [%traceId] %-5p %c&#123;1&#125;:%L - %m%n&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log4j </tag>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（十） Dispatcher</title>
      <link href="/hexo/post/f64ed43e.html"/>
      <url>/hexo/post/f64ed43e.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><p>如果事件处理的逻辑能迅速完成，并且不会发起新的 IO 请求，比如只是在内存中记个标识，则直接在 IO 线程上处理更快，因为减少了线程池调度。</p><p>但如果事件处理逻辑较慢，或者需要发起新的 IO 请求，比如需要查询数据库，则必须派发到线程池，否则 IO 线程阻塞，将导致不能接收其它请求。</p><p>如果用 IO 线程处理事件，又在事件处理过程中发起新的 IO 请求，比如在连接事件中发起登录请求，会报“可能引发死锁”异常，但不会真死锁。</p><p><img src="https://user-images.githubusercontent.com/7789698/39110477-d4f17800-4703-11e8-909b-5a5983a1dc48.png" alt="image"></p><p>因此，需要通过不同的派发策略和不同的线程池配置的组合来应对不同的场景:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">dispatcher</span>=<span class="string">&quot;all&quot;</span> <span class="attr">threadpool</span>=<span class="string">&quot;fixed&quot;</span> <span class="attr">threads</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Dispatcher</p><ul><li><code>all</code> 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等（如果线程池不可用了，就使用共享线程池）。</li><li><code>direct</code> 所有消息都不派发到线程池，全部在 IO 线程上直接执行。</li><li><code>message</code> 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。</li><li><code>execution</code> 连接断开事件请求响应消息派发到线程池，其它心跳等消息，直接在 IO 线程上执行。</li><li><code>connection</code> 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池(如果请求响应消息的线程池不可用了，就使用共享线程池)。</li></ul><p>ThreadPool</p><ul><li><code>fixed</code> 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)</li><li><code>cached</code> 缓存线程池，空闲一分钟自动删除，需要时重建。</li><li><code>limited</code> 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。</li><li><code>eager</code> 优先创建<code>Worker</code>线程池。在任务数量大于<code>corePoolSize</code>但是小于<code>maximumPoolSize</code>时，优先创建<code>Worker</code>来处理任务。当任务数量大于<code>maximumPoolSize</code>时，将任务放入阻塞队列中。阻塞队列充满时抛出<code>RejectedExecutionException</code>。(相比于<code>cached</code>:<code>cached</code>在任务数量超过<code>maximumPoolSize</code>时直接抛出异常而不是将任务放入阻塞队列)</li></ul><p>上面这个eager是小伙伴时无两最近提交的，可以忽略。</p><span id="more"></span><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Dispatcher接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(AllDispatcher.NAME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dispatch the message to threadpool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> channel handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.DISPATCHER_KEY, &quot;dispather&quot;, &quot;channel.handler&quot;&#125;)</span></span><br><span class="line">    <span class="comment">// The last two parameters are reserved for compatibility with the old configuration</span></span><br><span class="line">    <span class="function">ChannelHandler <span class="title">dispatch</span><span class="params">(ChannelHandler handler, URL url)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all</span>=<span class="string">com.alibaba.dubbo.remoting.transport.dispatcher.all.AllDispatcher</span></span><br><span class="line"><span class="attr">direct</span>=<span class="string">com.alibaba.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher</span></span><br><span class="line"><span class="attr">message</span>=<span class="string">com.alibaba.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher</span></span><br><span class="line"><span class="attr">execution</span>=<span class="string">com.alibaba.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher</span></span><br><span class="line"><span class="attr">connection</span>=<span class="string">com.alibaba.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher</span></span><br></pre></td></tr></table></figure><h4 id="DirectDispatcher"><a href="#DirectDispatcher" class="headerlink" title="DirectDispatcher"></a>DirectDispatcher</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectDispatcher</span> <span class="keyword">implements</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;direct&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">dispatch</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/39111930-75d21db0-4709-11e8-8dfd-78b21a3534e2.png" alt="image"></p><h4 id="WrappedChannelHandler"><a href="#WrappedChannelHandler" class="headerlink" title="WrappedChannelHandler"></a>WrappedChannelHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//共享线程池</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService SHARED_EXECUTOR = Executors.newCachedThreadPool(<span class="keyword">new</span> NamedThreadFactory(<span class="string">&quot;DubboSharedHandler&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ExecutorService executor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ChannelHandler handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> URL url;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WrappedChannelHandler</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">    executor = (ExecutorService) ExtensionLoader.getExtensionLoader(ThreadPool.class).getAdaptiveExtension().getExecutor(url);</span><br><span class="line"></span><br><span class="line">    String componentKey = Constants.EXECUTOR_SERVICE_COMPONENT_KEY;</span><br><span class="line">    <span class="keyword">if</span> (Constants.CONSUMER_SIDE.equalsIgnoreCase(url.getParameter(Constants.SIDE_KEY))) &#123;</span><br><span class="line">        componentKey = Constants.CONSUMER_SIDE;</span><br><span class="line">    &#125;</span><br><span class="line">    DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();</span><br><span class="line">    dataStore.put(componentKey, Integer.toString(url.getPort()), executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AllDispatcher"><a href="#AllDispatcher" class="headerlink" title="AllDispatcher"></a>AllDispatcher</h4><p>所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。</p><ul><li>如果线程池不可用了，就使用共享线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllDispatcher</span> <span class="keyword">implements</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;all&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">dispatch</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AllChannelHandler(handler, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllChannelHandler</span> <span class="keyword">extends</span> <span class="title">WrappedChannelHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllChannelHandler</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler, url);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="comment">//连接进线程池</span></span><br><span class="line">        ExecutorService cexecutor = getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.CONNECTED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(<span class="string">&quot;connect event&quot;</span>, channel, getClass() + <span class="string">&quot; error when process connected event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="comment">//断开进线程池</span></span><br><span class="line">        ExecutorService cexecutor = getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.DISCONNECTED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(<span class="string">&quot;disconnect event&quot;</span>, channel, getClass() + <span class="string">&quot; error when process disconnected event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//请求响应进线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        ExecutorService cexecutor = getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">//TODO A temporary solution to the problem that the exception information can not be sent to the opposite end after the thread pool is full. Need a refactoring</span></span><br><span class="line">            <span class="comment">//fix The thread pool is full, refuses to call, does not return, and causes the consumer to wait for time out</span></span><br><span class="line">           <span class="keyword">if</span>(message <span class="keyword">instanceof</span> Request &amp;&amp; t <span class="keyword">instanceof</span> RejectedExecutionException)&#123;</span><br><span class="line">              Request request = (Request)message;</span><br><span class="line">              <span class="keyword">if</span>(request.isTwoWay())&#123;</span><br><span class="line">                 String msg = <span class="string">&quot;Server side(&quot;</span> + url.getIp() + <span class="string">&quot;,&quot;</span> + url.getPort() + <span class="string">&quot;) threadpool is exhausted ,detail msg:&quot;</span> + t.getMessage();</span><br><span class="line">                 Response response = <span class="keyword">new</span> Response(request.getId(), request.getVersion());</span><br><span class="line">                 response.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);</span><br><span class="line">                 response.setErrorMessage(msg);</span><br><span class="line">                 channel.send(response);</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(message, channel, getClass() + <span class="string">&quot; error when process received event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caught</span><span class="params">(Channel channel, Throwable exception)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        ExecutorService cexecutor = getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.CAUGHT, exception));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(<span class="string">&quot;caught event&quot;</span>, channel, getClass() + <span class="string">&quot; error when process caught event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//如果线程池是空的或者已经被shutdown了</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ExecutorService <span class="title">getExecutorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExecutorService cexecutor = executor;</span><br><span class="line">        <span class="keyword">if</span> (cexecutor == <span class="keyword">null</span> || cexecutor.isShutdown()) &#123;</span><br><span class="line">            cexecutor = SHARED_EXECUTOR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cexecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MessageOnlyChannelHandler"><a href="#MessageOnlyChannelHandler" class="headerlink" title="MessageOnlyChannelHandler"></a>MessageOnlyChannelHandler</h4><p>只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageOnlyChannelHandler</span> <span class="keyword">extends</span> <span class="title">WrappedChannelHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageOnlyChannelHandler</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler, url);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//请求响应消息进线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        ExecutorService cexecutor = executor;</span><br><span class="line">        <span class="keyword">if</span> (cexecutor == <span class="keyword">null</span> || cexecutor.isShutdown()) &#123;</span><br><span class="line">            cexecutor = SHARED_EXECUTOR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(message, channel, getClass() + <span class="string">&quot; error when process received event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ExecutionChannelHandler"><a href="#ExecutionChannelHandler" class="headerlink" title="ExecutionChannelHandler"></a>ExecutionChannelHandler</h4><p>只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。</p><p>与AllChannelHandler不同之处在于，若创建的线程池ExecutorService不可用（null或者被shutdown了），AllChannelHandler将使用共享线程池，而ExecutionChannelHandler只有报错了。</p><ul><li>都是用线程池解决</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutionChannelHandler</span> <span class="keyword">extends</span> <span class="title">WrappedChannelHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExecutionChannelHandler</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler, url);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//连接进线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        executor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.CONNECTED));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//断开进线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        executor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.DISCONNECTED));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//请求响应</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">//TODO A temporary solution to the problem that the exception information can not be sent to the opposite end after the thread pool is full. Need a refactoring</span></span><br><span class="line">            <span class="comment">//fix The thread pool is full, refuses to call, does not return, and causes the consumer to wait for time out</span></span><br><span class="line">           <span class="keyword">if</span>(message <span class="keyword">instanceof</span> Request &amp;&amp;</span><br><span class="line">                 t <span class="keyword">instanceof</span> RejectedExecutionException)&#123;</span><br><span class="line">              Request request = (Request)message;</span><br><span class="line">              <span class="keyword">if</span>(request.isTwoWay())&#123;</span><br><span class="line">                 String msg = <span class="string">&quot;Server side(&quot;</span>+url.getIp()+<span class="string">&quot;,&quot;</span>+url.getPort()+<span class="string">&quot;) threadpool is exhausted ,detail msg:&quot;</span>+t.getMessage();</span><br><span class="line">                 Response response = <span class="keyword">new</span> Response(request.getId(), request.getVersion());</span><br><span class="line">                 response.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);</span><br><span class="line">                 response.setErrorMessage(msg);</span><br><span class="line">                 channel.send(response);</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(message, channel, getClass() + <span class="string">&quot; error when process received event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//异常放入线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caught</span><span class="params">(Channel channel, Throwable exception)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        executor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.CAUGHT, exception));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConnectionOrderedChannelHandler"><a href="#ConnectionOrderedChannelHandler" class="headerlink" title="ConnectionOrderedChannelHandler"></a>ConnectionOrderedChannelHandler</h4><p>在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。</p><ul><li>如果请求响应消息的线程池不可用了，就使用共享线程池。</li><li>连接断开事件放入队列有序逐个执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionOrderedChannelHandler</span> <span class="keyword">extends</span> <span class="title">WrappedChannelHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ThreadPoolExecutor connectionExecutor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> queuewarninglimit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionOrderedChannelHandler</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler, url);</span><br><span class="line">        String threadName = url.getParameter(Constants.THREAD_NAME_KEY, Constants.DEFAULT_THREAD_NAME);</span><br><span class="line">        connectionExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(url.getPositiveParameter(Constants.CONNECT_QUEUE_CAPACITY, Integer.MAX_VALUE)),</span><br><span class="line">                <span class="keyword">new</span> NamedThreadFactory(threadName, <span class="keyword">true</span>),</span><br><span class="line">                <span class="keyword">new</span> AbortPolicyWithReport(threadName, url)</span><br><span class="line">        );  <span class="comment">// FIXME There&#x27;s no place to release connectionExecutor!</span></span><br><span class="line">        queuewarninglimit = url.getParameter(Constants.CONNECT_QUEUE_WARNING_SIZE, Constants.DEFAULT_CONNECT_QUEUE_WARNING_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//连接放入队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkQueueLength();</span><br><span class="line">            connectionExecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.CONNECTED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(<span class="string">&quot;connect event&quot;</span>, channel, getClass() + <span class="string">&quot; error when process connected event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//断开放入队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkQueueLength();</span><br><span class="line">            connectionExecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.DISCONNECTED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(<span class="string">&quot;disconnected event&quot;</span>, channel, getClass() + <span class="string">&quot; error when process disconnected event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//请求响应消息派发线程池</span></span><br><span class="line"><span class="comment">//若创建的线程池ExecutorService不可用（null或者被shutdown了），将使用共享线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        ExecutorService cexecutor = executor;</span><br><span class="line">        <span class="keyword">if</span> (cexecutor == <span class="keyword">null</span> || cexecutor.isShutdown()) &#123;</span><br><span class="line">            cexecutor = SHARED_EXECUTOR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">//fix, reject exception can not be sent to consumer because thread pool is full, resulting in consumers waiting till timeout.</span></span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request &amp;&amp; t <span class="keyword">instanceof</span> RejectedExecutionException) &#123;</span><br><span class="line">                Request request = (Request) message;</span><br><span class="line">                <span class="keyword">if</span> (request.isTwoWay()) &#123;</span><br><span class="line">                    String msg = <span class="string">&quot;Server side(&quot;</span> + url.getIp() + <span class="string">&quot;,&quot;</span> + url.getPort() + <span class="string">&quot;) threadpool is exhausted ,detail msg:&quot;</span> + t.getMessage();</span><br><span class="line">                    Response response = <span class="keyword">new</span> Response(request.getId(), request.getVersion());</span><br><span class="line">                    response.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);</span><br><span class="line">                    response.setErrorMessage(msg);</span><br><span class="line">                    channel.send(response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(message, channel, getClass() + <span class="string">&quot; error when process received event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//异常放入线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caught</span><span class="params">(Channel channel, Throwable exception)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        ExecutorService cexecutor = executor;</span><br><span class="line">        <span class="keyword">if</span> (cexecutor == <span class="keyword">null</span> || cexecutor.isShutdown()) &#123;</span><br><span class="line">            cexecutor = SHARED_EXECUTOR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.CAUGHT, exception));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(<span class="string">&quot;caught event&quot;</span>, channel, getClass() + <span class="string">&quot; error when process caught event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkQueueLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connectionExecutor.getQueue().size() &gt; queuewarninglimit) &#123;</span><br><span class="line">            logger.warn(<span class="keyword">new</span> IllegalThreadStateException(<span class="string">&quot;connectionordered channel handler `queue size: &quot;</span> + connectionExecutor.getQueue().size() + <span class="string">&quot; exceed the warning limit number :&quot;</span> + queuewarninglimit));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paxos 协议</title>
      <link href="/hexo/post/410c3782.html"/>
      <url>/hexo/post/410c3782.html</url>
      
        <content type="html"><![CDATA[<h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><h3 id="数据一致性-consistency"><a href="#数据一致性-consistency" class="headerlink" title="数据一致性(consistency)"></a>数据一致性(consistency)</h3><p>如果系统对一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有读操作都不能读到这个数据，对调用者而言数据具有强一致性(strong consistency) (又叫原子性 atomic、线性一致性 linearizable consistency)</p><h3 id="服务可用性-availability"><a href="#服务可用性-availability" class="headerlink" title="服务可用性(availability)"></a>服务可用性(availability)</h3><p>所有读写请求在一定时间内得到响应，可终止、不会一直等待</p><h3 id="分区容错性-partition-tolerance"><a href="#分区容错性-partition-tolerance" class="headerlink" title="分区容错性(partition-tolerance)"></a>分区容错性(partition-tolerance)</h3><p>在网络分区的情况下，被分隔的节点仍能正常对外服务</p><p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项[<a href="https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-4">4]</a>。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</p><span id="more"></span><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><h3 id="基本可用（Basically-Available）"><a href="#基本可用（Basically-Available）" class="headerlink" title="基本可用（Basically Available）"></a>基本可用（Basically Available）</h3><p>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。</p><ul><li>响应时间上的损失：正常情况下，一个在线搜索引擎需要0.5秒内返回给用户相应的查询结果，但由于出现异常（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。</li><li>功能上的损失：正常情况下，在一个电子商务网站上进行购物，消费者几乎能够顺利地完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。</li></ul><h3 id="软状态（Soft-state）"><a href="#软状态（Soft-state）" class="headerlink" title="软状态（Soft state）"></a>软状态（Soft state）</h3><p>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。</p><h3 id="最终一致性（Eventually-consistent）"><a href="#最终一致性（Eventually-consistent）" class="headerlink" title="最终一致性（Eventually consistent）"></a>最终一致性（Eventually consistent）</h3><p>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p><h2 id="集群脑裂"><a href="#集群脑裂" class="headerlink" title="集群脑裂"></a>集群脑裂</h2><p>集群的脑裂通常是发生在集群中部分节点之间不可达而引起的（或者因为节点请求压力较大，导致其他节点与该节点的心跳检测不可用）。当上述情况发生时，不同分裂的小集群会自主的选择出master节点，造成原本的集群会同时存在多个master节点。</p><h2 id="两阶段提交（Two-Phase-Commit）"><a href="#两阶段提交（Two-Phase-Commit）" class="headerlink" title="两阶段提交（Two-Phase Commit）"></a>两阶段提交（Two-Phase Commit）</h2><p>为了使基于<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F">分布式系统</a>架构下的所有节点在进行<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1">事务</a>提交时保持一致性而设计的一种<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95">算法</a>(Algorithm)。</p><p>通常，<strong>二阶段提交</strong>也被称为是一种<strong>协议</strong>(Protocol)。在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的<a href="https://zh.wikipedia.org/wiki/ACID">ACID</a>特性，需要引入一个作为<strong>协调者</strong>的组件来统一掌控所有节点(称作<strong>参与者</strong>)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。</p><p>因此，二阶段提交的算法思路可以概括为： 参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。</p><h3 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h3><ul><li><p>第一阶段(提交请求阶段)</p><ol><li><strong>协调者</strong>节点向<strong>所有参与者</strong>节点询问是否可以执行提交操作，并开始等待各参与者节点的响应。</li><li>参与者节点<strong>执行</strong>询问发起为止的<strong>所有事务</strong>操作，并将<a href="https://zh.wikipedia.org/w/index.php?title=Undo%E4%BF%A1%E6%81%AF&action=edit&redlink=1">Undo信息</a>和<a href="https://zh.wikipedia.org/w/index.php?title=Redo%E4%BF%A1%E6%81%AF&action=edit&redlink=1">Redo信息</a>写入日志。</li></ol><ul><li>各参与者节点<strong>响应</strong>协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个”同意”消息；如果参与者节点的事务操作实际执行失败，则它返回一个”中止”消息。</li></ul><p>有时候，第一阶段也被称作<strong>投票阶段</strong>，即各参与者投票是否要继续接下来的提交操作。</p></li></ul><ul><li><p>第二阶段(提交执行阶段)</p><ul><li><p>成功</p><p>当协调者节点从所有参与者节点获得的相应消息都为”同意”时：</p><ol><li>协调者节点向所有参与者节点发出”<strong>正式提交</strong>“的请求。</li><li>参与者节点正式完成操作（如commit），并释放在整个事务期间内占用的资源。</li></ol><ul><li><p>参与者节点向协调者节点发送”完成”消息。</p></li><li><p>协调者节点收到<strong>所有</strong>参与者节点<strong>反馈</strong>的”完成”消息后，完成事务。</p></li></ul></li><li><p>失败</p><p>如果任一参与者节点在第一阶段返回的响应消息为”终止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：</p><ol><li>协调者节点向所有参与者节点发出”回滚操作”的请求。</li><li>参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。</li></ol><ul><li><p>参与者节点向协调者节点发送”回滚完成”消息。</p></li><li><p>协调者节点收到所有参与者节点反馈的”回滚完成”消息后，取消事务。</p></li></ul></li></ul><p> 有时候，第二阶段也被称作<strong>完成阶段</strong>，因为无论结果怎样，协调者都必须在此阶段结束当前事务。</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>二阶段提交算法的最大缺点就在于它的执行过程中间，节点都处于<strong>阻塞</strong>状态。即节点之间在等待对方的相应消息时，它将什么也做不了。特别是，当一个节点在已经占有了某项资源的情况下，为了等待其他节点的响应消息而陷入阻塞状态时，当第三个节点尝试访问该节点占有的资源时，这个节点也将连带陷入阻塞状态。</p><p>另外，协调者节点指示参与者节点进行提交等操作时，如有<strong>参与者节点出现了崩溃</strong>等情况而导致协调者始终无法获取所有参与者的响应信息，这时协调者将只能依赖协调者自身的<strong>超时机制</strong>来生效。但往往超时机制生效时，协调者都会指示参与者进行回滚操作。这样的策略显得比较保守。</p><h2 id="三阶段提交（Three-Phase-Commit）"><a href="#三阶段提交（Three-Phase-Commit）" class="headerlink" title="三阶段提交（Three-Phase Commit）"></a>三阶段提交（Three-Phase Commit）</h2><p>在计算机网络及数据库的范畴下，使得一个分布式系统内的所有节点能够执行事务的提交的一种分布式算法。三阶段提交是为解决<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4">两阶段提交协议</a>的缺点而设计的。</p><p>与两阶段提交不同的是，三阶段提交是“非阻塞”协议。三阶段提交在两阶段提交的<strong>第一阶段与第二阶段之间插入了</strong>一个<strong>准备阶段</strong>，使得原先在两阶段提交中，参与者在投票之后，由于协调者发生崩溃或错误，而导致参与者处于无法知晓是否提交或者中止的“不确定状态”所产生的可能相当长的延时的问题[<a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4#cite_note-1">1]</a>得以解决。 举例来说，假设有一个决策小组由一个主持人负责与多位组员以电话联络方式协调是否通过一个提案，以两阶段提交来说，主持人收到一个提案请求，打电话跟每个组员询问是否通过并统计回复，然后将最后决定打电话通知各组员。要是主持人在跟第一位组员通完电话后失忆，而第一位组员在得知结果并执行后老人痴呆，那么即使重新选出主持人，也没人知道最后的提案决定是什么，也许是通过，也许是驳回，不管大家选择哪一种决定，都有可能与第一位组员已执行过的真实决定不一致，老板就会不开心认为决策小组沟通有问题而解雇。三阶段提交即是引入了另一个步骤，主持人打电话跟组员通知请准备通过提案，以避免没人知道真实决定而造成决定不一致的失业危机。为什么能够解决二阶段提交的问题呢？回到刚刚提到的状况，在主持人通知完第一位组员请准备通过后两人意外失忆，即使没人知道全体在第一阶段的决定为何，全体决策组员仍可以重新协调过程或直接否决，不会有不一致决定而失业。那么当主持人通知完全体组员请准备通过并得到大家的再次确定后进入第三阶段，当主持人通知第一位组员请通过提案后两人意外失忆，这时候其他组员再重新选出主持人后，仍可以知道目前至少是处于准备通过提案阶段，表示第一阶段大家都已经决定要通过了，此时便可以直接通过。</p><p><img src="https://user-images.githubusercontent.com/7789698/38654220-cd1a8610-3e40-11e8-8027-ea351e5bab41.png" alt="image"></p><h3 id="基本算法-1"><a href="#基本算法-1" class="headerlink" title="基本算法"></a>基本算法</h3><ul><li><p>阶段一CanCommit</p><ol><li>事务询问</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">协调者向各参与者发送CanCommit的请求，询问是否可以执行事务提交操作，并开始等待各参与者的响应</span><br></pre></td></tr></table></figure><ol start="2"><li>参与者向协调者反馈询问的响应</li></ol><p>参与者收到CanCommit请求后，正常情况下，如果自身认为可以顺利执行事务，那么会反馈Yes响应，并进入预备状态，否则反馈No。</p></li><li><p>阶段二PreCommit</p><ol><li>执行事务预提交</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果协调者接收到各参与者反馈都是Yes，那么执行事务预提交</span><br></pre></td></tr></table></figure><ul><li>A、发送预提交请求<br> 协调者向各参与者发送preCommit请求，并进入prepared阶段</li><li>B、事务预提交<br> 参与者接收到preCommit请求后，会执行事务操作，并将Undo和Redo信息记录到事务日记中</li><li>C、各参与者向协调者反馈事务执行的响应<br> 如果各参与者都成功执行了事务操作，那么反馈给协调者Ack响应，同时等待最终指令，提交commit或者终止abort</li></ul><ol start="2"><li>中断事务</li></ol><p>  如果<strong>任何一个</strong>参与者向协调者反馈了No响应，或者在<strong>等待超时</strong>后，协调者无法接收到所有参与者的反馈，那么就会中断事务。</p><ul><li><p>A、发送中断请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">协调者向所有参与者发送abort请求</span><br></pre></td></tr></table></figure></li><li><p>B、中断事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无论是收到来自协调者的abort请求，还是等待超时，参与者都中断事务</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>阶段三doCommit</li></ol><ul><li><p>执行提交</p><p>A、发送提交请求</p><p>假设协调者正常工作，接收到了所有参与者的ack响应，那么它将从预提交阶段进入提交状态，并向所有参与者发送doCommit请求</p><p>B、事务提交</p><p>参与者收到doCommit请求后，正式提交事务，并在完成事务提交后释放占用的资源</p><p>C、反馈事务提交结果</p><p> 参与者完成事务提交后，向协调者发送ACK信息</p><p> D、完成事务<br> 协调者接收到所有参与者ack信息，完成事务</p></li><li><p>中断事务</p></li></ul><p>  假设协调者正常工作，并且有任一参与者反馈No，或者在等待超时后无法接收所有参与者的反馈，都会中断事务</p><ul><li><p>A、发送中断请求</p><p>协调者向所有参与者节点发送abort请求</p><p>B、事务回滚<br>参与者接收到abort请求后，利用undo日志执行事务回滚，并在完成事务回滚后释放占用的资源</p><p>C、反馈事务回滚结果<br>参与者在完成事务回滚之后，向协调者发送ack信息</p><p>D、中断事务<br>协调者接收到所有参与者反馈的ack信息后，中断事务。</p></li></ul><p>阶段三可能出现的问题：<br>  <strong>协调者出现问题</strong>、<strong>协调者与参与者之间网络出现故障</strong>。不论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的doCommit或是abort请求，针对这种情况，<strong>参与者都会在等待超时后，继续进行事务提交（timeout后中断事务）</strong>。</p></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>降低参与者阻塞范围，并能够在出现单点故障后继续达成一致</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>引入preCommit阶段，在这个阶段如果出现网络分区，协调者无法与参与者正常通信，参与者依然会进行事务提交，造成数据不一致。</p><h2 id="租约"><a href="#租约" class="headerlink" title="租约"></a>租约</h2><p>租约就是在<strong>一定期限内</strong>给予持有者<strong>特定权力</strong>的协议。每个租约都有一个期限，正是这个期限可以保证租约机制容忍机器失效和网络分割。</p><h3 id="租约可以用来干什么？"><a href="#租约可以用来干什么？" class="headerlink" title="租约可以用来干什么？"></a>租约可以用来干什么？</h3><ul><li>进行故障检测。这类似于ZooKeeper中master 与 slaver 之间发送的心跳包的作用。在ZK中， master 和 slaver之间通过交换<strong>心跳包</strong>来检测它们是否还存活。</li><li>维护缓存一致性。第一种办法是轮询：每次读取数据时都先询问服务器数据是不是最新的，若不是，则先让服务器传输新数据，然后再读取该新数据。第二种方法是回调：由服务器记录有哪些客户端读取了数据，当服务器对数据做修改时先通知记录下来的这些客户端，上次读取过的数据已经失效。这二种方法都有一定的缺陷。因此，可以引入租约机制。在租约期限内，可以保证客户端缓存的数据是最新的。当租约过期后，客户端需要重新向服务器询问数据，重新续约。</li></ul><h2 id="两将军问题"><a href="#两将军问题" class="headerlink" title="两将军问题"></a>两将军问题</h2><p>为了引入该算法，首先提出一种场景，即两将军问题：</p><blockquote><p>有两支军队，它们分别有一位将军领导，现在准备攻击一座修筑了防御工事的城市。这两支军队都驻扎在那座城市的附近，分占一座山头。一道山谷把两座山分隔开来，并且两位将军唯一的通信方式就是派各自的信使来往于山谷两边。不幸的是，这个山谷已经被那座城市的保卫者占领，并且存在一种可能，那就是任何被派出的信使通过山谷是会被捕。 请注意，虽然两位将军已经就攻击那座城市达成共识，但在他们各自占领山头阵地之前，并没有就进攻时间达成共识。两位将军必须让自己的军队同时进攻城市才能取得成功。因此，他们必须互相沟通，以确定一个时间来攻击，并同意就在那时攻击。如果只有一个将军进行攻击，那么这将是一个灾难性的失败。</p></blockquote><h3 id="三军问题"><a href="#三军问题" class="headerlink" title="三军问题"></a>三军问题</h3><p><img src="https://user-images.githubusercontent.com/7789698/38786841-12c90a14-415d-11e8-980b-eede0b8ec1f5.png" alt="image"></p><blockquote><p>1） 1支红军在山谷里扎营，在周围的山坡上驻扎着3支蓝军；</p><p>2） 红军比任意1支蓝军都要强大；如果1支蓝军单独作战，红军胜；如果2支或以上蓝军同时进攻，蓝军胜；</p><p>3） 三支蓝军需要同步他们的进攻时间；但他们惟一的通信媒介是派通信兵步行进入山谷，在那里他们可能被俘虏，从而将信息丢失；或者为了避免被俘虏，可能在山谷停留很长时间；</p><p>4） 每支军队有1个参谋负责提议进攻时间；每支军队也有1个将军批准参谋提出的进攻时间；很明显，1个参谋提出的进攻时间需要获得至少2个将军的批准才有意义；</p><p>5） 问题：是否存在一个协议，能够使得蓝军同步他们的进攻时间？</p></blockquote><p>接下来以两个假设的场景来演绎BasicPaxos；参谋和将军需要遵循一些基本的规则</p><blockquote><p>1） 参谋以两阶段提交（prepare/commit）的方式来发起提议，在prepare阶段需要给出一个编号；</p><p>2） 在prepare阶段产生冲突，将军以编号大小来裁决，编号大的参谋胜出；</p><p>3） 参谋在prepare阶段如果收到了将军返回的已接受进攻时间，在commit阶段必须使用这个返回的进攻时间；</p></blockquote><h2 id="拜占庭将军问题（Byzantine-Generals-Problem）"><a href="#拜占庭将军问题（Byzantine-Generals-Problem）" class="headerlink" title="拜占庭将军问题（Byzantine Generals Problem）"></a>拜占庭将军问题（Byzantine Generals Problem）</h2><blockquote><p>一组拜占庭将军分别各率领一支军队共同围困一座城市。为了简化问题，将各支军队的行动策略限定为进攻或撤离两种。因为部分军队进攻部分军队撤离可能会造成灾难性后果，因此各位将军必须通过投票来达成一致策略，即所有军队一起进攻或所有军队一起撤离。因为各位将军分处城市不同方向，他们只能通过信使互相联系。在投票过程中每位将军都将自己投票给进攻还是撤退的信息通过信使分别通知其他所有将军，这样一来每位将军根据自己的投票和其他所有将军送来的信息就可以知道共同的投票结果而决定行动策略。</p></blockquote><p>系统的问题在于，将军中可能出现<a href="https://zh.wikipedia.org/wiki/%E5%8F%9B%E5%BE%92">叛徒</a>，他们不仅可能向较为糟糕的策略投票，还可能选择性地发送投票信息。假设有9位将军投票，其中1名叛徒。8名忠诚的将军中出现了4人投进攻，4人投撤离的情况。这时候叛徒可能故意给4名投进攻的将领送信表示投票进攻，而给4名投撤离的将领送信表示投撤离。这样一来在4名投进攻的将领看来，投票结果是5人投进攻，从而发起进攻；而在4名投撤离的将军看来则是5人投撤离。这样各支军队的一致协同就遭到了破坏。</p><p>由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。而即使在保证所有将军忠诚的情况下，也不能排除信使被敌人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。</p><p>假始那些忠诚（或是没有出错）的将军仍然能通过多数决定来决定他们的战略，便称达到了拜占庭容错。在此，票都会有一个默认值，若消息（票）没有被收到，则使用此默认值来投票。</p><p>上述的故事映射到计算机系统里，将军便成了计算机，而信差就是通信系统。虽然上述的问题涉及了电子化的决策支持与信息安全，却没办法单纯的用<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8">密码学</a>与<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0">数字签名</a>来解决。因为不正常的<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%A3%93">电压</a>仍可能影响整个加密过程，这不是密码学与数字签名算法在解决的问题。因此计算机就有可能将错误的结果提交去，亦可能导致错误的决策。</p><h2 id="paxos-协议"><a href="#paxos-协议" class="headerlink" title="paxos 协议"></a>paxos 协议</h2><blockquote><p>一个叫做Paxos的希腊城邦，这个岛按照议会民主制的政治模式制订法律，但是没有人愿意将自己的全部时间和精力放在这种事情上。所以无论是议员，议长或者传递纸条的服务员都不能承诺别人需要时一定会出现，也无法承诺批准决议或者传递消息的时间。但是这里假设没有拜占庭将军问题（Byzantine failure，即虽然有可能一个消息被传递了两次，但是绝对不会出现错误的消息）；只要等待足够的时间，消息就会被传到。另外，Paxos岛上的议员是不会反对其他议员提出的决议的。</p></blockquote><p>用于达成共识性问题，即对多个节点产生的值，该算法能保证只选出唯一一个值。</p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>主要有三类节点：</p><ol><li><p><strong>提议者（Proposer）</strong>：提议一个值；</p></li><li><p><strong>接受者（Acceptor）</strong>：对每个提议进行投票；</p></li><li><p><strong>告知者（Learner）</strong>：被告知投票的结果，不参与投票的过程。</p><p><img src="https://user-images.githubusercontent.com/7789698/38655116-5ac4c404-3e45-11e8-910a-cc69ae55787a.png" alt="image"></p></li></ol><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li><p>决议（value）只有在被proposers提出后才能被批准（未经批准的决议称为“提案（proposal）”）；</p></li><li><p>在一次Paxos算法的执行实例中，只批准（chosen）一个value；</p></li><li><p>learners只能获得被批准（chosen）的value。</p></li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><blockquote><p>p1: 一个acceptor必须接受（accept）第一次收到的提案。</p></blockquote><blockquote><p>p1a：当且仅当acceptor没有回应过编号大于n的prepare请求时，acceptor接受（accept）编号为n的提案。</p></blockquote><blockquote><p>p2: 一旦一个具有value v的提案被批准（chosen），那么之后批准（chosen）的提案必须具有value v。</p></blockquote><blockquote><p>p2a: 一旦一个具有value v的提案被批准（chosen），那么之后任何acceptor再次接受（accept）的提案必须具有value v。</p></blockquote><blockquote><p>p2b: 一旦一个具有value v的提案被批准（chosen），那么以后任何proposer提出的提案必须具有value v。</p></blockquote><blockquote><p>p2c: 如果一个编号为n的提案具有value v，那么存在一个多数派，要么他们中所有人都没有接受（accept）编号小于n 的任何提案，要么他们已经接受（accept）的所有编号小于n的提案中编号最大的那个提案具有value v。</p></blockquote><h3 id="Basic-Paxos"><a href="#Basic-Paxos" class="headerlink" title="Basic-Paxos"></a>Basic-Paxos</h3><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>规定一个提议包含两个字段：[n, v]，其中 n 为序号（具有唯一性），v 为提议值。</p><ol><li><p>下图演示了两个 Proposer 和三个 Acceptor 的系统中运行该算法的初始过程，每个 Proposer 都会<strong>向每个</strong> Acceptor <strong>发送提议请求</strong>。</p><p><img src="https://user-images.githubusercontent.com/7789698/38655245-285a36ec-3e46-11e8-91ee-44a133d8fb10.png" alt="image"></p></li><li><p>当 Acceptor <strong>接收</strong>到一个<strong>提议</strong>请求，包含的提议为 [n1, v1]，并且之前还未接收过提议请求，那么发送一个提议响应，<strong>设置当前接收的提议为 [n1, v1]<strong>，并且保证以后</strong>不会再接受提议值小于 n1 的提议</strong>。</p><p>如下图，Acceptor X 在收到 [n=2, v=8] 的提议请求时，由于之前没有接收过提议，因此就发送一个 [no previous] 的提议响应，并且设置当前接收的提议为 [n=2, v=8]，并且保证以后不会再接受提议值小于 2 的提议。其它的 Acceptor 类似。</p><p><img src="https://user-images.githubusercontent.com/7789698/38655263-44041b1a-3e46-11e8-848d-a5299cede0be.png" alt="image"></p></li><li><p>如果 Acceptor 接受到一个提议请求，包含的提议为 [n2, v2]，并且<strong>之前</strong>已经接收过提议 [<strong>n1</strong>, v1]。如果 <strong>n1 &gt; n2</strong>，那么就<strong>丢弃</strong>该提议请求；否则（<strong>n2&gt;n1</strong>），发送提议响应，该提议响应包含之前已经接收过的提议 [n1, v1]，**设置当前接收的提议为 [n2, v2]**，并且保证以后不会再接受提议值小于 n2 的提议。</p><p>如下图，Acceptor Z 收到 Proposer A 发来的 [n=2, v=8] 的提议请求，由于之前已经接收过 [n=4, v=5] 的提议，并且 n &gt; 2，因此就抛弃该提议请求；Acceptor X 收到 Proposer B 发来的 [n=4, v=5] 的提议请求，因为之前接收的提议为 [n=2, v=8]，并且 2 &lt;= 4，因此就发送 [n=2, v=8] 的提议响应，设置当前接收的提议为 [n=4, v=5]，并且保证以后不会再接受提议值小于 4 的提议。Acceptor Y 类似。</p><p><img src="https://user-images.githubusercontent.com/7789698/38656437-1e225b4e-3e4d-11e8-8687-3d3dbb8a61e8.png" alt="image"></p></li><li><p>当一个 Proposer 接收到<strong>超过一半 Acceptor 的提议响应</strong>时，就可以发送接受请求。</p><p>如下图，Proposer A 接受到两个提议响应之后，就发送 [n=2, v=8] 接受请求。该接受请求会被所有 Acceptor 丢弃，因为此时所有 Acceptor 都保证不接受提议值小于 4 的提议。Proposer B 过后也收到了两个提议响应，因此也开始发送接受请求。需要注意的是，接受请求的 v 需要取它收到的最大 v 值，也就是 8。因此它发送 [n=4, v=8] 的接受请求。</p><p><img src="https://user-images.githubusercontent.com/7789698/38656170-5df52db6-3e4b-11e8-8479-613a7f8c6589.png" alt="image"></p></li><li><p>Acceptor 接收到接受请求时，如果<strong>提议号大于等于该 Acceptor 承诺的最小提议号</strong>，那么就发送<strong>通知给所有的 Learner</strong>。当 Learner 发现有大多数的 Acceptor 接收了某个提议，那么该提议的提议值就被 Paxos 选择出来。</p><p><img src="https://user-images.githubusercontent.com/7789698/38658036-e02e53a2-3e55-11e8-9a86-cd7455d0da33.png" alt="image"></p></li></ol><h4 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h4><h5 id="1-正确性"><a href="#1-正确性" class="headerlink" title="1. 正确性"></a>1. 正确性</h5><p>只有一个提议值会生效。</p><p>因为 Paxos 协议要求每个生效的提议被多数 Acceptor 接收，并且 Acceptor 不会接受两个不同的提议，因此可以保证正确性。</p><h5 id="2-可终止性"><a href="#2-可终止性" class="headerlink" title="2. 可终止性"></a>2. 可终止性</h5><p>最后总会有一个提议生效。</p><p>Paxos 协议能够让 Proposer 发送的提议朝着能被大多数 Acceptor 接受的那个提议靠拢，因此能够保证可终止性。</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>活锁问题</strong>。在base-paxos算法中，不存在leader这样的角色，于是存在这样一种情况，即P1提交了一个proposal n1并且通过了prepare阶段；此时P2提交了一个proposal n2(n2&gt;n1)并且也通过了prepare阶段；P1在commit时因为已经通过了n2而被拒绝；于是P1继续提交一个proposal n3并且通过prepare阶段；巧的是此时P2开始commit了，由于n2&lt;n3再次被拒绝……如此循环往复。这种情况被称为活锁。即整个系统都没死，但由于互相请求资源而被互相锁死。为了不发生活锁的情况，最简单的方式当然是缩减proposer到一个，这样就不会发生互相请求锁死的情况，也即退化。事实上很多后来的工业级协议，都是paxos协议的退化或者变种。</li></ol><ol start="2"><li><strong>复杂度问题</strong>。base-paxos协议中还存在这样那样的问题，于是各种变种paxos出现了，比如为了解决活锁问题，出现了multi-paxos；为了解决通信次数较多的问题，出现了fast-paxos；为了尽量减少冲突，出现了epaxos。可以看到，工业级实现需要考虑更多的方面，诸如性能，异常等等。这也是为啥许多分布式的一致性框架并非真正基于paxos来实现的原因。</li><li><strong>全序问题</strong>。对于paxos算法来说，不能保证两次提交最终的顺序，而zookeeper需要做到这点</li></ol><p>信息流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(1,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(1,Vn)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(1,Vn)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><p>Vn = last of (Va,Vb,Vc)</p><h4 id="Acceptor接收失败的情况"><a href="#Acceptor接收失败的情况" class="headerlink" title="Acceptor接收失败的情况"></a>Acceptor接收失败的情况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |          |  |  !       |  |  !! FAIL !!</span><br><span class="line">   |         |&lt;---------X--X          |  |  Promise(1,&#123;Va, Vb, null&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|          |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X---------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |          |  |</span><br></pre></td></tr></table></figure><h4 id="Learner接收失败"><a href="#Learner接收失败" class="headerlink" title="Learner接收失败"></a>Learner接收失败</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(1,&#123;null,null,null&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |         |          |  |  |       |  !  !! FAIL !!</span><br><span class="line">   |&lt;---------------------------------X     Response</span><br><span class="line">   |         |          |  |  |       |</span><br></pre></td></tr></table></figure><h4 id="Proposer宕机或发送失败"><a href="#Proposer宕机或发送失败" class="headerlink" title="Proposer宕机或发送失败"></a>Proposer宕机或发送失败</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Client  Proposer        Acceptor     Learner</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   X-----&gt;|             |  |  |       |  |  Request</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(1,&#123;null, null, null&#125;)</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   |      |             |  |  |       |  |  !! Leader fails during broadcast !!</span><br><span class="line">   |      X------------&gt;|  |  |       |  |  Accept!(1,V)</span><br><span class="line">   |      !             |  |  |       |  |</span><br><span class="line">   |         |          |  |  |       |  |  !! NEW LEADER !!</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(2,&#123;V, null, null&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(2,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(2,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><h4 id="Proposers竞争"><a href="#Proposers竞争" class="headerlink" title="Proposers竞争"></a>Proposers竞争</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Client   Leader         Acceptor     Learner</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   X-----&gt;|             |  |  |       |  |  Request</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(1,&#123;null,null,null&#125;)</span><br><span class="line">   |      !             |  |  |       |  |  !! LEADER FAILS</span><br><span class="line">   |         |          |  |  |       |  |  !! NEW LEADER (knows last number was 1)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(2,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER recovers</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER tries 2, denied</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Nack(2)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER tries 3</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(3)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(3,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! NEW LEADER proposes, denied</span><br><span class="line">   |      |  X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(2,Va)</span><br><span class="line">   |      |  |&lt;---------X--X--X       |  |  Nack(3)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! NEW LEADER tries 4</span><br><span class="line">   |      |  X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(4)</span><br><span class="line">   |      |  |&lt;---------X--X--X       |  |  Promise(4,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER proposes, denied</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Accept!(3,Vb)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Nack(4)</span><br><span class="line">   |      |  |          |  |  |       |  |  ... and so on ...</span><br></pre></td></tr></table></figure><h3 id="Multi-Paxos"><a href="#Multi-Paxos" class="headerlink" title="Multi-Paxos"></a>Multi-Paxos</h3><p>唯一的propser</p><p>如果leader是相对稳定的，可以跳过第一个阶段。在同一个leader下，每一轮还会递增一个整数。</p><p>Multi-Paxos减少了无故障消息延迟（proposal到learning），从4次延迟减少到2次延迟</p><h4 id="开始阶段"><a href="#开始阶段" class="headerlink" title="开始阶段"></a>开始阶段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  | --- First Request ---</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(N)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(N,I,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(N,I,Vm)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(N,I,Vm)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><p>Vm = last of (Va, Vb, Vc)</p><h4 id="稳定状态"><a href="#稳定状态" class="headerlink" title="稳定状态"></a>稳定状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client   Proposer       Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |  --- Following Requests ---</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(N,I+1,W)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(N,I+1,W)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><h4 id="简化角色"><a href="#简化角色" class="headerlink" title="简化角色"></a>简化角色</h4><h4 id="开始阶段-1"><a href="#开始阶段-1" class="headerlink" title="开始阶段"></a>开始阶段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client      Servers</span><br><span class="line">   |         |  |  | --- First Request ---</span><br><span class="line">   X--------&gt;|  |  |  Request</span><br><span class="line">   |         X-&gt;|-&gt;|  Prepare(N)</span><br><span class="line">   |         |&lt;-X--X  Promise(N,I,&#123;Va,Vb&#125;)</span><br><span class="line">   |         X-&gt;|-&gt;|  Accept!(N,I,Vn)</span><br><span class="line">   |         X&lt;&gt;X&lt;&gt;X  Accepted(N,I)</span><br><span class="line">   |&lt;--------X  |  |  Response</span><br><span class="line">   |         |  |  |</span><br></pre></td></tr></table></figure><h4 id="稳定阶段"><a href="#稳定阶段" class="headerlink" title="稳定阶段"></a>稳定阶段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Client      Servers</span><br><span class="line">   X--------&gt;|  |  |  Request</span><br><span class="line">   |         X-&gt;|-&gt;|  Accept!(N,I+1,W)</span><br><span class="line">   |         X&lt;&gt;X&lt;&gt;X  Accepted(N,I+1)</span><br><span class="line">   |&lt;--------X  |  |  Response</span><br><span class="line">   |         |  |  |</span><br></pre></td></tr></table></figure><h3 id="Fast-Paxos"><a href="#Fast-Paxos" class="headerlink" title="Fast-Paxos"></a>Fast-Paxos</h3><p>Basic Paxos里，客户端到Learner的请求有三个消息的延迟。Fast Paxos允许两个消息的延迟。但是要求1、系统由3f+1个acceptor构成，容许f个错误（取代2f+1个）；2、客户端发送请求到多个目的地</p><p>如果leader没有值给Acceptor，Client可以直接给Acceptor发送一个Accept，接下来类似Basic Paxos，Acceptor会回复Leader一个Accepted信息，这样以来就只需要两个消息的延迟久就可以发送给Learner。</p><p>如果leader检测到碰撞，leader将会重新发送消息来解决碰撞。这种协调恢复结束将会耗费4个消息延迟</p><h4 id="非冲突"><a href="#非冲突" class="headerlink" title="非冲突"></a>非冲突</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Client    Leader         Acceptor      Learner</span><br><span class="line">   |         |          |  |  |  |       |  |</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|-&gt;|       |  |  Any(N,I,Recovery)</span><br><span class="line">   |         |          |  |  |  |       |  |</span><br><span class="line">   X-------------------&gt;|-&gt;|-&gt;|-&gt;|       |  |  Accept!(N,I,W)</span><br><span class="line">   |         |&lt;---------X--X--X--X------&gt;|-&gt;|  Accepted(N,I,W)</span><br><span class="line">   |&lt;------------------------------------X--X  Response(W)</span><br><span class="line">   |         |          |  |  |  |       |  |</span><br></pre></td></tr></table></figure><h4 id="proposals冲突"><a href="#proposals冲突" class="headerlink" title="proposals冲突"></a>proposals冲突</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Client   Leader      Acceptor     Learner</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !! Concurrent conflicting proposals</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !!   received in different order</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !!   by the Acceptors</span><br><span class="line"> |  X--------------?|-?|-?|-?|      |  |  Accept!(N,I,V)</span><br><span class="line"> X-----------------?|-?|-?|-?|      |  |  Accept!(N,I,W)</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !! Acceptors disagree on value</span><br><span class="line"> |  |      |&lt;-------X--X-&gt;|-&gt;|-----&gt;|-&gt;|  Accepted(N,I,V)</span><br><span class="line"> |  |      |&lt;-------|&lt;-|&lt;-X--X-----&gt;|-&gt;|  Accepted(N,I,W)</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !! Detect collision &amp; recover</span><br><span class="line"> |  |      X-------&gt;|-&gt;|-&gt;|-&gt;|      |  |  Accept!(N+1,I,W)</span><br><span class="line"> |  |      |&lt;-------X--X--X--X-----&gt;|-&gt;|  Accepted(N+1,I,W)</span><br><span class="line"> |&lt;---------------------------------X--X  Response(W)</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br></pre></td></tr></table></figure><p>proposals冲突，不协调恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Client   Leader      Acceptor     Learner</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      X-------&gt;|-&gt;|-&gt;|-&gt;|      |  |  Any(N,I,Recovery)</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !! Concurrent conflicting proposals</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !!   received in different order</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !!   by the Acceptors</span><br><span class="line"> |  X--------------?|-?|-?|-?|      |  |  Accept!(N,I,V)</span><br><span class="line"> X-----------------?|-?|-?|-?|      |  |  Accept!(N,I,W)</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !! Acceptors disagree on value</span><br><span class="line"> |  |      |&lt;-------X--X-&gt;|-&gt;|-----&gt;|-&gt;|  Accepted(N,I,V)</span><br><span class="line"> |  |      |&lt;-------|&lt;-|&lt;-X--X-----&gt;|-&gt;|  Accepted(N,I,W)</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br><span class="line"> |  |      |        |  |  |  |      |  |  !! Detect collision &amp; recover</span><br><span class="line"> |  |      |&lt;-------X--X--X--X-----&gt;|-&gt;|  Accepted(N+1,I,W)</span><br><span class="line"> |&lt;---------------------------------X--X  Response(W)</span><br><span class="line"> |  |      |        |  |  |  |      |  |</span><br></pre></td></tr></table></figure><h4 id="不协调恢复、减少角色"><a href="#不协调恢复、减少角色" class="headerlink" title="不协调恢复、减少角色"></a>不协调恢复、减少角色</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Client         Servers</span><br><span class="line"> |  |         |  |  |  |</span><br><span class="line"> |  |         X-&gt;|-&gt;|-&gt;|  Any(N,I,Recovery)</span><br><span class="line"> |  |         |  |  |  |</span><br><span class="line"> |  |         |  |  |  |  !! Concurrent conflicting proposals</span><br><span class="line"> |  |         |  |  |  |  !!   received in different order</span><br><span class="line"> |  |         |  |  |  |  !!   by the Servers</span><br><span class="line"> |  X--------?|-?|-?|-?|  Accept!(N,I,V)</span><br><span class="line"> X-----------?|-?|-?|-?|  Accept!(N,I,W)</span><br><span class="line"> |  |         |  |  |  |</span><br><span class="line"> |  |         |  |  |  |  !! Servers disagree on value</span><br><span class="line"> |  |         X&lt;&gt;X-&gt;|-&gt;|  Accepted(N,I,V)</span><br><span class="line"> |  |         |&lt;-|&lt;-X&lt;&gt;X  Accepted(N,I,W)</span><br><span class="line"> |  |         |  |  |  |</span><br><span class="line"> |  |         |  |  |  |  !! Detect collision &amp; recover</span><br><span class="line"> |  |         X&lt;&gt;X&lt;&gt;X&lt;&gt;X  Accepted(N+1,I,W)</span><br><span class="line"> |&lt;-----------X--X--X--X  Response(W)</span><br><span class="line"> |  |         |  |  |  |</span><br></pre></td></tr></table></figure><h2 id="Zab-原子广播协议"><a href="#Zab-原子广播协议" class="headerlink" title="Zab 原子广播协议"></a>Zab 原子广播协议</h2><p>Zab的全称是Zookeeper atomic broadcast protocol，是Zookeeper内部用到的一致性协议。相比Paxos，Zab最大的特点是保证强一致性(strong consistency，或叫线性一致性linearizable consistency)。</p><h4 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h4><ul><li><strong>quorum</strong>：集群中超过半数的节点集合</li></ul><p>ZAB 中的节点有三种状态</p><ul><li><strong>following</strong>：当前节点是跟随者，服从 leader 节点的命令</li><li><strong>leading</strong>：当前节点是 leader，负责协调事务</li><li><strong>election/looking</strong>：节点处于选举状态</li></ul><p><em>代码实现中多了一种：observing 状态，这是 Zookeeper 引入 Observer 之后加入的，Observer 不参与选举，是只读节点，跟 ZAB 协议没有关系</em></p><p>节点的持久状态</p><ul><li><strong>history</strong>：当前节点接收到事务提议的 log</li><li><strong>acceptedEpoch</strong>：follower 已经接受的 leader 更改年号的 NEWEPOCH 提议</li><li><strong>currentEpoch</strong>：当前所处的年代</li><li><strong>zxid</strong>：事务请求的唯一标记，由leader服务器负责进行分配。由2部分构成，高32位是上述的peerEpoch，低32位是请求的计数，从0开始。所以由zxid我们就可以知道该请求是哪个轮次的，并且是该轮次的第几个请求。</li><li><strong>lastZxid</strong>：history 中最近接收到的提议的 zxid （最大的）</li><li><strong>lastProcessedZxid</strong>：最后一次commit的事务请求的zxid</li><li><strong>electionEpoch</strong>：每执行一次leader选举，electionEpoch就会自增，用来标记leader选举的轮次</li><li><strong>peerEpoch</strong>：每次leader选举完成之后，都会选举出一个新的peerEpoch，用来标记事务请求所属的轮次d</li></ul><blockquote><p>在 ZAB 协议的事务编号 Zxid 设计中，Zxid 是一个 64 位的数字，其中低 32 位是一个简单的单调递增的计数器，针对客户端每一个事务请求，计数器加 1；而高 32 位则代表 Leader 周期 epoch 的编号，每个当选产生一个新的 Leader 服务器，就会从这个 Leader 服务器上取出其本地日志中最大事务的ZXID，并从中读取 epoch 值，然后加 1，以此作为新的 epoch，并将低 32 位从 0 开始计数。</p><p>epoch：可以理解为当前集群所处的年代或者周期，每个 leader 就像皇帝，都有自己的年号，所以每次改朝换代，leader 变更之后，都会在前一个年代的基础上加 1。这样就算旧的 leader 崩溃恢复之后，也没有人听他的了，因为 follower 只听从当前年代的 leader 的命令。</p></blockquote><p><img src="https://user-images.githubusercontent.com/7789698/38787192-1f444b76-415f-11e8-8e4a-434b73380f99.png" alt="image"></p><h4 id="Phase-0-Leader-election（选举阶段）"><a href="#Phase-0-Leader-election（选举阶段）" class="headerlink" title="Phase 0: Leader election（选举阶段）"></a>Phase 0: Leader election（选举阶段）</h4><p>节点在一开始都处于选举阶段，只要有<strong>一个节点得到超半数节点的票数</strong>，它就可以当选<strong>准leader</strong>。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。</p><p>协议并没有规定详细的选举算法，后面我们会提到实现中使用的 Fast Leader Election。</p><h4 id="Phase-1-Discovery（发现阶段）"><a href="#Phase-1-Discovery（发现阶段）" class="headerlink" title="Phase 1: Discovery（发现阶段）"></a>Phase 1: Discovery（发现阶段）</h4><p>在这个阶段，<strong>followers 跟准leader进行通信</strong>，<strong>同步followers最近接收的事务提议</strong>。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且<strong>准leader生成新的epoch</strong>，让followers接受，更新它们的acceptedEpoch</p><p><img src="https://user-images.githubusercontent.com/7789698/39752060-dc9269ee-52ec-11e8-8782-3287f2829583.png" alt="image"></p><p><strong>一个 follower 只会连接一个 leader</strong>，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。</p><h4 id="Phase-2-Synchronization（同步阶段）"><a href="#Phase-2-Synchronization（同步阶段）" class="headerlink" title="Phase 2: Synchronization（同步阶段）"></a>Phase 2: Synchronization（同步阶段）</h4><p>同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。<br><img src="https://user-images.githubusercontent.com/7789698/39752118-0e6473a4-52ed-11e8-81c9-242536d38d7f.png" alt="image"></p><h4 id="Phase-3-Broadcast（广播阶段）"><a href="#Phase-3-Broadcast（广播阶段）" class="headerlink" title="Phase 3: Broadcast（广播阶段）"></a>Phase 3: Broadcast（广播阶段）</h4><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。<br><img src="https://user-images.githubusercontent.com/7789698/39752157-2888a2dc-52ed-11e8-929e-6887e95fefcc.png" alt="image"><br>值得注意的是，ZAB 提交事务并不像 2PC 一样需要全部follower都 ACK，只需要得到quorum（超过半数的节点）的 ACK 就可以了。</p><h3 id="协议实现"><a href="#协议实现" class="headerlink" title="协议实现"></a>协议实现</h3><p>协议的 Java 版本实现跟上面的定义有些不同，选举阶段使用的是 Fast Leader Election（FLE），它包含了 Phase 1 的发现职责。因为 FLE 会选举拥有最新提议历史的节点作为 leader，这样就省去了发现最新提议的步骤。实际的实现将 Phase 1 和 Phase 2 合并为 Recovery Phase（恢复阶段）。所以，ZAB 的实现只有三个阶段：</p><ul><li><strong>Fast Leader Election</strong></li><li><strong>Recovery Phase</strong></li><li><strong>Broadcast Phase</strong></li></ul><h4 id="Fast-Leader-Election"><a href="#Fast-Leader-Election" class="headerlink" title="Fast Leader Election"></a>Fast Leader Election</h4><p>前面提到 FLE 会选举拥有最新提议历史（lastZixd最大）的节点作为 leader，这样就省去了发现最新提议的步骤。这是基于拥有最新提议的节点也有最新提交记录的前提。</p><h5 id="成为-leader-的条件"><a href="#成为-leader-的条件" class="headerlink" title="成为 leader 的条件"></a>成为 leader 的条件</h5><ol><li>选<code>epoch</code>最大的</li><li><code>epoch</code>相等，选 zxid 最大的</li><li><code>epoch</code>和<code>zxid</code>都相等，选择<code>server id</code>最大的（就是我们配置<code>zoo.cfg</code>中的<code>myid</code>）</li></ol><p>节点在选举开始都默认投票给自己，当接收其他节点的选票时，会根据上面的条件更改自己的选票并重新发送选票给其他节点，当有一个节点的得票超过半数，该节点会设置自己的状态为 leading，其他节点会设置自己的状态为 following。</p><h5 id="选举过程"><a href="#选举过程" class="headerlink" title="选举过程"></a>选举过程</h5><p><img src="https://user-images.githubusercontent.com/7789698/39752377-d84a49fa-52ed-11e8-83fb-b4ef3875f52a.png" alt="image"></p><h5 id="Recovery-Phase-（恢复阶段）"><a href="#Recovery-Phase-（恢复阶段）" class="headerlink" title="Recovery Phase （恢复阶段）"></a>Recovery Phase （恢复阶段）</h5><p>这一阶段 follower 发送它们的 lastZixd 给 leader，leader 根据 lastZixd 决定如何同步数据。这里的实现跟前面 Phase 2 有所不同：Follower 收到 TRUNC 指令会中止 L.lastCommittedZxid 之后的提议，收到 DIFF 指令会接收新的提议。</p><blockquote><p>history.lastCommittedZxid：最近被提交的提议的 zxid<br>history:oldThreshold：被认为已经太旧的已提交提议的 zxid</p></blockquote><p><img src="https://user-images.githubusercontent.com/7789698/39752393-e46e974a-52ed-11e8-8c05-d0db59b82a9a.png" alt="image"></p><h2 id="Raft-协议"><a href="#Raft-协议" class="headerlink" title="Raft 协议"></a>Raft 协议</h2><p>在一个由 Raft 协议组织的集群中有三类角色：</p><ul><li>Leader（领袖）</li><li>Follower（群众）</li><li>Candidate（候选人）</li></ul><h3 id="Leader-选举过程"><a href="#Leader-选举过程" class="headerlink" title="Leader 选举过程"></a>Leader 选举过程</h3><p>在极简的思维下，一个最小的 Raft 民主集群需要三个参与者（如下图：A、B、C），这样才可能投出多数票。初始状态 ABC 都是 Follower，然后发起选举这时有三种可能情形发生。下图中前二种都能选出 Leader，第三种则表明本轮投票无效（Split Votes），每方都投给了自己，结果没有任何一方获得多数票。之后每个参与方随机休息一阵（Election Timeout）重新发起投票直到一方获得多数票。这里的关键就是随机 timeout，最先从 timeout 中恢复发起投票的一方向还在 timeout 中的另外两方请求投票，这时它们就只能投给对方了，很快达成一致。</p><p><img src="https://user-images.githubusercontent.com/7789698/38790076-2c6de066-4171-11e8-82f3-4310c7cb3873.png" alt="image"></p><p>选出 Leader 后，Leader 通过定期向所有 Follower 发送心跳信息维持其统治。若 Follower 一段时间未收到 Leader 的心跳则认为 Leader 可能已经挂了再次发起选主过程。</p><h3 id="Leader-节点对一致性的影响"><a href="#Leader-节点对一致性的影响" class="headerlink" title="Leader 节点对一致性的影响"></a>Leader 节点对一致性的影响</h3><p>Raft 协议强依赖 Leader 节点的可用性来确保集群数据的一致性。数据的流向只能从 Leader 节点向 Follower 节点转移。当 Client 向集群 Leader 节点提交数据后，Leader 节点接收到的数据处于未提交状态（Uncommitted），接着 Leader 节点会并发向所有 Follower 节点复制数据并等待接收响应，确保至少集群中超过半数节点已接收到数据后再向 Client 确认数据已接收。一旦向 Client 发出数据接收 Ack 响应后，表明此时数据状态进入已提交（Committed），Leader 节点再向 Follower 节点发通知告知该数据状态已提交。</p><p><img src="https://user-images.githubusercontent.com/7789698/38790297-bf18a51c-4172-11e8-974d-3449e0790e56.png" alt="image"></p><p>在这个过程中，主节点可能在任意阶段挂掉，看下 Raft 协议如何针对不同阶段保障数据一致性的。</p><h4 id="1-数据到达-Leader-节点前"><a href="#1-数据到达-Leader-节点前" class="headerlink" title="1. 数据到达 Leader 节点前"></a>1. 数据到达 Leader 节点前</h4><p>这个阶段 Leader 挂掉不影响一致性，不多说。</p><p><img src="https://user-images.githubusercontent.com/7789698/39752667-bb36f452-52ee-11e8-981e-6c7373837ad4.png" alt="image"></p><h4 id="2-数据到达-Leader-节点，但未复制到-Follower-节点"><a href="#2-数据到达-Leader-节点，但未复制到-Follower-节点" class="headerlink" title="2. 数据到达 Leader 节点，但未复制到 Follower 节点"></a>2. 数据到达 Leader 节点，但未复制到 Follower 节点</h4><p>这个阶段 Leader 挂掉，数据属于未提交状态，Client 不会收到 Ack 会认为<strong>超时失败</strong>可安全发起重试。Follower 节点上没有该数据，<strong>重新选主</strong>后 Client <strong>重试重新提交</strong>可成功。原来的 Leader 节点恢复后作为 Follower 加入集群重新从当前任期的新 Leader 处同步数据，强制保持和 Leader 数据一致。</p><p><img src="https://user-images.githubusercontent.com/7789698/39752699-ce243002-52ee-11e8-8fc2-2c17081470f0.png" alt="image"></p><h4 id="3-数据到达-Leader-节点，成功复制到-Follower-所有节点，但还未向-Leader-响应接收"><a href="#3-数据到达-Leader-节点，成功复制到-Follower-所有节点，但还未向-Leader-响应接收" class="headerlink" title="3. 数据到达 Leader 节点，成功复制到 Follower 所有节点，但还未向 Leader 响应接收"></a>3. 数据到达 Leader 节点，成功复制到 Follower 所有节点，但还未向 Leader 响应接收</h4><p>这个阶段 Leader 挂掉，虽然数据在 Follower 节点处于未提交状态（Uncommitted）但保持一致，重新选出 Leader 后可完成数据提交，此时 Client 由于不知到底提交成功没有，可<strong>重试提交</strong>。针对这种情况 Raft 要求 RPC 请求实现幂等性，也就是要实现内部去重机制。</p><p><img src="https://user-images.githubusercontent.com/7789698/39752713-dbf0420c-52ee-11e8-8c06-e801a03cd2a4.png" alt="image"></p><h4 id="4-数据到达-Leader-节点，成功复制到-Follower-部分节点，但还未向-Leader-响应接收"><a href="#4-数据到达-Leader-节点，成功复制到-Follower-部分节点，但还未向-Leader-响应接收" class="headerlink" title="4. 数据到达 Leader 节点，成功复制到 Follower 部分节点，但还未向 Leader 响应接收"></a>4. 数据到达 Leader 节点，成功复制到 Follower 部分节点，但还未向 Leader 响应接收</h4><p>这个阶段 Leader 挂掉，数据在 Follower 节点处于未提交状态（Uncommitted）且不一致，Raft 协议要求投票只能投给拥有最新数据的节点。所以拥有最新数据的节点会被选为 Leader 再强制同步数据到 Follower，数据不会丢失并最终一致。</p><p><img src="https://user-images.githubusercontent.com/7789698/39752738-e92947d4-52ee-11e8-999c-f53e42de92ea.png" alt="image"></p><h4 id="5-数据到达-Leader-节点，成功复制到-Follower-所有或多数节点，数据在-Leader-处于已提交状态，但在-Follower-处于未提交状态"><a href="#5-数据到达-Leader-节点，成功复制到-Follower-所有或多数节点，数据在-Leader-处于已提交状态，但在-Follower-处于未提交状态" class="headerlink" title="5. 数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在 Leader 处于已提交状态，但在 Follower 处于未提交状态"></a>5. 数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在 Leader 处于已提交状态，但在 Follower 处于未提交状态</h4><p>这个阶段 Leader 挂掉，重新选出新 Leader 后的处理流程和阶段 3 一样。</p><p><img src="https://user-images.githubusercontent.com/7789698/39752753-f84889fa-52ee-11e8-9e3d-2a0fa6952882.png" alt="image"></p><h4 id="6-数据到达-Leader-节点，成功复制到-Follower-所有或多数节点，数据在所有节点都处于已提交状态，但还未响应-Client"><a href="#6-数据到达-Leader-节点，成功复制到-Follower-所有或多数节点，数据在所有节点都处于已提交状态，但还未响应-Client" class="headerlink" title="6. 数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在所有节点都处于已提交状态，但还未响应 Client"></a>6. 数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在所有节点都处于已提交状态，但还未响应 Client</h4><p>这个阶段 Leader 挂掉，Cluster 内部数据其实已经是一致的，Client 重复重试基于幂等策略对一致性无影响。</p><p><img src="https://user-images.githubusercontent.com/7789698/39752773-06c7f826-52ef-11e8-8e3c-a0815ab94efc.png" alt="image"></p><h4 id="7-网络分区导致的脑裂情况，出现双-Leader"><a href="#7-网络分区导致的脑裂情况，出现双-Leader" class="headerlink" title="7. 网络分区导致的脑裂情况，出现双 Leader"></a>7. 网络分区导致的脑裂情况，出现双 Leader</h4><p>网络分区将原先的 Leader 节点和 Follower 节点分隔开，Follower 收不到 Leader 的心跳将发起选举产生新的 Leader。这时就产生了双 Leader，原先的 Leader 独自在一个区，向它提交数据不可能复制到多数节点所以永远提交不成功。向新的 Leader 提交数据可以提交成功，网络恢复后旧的 Leader 发现集群中有更新任期（Term）的新 Leader 则自动降级为 Follower 并从新 Leader 处同步数据达成集群数据一致。</p><p><img src="https://user-images.githubusercontent.com/7789698/39753101-300ada22-52f0-11e8-95e5-d19fc3955ed6.png" alt="image"></p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><ol><li>刚开始所有的节点都是follower。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38790429-dc07722e-4173-11e8-8ebb-6298a3a46af8.png" alt="image"></p><ol start="2"><li>如果follower不能接收到leader的消息就成为candidate。这里有个选举超时时间election timeout，这个时间是随机在150ms到300ms之间，第一个到达超时时间恢复的节点将会认为自己是candidate，并且投自己。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38790454-f736b474-4173-11e8-8c99-1a5cb429bae9.png" alt="image"></p><ol start="3"><li>candidate发送投票请求，请求选举自己为leader。如果follow节点尚未投票则返回响应给候选人投票且重置自己的election timeout。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38790495-30cb3bf6-4174-11e8-9312-9cc50da7ef79.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38790385-8af85808-4173-11e8-9e15-e392d86a5fc7.png" alt="image"></p><ol start="4"><li>候选人获得超过半数的票则被选举为leader。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38790512-5afcc674-4174-11e8-91f8-e10c60f9bbdf.png" alt="image"></p><ol start="5"><li>leader停止将会触发重新选举</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38790657-4bb35f24-4175-11e8-9916-5e5ed1dcc821.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38790664-54980a86-4175-11e8-9d37-0fc915b4c945.png" alt="image"></p><ol start="6"><li>当有两个节点同时成为候选人。节点已经投票的时候将不会在接受后续投票请求。一旦没有超过半数投票，就会等待超时重新投票。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38790720-9c80060a-4175-11e8-950b-cb2c2a379e2e.png" alt="image"><img src="https://user-images.githubusercontent.com/7789698/38790726-a3766aee-4175-11e8-89dd-3b4f3d21deb4.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38790739-b76b6608-4175-11e8-994c-2db0082a89a1.png" alt="image"></p><ol start="7"><li>leader将会采用两段式提交的方法发送log，这一个阶段也叫做log replication。这时候每个节点将会有一个被指定的heartbeat timeout。首先，客户端发送的变更将会增加到leader的log里面。然后，这个log将会被在heartbeat timeout结束之前发送到followers。接下来，超过半数的节点响应接受了这个请求则leader会进入commit状态，并且会返回给client响应。最后，leader会提交给followers commit状态。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38792973-e7a9c204-4181-11e8-8cba-c954e2b35ea2.png" alt="image"><img src="https://user-images.githubusercontent.com/7789698/38792979-edbc5bac-4181-11e8-89dc-bf8d00973869.png" alt="image"><img src="https://user-images.githubusercontent.com/7789698/38793077-4865746c-4182-11e8-9dd9-46af5e615b92.png" alt="image"><br><img src="https://user-images.githubusercontent.com/7789698/38793087-4ffb7f78-4182-11e8-8324-d9e1a4762e53.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38793134-82a6b3a2-4182-11e8-8097-d912dda1e05e.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38793177-b650267a-4182-11e8-88e5-2cd39ec3e0ff.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38793222-f709e782-4182-11e8-94b6-fbc177386855.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38793251-172ea7be-4183-11e8-89cb-78c2a9e21760.png" alt="image"></p><ol start="8"><li>当raft节点面临网络分区的时候，也能够保持一致。比如我们现在把节点A、B和节点C、D、E分区。这时候节点C、D、E将会重新选举出节点E。这时候我们尝试用两个客户端分别与两个分区通信：1.第一个客户端向第一个分区发送set 3的请求的时候，由于节点B没法得到超过半数的响应所以将会停留在uncommitted状态 2.第二个客户端发送set 8 请求的时候，由于节点E能得到超过半数的响应（包括自己3个），所以将会形成一次完整的复制。当网络分区请求得到恢复之后：节点B做为leader接收到了term更高的leader的消息，便下线成为follow</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/38793354-82d6dbf8-4183-11e8-8845-fdf31420b8c6.png" alt="image"><img src="https://user-images.githubusercontent.com/7789698/38793367-904b8676-4183-11e8-9d8e-1604b54eebef.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38793437-e12c9f30-4183-11e8-8500-aae5f3cab84d.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38793564-6377404e-4184-11e8-9b60-2ce830d11ed0.png" alt="image"><img src="https://user-images.githubusercontent.com/7789698/38793763-1a5d0ca8-4185-11e8-99dc-f3cd935312d7.png" alt="image"></p><p>参考：</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;mid=2247483815&amp;idx=1&amp;sn=74ee0b591ada2c24b6bd13f8d3171670&amp;chksm=ebfc6273dc8beb65113c585ece8f5feda02e4be29684d9d8f8a173b25986374cc755c80b6ca5&amp;scene=21#wechat_redirect">http://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;mid=2247483815&amp;idx=1&amp;sn=74ee0b591ada2c24b6bd13f8d3171670&amp;chksm=ebfc6273dc8beb65113c585ece8f5feda02e4be29684d9d8f8a173b25986374cc755c80b6ca5&amp;scene=21#wechat_redirect</a></p><p><a href="http://www.cnblogs.com/hapjin/p/4748603.html">http://www.cnblogs.com/hapjin/p/4748603.html</a></p><p><a href="https://segmentfault.com/a/1190000004474543">https://segmentfault.com/a/1190000004474543</a></p><p><a href="http://blog.csdn.net/liweisnake/article/details/69253206">http://blog.csdn.net/liweisnake/article/details/69253206</a></p><p><a href="https://my.oschina.net/pingpangkuangmo/blog/778927">https://my.oschina.net/pingpangkuangmo/blog/778927</a></p><p><a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98">https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;mid=2247483815&amp;idx=1&amp;sn=74ee0b591ada2c24b6bd13f8d3171670&amp;chksm=ebfc6273dc8beb65113c585ece8f5feda02e4be29684d9d8f8a173b25986374cc755c80b6ca5&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;mid=2247483815&amp;idx=1&amp;sn=74ee0b591ada2c24b6bd13f8d3171670&amp;chksm=ebfc6273dc8beb65113c585ece8f5feda02e4be29684d9d8f8a173b25986374cc755c80b6ca5&amp;scene=21#wechat_redirect</a></p><p><a href="http://blog.jobbole.com/104985/">http://blog.jobbole.com/104985/</a></p><p><a href="http://www.infoq.com/cn/articles/raft-paper">http://www.infoq.com/cn/articles/raft-paper</a></p><p><a href="https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf">In search of an Understandable Consensus Algorithm (Extended Version)</a></p><p><a href="https://www.cnblogs.com/mindwind/p/5231986.html">https://www.cnblogs.com/mindwind/p/5231986.html</a></p><p><a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></p>]]></content>
      
      
      <categories>
          
          <category> 一致性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Paxos </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Raft </tag>
            
            <tag> zookeeper </tag>
            
            <tag> ZAB </tag>
            
            <tag> CAP </tag>
            
            <tag> 2PC </tag>
            
            <tag> 3PC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础概念</title>
      <link href="/hexo/post/a7ba99a3.html"/>
      <url>/hexo/post/a7ba99a3.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JDK：包括编译器（javac.exe）、开发工具（javadoc.exe、jar.exe、keytool.exe、jconsole.exe）和更多的类库（如tools.jar）等。总结就是Java语言、Java虚拟机、Java API类库<br>JRE： 支持java运行的基本环境</p><p><img src="https://user-images.githubusercontent.com/7789698/29321251-65a89fd0-820c-11e7-93e7-b15d5c2db752.png" alt="image"></p><p>JIT：just in time</p><p>运行时数据区：<br><img src="https://user-images.githubusercontent.com/7789698/29417094-9fc9b106-839a-11e7-9be9-310174cd0d60.png" alt="image"></p><h2 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h2><h3 id="程序计数器："><a href="#程序计数器：" class="headerlink" title="程序计数器："></a>程序计数器：</h3><p>  当前代码行号指示器。各个线程计数器互不影响，独立存储。如果是执行Java方法，是虚拟机字节码地址。<em>如果是native方法，计数器为空。</em>唯一一个没有OOM的区域。是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为“<strong>线程私有</strong>”的内存。</p><p>程序计数器是指CPU中的寄存器，它保存的是程序当前执行的指令的地址（也可以说保存下一条指令的所在存储单元的地址），当CPU需要执行指令时，需要从程序计数器中得到当前需要执行的指令所在存储单元的地址，然后根据得到的地址获取到指令，在得到指令之后，程序计数器便自动加1或者根据转移指针得到下一条指令的地址，如此循环，直至执行完所有的指令。　</p><p>在JVM规范中规定，如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的。</p><h3 id="Java虚拟机栈："><a href="#Java虚拟机栈：" class="headerlink" title="Java虚拟机栈："></a>Java虚拟机栈：</h3><p>  描述Java方法执行的内存模型：每个执行时会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等。每个方法调用到执行完成过程，对应一个栈帧在虚拟机栈中入栈到出栈的过程。<strong>线程私有</strong>。</p><ul><li><p>局部变量表：</p><p>存放编译期可知的各种基本数据类型、对象引用类型（一个指向对象起始地址的引用指针）、returnAddress类型（一个字节码指令地址）。其中64位长度long和double会占用2个局部变量空间，其余占一个。局部变量表所需内存大小是在编译期间完成分配的，方法运行期间不会改变。如果栈深度大于虚拟机允许的深度，将抛出StackOverflowError异常；如果虚拟机栈动态扩张时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p></li></ul><span id="more"></span><h3 id="本地方法栈："><a href="#本地方法栈：" class="headerlink" title="本地方法栈："></a>本地方法栈：</h3><p>  为虚拟机使用的Native方法服务。一样会抛出StackOverflowError和OutOfMemoryError。<strong>线程私有</strong>。</p><h3 id="Java堆："><a href="#Java堆：" class="headerlink" title="Java堆："></a>Java堆：</h3><p>  存放对象实例，被所有<strong>线程共享</strong>。所有对象实例以及数组都要在堆上分配，但随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致所有对象都在堆上分配也不是那么绝对。从内存分配看，可以划分出多个线程私有分配缓冲区。</p><h3 id="方法区："><a href="#方法区：" class="headerlink" title="方法区："></a>方法区：</h3><p>  用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。（各个线程共享）。方法区是堆的一个逻辑部分，但是他有个别名非堆，为了和Java堆区区分。</p><ul><li><p>运行时常量：</p><p>运行时常量是方法区的一部分（无法再申请内存时自然OOM）。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。Java虚拟机对于Class文件每一部分（包括常量池）格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范才会被认可、装载和运行。但是运行时常量池，每个虚拟机提供商都可以按自己需要实现。一般Class文件中描述的符号引用和直接引用都存储在其中。除了编译器外，运行过程也可以放入，比如String的intern()方法。</p></li></ul><h3 id="直接内存："><a href="#直接内存：" class="headerlink" title="直接内存："></a>直接内存：</h3><p>  JDK1.4引入的NIO，引入了一种基于通道与缓冲区的I/O方式，可以使用native函数库直接分配堆外内存，通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样避免Java堆和native堆中来回复制数据。（内存受到RAM、SWAP或分页大小以及处理器寻址空间的限制）</p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p><img src="https://user-images.githubusercontent.com/7789698/29859692-e6762e90-8d95-11e7-8311-ebabbc6f1ad1.png" alt="image"></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>1.通过一个类的全限定名获取类的二进制字节流</p><p>2.字节流代表的静态存储结构转化为方法区运行时数据结构</p><p>3.在内存中生成一个代表类的java.lang.Class对象作为方法区这个类各个数据的访问入口</p><p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需要的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义，虚拟机规范未规定此区域的具体数据结构。然后在内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的这些类型数据的外部接口。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证时连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全，主要包含以下内容</p><h4 id="文件格式验证："><a href="#文件格式验证：" class="headerlink" title="文件格式验证："></a>文件格式验证：</h4><p>1.第一阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理包含以下内容<br>是否以魔数0xCAFEBABE开头</p><p>2.主次版本号是否在当前虚拟机处理范围之内</p><p>3.常量池的常量中是否有不被支持的常量类型</p><p>4.指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量</p><p>5.CONSTANT_Utf8_info 型的常量中是否有不符合UFT8编码的数据</p><p>6.Class文件中各个部分及文件本身是否有本删除的或附加的其他信息</p><p>·····</p><p>只有通过了这个阶段的验证后，字节流才会进入内存的方法区中进行存储，所以后面的3个验证阶段全部是基于方法区的存储结构进行的，不会再直接操作字节流。</p><h4 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h4><p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言的规范的要求，包含以下信息<br>1.这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）</p><p>2.这个类的父类是否继承了不允许被继承的类</p><p>3.如果这个类不是抽象类，是否实现了其父类或者接口要求实现的所有的方法</p><p>4.类中的字段，方法是否与父类产生矛盾</p><p>······</p><h4 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h4><p>第三阶段是整个验证过程中最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语法是否是合法的，符合逻辑的。在第二阶段对元数据信息中的数据类型做完校验后，这个阶段将对类的方法体进行校验分析，保证被校验类的方法在运行时候不会做出对虚拟机有危害的事情。包含如下内容</p><p>1.保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似这种情况：在操作栈中放置一个int类型数据，使用却将他按照long类型使用</p><p>2.保证跳转指令不会跳转到方法体以外的字节码指令上</p><p>3.保证方法体中的类型转换是有效的，例如可以把一个子类对象赋给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型则是危险的</p><p>······</p><h4 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h4><p>最后一个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转换动作发生在连接的第三阶段–解析中发生，符号引用可以看做是对类自身以外的信息进行匹配性校验，通常需要校验一下内容：</p><p>1.符号引用中通过字符串描述的全限定名是否能找到对应的类</p><p>2.在指定的类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段</p><p>3.符号引用中的类，字段，方法的访问性是否可以被当前类访问。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为 类变量 分配内存并设置变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配，记住，只为类变量分配内存，不包括实例变量，实例变量将会在对象实例化时随对象一起分配在java堆中</p><p><img src="https://user-images.githubusercontent.com/7789698/29861734-cfc3bb0c-8d9c-11e7-8c61-b2ae4d86272b.png" alt="image"></p><p><strong>如果类字段的字段属性表中存在ConstantValue属性，那么在准备阶段变量value就会被初始化为ConstantValue属性所指定的值</strong>，例如：</p><p>public static final int value = 123;//在准备阶段虚拟机就会根据ConstantValue设置将value赋值为123</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，对同一个符号引用进行多次解析请求是很常见的事情，虚拟机不会重新再解析而是通过缓存去拿出解析的数据，但是invokedynamic指令除外，它会每次被解析都会被重新解析，解析动作主要针对类，接口，字段，类方法，接口方法，方法类型，方法句柄和调用点限定符7类符号引用进行,主要包含以下内容</p><h4 id="符号引用："><a href="#符号引用：" class="headerlink" title="符号引用："></a>符号引用：</h4><p>符号引用以一组符号来描述所引用的目标，符号可以是任意形式的字面量，只要使用时能够无歧义的定位到目标即可。</p><h4 id="直接引用："><a href="#直接引用：" class="headerlink" title="直接引用："></a>直接引用：</h4><p>直接引用可以是直接指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。</p><p>1.类或接口的解析<br>2.字段解析<br>3.类方法解析<br>4.接口方法解析</p><p>解析阶段并不是一定的：Java的运行时绑定（动态绑定）。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作全部由虚拟机主导和控制，到了初始化阶段，才真正开始执行类中定义的Java程序代码，在准备阶段变量已经赋过一次系统要求的初始值，而在初始化阶段则通过程序制定的主观计划去初始化变量和其他资源，从另一个角度理解就是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程<code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有变量的赋值动作和静态语句块中的语句合并产生的，他按照代码中出现的顺序收集，静态语句块中只能访问到定义在静态语句块之前的变量，定义在他之后的，在静态语句块中只能赋值不能访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  static&#123;</span><br><span class="line">      i = 1;//可以赋值</span><br><span class="line">      System.out.println(i);//不能访问</span><br><span class="line">  &#125;</span><br><span class="line">  static int i = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.<code>&lt;clinit&gt;()</code>方法在执行之前必须保证自己父类的类构造器方法已经执行完毕,因此在虚拟机中第一个被执行的<code>&lt;clinit&gt;()</code>方法的类肯定是java.lang.Object<br>2.由于父类的<code>&lt;clinit&gt;()</code>方法优先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作<br>3.<code>&lt;clinit&gt;()</code>并不是必须的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。<br>4.接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法，但是接口与类不同的是，执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父类接口的<code>&lt;clinit&gt;()</code>方法，只有父类接口中定义的变量使用时父类接口才会初始化，另外接口实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法<br>5.虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确的加锁，同步</p><p>初始化：<br>1.new、getstatic、putstatic、invokestatic这四条字节码指令（new实例化对象、读取或者设置一个静态字段、调用一个类的静态方法）</p><p>2.java.lang.reflect反射</p><p>3.初始化一个类，父类也初始化。但是一个接口初始化时，并不要求父类接口全部完成初始化，真正使用父接口才会初始化</p><p>4.虚拟机启动的时候，主类</p><p>5.java.lang.invoke.MethodHandle实例最后解析结果REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SubClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(SubClass.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码运行后只会输出“SuperClass init! ”,对于静态代码字段，只有直接定义这个字段的类才会被初始化，因此通过子类引用父类中静态字段，只会触发父类的初始化而不会触发子类的初始化。-XX:+TraceClassLoading会导致子类被加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperClass[] sca = <span class="keyword">new</span> SuperClass[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过数组引用不会初始化类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConstantClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HELLO = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ConstClass.HELLO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量在编译阶段会存入调用类的常量池中本质上没有直接引用到定义常量的类，因此不会触发定义常量类的初始化</p><h2 id="new过程"><a href="#new过程" class="headerlink" title="new过程"></a>new过程</h2><p>new的时候：1.检查指令参数是否能在常量池中定位到一个类的符号引用2.检查这个符号引用代表的类是否已被加载、解析、初始化过3.有就执行相应类加载过程4.类加载检查通过后，虚拟机为新生对象分配内存（假设Java堆内存绝对规整，用过的一边没用过的一边，中间放着指针作为分界点的指示器，指针则挪动和对象大小的距离，这叫做“指针碰撞”；假如不规整，已使用和空闲交错，虚拟机就必须维护一个列表，记录哪些内存块可用，在分配的时候从列表找到一个足够大的空间划分给对象实例，并更新列表上的记录，这叫做“空闲列表”；使用Serial、ParNew等带Compact过程收集器，采用指针碰撞，使用CMS基于Mark-Sweep算法收集器，采用空闲列表）</p><p>并发情况下不是线程安全的，存在正在给A分配内存，指针还没来得及修改，对象B又同时使用原来指针来分配内存。有两种解决方法，一、对分配内存空间的动作进行同步处理——虚拟机采用CAS+失败重试保证更新原子性；二、按内存分配动作按线程划分不同空间进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓存（TLAB）。哪个线程要分配，就在TLAB上分配，用完才分配新的，才需要同步锁定。（-XX:+/-UseTLAB）</p><p>内存分配后，会初始化内存的零值。接下来，虚拟机对对象进行必要设置，存放信息（对象是哪个类实例、如何找类元信息、哈希码、GC分代年龄）在对象头。从虚拟机角度对象已经创建，从java角度对象才刚刚开始创建init还没开始执行，所有字段为0。执行new指令以后接着执行init（invokespecial）<br><img src="https://user-images.githubusercontent.com/7789698/29488667-520dadd8-8542-11e7-99fc-c50fdad18138.png" alt="image"></p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)。</p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>对象头包括两部分信息：标记字段和类型指针。</p><h4 id="标记字段-Mark-Word"><a href="#标记字段-Mark-Word" class="headerlink" title="标记字段 Mark Word"></a>标记字段 Mark Word</h4><p>用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。</p><p>32bit中25bit存储对象哈希码，4bit存储对象分代年龄，2bit存储锁标志位，1bit固定为0<br><img src="https://user-images.githubusercontent.com/7789698/29488278-1a557e0a-853a-11e7-81d6-ef16d53f9f85.png" alt="image"></p><h4 id="类型指针-Klass-Pointer"><a href="#类型指针-Klass-Pointer" class="headerlink" title="类型指针 Klass Pointer"></a>类型指针 Klass Pointer</h4><p>对象头另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p>如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中无法确定数组的大小。<br>(并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据并不一定要经过对象本身，可参考对象的访问定位)</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>每一个Java对象都有成为Monitor的潜质，因为在Java的设计中 ，每一个Java对象自打娘胎里出来就带了一把看不见的锁，它叫做内部锁或者Monitor锁。 </p><p>Monitor 是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联（对象头的MarkWord中的LockWord指向monitor的起始地址），同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。其结构如下：  </p><p><img src="https://user-images.githubusercontent.com/7789698/38797787-3bf97a92-4192-11e8-8a76-1475f4cfeb6b.png" alt="image"></p><ul><li>Owner：初始时为NULL表示当前没有任何线程拥有该monitor record，当线程成功拥有该锁后保存线程唯一标识，当锁被释放时又设置为NULL； </li><li>EntryQ:关联一个系统互斥锁（semaphore），阻塞所有试图锁住monitor record失败的线程。 </li><li>RcThis:表示blocked或waiting在该monitor record上的所有线程的个数。 </li><li>Nest:用来实现重入锁的计数。 </li><li>HashCode:保存从对象头拷贝过来的HashCode值（可能还包含GC age）。 </li><li>Candidate:用来避免不必要的阻塞或等待线程唤醒，因为每一次只有一个线程能够成功拥有锁，如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程，会引起不必要的上下文切换（从阻塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。Candidate只有两种可能的值0表示没有需要唤醒的线程1表示要唤醒一个继任线程来竞争锁。 摘自：Java中synchronized的实现原理与应用） </li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>这部分分配顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。HotSpot虚拟机默认的分配策略为longs/doubles、ints、shorts/chars、bytes/booleans、oop，从分配策略中可以看出，相同宽度的字段总是分配到一起。</p><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><p>HotSpot虚拟机要求对象的起始地址必须是8字节的整数倍，也就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或者2倍），因此，当对象实例数据部分没有对齐的时候，就需要通过对齐填充来补全。</p><h3 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h3><p>Java程序需要通过栈上的引用数据来操作堆上的具体对象。对象的访问方式取决于虚拟机实现，目前主流的访问方式有使用句柄和直接指针两种。</p><h4 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h4><p>可以理解为指向指针的指针，维护指向对象的指针变化，而对象的句柄本身不发生变化；指针，指向对象，代表对象的内存地址。</p><p><img src="https://user-images.githubusercontent.com/7789698/29493798-0f40d4ec-85d0-11e7-9137-0b82675cd697.png" alt="image"></p><p>优势：引用中存储的是稳定的句柄地址，在对象被移动(垃圾收集时移动对象是非常普遍的行为)时只会改变句柄中的实例数据指针，而引用本身不需要修改。</p><h4 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h4><p>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而引用中存储的直接就是对象地址。</p><p><img src="https://user-images.githubusercontent.com/7789698/29493827-ab95007a-85d0-11e7-82b1-b87f0a823406.png" alt="image"></p><p>优势：速度更快，节省了一次指针定位的时间开销。由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是非常可观的执行成本。</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>  原理：给每个对象添加一个计数器，被引用计数器就加一；引用失效就减一；计数器为0就对象回收<br>  缺陷：两对象之间循环引用则无法回收</p><h4 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h4><p>原理：通过一系列“GC Roots”对象称为起始点，从这些结点开始向下搜索，搜索走过的链路称为引用链路，当GC不可达的时候会被判定可回收。</p><p>Java里，可以作为GC Roots对象的有：</p><p>1.<strong>虚拟机栈</strong>（栈帧本地变量）引用的对象</p><p>2.方法区中<strong>类静态属性</strong>引用的对象</p><p>3.方法区中<strong>常量</strong>引用的对象</p><p>4.<strong>本地方法栈</strong>（JNI）引用的对象</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><p>强引用：Object a = new Object() 只要强引用存在，永远不会回收</p></li><li><p>软引用：描述有用非必须。系统内存即将发生溢出异常之前，会在回收范围内进行回收。SoftReference</p></li><li><p>弱引用：非必需。强度比软引用弱，被弱引用关联对象只能生存到下一次垃圾收集之前。无论内存是否足够，都会回收被弱引用关联的对象。WeakReference</p></li><li><p>虚引用：最弱的。完全不会对生存时间构成影响，无法通过虚引用取到一个对象实例。作用是这个对象被收集器回收时收到一个系统通知。PhantomReference</p><h3 id="JVM内存分配策略"><a href="#JVM内存分配策略" class="headerlink" title="JVM内存分配策略"></a>JVM内存分配策略</h3></li><li><p>优先在Eden区分配<br>在<a href="http://blog.csdn.net/zjf280441589/article/details/53437703">JVM内存模型</a>一文中, 我们大致了解了VM年轻代堆内存可以划分为一块Eden区和两块Survivor区. 在大多数情况下, 对象在新生代Eden区中分配, 当Eden区没有足够空间分配时, VM发起一次Minor GC, 将Eden区和其中一块Survivor区内尚存活的对象放入另一块Survivor区域, 如果在Minor GC期间发现新生代存活对象无法放入空闲的Survivor区, 则会通过空间分配担保机制使对象提前进入老年代(空间分配担保见下).</p></li><li><p>大对象直接进入老年代<br>Serial和ParNew两款收集器提供了-XX:PretenureSizeThreshold的参数, 令大于该值的大对象直接在老年代分配, 这样做的目的是避免在Eden区和Survivor区之间产生大量的内存复制(大对象一般指 需要大量连续内存的Java对象, 如很长的字符串和数组), 因此大对象容易导致还有不少空闲内存就提前触发GC以获取足够的连续空间.</p></li><li><p>长期存活的对象将进入老年代<br>VM为每个对象定义了一个对象年龄(Age)计数器, 对象在Eden出生如果经第一次Minor GC后仍然存活, 且能被Survivor容纳的话, 将被移动到Survivor空间中, 并将年龄设为1. 以后对象在Survivor区中每熬过一次Minor GC年龄就+1. 当增加到一定程度(-XX:MaxTenuringThreshold, 默认15), 将会晋升到老年代.</p></li><li><p>幸存区相同年龄对象的占幸存区空间的多于其一半，将进入老年代<br>然而VM并不总是要求对象的年龄必须达到<br>MaxTenuringThreshold才能晋升老年代: 如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半, 年龄大于或等于该年龄的对象就可以直接进入老年代, 而无须等到晋升年龄.</p></li><li><p>空间担保分配（老年代剩余空间需多于幸存区的一半，否则要Full GC）</p></li></ul><h3 id="垃圾回收算法-1"><a href="#垃圾回收算法-1" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><ul><li><p>标记-清除算法：标记(可达性分析)出所有需要回收的对象，标记完成后统一回收。</p><p>不足：效率低、不连续<strong>碎片多</strong>（没有足够连续空间分配内存，提前触发另一次垃圾回收）</p><p>适用：对象存活率高的<strong>老年代</strong>。</p><p><img src="https://user-images.githubusercontent.com/7789698/38491054-6d24af94-3c1d-11e8-8670-811ccd356fa5.png" alt="image"></p></li></ul><ul><li><p>复制算法：将可用内存分为两块，每次只使用其中一块，内存用完了就将存活对象复制到另一块并清理。一般会分为内存较大的Eden和两块内存较小的Surivivor（默认8:1:1），内存回收的时候会将Eden和Surivivor存活的对象一次性复制到另一块Surivivor，并且清理空间。（Surivivor不够用则向Old区进行分配担保）</p><p>不足：内存缩小为原来的一般，代价高。浪费50%的空间。</p><p>适用：<strong>新生代</strong>。</p><p><img src="https://user-images.githubusercontent.com/7789698/38491082-7e1a3620-3c1d-11e8-8663-edb261529e43.png" alt="image"></p></li></ul><ul><li><p>标记-整理算法：标记出所有需要回收的对象，所有存活对象都向一端移动，直接清理端以外内存</p><p>适用：<strong>老年代</strong>。</p><p><img src="https://user-images.githubusercontent.com/7789698/38491187-bb8d974a-3c1d-11e8-8a26-6b7f42afe9e7.png" alt="img"></p></li></ul><h4 id="新生代和老年代的回收策略"><a href="#新生代和老年代的回收策略" class="headerlink" title="新生代和老年代的回收策略"></a>新生代和老年代的回收策略</h4><p>Eden区满后触发minor GC,将所有存活对象复制到一个Survivor区，另一Survivor区存活的对象也复制到这个Survivor区中，始终保证有一个Survivor是空的。当Survivor空间不够用(不足以保存尚存活的对象)时, 需要依赖Old区进行空间分配担保机制, 这部分内存直接进入Old区。</p><p>Young区Survivor满后触发minor GC后仍然存活的对象存到Old区，如果Survivor区放不下Eden区的对象或者Survivor区对象足够老了，直接放入Old区，如果Old区放不下则触发Full GC。</p><h4 id="永久代-方法区回收"><a href="#永久代-方法区回收" class="headerlink" title="永久代-方法区回收"></a>永久代-方法区回收</h4><p>在方法区进行垃圾回收一般”性价比”较低, 因为在方法区主要回收两部分内容: <strong>废弃常量</strong>和<strong>无用的类</strong>。 回收废弃常量与回收其他年代中的对象类似, 但要判断一个类是否无用则条件相当苛刻:</p><ul><li>该类所有的<strong>实例</strong>都已经<strong>被回收</strong>, Java堆中不存在该类的任何实例;</li><li>该类对应的Class对象<strong>没有</strong>在任何地方<strong>被引用</strong>(也就是在任何地方都无法通过反射访问该类的方法);</li><li>加载该类的<strong>ClassLoader</strong>已经被回收.</li></ul><p>但即使满足以上条件也未必一定会回收, Hotspot VM还提供了-Xnoclassgc参数控制(关闭CLASS的垃圾回收功能). 因此在大量使用动态代理、CGLib等字节码框架的应用中一定要关闭该选项, 开启VM的类卸载功能, 以保证方法区不会溢出。</p><h4 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h4><p>在执行Minor GC前, VM会首先检查老年代是否有足够的空间存放新生代尚存活对象, 由于新生代使用复制收集算法, 为了提升内存利用率, 只使用了其中一个Survivor作为轮换备份, 因此当出现大量对象在Minor GC后仍然存活的情况时, 就需要老年代进行分配担保, 让Survivor无法容纳的对象直接进入老年代, 但前提是老年代需要有足够的空间容纳这些存活对象. 但存活对象的大小在实际完成GC前是无法明确知道的, 因此Minor GC前, VM会先首先检查<strong>老年代连续空间</strong>是否大于<strong>新生代对象总大小或历次晋升的平均大小</strong>, 如果条件成立, 则进行Minor GC, 否则进行Full GC(让老年代腾出更多空间).</p><p>然而取历次晋升的对象的平均大小也是有一定风险的, 如果某次Minor GC存活后的对象突增,远远高于平均值的话,依然可能导致担保失败(Handle Promotion Failure, 老年代也无法存放这些对象了), 此时就只好在失败后重新发起一次Full GC(让老年代腾出更多空间).</p><p><strong>枚举根结点</strong>  必须停顿所有Java线程（STW stop the world），采用OopMap数据结构检查所有上下文和全局的引用位置</p><p><strong>安全点</strong> 每条指令都生成OopMap很耗费空间，实际上HotSpot没有为每条指令生成OopMap，而是只在特定位置记录，这些位置被称为“安全点”。（标准是 是否让程序长时间执行，如循环、方法调用等）。让GC在安全点停顿，HotSpot采用主动式中断（当GC需要中断线程的时候，只是标记，各个线程轮训这个标志，发现这个标志为真则挂起线程，和安全点重合则加上创建线程需要分配的位置）</p><p>新生代GC（Minor GC）</p><p>老年代GC （Major／Full GC）</p><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><ul><li><p>Serial收集器</p><p>Serial收集器是Hotspot运行在Client模式下的默认新生代收集器, 它的特点是 只用一个CPU/一条收集线程去完成GC工作, 且在进行垃圾收集时必须暂停其他所有的工作线程(“Stop The World” -后面简称STW).</p><p><img src="https://user-images.githubusercontent.com/7789698/38507171-6dbd8b16-3c4e-11e8-9eee-e04ba8af9f62.png" alt="image"></p><p>​</p><p>虽然是单线程收集, 但它却简单而高效, 在VM管理内存不大的情况下(收集几十M<del>一两百M的新生代), 停顿时间完全可以控制在几十毫秒</del>一百多毫秒内.</p></li></ul><ul><li><p>ParNew收集器</p><p>ParNew收集器其实是前面Serial的多线程版本, 除使用多条线程进行GC外, 包括Serial可用的所有控制参数、收集算法、STW、对象分配规则、回收策略等都与Serial完全一样(也是VM启用CMS收集器-XX: +UseConcMarkSweepGC的默认新生代收集器).</p><p><img src="https://user-images.githubusercontent.com/7789698/38507517-4fb1f96c-3c4f-11e8-8f4d-78196df53dc2.png" alt="image"></p><p>由于存在线程切换的开销, ParNew在单CPU的环境中比不上Serial, 且在通过超线程技术实现的两个CPU的环境中也不能100%保证能超越Serial. 但随着可用的CPU数量的增加, 收集效率肯定也会大大增加(ParNew收集线程数与CPU的数量相同, 因此在CPU数量过大的环境中, 可用-XX:ParallelGCThreads参数控制GC线程数).</p><p>​</p></li><li><p>Parallel Scavenge收集器</p><p>与ParNew类似, Parallel Scavenge也是使用复制算法, 也是并行多线程收集器. 但与其他收集器关注尽可能缩短垃圾收集时间不同, Parallel Scavenge更关注系统吞吐量:</p><p>系统吞吐量=运行用户代码时间(运行用户代码时间+垃圾收集时间)</p><p>停顿时间越短就越适用于用户交互的程序-良好的响应速度能提升用户的体验;而高吞吐量则适用于后台运算而不需要太多交互的任务-可以最高效率地利用CPU时间,尽快地完成程序的运算任务. Parallel Scavenge提供了如下参数设置系统吞吐量:</p><table><thead><tr><th>Parallel Scavenge参数</th><th>描述</th></tr></thead><tbody><tr><td>MaxGCPauseMillis</td><td>(毫秒数) 收集器将尽力保证内存回收花费的时间不超过设定值, 但如果太小将会导致GC的频率增加.</td></tr><tr><td>GCTimeRatio</td><td>(整数:0 &lt; GCTimeRatio &lt; 100) 是垃圾收集时间占总时间的比率</td></tr><tr><td>-XX:+UseAdaptiveSizePolicy</td><td>启用GC自适应的调节策略: 不再需要手工指定-Xmn、-XX:SurvivorRatio、-XX:PretenureSizeThreshold等细节参数, VM会根据当前系统的运行情况收集性能监控信息, 动态调整这些参数以提供最合适的停顿时间或最大的吞吐量</td></tr></tbody></table></li></ul><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><ul><li><p>Serial Old收集器</p><p>Serial Old是Serial收集器的老年代版本, 同样是单线程收集器,使用“标记-整理”算法:<br><img src="https://user-images.githubusercontent.com/7789698/38507541-638579a0-3c4f-11e8-88e8-f9c730be7707.png" alt="image"></p><ul><li>Serial Old应用场景如下:<ul><li>JDK 1.5之前与Parallel Scavenge收集器搭配使用;</li><li>作为CMS收集器的后备预案, 在并发收集发生Concurrent Mode Failure时启用(见下:CMS收集器).</li></ul></li></ul></li></ul><ul><li><p>Parallel Old收集器</p><p>Parallel Old是Parallel Scavenge收老年代版本, 使用多线程和“标记－整理”算法, 吞吐量优先, 主要与Parallel Scavenge配合在 注重吞吐量 及 CPU资源敏感 系统内使用:</p><p><img src="https://user-images.githubusercontent.com/7789698/38508265-4e6bfac4-3c51-11e8-82b3-f653b5d44508.png" alt="image"></p></li></ul><ul><li><p>CMS收集器</p><p>CMS(Concurrent Mark Sweep)收集器是一款具有划时代意义的收集器, 一款真正意义上的并发收集器, 虽然现在已经有了理论意义上表现更好的G1收集器, 但现在主流互联网企业线上选用的仍是CMS(如Taobao、微店).</p><p>CMS是一种以获取最短回收停顿时间为目标的收集器(CMS又称多并发低暂停的收集器), 基于”标记-清除”算法实现, 整个GC过程分为以下4个步骤:</p><ol><li><p>初始标记(CMS initial mark)</p></li><li><p>并发标记(CMS concurrent mark: GC Roots Tracing过程)</p></li><li><p>重新标记(CMS remark)</p></li><li><p>并发清除(CMS concurrent sweep: 已死象将会就地释放, 注意: 此处没有压缩)</p></li></ol><p>其中两个加粗的步骤(初始标记、重新标记)仍需STW. 但初始标记仅只标记一下GC Roots能直接关联到的对象, 速度很快; 而重新标记则是为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录, 虽然一般比初始标记阶段稍长, 但要远小于并发标记时间.<br><img src="https://user-images.githubusercontent.com/7789698/38507565-772a1a74-3c4f-11e8-928a-b0f21e9edf59.png" alt="image"></p><p>(由于整个GC过程耗时最长的并发标记和并发清除阶段的GC线程可与用户线程一起工作, 所以总体上CMS的GC过程是与用户线程一起并发地执行的.</p><p>由于CMS收集器将整个GC过程进行了更细粒度的划分, 因此可以实现并发收集、低停顿的优势, 但它也并非十分完美, 其存在缺点及解决策略如下:</p><ol><li><p>CMS默认启动的回收线程数=(CPU数目+3)4</p><p>当CPU数&gt;4时, GC线程最多占用不超过25%的CPU资源, 但是当CPU数&lt;=4时, GC线程可能就会过多的占用用户CPU资源, 从而导致应用程序变慢, 总吞吐量降低.</p></li><li><p>无法处理浮动垃圾, 可能出现Promotion Failure、Concurrent Mode Failure而导致另一次Full GC的产生: 浮动垃圾是指在CMS并发清理阶段用户线程运行而产生的新垃圾. 由于在GC阶段用户线程还需运行, 因此还需要预留足够的内存空间给用户线程使用, 导致CMS不能像其他收集器那样等到老年代几乎填满了再进行收集. 因此CMS提供了-XX:CMSInitiatingOccupancyFraction参数来设置GC的触发百分比(以及-XX:+UseCMSInitiatingOccupancyOnly来启用该触发百分比), 当老年代的使用空间超过该比例后CMS就会被触发(JDK 1.6之后默认92%). 但当CMS运行期间预留的内存无法满足程序需要, 就会出现上述Promotion Failure等失败, 这时VM将启动后备预案: 临时启用Serial Old收集器来重新执行Full GC(CMS通常配合大内存使用, 一旦大内存转入串行的Serial GC, 那停顿的时间就是大家都不愿看到的了).</p></li><li><p>最后, 由于CMS采用”标记-清除”算法实现, 可能会产生大量内存碎片. 内存碎片过多可能会导致无法分配大对象而提前触发Full GC. 因此CMS提供了-XX:+UseCMSCompactAtFullCollection开关参数, 用于在Full GC后再执行一个碎片整理过程. 但内存整理是无法并发的, 内存碎片问题虽然没有了, 但停顿时间也因此变长了, 因此CMS还提供了另外一个参数-XX:CMSFullGCsBeforeCompaction用于设置在执行N次不进行内存整理的Full GC后, 跟着来一次带整理的(默认为0: 每次进入Full GC时都进行碎片整理).</p></li></ol></li><li><p>分区收集- G1收集器</p><ul><li>G1(Garbage-First)是一款面向服务端应用的收集器, 主要目标用于配备多颗CPU的服务器治理大内存.</li><li>G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS).</li><li>-XX:+UseG1GC 启用G1收集器.</li></ul></li></ul><p>与其他基于分代的收集器不同, G1将整个Java堆划分为多个大小相等的独立区域(Region), 虽然还保留有新生代和老年代的概念, 但新生代和老年代不再是物理隔离的了, 它们都是一部分Region(不需要连续)的集合.</p><p><img src="https://user-images.githubusercontent.com/7789698/38507575-7ccdcea8-3c4f-11e8-8356-c269b0a308ac.png" alt="image"></p><p>每块区域既有可能属于O区、也有可能是Y区, 因此不需要一次就对整个老年代/新生代回收. 而是当线程并发寻找可回收的对象时, 有些区块包含可回收的对象要比其他区块多很多. 虽然在清理这些区块时G1仍然需要暂停应用线程, 但可以用相对较少的时间优先回收垃圾较多的Region(这也是G1命名的来源). 这种方式保证了G1可以在有限的时间内获取尽可能高的收集效率.</p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>把类加载阶段中“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到java虚拟机外部去实现，以便让程序自己决定如何去获取所需要的类，实现这个动作的代码模块称为“类加载器”</p><p>1）类与类的加载器</p><p>比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义，即使两个类来源于同一个Class文件，被同一个虚拟机加载，只要他们的类加载器不一样，那么这两个类必定不相等（equals（） isAssignableFrom（） isInstance（））</p><p>2）双亲委派模型</p><p>从java虚拟机的角度来讲，只存在两种不同的类加载器：一种是启动类加载器，是虚拟机的一部分，另一种是所有其他的类加载器，这些加载器由java语言实现，独立虚拟机之外，都继承抽象类java.lang.ClassLoader<br>类加载器可以分为以下几种</p><p>1.启动类加载器（Bootstrap ClassLoader）(存放在%JAVA_HOME%\lib或-XBootclasspath指定的)</p><p>2.扩展类加载器（Extension ClassLoader）（%JAVA_HOME%\lib\ext或java.ext.dirs）</p><p>3.应用程序类加载器（Application ClassLoader）：一般情况下这个是程序默认的类加载器</p><p>以下是类加载器的双亲委派模型</p><img width="549" alt="1" src="https://user-images.githubusercontent.com/7789698/29862824-3b7c960e-8da0-11e7-905c-4397d2f7f8d4.png"><p><img src="https://user-images.githubusercontent.com/7789698/32713595-eef6db1c-c884-11e7-8fbe-7ad5a4f486c2.png" alt="f2c882b8b4618500c310a033ab23e493131f0533"></p><p><img src="https://user-images.githubusercontent.com/7789698/32713262-688b3222-c883-11e7-9fd5-83477c144d6d.jpg" alt="20151101162452934"></p><p><code>public abstract class ClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 在加载类之前先调用findLoadedClass方法检查该类是否已经被加载过，findLoadedClass会返回一个Class类型的对象，如果该类已经被加载过，那么就可以直接返回该对象</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果以上两个步骤都没有成功的加载到类，那么调用自己的findClass(name)方法来加载类。</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line"><span class="comment">//链接指定的类。这个方法给Classloader用来链接一个类，如果这个类已经被链接过了，那么这个方法只做一个简单的返回。否则，这个类将被按照 Java™规范中的Execution描述进行链接……</span></span><br><span class="line"></span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getClassLoadingLock</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (parallelLockMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object newLock = <span class="keyword">new</span> Object();</span><br><span class="line">            lock = parallelLockMap.putIfAbsent(className, newLock);</span><br><span class="line">            <span class="keyword">if</span> (lock == <span class="keyword">null</span>) &#123;</span><br><span class="line">                lock = newLock;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClassLoader</span><span class="params">(Void unused, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">if</span> (ParallelLoaders.isRegistered(<span class="keyword">this</span>.getClass())) &#123;</span><br><span class="line">            parallelLockMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">            package2certs = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">            domains =</span><br><span class="line">                Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;ProtectionDomain&gt;());</span><br><span class="line">            assertionLock = <span class="keyword">new</span> Object();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// no finer-grained lock; lock on the classloader instance</span></span><br><span class="line">            parallelLockMap = <span class="keyword">null</span>;</span><br><span class="line">            package2certs = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">            domains = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            assertionLock = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装了并行的可装载的类型的集合。</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelLoaders</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ParallelLoaders</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the set of parallel capable loader types</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;Class&lt;? extends ClassLoader&gt;&gt; loaderTypes =</span><br><span class="line">            Collections.newSetFromMap(</span><br><span class="line">                <span class="keyword">new</span> WeakHashMap&lt;Class&lt;? extends ClassLoader&gt;, Boolean&gt;());</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (loaderTypes) &#123; loaderTypes.add(ClassLoader.class); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Registers the given class loader type as parallel capabale.</span></span><br><span class="line"><span class="comment">         * Returns &#123;<span class="doctag">@code</span> true&#125; is successfully registered; &#123;<span class="doctag">@code</span> false&#125; if</span></span><br><span class="line"><span class="comment">         * loader&#x27;s super class is not registered.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">register</span><span class="params">(Class&lt;? extends ClassLoader&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (loaderTypes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (loaderTypes.contains(c.getSuperclass())) &#123;</span><br><span class="line">                    <span class="comment">// register the class loader as parallel capable</span></span><br><span class="line">                    <span class="comment">// if and only if all of its super classes are.</span></span><br><span class="line">                    <span class="comment">// Note: given current classloading sequence, if</span></span><br><span class="line">                    <span class="comment">// the immediate super class is parallel capable,</span></span><br><span class="line">                    <span class="comment">// all the super classes higher up must be too.</span></span><br><span class="line">                    loaderTypes.add(c);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns &#123;<span class="doctag">@code</span> true&#125; if the given class loader type is</span></span><br><span class="line"><span class="comment">         * registered as parallel capable.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRegistered</span><span class="params">(Class&lt;? extends ClassLoader&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (loaderTypes) &#123;</span><br><span class="line">                <span class="keyword">return</span> loaderTypes.contains(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="类装载方式"><a href="#类装载方式" class="headerlink" title="类装载方式:"></a>类装载方式:</h2><ol><li>隐式装载， 程序在运行过程中当碰到通过new 等方式生成对象时，隐式调用类装载器加载对应的类到jvm中。 </li><li>显式装载， 通过class.forname()等方法，显式加载需要的类</li></ol><h2 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h2><p>在程序运行中，会将运行所需要的数据复制一份到CPU高速缓存中，在进行运算时CPU不再也主存打交道，而是直接从高速缓存中读写数据，只有当运行结束后才会将数据刷新到主存中。</p><p>所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享。局部变量（Local variables），方法定义参数（java语言规范称之为formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p><p>Java线程之间的通信由Java内存模型（本文简称为JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：</p><p><img src="https://user-images.githubusercontent.com/7789698/42419093-c0eebcaa-82e0-11e8-8a56-7b87f18304a2.png" alt="image"></p><p>从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：</p><ol><li>首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li><li>然后，线程B到主内存中去读取线程A之前已更新过的共享变量。</li></ol><p>下面通过示意图来说明这两个步骤：</p><p><img src="https://user-images.githubusercontent.com/7789698/42419102-d90a5ede-82e0-11e8-9e99-30c0806cc4e4.png" alt="image"></p><p>如上图所示，本地内存A和B有主内存中共享变量x的副本。假设初始时，这三个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。</p><p>从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证。</p><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三类：</p><p>1、编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p><p>2、指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p><p>3、内存系统的重排序。由于处理器使用缓存和读／写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p><p>从 Java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p><p><img src="https://user-images.githubusercontent.com/7789698/42419111-fe27d1b0-82e0-11e8-9c4d-4732bcae7690.png" alt="image"></p><p>上面的这些重排序都可能导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 Java 编译器在生成指令序列时，插入特定类型的内存屏障指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p><p>JMM 属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p><h3 id="处理器重排序"><a href="#处理器重排序" class="headerlink" title="处理器重排序"></a>处理器重排序</h3><p>现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读/写操作的执行顺序，不一定与内存实际发生的读/写操作顺序一致！</p><p>举个例子：</p><table><thead><tr><th>Processor A</th><th>Processor B</th></tr></thead><tbody><tr><td>a = 1; //A1x = b; //A2</td><td>b = 2; //B1y = a; //B2</td></tr><tr><td>初始状态：a = b = 0处理器允许执行后得到结果：x = y = 0</td><td></td></tr></tbody></table><p>假设处理器A和处理器B按程序的顺序并行执行内存访问，最终却可能得到 x = y = 0。具体的原因如下图所示：</p><p><img src="https://user-images.githubusercontent.com/7789698/42419136-690ede1a-82e1-11e8-92f7-617e9179cd1f.png" alt="image"></p><p>处理器 A 和 B 同时把共享变量写入在写缓冲区中（A1、B1），然后再从内存中读取另一个共享变量（A2、B2），最后才把自己写缓冲区中保存的脏数据刷新到内存中（A3、B3）。当以这种时序执行时，程序就可以得到 x = y = 0 的结果。</p><p>从内存操作实际发生的顺序来看，直到处理器 A 执行 A3 来刷新自己的写缓存区，写操作 A1 才算真正执行了。虽然处理器 A 执行内存操作的顺序为：A1 -&gt; A2，但内存操作实际发生的顺序却是：A2 -&gt; A1。此时，处理器 A 的内存操作顺序被重排序了。</p><p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操作重排序。</p><h3 id="内存屏障指令"><a href="#内存屏障指令" class="headerlink" title="内存屏障指令"></a>内存屏障指令</h3><p>为了保证内存可见性，Java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM 把内存屏障指令分为下列四类：</p><p><img src="https://user-images.githubusercontent.com/7789698/42419147-8bd36902-82e1-11e8-834d-dc4bfdcc8309.png" alt="image"></p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>如果一个类包含final字段，且在构造函数中初始化，那么<strong>正确的构造一个对象后</strong>，final字段被设置后对于其它线程是可见的。一个类被<strong>final</strong>修饰后，它的方法默认被修饰为<strong>final</strong> ，这时方法的内联起到作用了。</p><p>对于 final 域，编译器和处理器要遵守两个重排序规则：</p><p>1.在构造函数内对一个 final 域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</p><p>2.初次读一个包含 final 域的对象的引用，与随后初次读这个 final 域，这两个操作之间不能重排序。</p><h4 id="写-final-域的重排序规则"><a href="#写-final-域的重排序规则" class="headerlink" title="写 final 域的重排序规则"></a>写 final 域的重排序规则</h4><p>写 final 域的重排序规则禁止把 final 域的写重排序到构造函数之外。这个规则的实现包含下面2个方面：</p><ul><li>JMM 禁止编译器把 final 域的写重排序到构造函数之外。</li><li>编译器会在 final 域的写之后，构造函数 return 之前，插入一个StoreStore屏障。这个屏障禁止处理器把 final 域的写重排序到构造函数之外。</li></ul><h4 id="读-final-域的重排序规则"><a href="#读-final-域的重排序规则" class="headerlink" title="读 final 域的重排序规则"></a>读 final 域的重排序规则</h4><p>在一个线程中，初次读对象引用与初次读该对象包含的 final 域，JMM 禁止处理器重排序这两个操作（注意，这个规则仅仅针对处理器）。编译器会在读 final 域操作的前面插入一个 LoadLoad 屏障。</p><h4 id="final-域是引用类型"><a href="#final-域是引用类型" class="headerlink" title="final 域是引用类型"></a>final 域是引用类型</h4><p>对于引用类型，写 final 域的重排序规则对编译器和处理器增加了如下约束：</p><p>在构造函数内对一个 final 引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</p><h3 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h3><blockquote><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性</p></blockquote><p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p><ol><li>普通同步方法，锁是当前实例对象</li><li>静态同步方法，锁是当前类的class对象</li><li>同步方法块，锁是括号里面的对象</li></ol><ul><li>同步代码块：monitorenter指令插入到同步代码块的开始位置，monitorexit指令插入到同步代码块的结束位置，JVM需要保证每一个monitorenter都有一个monitorexit与之相对应。任何对象都有一个monitor与之相关联，当且一个monitor被持有之后，他将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁； </li><li>同步方法：synchronized方法则会被翻译成普通的方法调用和返回指令如:invokevirtual、areturn指令，在VM字节码层面并没有任何特别的指令来实现被synchronized修饰的方法，而是在Class文件的方法表中将该方法的access_flags字段中的synchronized标志位置1，表示该方法是同步方法并使用调用该方法的对象或该方法所属的Class在JVM的内部对象表示Klass做为锁对象。(摘自：<a href="http://www.cnblogs.com/javaminer/p/3889023.html">http://www.cnblogs.com/javaminer/p/3889023.html</a>)</li></ul><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>在程序运行中，会将运行所需要的数据复制一份到CPU高速缓存中，在进行运算时CPU不再也主存打交道，而是直接从高速缓存中读写数据，只有当运行结束后才会将数据刷新到主存中。</p><p>解决缓存一致性方案有两种（volatile根据处理器不同可能用下面两种其一去实现可见性）：</p><ol><li>通过在总线加LOCK#锁的方式</li><li>通过缓存一致性协议</li></ol><p>方案1 它是采用一种独占的方式来实现的，即总线加LOCK#锁的话，只能有一个CPU能够运行，其他CPU都得阻塞，效率较为低下。</p><p>方案2 缓存一致性协议（MESI协议）它确保每个缓存中使用的共享变量的副本是一致的。其核心思想如下：当某个CPU在写数据时，如果发现操作的变量是共享变量，则会通知其他CPU告知该变量的缓存行是无效的，因此其他CPU在读取该变量时，发现其无效会重新从主存中加载数据。</p><p>原子性  即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。 </p><p>可见性 当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。 </p><p>有序性 程序执行的顺序按照代码的先后顺序执行。</p><p>volatile可以保证线程可见性且提供了一定的有序性，无法保证原子性。在JVM底层volatile是采用“内存屏障”来实现的。</p><h3 id="阻止编译器重排序"><a href="#阻止编译器重排序" class="headerlink" title="阻止编译器重排序"></a>阻止编译器重排序</h3><p><img src="https://user-images.githubusercontent.com/7789698/42420286-f670a7de-82f5-11e8-8896-e0cd5b7e77c4.png" alt="image"></p><h3 id="阻止处理器重排序"><a href="#阻止处理器重排序" class="headerlink" title="阻止处理器重排序"></a>阻止处理器重排序</h3><p>内存屏障（<a href="http://en.wikipedia.org/wiki/Memory_barrier">memory barrier</a>）是组个CPU指令。编译器和CPU可以在保证输出结果一样的情况下对指令重排序，使性能得到优化。插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。</p><p>内存屏障分为以下4个：</p><ol><li>LoadLoad屏障（Load1，LoadLoad， Load2）<br>确保Load1所要读入的数据能够在被Load2和后续的load指令访问前读入。通常能执行预加载指令或/和支持乱序处理的处理器中需要显式声明Loadload屏障，因为在这些处理器中正在等待的加载指令能够绕过正在等待存储的指令。 而对于总是能保证处理顺序的处理器上，设置该屏障相当于无操作。</li><li>LoadStore屏障（Load1，LoadStore， Store2）<br>确保Load1的数据在Store2和后续Store指令被刷新之前读取。在等待Store指令可以越过loads指令的乱序处理器上需要使用LoadStore屏障。</li><li>StoreStore屏障（Store1，StoreStore，Store2）<br>确保Store1的数据在Store2以及后续Store指令操作相关数据之前对其它处理器可见（例如向主存刷新数据）。通常情况下，如果处理器不能保证从写缓冲或/和缓存向其它处理器和主存中按顺序刷新数据，那么它需要使用StoreStore屏障。</li><li>StoreLoad屏障（Store1，StoreLoad，Load2）<br>确保Store1的数据在被Load2和后续的Load指令读取之前对其他处理器可见。StoreLoad屏障可以防止一个后续的load指令 不正确的使用了Store1的数据，而不是另一个处理器在相同内存位置写入一个新数据。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/42420294-1427cc94-82f6-11e8-8f01-5c0bdecf5f43.png" alt="image"></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p><img src="https://user-images.githubusercontent.com/7789698/38788998-dba9647c-4169-11e8-8f08-410fed67f06e.png" alt="image"></p><p>线程池类为 java.util.concurrent.ThreadPoolExecutor，常用构造方法为：</p><p><code>ThreadPoolExecutor(int corePoolSize, int maximumPoolSize,</code><br><code>long keepAliveTime, TimeUnit unit,</code><br><code>BlockingQueue&lt;Runnable&gt; workQueue,</code><br><code>RejectedExecutionHandler handler)</code></p><ul><li><p>corePoolSize： 线程池维护线程的最少数量</p></li><li><p>maximumPoolSize：线程池维护线程的最大数量</p></li><li><p>keepAliveTime： 线程池维护线程所允许的空闲时间</p></li><li><p>unit： 线程池维护线程所允许的空闲时间的单位</p></li><li><p>workQueue： 线程池所使用的缓冲队列</p></li><li><p>handler： 线程池对拒绝任务的处理策略</p><p>一个任务通过 execute(Runnable)方法被添加到线程池，任务就是一个 Runnable类型的对象，任务的执行方法就是Runnable类型对象的run()方法。</p></li></ul><p>当一个任务通过execute(Runnable)方法欲添加到线程池时：</p><ol><li>如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。</li><li>如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。</li><li>如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。</li><li>如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。</li><li>当线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。</li></ol><p>handler有四个选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy()</span><br></pre></td></tr></table></figure><p>抛出java.util.concurrent.RejectedExecutionException异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.CallerRunsPolicy()</span><br></pre></td></tr></table></figure><p>当抛出RejectedExecutionException异常时，会调用rejectedExecution方法<br>(如果主线程没有关闭，则主线程调用run方法,源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.DiscardOldestPolicy()</span><br></pre></td></tr></table></figure><p>抛弃旧的任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.DiscardPolicy()</span><br></pre></td></tr></table></figure><p>抛弃当前的任务</p><h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line"></span><br><span class="line">    Future&lt;?&gt; submit(Runnable task);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                  <span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ExecutorService                             真正的线程池接口。</li><li>ScheduledExecutorService             能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。</li><li>ThreadPoolExecutor                       ExecutorService的默认实现。</li><li>ScheduledThreadPoolExecutor       继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</li></ul><h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很明显，这个线程池内部每个Runnable是用LinkedBlockingQueue管理的。创建一个最大线程数目固定的线程池，该线程池用一个共享的无界队列来存储提交的任务。参数nThreads指定线程池的最大线程数，参数threadFactory是线程工厂类，主要用于自定义线程池中创建新线程时的行为。需要说明的是，创建线程池时，如果线程池没有接收到任何任务，则线程池中不会创建新线程，在线程池中线程数目少于最大线程数时，每来一个新任务就创建一个新线程，当线程数达到最大线程数时，不再创建新线程，新来的任务存储在队列中，之后线程数目不再变化！使用如下：<br>（java8）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Callable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Running on thread #&quot;</span>+ Thread.currentThread().getId());</span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">Future[] answers = &#123;</span><br><span class="line">    executorService.submit(() -&gt; longOperation()),</span><br><span class="line">    executorService.submit(ThreadGoodies::longOperation)</span><br><span class="line">&#125;;</span><br><span class="line">Arrays.stream(answers).forEach(Unchecked.consumer(</span><br><span class="line">    f -&gt; System.out.println(f.get())</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>jdk8以前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    executorService.execute(t1);</span><br><span class="line">    executorService.execute(t2);</span><br><span class="line">        pool.shutdown();</span><br></pre></td></tr></table></figure><p>这部分：<a href="http://www.tuicool.com/articles/2iI7b23">http://www.tuicool.com/articles/2iI7b23</a></p><h3 id="newWorkStealingPool（JDK7引入）"><a href="#newWorkStealingPool（JDK7引入）" class="headerlink" title="newWorkStealingPool（JDK7引入）"></a>newWorkStealingPool（JDK7引入）</h3><p>parallelism表示并行数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">(<span class="keyword">int</span> parallelism)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">        (parallelism,</span><br><span class="line">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">         <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TreeNode tree = <span class="keyword">new</span> TreeNode(<span class="number">5</span>,</span><br><span class="line">          <span class="keyword">new</span> TreeNode(<span class="number">3</span>), <span class="keyword">new</span> TreeNode(<span class="number">2</span>,</span><br><span class="line">          <span class="keyword">new</span> TreeNode(<span class="number">2</span>), <span class="keyword">new</span> TreeNode(<span class="number">8</span>)));</span><br><span class="line"></span><br><span class="line">  ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();</span><br><span class="line">  <span class="keyword">int</span> sum = forkJoinPool.invoke(<span class="keyword">new</span> CountingTask(tree));</span><br></pre></td></tr></table></figure><p>创建ForkJoin框架中用到的ForkJoinPool线程池。ForkJoinPool实现了工作窃取算法（work-stealing），线程会主动寻找新创建的任务去执行，从而保证较高的线程利用率。它使用守护线程（deamon）来执行任务，因此无需对他显示的调用shutdown()来关闭。<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-forkjoin/">https://www.ibm.com/developerworks/cn/java/j-lo-forkjoin/</a></p><h3 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Runnable task = () -&gt; System.out.println(<span class="string">&quot;Scheduling: &quot;</span> + System.nanoTime());</span><br><span class="line">ScheduledFuture&lt;?&gt; future = executor.schedule(task, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">1337</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> remainingDelay = future.getDelay(TimeUnit.MILLISECONDS);</span><br><span class="line">System.out.printf(<span class="string">&quot;Remaining Delay: %sms&quot;</span>, remainingDelay);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CountDownLatch lock = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">ScheduledFuture&lt;?&gt; future = executor.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    lock.countDown();</span><br><span class="line">&#125;, <span class="number">500</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">lock.await();</span><br><span class="line">future.cancel(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>tasks ：每秒的任务数，假设为500～1000<br>taskcost：每个任务花费时间，假设为0.1s<br>responsetime：系统允许容忍的最大响应时间，假设为1s<br>做几个计算<br>corePoolSize = 每秒需要多少个线程处理？<br>threadcount = tasks/(1/taskcost) =tasks*taskcout =  (500～1000)*0.1 = 50～100 个线程。corePoolSize设置应该大于50<br>根据8020原则，如果80%的每秒任务数小于800，那么corePoolSize设置为80即可<br>queueCapacity = (coreSizePool/taskcost)<em>responsetime<br>计算可得 queueCapacity = 80/0.1</em>1 = 80。意思是队列里的线程可以等待1s，超过了的需要新开线程来执行<br>切记不能设置为Integer.MAX_VALUE，这样队列会很大，线程数只会保持在corePoolSize大小，当任务陡增时，不能新开线程来执行，响应时间会随之陡增。<br>maxPoolSize = (max(tasks)- queueCapacity)/(1/taskcost)<br>计算可得 maxPoolSize = (1000-80)/10 = 92<br>（最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数<br>rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理  （<a href="https://my.oschina.net/u/169390/blog/97415%EF%BC%89">https://my.oschina.net/u/169390/blog/97415）</a><br>keepAliveTime和allowCoreThreadTimeout采用默认通常能满足</p><h2 id="可重入性"><a href="#可重入性" class="headerlink" title="可重入性"></a>可重入性</h2><p>​    可 重入（reentrant）函数可以由多于一个任务并发使用，而不必担心数据错误。相反，不可重入（non-reentrant）函数不能由超过一个任务所共享，除非能确保函数的互斥（或者使用信号量，或者在代码的关键部分禁用中断）。可重入函数可以在任意时刻被中断，稍后再继续运行，不会丢失数据。可重入函数要么使用本地变量，要么在使用全局变量时保护自己的数据。</p><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>让该线程等待一段时间，不会被立即挂起，看持有锁的线程是否会很快释放锁。怎么等待呢？执行一段无意义的循环即可（自旋）。 </p><p>自旋锁在JDK 1.4.2中引入，默认关闭，但是可以使用-XX:+UseSpinning开开启，在JDK1.6中默认开启。同时自旋的默认次数为10次，可以通过参数-XX:PreBlockSpin来调整； </p><h3 id="适应自旋锁"><a href="#适应自旋锁" class="headerlink" title="适应自旋锁"></a>适应自旋锁</h3><p>如果通过参数-XX:preBlockSpin来调整自旋锁的自旋次数，会带来诸多不便。假如我将参数调整为10，但是系统很多线程都是等你刚刚退出的时候就释放了锁（假如你多自旋一两次就可以获取锁）。线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。反之，如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。 </p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>为了保证数据的完整性，我们在进行操作时需要对这部分操作进行同步控制，但是在有些情况下，JVM检测到不可能存在共享数据竞争，这是JVM会对这些同步锁进行锁消除。锁消除的依据是逃逸分析的数据支持。 </p><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>减少传统的重量级锁使用操作系统互斥量产生的性能消耗。当关闭偏向锁功能或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则会尝试获取轻量级锁。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现，操作系统实现线程之间的切换需要从用户态到内核态的切换，切换成本非常高。</p><p><img src="https://user-images.githubusercontent.com/7789698/38798131-45870b1e-4193-11e8-830e-72585851526d.png" alt="image"></p><h3 id="Little-Endian"><a href="#Little-Endian" class="headerlink" title="Little-Endian"></a>Little-Endian</h3><p>低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低地址 ------------------&gt; 高地址</span><br><span class="line">0x78  |  0x56  |  0x34  |  0x12</span><br></pre></td></tr></table></figure><h3 id="Big-Endian"><a href="#Big-Endian" class="headerlink" title="Big-Endian"></a>Big-Endian</h3><p>高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低地址 -----------------&gt; 高地址</span><br><span class="line">0x12  |  0x34  |  0x56  |  0x78</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;mid=2247483784&amp;idx=1&amp;sn=672cd788380b2096a7e60aae8739d264&amp;chksm=fa497e39cd3ef72fcafe7e9bcc21add3dce0d47019ab6e31a775ba7a7e4adcb580d4b51021a9&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;mid=2247483784&amp;idx=1&amp;sn=672cd788380b2096a7e60aae8739d264&amp;chksm=fa497e39cd3ef72fcafe7e9bcc21add3dce0d47019ab6e31a775ba7a7e4adcb580d4b51021a9&amp;scene=21#wechat_redirect</a></p><p><a href="https://www.jianshu.com/p/f68d6ef2dcf0">https://www.jianshu.com/p/f68d6ef2dcf0</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;mid=2247483775&amp;idx=1&amp;sn=e3c249e55dc25f323d3922d215e17999&amp;chksm=fa497ececd3ef7d82a9ce86d6ca47353acd45d7d1cb296823267108a06fbdaf71773f576a644&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;mid=2247483775&amp;idx=1&amp;sn=e3c249e55dc25f323d3922d215e17999&amp;chksm=fa497ececd3ef7d82a9ce86d6ca47353acd45d7d1cb296823267108a06fbdaf71773f576a644&amp;scene=21#wechat_redirect</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（九） Filter &amp; Listener</title>
      <link href="/hexo/post/2355343c.html"/>
      <url>/hexo/post/2355343c.html</url>
      
        <content type="html"><![CDATA[<h2 id="Filter解析"><a href="#Filter解析" class="headerlink" title="Filter解析"></a>Filter解析</h2><p>通过Filter接口我们可以轻松地实现服务提供方和消费方的拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * do invoke filter.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;</span></span><br><span class="line"><span class="comment">     * // before filter</span></span><br><span class="line"><span class="comment">     * Result result = invoker.invoke(invocation);</span></span><br><span class="line"><span class="comment">     * // after filter</span></span><br><span class="line"><span class="comment">     * return result;</span></span><br><span class="line"><span class="comment">     * &lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invoker    service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation invocation.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> invoke result.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.rpc.Invoker#invoke(Invocation)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到ReferenceConfig和ServiceConfig的共同父类AbstractInterfaceConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="keyword">protected</span> String filter;</span><br><span class="line"><span class="comment">//key为reference.filter</span></span><br><span class="line"><span class="meta">@Parameter(key = Constants.REFERENCE_FILTER_KEY, append = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Parameter作用是将filter解析并放入key为service.filter的url</span></span><br><span class="line"><span class="meta">@Parameter(key = Constants.SERVICE_FILTER_KEY, append = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">super</span>.getFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//xxx,yyy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilter</span><span class="params">(String filter)</span> </span>&#123;</span><br><span class="line">    checkMultiExtension(Filter.class, <span class="string">&quot;filter&quot;</span>, filter);</span><br><span class="line">    <span class="keyword">this</span>.filter = filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="自定义调用拦截使用方法"><a href="#自定义调用拦截使用方法" class="headerlink" title="自定义调用拦截使用方法"></a>自定义调用拦截使用方法</h2><p>服务提供方和服务消费方调用过程拦截，Dubbo 本身的大多功能均基于此扩展点实现，每次远程方法执行，该拦截都会被执行，请注意对性能的影响。</p><p>约定：</p><ul><li>用户自定义 filter 默认在内置 filter 之后。</li><li>特殊值 <code>default</code>，表示缺省扩展点插入的位置。比如：<code>filter=&quot;xxx,default,yyy&quot;</code>，表示 <code>xxx</code> 在缺省 filter 之前，<code>yyy</code> 在缺省 filter 之后。</li><li>特殊符号 <code>-</code>，表示剔除。比如：<code>filter=&quot;-foo1&quot;</code>，剔除添加缺省扩展点 <code>foo1</code>。比如：<code>filter=&quot;-default&quot;</code>，剔除添加所有缺省扩展点。</li><li>provider 和 service 同时配置的 filter 时，累加所有 filter，而不是覆盖。比如：<code>&lt;dubbo:provider filter=&quot;xxx,yyy&quot;/&gt;</code> 和 <code>&lt;dubbo:service filter=&quot;aaa,bbb&quot; /&gt;</code>，则 <code>xxx</code>,<code>yyy</code>,<code>aaa</code>,<code>bbb</code> 均会生效。如果要覆盖，需配置：<code>&lt;dubbo:service filter=&quot;-xxx,-yyy,aaa,bbb&quot; /&gt;</code></li></ul><h4 id="扩展接口"><a href="#扩展接口" class="headerlink" title="扩展接口"></a>扩展接口</h4><p><code>com.alibaba.dubbo.rpc.Filter</code></p><h4 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消费方调用过程拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">filter</span>=<span class="string">&quot;xxx,yyy&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 消费方调用过程缺省拦截器，将拦截所有reference --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">filter</span>=<span class="string">&quot;xxx,yyy&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提供方调用过程拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">filter</span>=<span class="string">&quot;xxx,yyy&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提供方调用过程缺省拦截器，将拦截所有service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">filter</span>=<span class="string">&quot;xxx,yyy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="已知扩展"><a href="#已知扩展" class="headerlink" title="已知扩展"></a>已知扩展</h4><ul><li><code>com.alibaba.dubbo.rpc.filter.EchoFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.GenericFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.GenericImplFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.TokenFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.AccessLogFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.CountFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.ActiveLimitFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.ClassLoaderFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.ContextFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.ConsumerContextFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.ExceptionFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.ExecuteLimitFilter</code></li><li><code>com.alibaba.dubbo.rpc.filter.DeprecatedFilter</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">echo</span>=<span class="string">com.alibaba.dubbo.rpc.filter.EchoFilter</span></span><br><span class="line"><span class="attr">generic</span>=<span class="string">com.alibaba.dubbo.rpc.filter.GenericFilter</span></span><br><span class="line"><span class="attr">genericimpl</span>=<span class="string">com.alibaba.dubbo.rpc.filter.GenericImplFilter</span></span><br><span class="line"><span class="attr">token</span>=<span class="string">com.alibaba.dubbo.rpc.filter.TokenFilter</span></span><br><span class="line"><span class="attr">accesslog</span>=<span class="string">com.alibaba.dubbo.rpc.filter.AccessLogFilter</span></span><br><span class="line"><span class="attr">activelimit</span>=<span class="string">com.alibaba.dubbo.rpc.filter.ActiveLimitFilter</span></span><br><span class="line"><span class="attr">classloader</span>=<span class="string">com.alibaba.dubbo.rpc.filter.ClassLoaderFilter</span></span><br><span class="line"><span class="attr">context</span>=<span class="string">com.alibaba.dubbo.rpc.filter.ContextFilter</span></span><br><span class="line"><span class="attr">consumercontext</span>=<span class="string">com.alibaba.dubbo.rpc.filter.ConsumerContextFilter</span></span><br><span class="line"><span class="attr">exception</span>=<span class="string">com.alibaba.dubbo.rpc.filter.ExceptionFilter</span></span><br><span class="line"><span class="attr">executelimit</span>=<span class="string">com.alibaba.dubbo.rpc.filter.ExecuteLimitFilter</span></span><br><span class="line"><span class="attr">deprecated</span>=<span class="string">com.alibaba.dubbo.rpc.filter.DeprecatedFilter</span></span><br><span class="line"><span class="attr">compatible</span>=<span class="string">com.alibaba.dubbo.rpc.filter.CompatibleFilter</span></span><br><span class="line"><span class="attr">timeout</span>=<span class="string">com.alibaba.dubbo.rpc.filter.TimeoutFilter</span></span><br></pre></td></tr></table></figure><h4 id="扩展示例"><a href="#扩展示例" class="headerlink" title="扩展示例"></a>扩展示例</h4><p>Maven 项目结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line"> |-main</span><br><span class="line">    |-java</span><br><span class="line">        |-com</span><br><span class="line">            |-xxx</span><br><span class="line">                |-XxxFilter.java (实现Filter接口)</span><br><span class="line">    |-resources</span><br><span class="line">        |-META-INF</span><br><span class="line">            |-dubbo</span><br><span class="line">                |-com.alibaba.dubbo.rpc.Filter (纯文本文件，内容为：xxx=com.xxx.XxxFilter)</span><br></pre></td></tr></table></figure><p>XxxFilter.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Filter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Invocation;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Result;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.RpcException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxxFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// before filter ...</span></span><br><span class="line">        Result result = invoker.invoke(invocation);</span><br><span class="line">        <span class="comment">// after filter ...</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>META-INF/dubbo/com.alibaba.dubbo.rpc.Filter：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxx</span>=<span class="string">com.xxx.XxxFilter</span></span><br></pre></td></tr></table></figure><p>具体是如何调用的呢？</p><h3 id="ProtocolFilterWrapper"><a href="#ProtocolFilterWrapper" class="headerlink" title="ProtocolFilterWrapper"></a>ProtocolFilterWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolFilterWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;protocol == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">buildInvokerChain</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; invoker, String key, String group)</span> </span>&#123;</span><br><span class="line">        Invoker&lt;T&gt; last = invoker;</span><br><span class="line">        <span class="comment">//通过配置拿到所有filter</span></span><br><span class="line">        List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);</span><br><span class="line">        <span class="keyword">if</span> (!filters.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = filters.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> Filter filter = filters.get(i);</span><br><span class="line">                <span class="keyword">final</span> Invoker&lt;T&gt; next = last;</span><br><span class="line">                last = <span class="keyword">new</span> Invoker&lt;T&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.getInterface();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.getUrl();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.isAvailable();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> filter.invoke(next, invocation);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        invoker.destroy();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> protocol.getDefaultPort();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//服务暴露</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">return</span> protocol.export(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过读取service.filter构建filter链</span></span><br><span class="line">        <span class="keyword">return</span> protocol.export(buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//服务引用</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">return</span> protocol.refer(type, url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildInvokerChain(protocol.refer(type, url), </span><br><span class="line">                                 <span class="comment">//通过读取reference.filter配置构建filter链</span></span><br><span class="line">                                 Constants.REFERENCE_FILTER_KEY, Constants.CONSUMER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        protocol.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Listener解析"><a href="#Listener解析" class="headerlink" title="Listener解析"></a>Listener解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvokerListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The invoker referred</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invoker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.rpc.Protocol#refer(Class, URL)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">referred</span><span class="params">(Invoker&lt;?&gt; invoker)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The invoker destroyed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invoker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.rpc.Invoker#destroy()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroyed</span><span class="params">(Invoker&lt;?&gt; invoker)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExporterListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The exporter exported.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exporter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.rpc.Protocol#export(Invoker)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exported</span><span class="params">(Exporter&lt;?&gt; exporter)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The exporter unexported.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exporter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.rpc.Exporter#unexport()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unexported</span><span class="params">(Exporter&lt;?&gt; exporter)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String listener;</span><br><span class="line"><span class="comment">//invoker.listener</span></span><br><span class="line"><span class="meta">@Parameter(key = Constants.INVOKER_LISTENER_KEY, append = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkMultiExtension(InvokerListener.class, <span class="string">&quot;listener&quot;</span>, listener);</span><br><span class="line">    <span class="keyword">return</span> listener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//exporter.listener</span></span><br><span class="line"><span class="meta">@Parameter(key = Constants.EXPORTER_LISTENER_KEY, append = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">super</span>.getListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(String listener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listener = listener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用监听扩展"><a href="#引用监听扩展" class="headerlink" title="引用监听扩展"></a>引用监听扩展</h3><h4 id="扩展说明"><a href="#扩展说明" class="headerlink" title="扩展说明"></a>扩展说明</h4><p>当有服务引用时，触发该事件。</p><h4 id="扩展接口-1"><a href="#扩展接口-1" class="headerlink" title="扩展接口"></a>扩展接口</h4><p><code>com.alibaba.dubbo.rpc.InvokerListener</code></p><h4 id="扩展配置-1"><a href="#扩展配置-1" class="headerlink" title="扩展配置"></a>扩展配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用服务监听 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">listener</span>=<span class="string">&quot;xxx,yyy&quot;</span> /&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 引用服务缺省监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">listener</span>=<span class="string">&quot;xxx,yyy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="已知扩展-1"><a href="#已知扩展-1" class="headerlink" title="已知扩展"></a>已知扩展</h4><p><code>com.alibaba.dubbo.rpc.listener.DeprecatedInvokerListener</code></p><h4 id="扩展示例-1"><a href="#扩展示例-1" class="headerlink" title="扩展示例"></a>扩展示例</h4><p>Maven 项目结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line"> |-main</span><br><span class="line">    |-java</span><br><span class="line">        |-com</span><br><span class="line">            |-xxx</span><br><span class="line">                |-XxxInvokerListener.java (实现InvokerListener接口)</span><br><span class="line">    |-resources</span><br><span class="line">        |-META-INF</span><br><span class="line">            |-dubbo</span><br><span class="line">                |-com.alibaba.dubbo.rpc.InvokerListener (纯文本文件，内容为：xxx=com.xxx.XxxInvokerListener)</span><br></pre></td></tr></table></figure><p>XxxInvokerListener.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.InvokerListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.RpcException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxxInvokerListener</span> <span class="keyword">implements</span> <span class="title">InvokerListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">referred</span><span class="params">(Invoker&lt;?&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyed</span><span class="params">(Invoker&lt;?&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>META-INF/dubbo/com.alibaba.dubbo.rpc.InvokerListener：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx=com.xxx.XxxInvokerListener</span><br></pre></td></tr></table></figure><h3 id="暴露监听扩展"><a href="#暴露监听扩展" class="headerlink" title="暴露监听扩展"></a>暴露监听扩展</h3><h4 id="扩展说明-1"><a href="#扩展说明-1" class="headerlink" title="扩展说明"></a>扩展说明</h4><p>当有服务暴露时，触发该事件。</p><h4 id="扩展接口-2"><a href="#扩展接口-2" class="headerlink" title="扩展接口"></a>扩展接口</h4><p><code>com.alibaba.dubbo.rpc.ExporterListener</code></p><h4 id="扩展配置-2"><a href="#扩展配置-2" class="headerlink" title="扩展配置"></a>扩展配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 暴露服务监听 --&gt;</span><br><span class="line">&lt;dubbo:service listener=&quot;xxx,yyy&quot; /&gt;</span><br><span class="line">&lt;!-- 暴露服务缺省监听器 --&gt;</span><br><span class="line">&lt;dubbo:provider listener=&quot;xxx,yyy&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="已知扩展-2"><a href="#已知扩展-2" class="headerlink" title="已知扩展"></a>已知扩展</h4><p><code>com.alibaba.dubbo.registry.directory.RegistryExporterListener</code></p><h4 id="扩展示例-2"><a href="#扩展示例-2" class="headerlink" title="扩展示例"></a>扩展示例</h4><p>Maven 项目结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line"> |-main</span><br><span class="line">    |-java</span><br><span class="line">        |-com</span><br><span class="line">            |-xxx</span><br><span class="line">                |-XxxExporterListener.java (实现ExporterListener接口)</span><br><span class="line">    |-resources</span><br><span class="line">        |-META-INF</span><br><span class="line">            |-dubbo</span><br><span class="line">                |-com.alibaba.dubbo.rpc.ExporterListener (纯文本文件，内容为：xxx=com.xxx.XxxExporterListener)</span><br></pre></td></tr></table></figure><p>XxxExporterListener.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.ExporterListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Exporter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.RpcException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxxExporterListener</span> <span class="keyword">implements</span> <span class="title">ExporterListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exported</span><span class="params">(Exporter&lt;?&gt; exporter)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexported</span><span class="params">(Exporter&lt;?&gt; exporter)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>META-INF/dubbo/com.alibaba.dubbo.rpc.ExporterListener：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxx</span>=<span class="string">com.xxx.XxxExporterListener</span></span><br></pre></td></tr></table></figure><h2 id="ProtocolListenerWrapper解析"><a href="#ProtocolListenerWrapper解析" class="headerlink" title="ProtocolListenerWrapper解析"></a>ProtocolListenerWrapper解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolListenerWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolListenerWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;protocol == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> protocol.getDefaultPort();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//暴露</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">return</span> protocol.export(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListenerExporterWrapper&lt;T&gt;(protocol.export(invoker),</span><br><span class="line"><span class="comment">//exporter.listener</span></span><br><span class="line">                                              Collections.unmodifiableList(ExtensionLoader.getExtensionLoader(ExporterListener.class)</span><br><span class="line">                        .getActivateExtension(invoker.getUrl(), Constants.EXPORTER_LISTENER_KEY)));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">return</span> protocol.refer(type, url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListenerInvokerWrapper&lt;T&gt;(protocol.refer(type, url),</span><br><span class="line">                Collections.unmodifiableList(</span><br><span class="line">                    <span class="comment">//invoker.listener</span></span><br><span class="line">                        ExtensionLoader.getExtensionLoader(InvokerListener.class)</span><br><span class="line">                                .getActivateExtension(url, Constants.INVOKER_LISTENER_KEY)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        protocol.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ListenerExporterWrapper"><a href="#ListenerExporterWrapper" class="headerlink" title="ListenerExporterWrapper"></a>ListenerExporterWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerExporterWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Exporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ListenerExporterWrapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Exporter&lt;T&gt; exporter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ExporterListener&gt; listeners;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListenerExporterWrapper</span><span class="params">(Exporter&lt;T&gt; exporter, List&lt;ExporterListener&gt; listeners)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;exporter == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.exporter = exporter;</span><br><span class="line">        <span class="keyword">this</span>.listeners = listeners;</span><br><span class="line">        <span class="keyword">if</span> (listeners != <span class="keyword">null</span> &amp;&amp; !listeners.isEmpty()) &#123;</span><br><span class="line">            RuntimeException exception = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (ExporterListener listener : listeners) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        listener.exported(<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException t) &#123;</span><br><span class="line">                        logger.error(t.getMessage(), t);</span><br><span class="line">                        exception = t;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exporter.getInvoker();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exporter.unexport();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (listeners != <span class="keyword">null</span> &amp;&amp; !listeners.isEmpty()) &#123;</span><br><span class="line">                RuntimeException exception = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (ExporterListener listener : listeners) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            listener.unexported(<span class="keyword">this</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (RuntimeException t) &#123;</span><br><span class="line">                            logger.error(t.getMessage(), t);</span><br><span class="line">                            exception = t;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> exception;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ListenerInvokerWrapper"><a href="#ListenerInvokerWrapper" class="headerlink" title="ListenerInvokerWrapper"></a>ListenerInvokerWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerInvokerWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ListenerInvokerWrapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;T&gt; invoker;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;InvokerListener&gt; listeners;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListenerInvokerWrapper</span><span class="params">(Invoker&lt;T&gt; invoker, List&lt;InvokerListener&gt; listeners)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invoker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;invoker == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.invoker = invoker;</span><br><span class="line">        <span class="keyword">this</span>.listeners = listeners;</span><br><span class="line">        <span class="keyword">if</span> (listeners != <span class="keyword">null</span> &amp;&amp; !listeners.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (InvokerListener listener : listeners) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        listener.referred(invoker);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                        logger.error(t.getMessage(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.getInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.getUrl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.isAvailable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInterface() + <span class="string">&quot; -&gt; &quot;</span> + (getUrl() == <span class="keyword">null</span> ? <span class="string">&quot; &quot;</span> : getUrl().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            invoker.destroy();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (listeners != <span class="keyword">null</span> &amp;&amp; !listeners.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (InvokerListener listener : listeners) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            listener.destroyed(invoker);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                            logger.error(t.getMessage(), t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM源码－Thread</title>
      <link href="/hexo/post/b56cacc.html"/>
      <url>/hexo/post/b56cacc.html</url>
      
        <content type="html"><![CDATA[<p>new Thread()不会启动一个新线程，而是调用init的这个方法设置一些东西，比如设置线程组，栈大小，拿到线程名，tid。创建一个ThreadLocalMap。<br>而start方法才会启动一个线程。</p><p>其实start方法的核心就是调用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private native void start0();</span><br></pre></td></tr></table></figure><p>start0 -&gt; JVM_StartThread</p><p>虾面是openjdk 的jvm源码<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/75d40493551f/src/share/vm/prims/jvm.cpp">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/75d40493551f/src/share/vm/prims/jvm.cpp</a></p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JVM_ENTRY</span>(<span class="keyword">void</span>, <span class="built_in">JVM_StartThread</span>(JNIEnv* env, jobject jthread))</span><br><span class="line">  <span class="built_in">JVMWrapper</span>(<span class="string">&quot;JVM_StartThread&quot;</span>);</span><br><span class="line">  JavaThread *native_thread = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We cannot hold the Threads_lock when we throw an exception,</span></span><br><span class="line">  <span class="comment">// due to rank ordering issues. Example:  we might need to grab the</span></span><br><span class="line">  <span class="comment">// Heap_lock while we construct the exception.</span></span><br><span class="line">  <span class="keyword">bool</span> throw_illegal_thread_state = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We must release the Threads_lock before we can post a jvmti event</span></span><br><span class="line">  <span class="comment">// in Thread::start.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Ensure that the C++ Thread and OSThread structures aren&#x27;t freed before</span></span><br><span class="line">    <span class="comment">// we operate.</span></span><br><span class="line">    <span class="function">MutexLocker <span class="title">mu</span><span class="params">(Threads_lock)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since JDK 5 the java.lang.Thread threadStatus is used to prevent</span></span><br><span class="line">    <span class="comment">// re-starting an already started thread, so we should usually find</span></span><br><span class="line">    <span class="comment">// that the JavaThread is null. However for a JNI attached thread</span></span><br><span class="line">    <span class="comment">// there is a small window between the Thread object being created</span></span><br><span class="line">    <span class="comment">// (with its JavaThread set) and the update to its threadStatus, so we</span></span><br><span class="line">    <span class="comment">// have to check for this</span></span><br><span class="line">    <span class="keyword">if</span> (java_lang_Thread::<span class="built_in">thread</span>(JNIHandles::<span class="built_in">resolve_non_null</span>(jthread)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      throw_illegal_thread_state = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// We could also check the stillborn flag to see if this thread was already stopped, but</span></span><br><span class="line">      <span class="comment">// for historical reasons we let the thread detect that itself when it starts running</span></span><br><span class="line"></span><br><span class="line">      jlong size =</span><br><span class="line">             java_lang_Thread::<span class="built_in">stackSize</span>(JNIHandles::<span class="built_in">resolve_non_null</span>(jthread));</span><br><span class="line">      <span class="comment">// Allocate the C++ Thread structure and create the native thread.  The</span></span><br><span class="line">      <span class="comment">// stack size retrieved from java is signed, but the constructor takes</span></span><br><span class="line">      <span class="comment">// size_t (an unsigned type), so avoid passing negative values which would</span></span><br><span class="line">      <span class="comment">// result in really large stacks.</span></span><br><span class="line">      <span class="keyword">size_t</span> sz = size &gt; <span class="number">0</span> ? (<span class="keyword">size_t</span>) size : <span class="number">0</span>;</span><br><span class="line">      native_thread = <span class="keyword">new</span> <span class="built_in">JavaThread</span>(&amp;thread_entry, sz);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// At this point it may be possible that no osthread was created for the</span></span><br><span class="line">      <span class="comment">// JavaThread due to lack of memory. Check for this situation and throw</span></span><br><span class="line">      <span class="comment">// an exception if necessary. Eventually we may want to change this so</span></span><br><span class="line">      <span class="comment">// that we only grab the lock if the thread was created successfully -</span></span><br><span class="line">      <span class="comment">// then we can also do this check and throw the exception in the</span></span><br><span class="line">      <span class="comment">// JavaThread constructor.</span></span><br><span class="line">      <span class="keyword">if</span> (native_thread-&gt;<span class="built_in">osthread</span>() != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// Note: the current thread is not being used within &quot;prepare&quot;.</span></span><br><span class="line">        native_thread-&gt;<span class="built_in">prepare</span>(jthread);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (throw_illegal_thread_state) &#123;</span><br><span class="line">    <span class="built_in">THROW</span>(vmSymbols::<span class="built_in">java_lang_IllegalThreadStateException</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>(native_thread != <span class="literal">NULL</span>, <span class="string">&quot;Starting null thread?&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (native_thread-&gt;<span class="built_in">osthread</span>() == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// No one should hold a reference to the &#x27;native_thread&#x27;.</span></span><br><span class="line">    <span class="keyword">delete</span> native_thread;</span><br><span class="line">    <span class="keyword">if</span> (JvmtiExport::<span class="built_in">should_post_resource_exhausted</span>()) &#123;</span><br><span class="line">      JvmtiExport::<span class="built_in">post_resource_exhausted</span>(</span><br><span class="line">        JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR | JVMTI_RESOURCE_EXHAUSTED_THREADS,</span><br><span class="line">        <span class="string">&quot;unable to create new native thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">THROW_MSG</span>(vmSymbols::<span class="built_in">java_lang_OutOfMemoryError</span>(),</span><br><span class="line">              <span class="string">&quot;unable to create new native thread&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Thread::<span class="built_in">start</span>(native_thread);</span><br><span class="line"></span><br><span class="line">JVM_END</span><br></pre></td></tr></table></figure><p>可以注意到有native_thread-&gt;osthread() == NULL<br>这个判断，如果osthread为空了会抛出OutOfMemoryError<br>核心点在于native_thread = new JavaThread(&amp;thread_entry, sz); 创建了一个新的线程</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/75d40493551f/src/share/vm/runtime/thread.cpp">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/75d40493551f/src/share/vm/runtime/thread.cpp</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">JavaThread::<span class="built_in">JavaThread</span>(ThreadFunction entry_point, <span class="keyword">size_t</span> stack_sz) :</span><br><span class="line">  <span class="built_in">Thread</span>()</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> INCLUDE_ALL_GCS</span></span><br><span class="line">  , _satb_mark_queue(&amp;_satb_mark_queue_set),</span><br><span class="line">  _dirty_card_queue(&amp;_dirty_card_queue_set)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// INCLUDE_ALL_GCS</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (TraceThreadEvents) &#123;</span><br><span class="line">    tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;creating thread %p&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">initialize</span>();</span><br><span class="line">  _jni_attach_state = _not_attaching_via_jni;</span><br><span class="line">  <span class="built_in">set_entry_point</span>(entry_point);</span><br><span class="line">  <span class="comment">// Create the native thread itself.</span></span><br><span class="line">  <span class="comment">// %note runtime_23</span></span><br><span class="line">  os::ThreadType thr_type = os::java_thread;</span><br><span class="line">  thr_type = entry_point == &amp;compiler_thread_entry ? os::compiler_thread :</span><br><span class="line">                                                     os::java_thread;</span><br><span class="line">  os::<span class="built_in">create_thread</span>(<span class="keyword">this</span>, thr_type, stack_sz);</span><br><span class="line">  <span class="comment">// The _osthread may be NULL here because we ran out of memory (too many threads active).</span></span><br><span class="line">  <span class="comment">// We need to throw and OutOfMemoryError - however we cannot do this here because the caller</span></span><br><span class="line">  <span class="comment">// may hold a lock and all locks must be unlocked before throwing the exception (throwing</span></span><br><span class="line">  <span class="comment">// the exception consists of creating the exception object &amp; initializing it, initialization</span></span><br><span class="line">  <span class="comment">// will leave the VM via a JavaCall and then all locks must be unlocked).</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The thread is still suspended when we reach here. Thread must be explicit started</span></span><br><span class="line">  <span class="comment">// by creator! Furthermore, the thread must also explicitly be added to the Threads list</span></span><br><span class="line">  <span class="comment">// by calling Threads:add. The reason why this is not done here, is because the thread</span></span><br><span class="line">  <span class="comment">// object must be fully initialized (take a look at JVM_Start)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initialize()初始化了一堆字段，重点还是os::create_thread(this, thr_type, stack_sz);</p><p>参考下linux下的创建方法<br><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/75d40493551f/src/os/linux/vm/os_linux.cpp">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/75d40493551f/src/os/linux/vm/os_linux.cpp</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">os::create_thread</span><span class="params">(Thread* thread, ThreadType thr_type, <span class="keyword">size_t</span> stack_size)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(thread-&gt;<span class="built_in">osthread</span>() == <span class="literal">NULL</span>, <span class="string">&quot;caller responsible&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate the OSThread object</span></span><br><span class="line">  OSThread* osthread = <span class="keyword">new</span> <span class="built_in">OSThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (osthread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the correct thread state</span></span><br><span class="line">  osthread-&gt;<span class="built_in">set_thread_type</span>(thr_type);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initial state is ALLOCATED but not INITIALIZED</span></span><br><span class="line">  osthread-&gt;<span class="built_in">set_state</span>(ALLOCATED);</span><br><span class="line"></span><br><span class="line">  thread-&gt;<span class="built_in">set_osthread</span>(osthread);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// init thread attributes</span></span><br><span class="line">  <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">  <span class="built_in">pthread_attr_init</span>(&amp;attr);</span><br><span class="line">  <span class="built_in">pthread_attr_setdetachstate</span>(&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stack size</span></span><br><span class="line">  <span class="keyword">if</span> (os::Linux::<span class="built_in">supports_variable_stack_size</span>()) &#123;</span><br><span class="line">    <span class="comment">// calculate stack size if it&#x27;s not specified by caller</span></span><br><span class="line">    <span class="keyword">if</span> (stack_size == <span class="number">0</span>) &#123;</span><br><span class="line">      stack_size = os::Linux::<span class="built_in">default_stack_size</span>(thr_type);</span><br><span class="line"></span><br><span class="line">      <span class="built_in"><span class="keyword">switch</span></span> (thr_type) &#123;</span><br><span class="line">      <span class="keyword">case</span> os::java_thread:</span><br><span class="line">        <span class="comment">// Java threads use ThreadStackSize which default value can be</span></span><br><span class="line">        <span class="comment">// changed with the flag -Xss</span></span><br><span class="line">        <span class="built_in">assert</span> (JavaThread::<span class="built_in">stack_size_at_create</span>() &gt; <span class="number">0</span>, <span class="string">&quot;this should be set&quot;</span>);</span><br><span class="line">        stack_size = JavaThread::<span class="built_in">stack_size_at_create</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> os::compiler_thread:</span><br><span class="line">        <span class="keyword">if</span> (CompilerThreadStackSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          stack_size = (<span class="keyword">size_t</span>)(CompilerThreadStackSize * K);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="comment">// else fall through:</span></span><br><span class="line">          <span class="comment">// use VMThreadStackSize if CompilerThreadStackSize is not defined</span></span><br><span class="line">      <span class="keyword">case</span> os::vm_thread:</span><br><span class="line">      <span class="keyword">case</span> os::pgc_thread:</span><br><span class="line">      <span class="keyword">case</span> os::cgc_thread:</span><br><span class="line">      <span class="keyword">case</span> os::watcher_thread:</span><br><span class="line">        <span class="keyword">if</span> (VMThreadStackSize &gt; <span class="number">0</span>) stack_size = (<span class="keyword">size_t</span>)(VMThreadStackSize * K);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack_size = <span class="built_in">MAX2</span>(stack_size, os::Linux::min_stack_allowed);</span><br><span class="line">    <span class="built_in">pthread_attr_setstacksize</span>(&amp;attr, stack_size);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// let pthread_create() pick the default value.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// glibc guard page</span></span><br><span class="line">  <span class="built_in">pthread_attr_setguardsize</span>(&amp;attr, os::Linux::<span class="built_in">default_guard_size</span>(thr_type));</span><br><span class="line"></span><br><span class="line">  ThreadState state;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Serialize thread creation if we are running with fixed stack LinuxThreads</span></span><br><span class="line">    <span class="keyword">bool</span> lock = os::Linux::<span class="built_in">is_LinuxThreads</span>() &amp;&amp; !os::Linux::<span class="built_in">is_floating_stack</span>();</span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">      os::Linux::<span class="built_in">createThread_lock</span>()-&gt;<span class="built_in">lock_without_safepoint_check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">pthread_create</span>(&amp;tid, &amp;attr, (<span class="keyword">void</span>* (*)(<span class="keyword">void</span>*)) java_start, thread);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_attr_destroy</span>(&amp;attr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (PrintMiscellaneous &amp;&amp; (Verbose || WizardMode)) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_create()&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Need to clean up stuff we&#x27;ve allocated so far</span></span><br><span class="line">      thread-&gt;<span class="built_in">set_osthread</span>(<span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">delete</span> osthread;</span><br><span class="line">      <span class="keyword">if</span> (lock) os::Linux::<span class="built_in">createThread_lock</span>()-&gt;<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store pthread info into the OSThread</span></span><br><span class="line">    osthread-&gt;<span class="built_in">set_pthread_id</span>(tid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until child thread is either initialized or aborted</span></span><br><span class="line">    &#123;</span><br><span class="line">      Monitor* sync_with_child = osthread-&gt;<span class="built_in">startThread_lock</span>();</span><br><span class="line">      <span class="function">MutexLockerEx <span class="title">ml</span><span class="params">(sync_with_child, Mutex::_no_safepoint_check_flag)</span></span>;</span><br><span class="line">      <span class="keyword">while</span> ((state = osthread-&gt;<span class="built_in">get_state</span>()) == ALLOCATED) &#123;</span><br><span class="line">        sync_with_child-&gt;<span class="built_in">wait</span>(Mutex::_no_safepoint_check_flag);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">      os::Linux::<span class="built_in">createThread_lock</span>()-&gt;<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Aborted due to thread limit being reached</span></span><br><span class="line">  <span class="keyword">if</span> (state == ZOMBIE) &#123;</span><br><span class="line">      thread-&gt;<span class="built_in">set_osthread</span>(<span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">delete</span> osthread;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The thread is returned suspended (in state INITIALIZED),</span></span><br><span class="line">  <span class="comment">// and is started higher up in the call chain</span></span><br><span class="line">  <span class="built_in">assert</span>(state == INITIALIZED, <span class="string">&quot;race condition&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果new OSThread(NULL, NULL);失败了会一直返回到最上面的函数并抛出oom（如内存不够等条件）</p><p>可以看到使用glibc的int ret = pthread_create(&amp;tid, &amp;attr, (void* (<em>)(void</em>)) java_start, thread);来创建线程。如果创建失败也会thread-&gt;set_osthread(NULL); （如ZOMBIE状态－达到线程上限）最后抛出oom</p><p>关于glibc的pthread_create可以参考<br><a href="http://www.gnu.org/software/libc/manual/pdf/libc.pdf">http://www.gnu.org/software/libc/manual/pdf/libc.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码(jdk1.8) </title>
      <link href="/hexo/post/afadb629.html"/>
      <url>/hexo/post/afadb629.html</url>
      
        <content type="html"><![CDATA[<ul><li>HashMap的底层主要是基于数组和链表来实现的，它之所以有相当快的查询速度主要是因为它是通过计算散列码来决定存储的位置。HashMap中主要是通过key的hashCode来计算hash值的，只要hashCode相同，计算出来的hash值就一样。如果存储的对象对多了，就有可能不同的对象所算出来的hash值是相同的，这就出现了所谓的hash冲突。学过数据结构的同学都知道，解决hash冲突的方法有很多，HashMap底层是通过链表来解决hash冲突的。</li><li>JDK1.6中HashMap采用的是位桶+链表的方式，即我们常说的散列链表的方式，而JDK1.8中采用的是位桶+链表/红黑树的方式，也是非线程安全的。当某个位桶的链表的长度达到某个阀值的时候，这个链表就将转换成红黑树。也就是说原来如果hash不理想，所有都落入同一个桶就变成的单链表，现在只要大于8个在同一个桶里面，就会转化为红黑树，提升效率。</li><li>原来jdk1.7中resize是通过链表头插入的，jdk1.8是通过链表尾插入。可能有人会觉得1.7这样会更快，但是这样容易产生hash碰撞。如果它知道我们用的是哈希算法，它可能会发送大量的请求，导致产生严重的哈希碰撞。然后不停的访问这些 key就能显著的影响服务器的性能，这样就形成了一次拒绝服务攻击（DoS）</li></ul><span id="more"></span><p><img src="https://cloud.githubusercontent.com/assets/7789698/18426598/702f1838-78f5-11e6-80ff-47cba88423ed.png" alt="image"></p><p>解释下比较重要的几个变量：</p><p>loadFactor： 加载因子，默认是0.75</p><p>threshold：临界值，元素数量大于这个就resize。第一次resize的时候默认16*0.75截取int，其他时候每次扩容都扩大一倍，超过2^32取2^32。</p><p>table: 存储实体数组，类型是Node&lt;K,V&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//默认初始化容量，HashMap容量必须是2的幂次方</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最大容量不得超过1&lt;&lt;30</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认装载因子，0.75是权衡空间和时间开销之后的综合考虑</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过这个阈值将使用红黑树组织桶中的结点，而不是链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有表的大小超过这个阈值，桶才可以被转换成树而不是链表（为超过这个值时，应该使用resize）</span></span><br><span class="line"><span class="comment">//这个值是TREEIFY_THRESHOLD的4倍，以便resizing和treeification之间产生冲突</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;<span class="comment">//存储元素的实体数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;<span class="comment">//被修改的次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> threshold;<span class="comment">//临界值   当实际大小超过临界值时，会进行扩容threshold = 加载因子*容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;<span class="comment">//加载因子</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//如16，则</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 1   01111    --移位--&gt; 00111      01111 | 00111   = 01111 (15)</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 2   01111    --移位--&gt; 00011      01111 | 00011   = 01111 (15)</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 4   01111    --移位--&gt; 00000      01111 | 00000   = 01111 (15)</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 8</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 16</span></span><br><span class="line"><span class="comment">//得 threshold 为16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如15，则</span></span><br><span class="line"><span class="comment">// n|= 14 &gt;&gt;&gt; 1   01110    --移位--&gt; 00111      01110 | 00111   = 01111 (15)</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 2   01111    --移位--&gt; 00011      01111 | 00011   = 01111 (15)</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 4   01111    --移位--&gt; 00000      01111 | 00000   = 01111 (15)</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 8</span></span><br><span class="line"><span class="comment">// n|= 15 &gt;&gt;&gt; 16</span></span><br><span class="line"><span class="comment">//得 threshold 为16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如19,则</span></span><br><span class="line"><span class="comment">// n|= 18 &gt;&gt;&gt; 1   10010    --移位--&gt; 01001      10010 | 01001   = 11011 (27)</span></span><br><span class="line"><span class="comment">// n|= 27 &gt;&gt;&gt; 2   11011    --移位--&gt; 00110      11011 | 00110   = 11111 (31)</span></span><br><span class="line"><span class="comment">// n|= 31 &gt;&gt;&gt; 4   11111    --移位--&gt; 00001      11111 | 00001   = 01111 (31)</span></span><br><span class="line"><span class="comment">// n|= 31 &gt;&gt;&gt; 8</span></span><br><span class="line"><span class="comment">// n|= 31 &gt;&gt;&gt; 16</span></span><br><span class="line"><span class="comment">//得 threshold 为32</span></span><br><span class="line"><span class="comment">//最后得能往2^n靠</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>; <span class="comment">//减1是为了排除“100000”这种情况</span></span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node类似一个单链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</p><p><img src="https://user-images.githubusercontent.com/7789698/39800028-0b5f960a-5399-11e8-9923-aaf6cff8d72f.png" alt="image"></p><p>当计算到hash值的时候可以轻松计算出位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line"><span class="comment">//为空则resize</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line"><span class="comment">//如果hash不到（桶是空的）就建立一个新结点放入</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//桶中有东西了</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">　<span class="comment">//如果散列到的结点散列值一样且key一样，将桶中元素记录下来</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line"><span class="comment">//红黑树结点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//链表,一个个取，取到末尾,如果超过链表定义最大界限，转成红黑树</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line"><span class="comment">//树化</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">//散列值一样的,直接跳出</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//如果map中存在一样的元素</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line"><span class="comment">// onlyIfAbsent为false或者旧值为null </span></span><br><span class="line"><span class="comment">//用在如，(onlyIfAbsent 为true，如果存在则不会替换)</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"> <span class="comment">//   public V putIfAbsent(K key, V value) &#123;</span></span><br><span class="line"><span class="comment">//        return putVal(hash(key), key, value, true, true);</span></span><br><span class="line"> <span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//替换成新值</span></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line"><span class="comment">//插入后回调</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>resize<br><img src="https://cloud.githubusercontent.com/assets/7789698/18426619/8fa7f77a-78f5-11e6-91cd-bc0dca0a3bbd.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        <span class="comment">//原数组</span></span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">//原数组大小</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="comment">//临界值，默认0</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="comment">//newCap新的数组大小，newThr新的临界值</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//原数组不为空</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//如果超过最大了2^32</span></span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// 两倍</span></span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">// 桶数组为空，首次分配，结合不同构造器的情况细节稍有不同：</span></span><br><span class="line">        <span class="comment">//构造器带初始大小的参数的，为比初始参数大的往2^n靠的数</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">//默认构造器构造的，使用默认值,newCap:16,newThr:12</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//无元素，带参数构造首次分配的时候，新的临界值设置成newCap * loadFactor取整</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新的大小作为新的临界值</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="comment">//构造新数组</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line"><span class="comment">//旧数组不为空</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//如果只有一个元素，直接rehash并放入桶中</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">//如果是红黑树进行拆分</span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*桶中存在一个链表，需要将链表重新整理到新表当中，因为newCap是oldCap的两倍所以原节点的索引</span></span><br><span class="line"><span class="comment">值要么和原来一样，要么就是原(索引+oldCap)和JDK 1.7中实现不同这里不存在rehash，直接使用原hash</span></span><br><span class="line"><span class="comment">值JDK 1.7中resize过程是在链表头插入，这里是在链表尾插入*/</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">//原索引</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="comment">//第一次, loTail一定为空，则loHead 和 loTail 都指向了e</span></span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    <span class="comment">//loTail不断指向新元素来达到添加的作用</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//原索引+oldCap</span></span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">//第一次, hiTail一定为空，hiTail 和 hiHead 都指向了e</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                     <span class="comment">//hiTail不断指向新元素来达到添加的作用</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">//放入原来那个坑</span></span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">//放到 原索引+oldCap的坑</span></span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p>1.每次扩容都是按2倍扩容</p><p>2.假如原来元素在5的位置，原来容量为16，临界值为12，扩容后容量为32。</p><p>​    （1）e.hash &amp; (newCap - 1)   = e.hash % (newCap)</p><p><img src="https://user-images.githubusercontent.com/7789698/39800107-574e5cae-5399-11e8-9afb-f4d02e6dd506.png" alt="image"></p><p>(a) 指原来的  (b)指扩容后的</p><p>可以明显看到可能出现的两种结果，一种和原来保持一致，一种就到新的位置上去了，因为扩容两倍，原来在0101现在就在10101了。</p><p>​    （2）e.hash &amp; oldCap = e.hash % (oldCap -1)</p><p><img src="https://user-images.githubusercontent.com/7789698/39800402-2c02219c-539a-11e8-8f0b-e0550c5f9d98.png" alt="image"></p><p>这样的原因是原来使用e.hash &amp; (oldCap - 1)   已经把低位给hash过了，现在只要区分高位的数据是0还是1，放置的时候也只要 newTab[原索引 + oldCap] </p><p>LinkedHashMap里面的Entry很神奇的（如何实现有序的hashmap，其实就是在hashmap的Entry加入前后指针）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        <span class="comment">//拿到桶中对应位置的首节点</span></span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">//不是首节点，往下取</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">        Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">        <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                    ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                     Comparable.class) &amp;&amp;</span><br><span class="line">                    (as = p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span> <span class="comment">// for cast to Comparable</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="keyword">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">            ((Comparable)k).compareTo(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/leesf456/p/5242233.html">http://www.cnblogs.com/leesf456/p/5242233.html</a></p><p><a href="http://blog.csdn.net/zerohuan/article/details/50351357">http://blog.csdn.net/zerohuan/article/details/50351357</a></p><p><a href="http://www.tuicool.com/articles/Yruqiye">http://www.tuicool.com/articles/Yruqiye</a></p><p><a href="http://www.importnew.com/7099.html">http://www.importnew.com/7099.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring开闭原则</title>
      <link href="/hexo/post/ab99c5ee.html"/>
      <url>/hexo/post/ab99c5ee.html</url>
      
        <content type="html"><![CDATA[<p>BeanPostProcessor的执行顺序<br>1、如果使用BeanFactory实现，非ApplicationContext实现，BeanPostProcessor执行顺序就是添加顺序。</p><p>2、如果使用的是AbstractApplicationContext（实现了ApplicationContext）的实现，则通过如下规则指定顺序。<br>2.1、PriorityOrdered（继承了Ordered），实现了该接口的BeanPostProcessor会在第一个顺序注册，标识高优先级顺序，即比实现Ordered的具有更高的优先级；<br>2.2、Ordered，实现了该接口的BeanPostProcessor会第二个顺序注册；</p><p>int HIGHEST_PRECEDENCE = Integer.MIN_VALUE;//最高优先级<br>int LOWEST_PRECEDENCE = Integer.MAX_VALUE;//最低优先级</p><p>即数字越小优先级越高，数字越大优先级越低，如0（高优先级）——1000（低优先级）</p><p>2.3、无序的，没有实现Ordered/ PriorityOrdered的会在第三个顺序注册；<br>2.4、内部Bean后处理器，实现了MergedBeanDefinitionPostProcessor接口的是内部Bean PostProcessor，将在最后且无序注册。</p><span id="more"></span><p>3、接下来我们看看内置的BeanPostProcessor执行顺序</p><p>1.注册实现了PriorityOrdered接口的BeanPostProcessor</p><p>2.注册实现了Ordered接口的BeanPostProcessor<br>AbstractAutoProxyCreator              实现了Ordered，order = Ordered.LOWEST_PRECEDENCE<br>MethodValidationPostProcessor          实现了Ordered，LOWEST_PRECEDENCE<br>ScheduledAnnotationBeanPostProcessor   实现了Ordered，LOWEST_PRECEDENCE<br>AsyncAnnotationBeanPostProcessor      实现了Ordered，order = Ordered.LOWEST_PRECEDENCE</p><p>3.注册无实现任何接口的BeanPostProcessor<br>BeanValidationPostProcessor            无序<br>ApplicationContextAwareProcessor       无序<br>ServletContextAwareProcessor          无序</p><ol start="4"><li>注册实现了MergedBeanDefinitionPostProcessor接口的BeanPostProcessor，且按照实现了Ordered的顺序进行注册，没有实现Ordered的默认为Ordered.LOWEST_PRECEDENCE。<br>PersistenceAnnotationBeanPostProcessor  实现了PriorityOrdered，Ordered.LOWEST_PRECEDENCE 5.<br>AutowiredAnnotationBeanPostProcessor   实现了PriorityOrdered，order = Ordered.LOWEST_PRECEDENCE - 2<br>RequiredAnnotationBeanPostProcessor    实现了PriorityOrdered，order = Ordered.LOWEST_PRECEDENCE - 1<br>CommonAnnotationBeanPostProcessor    实现了PriorityOrdered，Ordered.LOWEST_PRECEDENCE</li></ol><p>从上到下顺序执行，如果order相同则我们应该认为同序（谁先执行不确定，其执行顺序根据注册顺序决定）。</p><p>看源码毕竟清晰<br>AbstractApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        <span class="comment">//initPropertySources(初始化propertySources)-&gt;validateRequiredProperties( ConfigurablePropertyResolver#setRequiredProperties)</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        <span class="comment">//refreshBeanFactory（主要loadBeanDefinitions 解析xml, 转换成beanDefinition）-&gt;getBeanFactory</span></span><br><span class="line">        <span class="comment">//返回DefaultListableBeanFactory</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        <span class="comment">//表达式解析，点位符替换</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            <span class="comment">//注册web servlet相关处理类的实例</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            <span class="comment">//PostProcessorRegistrationDelegate注册后处理代理类（BeanDefinitionRegistryPostProcessor）, 主要初始化两个类ConfigurationClassPostProcessor(处理配置自动扫描注解)和PropertyPlaceholderConfigurer(替换点位符))</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            <span class="comment">//初始化messageSource</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            <span class="comment">//初始化事件广播,如果不包含applicationEventMulticaster bean定义就使用默认的SimpleApplicationEventMulticaster</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            <span class="comment">//初始化主题资源，没有就采用默认</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            <span class="comment">//用于注册监听到事件广播 ，必须实现org.springframework.context.ApplicationListener接口</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            <span class="comment">//所有定义的单例bean全部初始化</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            <span class="comment">//初始化生命周期上下文事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>registerBeanPostProcessors(beanFactory); 这个是关键所在，对吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册顺序PriorityOrdered（priorityOrderedPostProcessors里的，按order级别）－》Ordered（orderedPostProcessorNames里的，按order级别）－》既不是PriorityOrdered也不是Ordered（nonOrderedPostProcessors）－》实现MergedBeanDefinitionPostProcessor（internalPostProcessors，相当于重新注册，按ordered顺序注册）</p><p>priorityOrderedPostProcessors：PriorityOrdered<br>internalPostProcessors：MergedBeanDefinitionPostProcessor<br>orderedPostProcessorNames：Ordered<br>nonOrderedPostProcessorNames：（非PriorityOrdered，Ordered）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></span><br><span class="line"><span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></span><br><span class="line"><span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></span><br><span class="line"><span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></span><br><span class="line"><span class="comment">// Ordered, and the rest.</span></span><br><span class="line">List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">priorityOrderedPostProcessors.add(pp);</span><br><span class="line"><span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.add(pp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">orderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">sortPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line">registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></span><br><span class="line">List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">orderedPostProcessors.add(pp);</span><br><span class="line"><span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.add(pp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line">registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, register all regular BeanPostProcessors.</span></span><br><span class="line">List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">nonOrderedPostProcessors.add(pp);</span><br><span class="line"><span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.add(pp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></span><br><span class="line">sortPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line">registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以如果有顺序的话。就是<br>注册实现了PriorityOrdered接口的BeanPostProcessor［PersistenceAnnotationBeanPostProcessor  （PriorityOrdered，Ordered.LOWEST_PRECEDENCE－5）－》<br>AutowiredAnnotationBeanPostProcessor （PriorityOrdered，order = Ordered.LOWEST_PRECEDENCE - 2）－》<br>RequiredAnnotationBeanPostProcessor  （PriorityOrdered，order = Ordered.LOWEST_PRECEDENCE - 1）－》<br>CommonAnnotationBeanPostProcessor  （PriorityOrdered，Ordered.LOWEST_PRECEDENCE）］<br> －》注册实现了Ordered接口的BeanPostProcessor－》AbstractAutoProxyCreator、MethodValidationPostProcessor、ScheduledAnnotationBeanPostProcessor、AsyncAnnotationBeanPostProcessor(Ordered，LOWEST_PRECEDENCE，互相无序)    －》注册无实现任何接口的BeanPostProcessor<br>（BeanValidationPostProcessor 、ApplicationContextAwareProcessor   、ServletContextAwareProcessor  无序）－》注册实现了MergedBeanDefinitionPostProcessor接口的BeanPostProcessor，（Ordered的顺序进行注册，没有实现Ordered的默认为Ordered.LOWEST_PRECEDENCE）</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（八） LoadBalance</title>
      <link href="/hexo/post/eb51c74d.html"/>
      <url>/hexo/post/eb51c74d.html</url>
      
        <content type="html"><![CDATA[<h2 id="LoadBalance层"><a href="#LoadBalance层" class="headerlink" title="LoadBalance层"></a>LoadBalance层</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="服务端服务级别"><a href="#服务端服务级别" class="headerlink" title="服务端服务级别"></a>服务端服务级别</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="客户端服务级别"><a href="#客户端服务级别" class="headerlink" title="客户端服务级别"></a>客户端服务级别</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="服务端方法级别"><a href="#服务端方法级别" class="headerlink" title="服务端方法级别"></a>服务端方法级别</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="客户端方法级别"><a href="#客户端方法级别" class="headerlink" title="客户端方法级别"></a>客户端方法级别</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 <code>random</code> 随机调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(RandomLoadBalance.NAME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select one invoker in list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invokers   invokers.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url        refer url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation invocation.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> selected invoker.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive(&quot;loadbalance&quot;)</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">select</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><h3 id="Random-LoadBalance"><a href="#Random-LoadBalance" class="headerlink" title="Random LoadBalance"></a>Random LoadBalance</h3><ul><li><strong>随机</strong>，按权重设置随机概率。</li><li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;random&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = invokers.size(); <span class="comment">// Number of invokers</span></span><br><span class="line">        <span class="keyword">int</span> totalWeight = <span class="number">0</span>; <span class="comment">// The sum of weights</span></span><br><span class="line">        <span class="keyword">boolean</span> sameWeight = <span class="keyword">true</span>; <span class="comment">// Every invoker has the same weight?</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class="line">            totalWeight += weight; <span class="comment">// Sum</span></span><br><span class="line">            <span class="keyword">if</span> (sameWeight &amp;&amp; i &gt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; weight != getWeight(invokers.get(i - <span class="number">1</span>), invocation)) &#123;</span><br><span class="line">                sameWeight = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (totalWeight &gt; <span class="number">0</span> &amp;&amp; !sameWeight) &#123;</span><br><span class="line">            <span class="comment">// 只要不是所有的都是同一个weight或者totalWeight大于0，根据权重随机选出一个</span></span><br><span class="line">            <span class="keyword">int</span> offset = random.nextInt(totalWeight);</span><br><span class="line">            <span class="comment">// Return a invoker based on the random value.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                offset -= getWeight(invokers.get(i), invocation);</span><br><span class="line">                <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> invokers.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 所有的weight相同随机选一个</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(random.nextInt(length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoundRobin-LoadBalance"><a href="#RoundRobin-LoadBalance" class="headerlink" title="RoundRobin LoadBalance"></a>RoundRobin LoadBalance</h3><ul><li><strong>轮循</strong>，按公约后的权重设置轮循比率。</li><li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobinLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;roundrobin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = <span class="keyword">new</span> ConcurrentHashMap&lt;String, AtomicPositiveInteger&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        String key = invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">&quot;.&quot;</span> + invocation.getMethodName();</span><br><span class="line">        <span class="keyword">int</span> length = invokers.size(); <span class="comment">// Number of invokers</span></span><br><span class="line">        <span class="keyword">int</span> maxWeight = <span class="number">0</span>; <span class="comment">// The maximum weight</span></span><br><span class="line">        <span class="keyword">int</span> minWeight = Integer.MAX_VALUE; <span class="comment">// The minimum weight</span></span><br><span class="line">        <span class="keyword">final</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; invokerToWeightMap = <span class="keyword">new</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt;();</span><br><span class="line">        <span class="keyword">int</span> weightSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class="line">            maxWeight = Math.max(maxWeight, weight); <span class="comment">// Choose the maximum weight</span></span><br><span class="line">            minWeight = Math.min(minWeight, weight); <span class="comment">// Choose the minimum weight</span></span><br><span class="line">            <span class="keyword">if</span> (weight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                invokerToWeightMap.put(invokers.get(i), <span class="keyword">new</span> IntegerWrapper(weight));</span><br><span class="line">                weightSum += weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        AtomicPositiveInteger sequence = sequences.get(key);</span><br><span class="line">        <span class="keyword">if</span> (sequence == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sequences.putIfAbsent(key, <span class="keyword">new</span> AtomicPositiveInteger());</span><br><span class="line">            sequence = sequences.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currentSequence = sequence.getAndIncrement();</span><br><span class="line">        <span class="keyword">if</span> (maxWeight &gt; <span class="number">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123;</span><br><span class="line">            <span class="keyword">int</span> mod = currentSequence % weightSum;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxWeight; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; each : invokerToWeightMap.entrySet()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> Invoker&lt;T&gt; k = each.getKey();</span><br><span class="line">                    <span class="keyword">final</span> IntegerWrapper v = each.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (mod == <span class="number">0</span> &amp;&amp; v.getValue() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> k;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (v.getValue() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        v.decrement();</span><br><span class="line">                        mod--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Round robin</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(currentSequence % length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerWrapper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntegerWrapper</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeastActive-LoadBalance"><a href="#LeastActive-LoadBalance" class="headerlink" title="LeastActive LoadBalance"></a>LeastActive LoadBalance</h3><ul><li><strong>最少活跃调用数</strong>，相同活跃数的随机，活跃数指调用前后计数差。</li><li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeastActiveLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;leastactive&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = invokers.size(); <span class="comment">// Number of invokers</span></span><br><span class="line">        <span class="keyword">int</span> leastActive = -<span class="number">1</span>; <span class="comment">// The least active value of all invokers</span></span><br><span class="line">        <span class="keyword">int</span> leastCount = <span class="number">0</span>; <span class="comment">// The number of invokers having the same least active value (leastActive)</span></span><br><span class="line">        <span class="keyword">int</span>[] leastIndexs = <span class="keyword">new</span> <span class="keyword">int</span>[length]; <span class="comment">// The index of invokers having the same least active value (leastActive)</span></span><br><span class="line">        <span class="keyword">int</span> totalWeight = <span class="number">0</span>; <span class="comment">// The sum of weights</span></span><br><span class="line">        <span class="keyword">int</span> firstWeight = <span class="number">0</span>; <span class="comment">// Initial value, used for comparision</span></span><br><span class="line">        <span class="keyword">boolean</span> sameWeight = <span class="keyword">true</span>; <span class="comment">// Every invoker has the same weight value?</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Invoker&lt;T&gt; invoker = invokers.get(i);</span><br><span class="line">            <span class="keyword">int</span> active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); <span class="comment">// Active number</span></span><br><span class="line">            <span class="keyword">int</span> weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); <span class="comment">// Weight</span></span><br><span class="line">            <span class="keyword">if</span> (leastActive == -<span class="number">1</span> || active &lt; leastActive) &#123; <span class="comment">// Restart, when find a invoker having smaller least active value.</span></span><br><span class="line">                leastActive = active; <span class="comment">// Record the current least active value</span></span><br><span class="line">                leastCount = <span class="number">1</span>; <span class="comment">// Reset leastCount, count again based on current leastCount</span></span><br><span class="line">                leastIndexs[<span class="number">0</span>] = i; <span class="comment">// Reset</span></span><br><span class="line">                totalWeight = weight; <span class="comment">// Reset</span></span><br><span class="line">                firstWeight = weight; <span class="comment">// Record the weight the first invoker</span></span><br><span class="line">                sameWeight = <span class="keyword">true</span>; <span class="comment">// Reset, every invoker has the same weight value?</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (active == leastActive) &#123; <span class="comment">// If current invoker&#x27;s active value equals with leaseActive, then accumulating.</span></span><br><span class="line">                leastIndexs[leastCount++] = i; <span class="comment">// Record index number of this invoker</span></span><br><span class="line">                totalWeight += weight; <span class="comment">// Add this invoker&#x27;s weight to totalWeight.</span></span><br><span class="line">                <span class="comment">// If every invoker has the same weight?</span></span><br><span class="line">                <span class="keyword">if</span> (sameWeight &amp;&amp; i &gt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; weight != firstWeight) &#123;</span><br><span class="line">                    sameWeight = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// assert(leastCount &gt; 0)</span></span><br><span class="line">        <span class="keyword">if</span> (leastCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// If we got exactly one invoker having the least active value, return this invoker directly.</span></span><br><span class="line">            <span class="keyword">return</span> invokers.get(leastIndexs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sameWeight &amp;&amp; totalWeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// If (not every invoker has the same weight &amp; at least one invoker&#x27;s weight&gt;0), select randomly based on totalWeight.</span></span><br><span class="line">            <span class="keyword">int</span> offsetWeight = random.nextInt(totalWeight);</span><br><span class="line">            <span class="comment">// Return a invoker based on the random value.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leastCount; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> leastIndex = leastIndexs[i];</span><br><span class="line">                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</span><br><span class="line">                <span class="keyword">if</span> (offsetWeight &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> invokers.get(leastIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If all invokers have the same weight value or totalWeight=0, return evenly.</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(leastIndexs[random.nextInt(leastCount)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConsistentHash-LoadBalance"><a href="#ConsistentHash-LoadBalance" class="headerlink" title="ConsistentHash LoadBalance"></a>ConsistentHash LoadBalance</h3><ul><li><strong>一致性 Hash</strong>，相同参数的请求总是发到同一提供者。</li><li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li><li>算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing">http://en.wikipedia.org/wiki/Consistent_hashing</a></li><li>缺省只对第一个参数 Hash，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.arguments&quot; value=&quot;0,1&quot; /&gt;</code></li><li>缺省用 160 份虚拟节点，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.nodes&quot; value=&quot;320&quot; /&gt;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt; selectors = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        String key = invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">&quot;.&quot;</span> + invocation.getMethodName();</span><br><span class="line">        <span class="keyword">int</span> identityHashCode = System.identityHashCode(invokers);</span><br><span class="line">        ConsistentHashSelector&lt;T&gt; selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class="line">        <span class="keyword">if</span> (selector == <span class="keyword">null</span> || selector.identityHashCode != identityHashCode) &#123;</span><br><span class="line">            selectors.put(key, <span class="keyword">new</span> ConsistentHashSelector&lt;T&gt;(invokers, invocation.getMethodName(), identityHashCode));</span><br><span class="line">            selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> selector.select(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashSelector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt; virtualInvokers;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> replicaNumber;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> identityHashCode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] argumentIndex;</span><br><span class="line"></span><br><span class="line">        ConsistentHashSelector(List&lt;Invoker&lt;T&gt;&gt; invokers, String methodName, <span class="keyword">int</span> identityHashCode) &#123;</span><br><span class="line">            <span class="keyword">this</span>.virtualInvokers = <span class="keyword">new</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.identityHashCode = identityHashCode;</span><br><span class="line">            URL url = invokers.get(<span class="number">0</span>).getUrl();</span><br><span class="line">            <span class="keyword">this</span>.replicaNumber = url.getMethodParameter(methodName, <span class="string">&quot;hash.nodes&quot;</span>, <span class="number">160</span>);</span><br><span class="line">            String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, <span class="string">&quot;hash.arguments&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">            argumentIndex = <span class="keyword">new</span> <span class="keyword">int</span>[index.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index.length; i++) &#123;</span><br><span class="line">                argumentIndex[i] = Integer.parseInt(index[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">                String address = invoker.getUrl().getAddress();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; replicaNumber / <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] digest = md5(address + i);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">4</span>; h++) &#123;</span><br><span class="line">                        <span class="keyword">long</span> m = hash(digest, h);</span><br><span class="line">                        virtualInvokers.put(m, invoker);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Invoker&lt;T&gt; <span class="title">select</span><span class="params">(Invocation invocation)</span> </span>&#123;</span><br><span class="line">            String key = toKey(invocation.getArguments());</span><br><span class="line">            <span class="keyword">byte</span>[] digest = md5(key);</span><br><span class="line">            <span class="keyword">return</span> selectForKey(hash(digest, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">toKey</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : argumentIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; args.length) &#123;</span><br><span class="line">                    buf.append(args[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title">selectForKey</span><span class="params">(<span class="keyword">long</span> hash)</span> </span>&#123;</span><br><span class="line">            Map.Entry&lt;Long, Invoker&lt;T&gt;&gt; entry = virtualInvokers.tailMap(hash, <span class="keyword">true</span>).firstEntry();</span><br><span class="line">           <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">              entry = virtualInvokers.firstEntry();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(<span class="keyword">byte</span>[] digest, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (((<span class="keyword">long</span>) (digest[<span class="number">3</span> + number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>)</span><br><span class="line">                    | ((<span class="keyword">long</span>) (digest[<span class="number">2</span> + number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">                    | ((<span class="keyword">long</span>) (digest[<span class="number">1</span> + number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">                    | (digest[number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>))</span><br><span class="line">                    &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">byte</span>[] md5(String value) &#123;</span><br><span class="line">            MessageDigest md5;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                md5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            md5.reset();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bytes = value.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            md5.update(bytes);</span><br><span class="line">            <span class="keyword">return</span> md5.digest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（七） Cluster</title>
      <link href="/hexo/post/914f0fc6.html"/>
      <url>/hexo/post/914f0fc6.html</url>
      
        <content type="html"><![CDATA[<p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p><p><a href="https://user-images.githubusercontent.com/7789698/38236939-50ec9e00-3758-11e8-88d5-7b470bac0352.png"><img src="https://user-images.githubusercontent.com/7789698/38236939-50ec9e00-3758-11e8-88d5-7b470bac0352.png" alt="image"></a></p><p>各节点关系：</p><ul><li><p>这里的 <code>Invoker</code> 是 <code>Provider</code> 的一个可调用 <code>Service</code> 的抽象，<code>Invoker</code> 封装了 <code>Provider</code> 地址及 <code>Service</code> 接口信息</p></li><li><p><code>Directory</code> 代表多个 <code>Invoker</code>，可以把它看成 <code>List&lt;Invoker&gt;</code> ，但与 <code>List</code> 不同的是，它的值可能是动态变化的，比如注册中心推送变更</p></li><li><p><code>Cluster</code> 将 <code>Directory</code> 中的多个 <code>Invoker</code> 伪装成一个 <code>Invoker</code>，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个</p></li><li><p><code>Router</code> 负责从多个 <code>Invoker</code> 中按路由规则选出子集，比如读写分离，应用隔离等</p></li><li><p><code>LoadBalance</code> 负责从多个 <code>Invoker</code> 中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选</p><span id="more"></span></li></ul><h2 id="cluster层"><a href="#cluster层" class="headerlink" title="cluster层"></a>cluster层</h2><h3 id="集群模式配置"><a href="#集群模式配置" class="headerlink" title="集群模式配置"></a>集群模式配置</h3><p>按照以下示例在服务提供方和消费方配置集群模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(FailoverCluster.NAME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cluster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merge the directory invokers to a virtual invoker.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> cluster invoker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">join</span><span class="params">(Directory&lt;T&gt; directory)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Failover-Cluster"><a href="#Failover-Cluster" class="headerlink" title="Failover Cluster"></a>Failover Cluster</h3><p>failover失败自动切换，当出现失败，重试其它服务器 <a href="http://dubbo.incubator.apache.org/books/dubbo-user-book/demos/fault-tolerent-strategy.html#fn_1">1</a>。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</p><p>重试次数配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;findFoo&quot;</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailoverCluster</span> <span class="keyword">implements</span> <span class="title">Cluster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String NAME = <span class="string">&quot;failover&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">join</span><span class="params">(Directory&lt;T&gt; directory)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FailoverClusterInvoker&lt;T&gt;(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当服务被调用的时候，将会使用FailoverClusterInvoker</p><h3 id="Failfast-Cluster"><a href="#Failfast-Cluster" class="headerlink" title="Failfast Cluster"></a>Failfast Cluster</h3><p>failfast快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p><p>使用FailfastClusterInvoker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailfastClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FailfastClusterInvoker</span><span class="params">(Directory&lt;T&gt; directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        checkInvokers(invokers, invocation);</span><br><span class="line">        <span class="comment">//通过负载均衡选出invoker</span></span><br><span class="line">        Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">//只要失败就报错</span></span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RpcException &amp;&amp; ((RpcException) e).isBiz()) &#123; <span class="comment">// biz exception.</span></span><br><span class="line">                <span class="keyword">throw</span> (RpcException) e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(e <span class="keyword">instanceof</span> RpcException ? ((RpcException) e).getCode() : <span class="number">0</span>, <span class="string">&quot;Failfast invoke providers &quot;</span> + invoker.getUrl() + <span class="string">&quot; &quot;</span> + loadbalance.getClass().getSimpleName() + <span class="string">&quot; select from all providers &quot;</span> + invokers + <span class="string">&quot; for service &quot;</span> + getInterface().getName() + <span class="string">&quot; method &quot;</span> + invocation.getMethodName() + <span class="string">&quot; on consumer &quot;</span> + NetUtils.getLocalHost() + <span class="string">&quot; use dubbo version &quot;</span> + Version.getVersion() + <span class="string">&quot;, but no luck to perform the invocation. Last error is: &quot;</span> + e.getMessage(), e.getCause() != <span class="keyword">null</span> ? e.getCause() : e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Failsafe-Cluster"><a href="#Failsafe-Cluster" class="headerlink" title="Failsafe Cluster"></a>Failsafe Cluster</h3><p>failsafe失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><p>使用FailsafeClusterInvoker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailsafeClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FailsafeClusterInvoker.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FailsafeClusterInvoker</span><span class="params">(Directory&lt;T&gt; directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkInvokers(invokers, invocation);</span><br><span class="line">            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">//忽略异常，返回一个空的RpcResult</span></span><br><span class="line">            logger.error(<span class="string">&quot;Failsafe ignore exception: &quot;</span> + e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(); <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Failback-Cluster"><a href="#Failback-Cluster" class="headerlink" title="Failback Cluster"></a>Failback Cluster</h3><p>failback失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><p>使用FailbackClusterInvoker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailbackClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FailbackClusterInvoker.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> RETRY_FAILED_PERIOD = <span class="number">5</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class="number">2</span>, <span class="keyword">new</span> NamedThreadFactory(<span class="string">&quot;failback-cluster-timer&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt; failed = <span class="keyword">new</span> ConcurrentHashMap&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ScheduledFuture&lt;?&gt; retryFuture;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FailbackClusterInvoker</span><span class="params">(Directory&lt;T&gt; directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFailed</span><span class="params">(Invocation invocation, AbstractClusterInvoker&lt;?&gt; router)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (retryFuture == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (retryFuture == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//启动一个定时任务用来重发</span></span><br><span class="line">                    retryFuture = scheduledExecutorService.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// collect retry statistics</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                retryFailed();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable t) &#123; <span class="comment">// Defensive fault tolerance</span></span><br><span class="line">                                logger.error(<span class="string">&quot;Unexpected error occur at collect statistic&quot;</span>, t);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, RETRY_FAILED_PERIOD, RETRY_FAILED_PERIOD, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        failed.put(invocation, router);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retryFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (failed.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt; entry : <span class="keyword">new</span> HashMap&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt;(</span><br><span class="line">                failed).entrySet()) &#123;</span><br><span class="line">            Invocation invocation = entry.getKey();</span><br><span class="line">            Invoker&lt;?&gt; invoker = entry.getValue();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                invoker.invoke(invocation);</span><br><span class="line">                failed.remove(invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;Failed retry to invoke method &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, waiting again.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkInvokers(invokers, invocation);</span><br><span class="line">            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Failback to invoke method &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, wait for retry in background. Ignored exception: &quot;</span></span><br><span class="line">                    + e.getMessage() + <span class="string">&quot;, &quot;</span>, e);</span><br><span class="line">            <span class="comment">//失败记录下重试</span></span><br><span class="line">            addFailed(invocation, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(); <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Forking-Cluster"><a href="#Forking-Cluster" class="headerlink" title="Forking Cluster"></a>Forking Cluster</h3><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</p><p>使用ForkingClusterInvoker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkingClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService executor = Executors.newCachedThreadPool(<span class="keyword">new</span> NamedThreadFactory(<span class="string">&quot;forking-cluster-timer&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkingClusterInvoker</span><span class="params">(Directory&lt;T&gt; directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        checkInvokers(invokers, invocation);</span><br><span class="line">        <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; selected;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> forks = getUrl().getParameter(Constants.FORKS_KEY, Constants.DEFAULT_FORKS);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> timeout = getUrl().getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">        <span class="keyword">if</span> (forks &lt;= <span class="number">0</span> || forks &gt;= invokers.size()) &#123;</span><br><span class="line">            selected = invokers;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            selected = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forks; i++) &#123;</span><br><span class="line">                <span class="comment">// TODO. Add some comment here, refer chinese version for more details.</span></span><br><span class="line">                Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, selected);</span><br><span class="line">                <span class="comment">//可能取同一个，所以去除下</span></span><br><span class="line">                <span class="keyword">if</span> (!selected.contains(invoker)) &#123;<span class="comment">//Avoid add the same invoker several times.</span></span><br><span class="line">                    selected.add(invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RpcContext.getContext().setInvokers((List) selected);</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;Object&gt; ref = <span class="keyword">new</span> LinkedBlockingQueue&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Invoker&lt;T&gt; invoker : selected) &#123;</span><br><span class="line">            executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Result result = invoker.invoke(invocation);</span><br><span class="line">                        ref.offer(result);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        <span class="keyword">int</span> value = count.incrementAndGet();</span><br><span class="line">                        <span class="keyword">if</span> (value &gt;= selected.size()) &#123;</span><br><span class="line">                            ref.offer(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//拿出时间较少的</span></span><br><span class="line">            Object ret = ref.poll(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (ret <span class="keyword">instanceof</span> Throwable) &#123;</span><br><span class="line">                Throwable e = (Throwable) ret;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(e <span class="keyword">instanceof</span> RpcException ? ((RpcException) e).getCode() : <span class="number">0</span>, <span class="string">&quot;Failed to forking invoke provider &quot;</span> + selected + <span class="string">&quot;, but no luck to perform the invocation. Last error is: &quot;</span> + e.getMessage(), e.getCause() != <span class="keyword">null</span> ? e.getCause() : e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (Result) ret;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Failed to forking invoke provider &quot;</span> + selected + <span class="string">&quot;, but no luck to perform the invocation. Last error is: &quot;</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Broadcast-Cluster"><a href="#Broadcast-Cluster" class="headerlink" title="Broadcast Cluster"></a>Broadcast Cluster</h3><p>broadcast 广播调用所有提供者，逐个调用，任意一台报错则报错 <a href="http://dubbo.incubator.apache.org/books/dubbo-user-book/demos/fault-tolerent-strategy.html#fn_2">2</a>。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><p>使用BroadcastClusterInvoker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(BroadcastClusterInvoker.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BroadcastClusterInvoker</span><span class="params">(Directory&lt;T&gt; directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        checkInvokers(invokers, invocation);</span><br><span class="line">        RpcContext.getContext().setInvokers((List) invokers);</span><br><span class="line">        RpcException exception = <span class="keyword">null</span>;</span><br><span class="line">        Result result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//遍历广播</span></span><br><span class="line">                result = invoker.invoke(invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                exception = e;</span><br><span class="line">                logger.warn(e.getMessage(), e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                exception = <span class="keyword">new</span> RpcException(e.getMessage(), e);</span><br><span class="line">                logger.warn(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Available-Cluster"><a href="#Available-Cluster" class="headerlink" title="Available Cluster"></a>Available Cluster</h3><p>available选取第一个可用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvailableClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AvailableClusterInvoker</span><span class="params">(Directory&lt;T&gt; directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (invoker.isAvailable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;No provider available in &quot;</span> + invokers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mergeable-Cluster"><a href="#Mergeable-Cluster" class="headerlink" title="Mergeable Cluster"></a>Mergeable Cluster</h3><p>搜索所有分组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.xxx.MenuService&quot;</span> <span class="attr">group</span>=<span class="string">&quot;*&quot;</span> <span class="attr">merger</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>合并指定分组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.xxx.MenuService&quot;</span> <span class="attr">group</span>=<span class="string">&quot;aaa,bbb&quot;</span> <span class="attr">merger</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>指定方法合并结果，其它未指定的方法，将只调用一个 Group</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.xxx.MenuService&quot;</span> <span class="attr">group</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;getMenuItems&quot;</span> <span class="attr">merger</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>某个方法不合并结果，其它都合并结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.xxx.MenuService&quot;</span> <span class="attr">group</span>=<span class="string">&quot;*&quot;</span> <span class="attr">merger</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;getMenuItems&quot;</span> <span class="attr">merger</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定合并策略，缺省根据返回值类型自动匹配，如果同一类型有两个合并器时，需指定合并器的名称 <a href="http://dubbo.apache.org/books/dubbo-user-book/demos/group-merger.html#fn_2">2</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.xxx.MenuService&quot;</span> <span class="attr">group</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;getMenuItems&quot;</span> <span class="attr">merger</span>=<span class="string">&quot;mymerge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定合并方法，将调用返回结果的指定方法进行合并，合并方法的参数类型必须是返回结果类型本身</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.xxx.MenuService&quot;</span> <span class="attr">group</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;getMenuItems&quot;</span> <span class="attr">merger</span>=<span class="string">&quot;.addAll&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mergeable 合并分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeableClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MergeableClusterInvoker.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Directory&lt;T&gt; directory;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService executor = Executors.newCachedThreadPool(<span class="keyword">new</span> NamedThreadFactory(<span class="string">&quot;mergeable-cluster-executor&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MergeableClusterInvoker</span><span class="params">(Directory&lt;T&gt; directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.directory = directory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invokers = directory.list(invocation);</span><br><span class="line"><span class="comment">//获取merger配置</span></span><br><span class="line">        String merger = getUrl().getMethodParameter(invocation.getMethodName(), Constants.MERGER_KEY);</span><br><span class="line">        <span class="comment">//不需要合并，调用第一个可用的group</span></span><br><span class="line">        <span class="keyword">if</span> (ConfigUtils.isEmpty(merger)) &#123; <span class="comment">// If a method doesn&#x27;t have a merger, only invoke one Group</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (invoker.isAvailable()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> invokers.iterator().next().invoke(invocation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; returnType;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取返回的类型</span></span><br><span class="line">            returnType = getInterface().getMethod(</span><br><span class="line">                    invocation.getMethodName(), invocation.getParameterTypes()).getReturnType();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            returnType = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Future&lt;Result&gt;&gt; results = <span class="keyword">new</span> HashMap&lt;String, Future&lt;Result&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            Future&lt;Result&gt; future = executor.submit(<span class="keyword">new</span> Callable&lt;Result&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> invoker.invoke(<span class="keyword">new</span> RpcInvocation(invocation, invoker));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//遍历结果</span></span><br><span class="line">            results.put(invoker.getUrl().getServiceKey(), future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Result&gt; resultList = <span class="keyword">new</span> ArrayList&lt;Result&gt;(results.size());</span><br><span class="line"><span class="comment">//获取timeout 超时配置</span></span><br><span class="line">        <span class="keyword">int</span> timeout = getUrl().getMethodParameter(invocation.getMethodName(), Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Future&lt;Result&gt;&gt; entry : results.entrySet()) &#123;</span><br><span class="line">            Future&lt;Result&gt; future = entry.getValue();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Result r = future.get(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">                <span class="keyword">if</span> (r.hasException()) &#123;</span><br><span class="line">                    log.error(<span class="keyword">new</span> StringBuilder(<span class="number">32</span>).append(<span class="string">&quot;Invoke &quot;</span>)</span><br><span class="line">                                    .append(getGroupDescFromServiceKey(entry.getKey()))</span><br><span class="line">                                    .append(<span class="string">&quot; failed: &quot;</span>)</span><br><span class="line">                                    .append(r.getException().getMessage()).toString(),</span><br><span class="line">                            r.getException());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//获取未超时结果</span></span><br><span class="line">                    resultList.add(r);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="keyword">new</span> StringBuilder(<span class="number">32</span>)</span><br><span class="line">                        .append(<span class="string">&quot;Failed to invoke service &quot;</span>)</span><br><span class="line">                        .append(entry.getKey())</span><br><span class="line">                        .append(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">                        .append(e.getMessage()).toString(),</span><br><span class="line">                        e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult((Object) <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resultList.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> resultList.iterator().next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (returnType == <span class="keyword">void</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult((Object) <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//.开头则按方法合并</span></span><br><span class="line">        <span class="keyword">if</span> (merger.startsWith(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">            merger = merger.substring(<span class="number">1</span>);</span><br><span class="line">            Method method;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method = returnType.getMethod(merger, returnType);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="keyword">new</span> StringBuilder(<span class="number">32</span>)</span><br><span class="line">                        .append(<span class="string">&quot;Can not merge result because missing method [ &quot;</span>)</span><br><span class="line">                        .append(merger)</span><br><span class="line">                        .append(<span class="string">&quot; ] in class [ &quot;</span>)</span><br><span class="line">                        .append(returnType.getClass().getName())</span><br><span class="line">                        .append(<span class="string">&quot; ]&quot;</span>)</span><br><span class="line">                        .toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result = resultList.remove(<span class="number">0</span>).getValue();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getReturnType() != <span class="keyword">void</span>.class</span><br><span class="line">                        &amp;&amp; method.getReturnType().isAssignableFrom(result.getClass())) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Result r : resultList) &#123;</span><br><span class="line">                        <span class="comment">//执行.xxx获取结果</span></span><br><span class="line">                        result = method.invoke(result, r.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//结果为空</span></span><br><span class="line">                    <span class="keyword">for</span> (Result r : resultList) &#123;</span><br><span class="line">                        method.invoke(result, r.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(</span><br><span class="line">                        <span class="keyword">new</span> StringBuilder(<span class="number">32</span>)</span><br><span class="line">                                .append(<span class="string">&quot;Can not merge result: &quot;</span>)</span><br><span class="line">                                .append(e.getMessage()).toString(),</span><br><span class="line">                        e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Merger resultMerger;</span><br><span class="line">            <span class="comment">//true或者default，按类型加载</span></span><br><span class="line">            <span class="keyword">if</span> (ConfigUtils.isDefault(merger)) &#123;</span><br><span class="line">                resultMerger = MergerFactory.getMerger(returnType);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//指定了，则按指定加载</span></span><br><span class="line">                resultMerger = ExtensionLoader.getExtensionLoader(Merger.class).getExtension(merger);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resultMerger != <span class="keyword">null</span>) &#123;</span><br><span class="line">                List&lt;Object&gt; rets = <span class="keyword">new</span> ArrayList&lt;Object&gt;(resultList.size());</span><br><span class="line">                <span class="keyword">for</span> (Result r : resultList) &#123;</span><br><span class="line">                    rets.add(r.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">                result = resultMerger.merge(</span><br><span class="line">                        rets.toArray((Object[]) Array.newInstance(returnType, <span class="number">0</span>)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;There is no merger to merge result.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> directory.getInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> directory.getUrl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> directory.isAvailable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        directory.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getGroupDescFromServiceKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = key.indexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(<span class="number">32</span>).append(<span class="string">&quot;group [ &quot;</span>)</span><br><span class="line">                    .append(key.substring(<span class="number">0</span>, index)).append(<span class="string">&quot; ]&quot;</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（六） DubboInvoker</title>
      <link href="/hexo/post/a645d07f.html"/>
      <url>/hexo/post/a645d07f.html</url>
      
        <content type="html"><![CDATA[<p>当service被调用时，通过代理最后调用的是FailoverClusterInvoker的invoke</p><p><img src="https://user-images.githubusercontent.com/7789698/38479764-eb2fa4d6-3bf3-11e8-9c7b-2f16e095b33f.png" alt="sequencediagram111"></p><h2 id="proxy-服务代理层"><a href="#proxy-服务代理层" class="headerlink" title="proxy 服务代理层"></a>proxy 服务代理层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyFactory</span> <span class="keyword">extends</span> <span class="title">AbstractProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class="keyword">new</span> InvokerInvocationHandler(invoker));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正的service通过Javassist代理被代理成代理子类</p><p>InvokerInvocationHandler</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">//MockClusterInvoker</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;?&gt; invoker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerInvocationHandler</span><span class="params">(Invoker&lt;?&gt; handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.invoker = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(invoker, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;toString&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;hashCode&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;equals&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.equals(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(<span class="keyword">new</span> RpcInvocation(method, args)).recreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FailoverClusterInvoker失败自动切换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    checkWhetherDestroyed();</span><br><span class="line">    LoadBalance loadbalance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//列出所有的invoker</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = list(invocation);</span><br><span class="line">    <span class="keyword">if</span> (invokers != <span class="keyword">null</span> &amp;&amp; !invokers.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//获取相应的LoadBalance</span></span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(<span class="number">0</span>).getUrl()</span><br><span class="line">                .getMethodParameter(invocation.getMethodName(), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));</span><br><span class="line">    &#125;</span><br><span class="line">    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line">    <span class="keyword">return</span> doInvoke(invocation, invokers, loadbalance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;Invoker&lt;T&gt;&gt; list(Invocation invocation) <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="comment">//最后通过methodInvokerMap取到所有RegistryDirectory$InvokerDelegate(DubboInvoker)</span></span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invokers = directory.list(invocation);</span><br><span class="line">        <span class="keyword">return</span> invokers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation, <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; copyinvokers = invokers;</span><br><span class="line">    checkInvokers(copyinvokers, invocation);</span><br><span class="line">    <span class="comment">//获取retries次数</span></span><br><span class="line">    <span class="keyword">int</span> len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// retry loop.</span></span><br><span class="line">    RpcException le = <span class="keyword">null</span>; <span class="comment">// last exception.</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invoked = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;(copyinvokers.size()); <span class="comment">// invoked invokers.</span></span><br><span class="line">    Set&lt;String&gt; providers = <span class="keyword">new</span> HashSet&lt;String&gt;(len);</span><br><span class="line">    <span class="comment">//重试</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//Reselect before retry to avoid a change of candidate `invokers`.</span></span><br><span class="line">        <span class="comment">//<span class="doctag">NOTE:</span> if `invokers` changed, then `invoked` also lose accuracy.</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            checkWhetherDestroyed();</span><br><span class="line">            copyinvokers = list(invocation);</span><br><span class="line">            <span class="comment">// check again</span></span><br><span class="line">            checkInvokers(copyinvokers, invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据均衡算法选取Invoker，调用FailoverClusterInvoker的doSelect</span></span><br><span class="line">        <span class="comment">//RegistryDirectory$InvokerDelegate(DubboInvoker)</span></span><br><span class="line">        Invoker&lt;T&gt; invoker = select(loadbalance, invocation, copyinvokers, invoked);</span><br><span class="line">        invoked.add(invoker);</span><br><span class="line">        RpcContext.getContext().setInvokers((List) invoked);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用FailoverClusterInvoker 的invoke</span></span><br><span class="line">             <span class="comment">//</span></span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            <span class="keyword">if</span> (le != <span class="keyword">null</span> &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Although retry the method &quot;</span> + invocation.getMethodName()</span><br><span class="line">                        + <span class="string">&quot; in the service &quot;</span> + getInterface().getName()</span><br><span class="line">                        + <span class="string">&quot; was successful by the provider &quot;</span> + invoker.getUrl().getAddress()</span><br><span class="line">                        + <span class="string">&quot;, but there have been failed providers &quot;</span> + providers</span><br><span class="line">                        + <span class="string">&quot; (&quot;</span> + providers.size() + <span class="string">&quot;/&quot;</span> + copyinvokers.size()</span><br><span class="line">                        + <span class="string">&quot;) from the registry &quot;</span> + directory.getUrl().getAddress()</span><br><span class="line">                        + <span class="string">&quot; on the consumer &quot;</span> + NetUtils.getLocalHost()</span><br><span class="line">                        + <span class="string">&quot; using the dubbo version &quot;</span> + Version.getVersion() + <span class="string">&quot;. Last error is: &quot;</span></span><br><span class="line">                        + le.getMessage(), le);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//成功或者抛出异常就返回</span></span><br><span class="line">            <span class="comment">//RpcException异常则重试</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.isBiz()) &#123; <span class="comment">// biz exception.</span></span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            le = e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            le = <span class="keyword">new</span> RpcException(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            providers.add(invoker.getUrl().getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(le != <span class="keyword">null</span> ? le.getCode() : <span class="number">0</span>, <span class="string">&quot;Failed to invoke the method &quot;</span></span><br><span class="line">            + invocation.getMethodName() + <span class="string">&quot; in the service &quot;</span> + getInterface().getName()</span><br><span class="line">            + <span class="string">&quot;. Tried &quot;</span> + len + <span class="string">&quot; times of the providers &quot;</span> + providers</span><br><span class="line">            + <span class="string">&quot; (&quot;</span> + providers.size() + <span class="string">&quot;/&quot;</span> + copyinvokers.size()</span><br><span class="line">            + <span class="string">&quot;) from the registry &quot;</span> + directory.getUrl().getAddress()</span><br><span class="line">            + <span class="string">&quot; on the consumer &quot;</span> + NetUtils.getLocalHost() + <span class="string">&quot; using the dubbo version &quot;</span></span><br><span class="line">            + Version.getVersion() + <span class="string">&quot;. Last error is: &quot;</span></span><br><span class="line">            + (le != <span class="keyword">null</span> ? le.getMessage() : <span class="string">&quot;&quot;</span>), le != <span class="keyword">null</span> &amp;&amp; le.getCause() != <span class="keyword">null</span> ? le.getCause() : le);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegistryDirectory$InvokerDelegate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerDelegate</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">InvokerWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> URL providerUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里其实是DubboProtocol#refer的结果</span></span><br><span class="line">    <span class="comment">//DubboInvoker</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerDelegate</span><span class="params">(Invoker&lt;T&gt; invoker, URL url, URL providerUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(invoker, url);</span><br><span class="line">        <span class="keyword">this</span>.providerUrl = providerUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getProviderUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DubboInvoker无疑是最核心的所在，其他的不过是负载、失效、mock等代理封装</p><p><img src="https://user-images.githubusercontent.com/7789698/38234393-5b63e418-3750-11e8-9890-b353220bd4eb.png" alt="sequencediagram12333"></p><h3 id="DubboInvoker"><a href="#DubboInvoker" class="headerlink" title="DubboInvoker"></a>DubboInvoker</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInvoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RpcInvocation inv = (RpcInvocation) invocation;</span><br><span class="line">    <span class="keyword">final</span> String methodName = RpcUtils.getMethodName(invocation);</span><br><span class="line">    inv.setAttachment(Constants.PATH_KEY, getUrl().getPath());</span><br><span class="line">    inv.setAttachment(Constants.VERSION_KEY, version);</span><br><span class="line"></span><br><span class="line">    ExchangeClient currentClient;</span><br><span class="line">    <span class="keyword">if</span> (clients.length == <span class="number">1</span>) &#123;</span><br><span class="line">        currentClient = clients[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentClient = clients[index.getAndIncrement() % clients.length];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isAsync = RpcUtils.isAsync(getUrl(), invocation);</span><br><span class="line">        <span class="keyword">boolean</span> isOneway = RpcUtils.isOneway(getUrl(), invocation);</span><br><span class="line">        <span class="keyword">int</span> timeout = getUrl().getMethodParameter(methodName, Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">        <span class="keyword">if</span> (isOneway) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, <span class="keyword">false</span>);</span><br><span class="line">            currentClient.send(inv, isSent);</span><br><span class="line">            RpcContext.getContext().setFuture(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isAsync) &#123;</span><br><span class="line">            ResponseFuture future = currentClient.request(inv, timeout);</span><br><span class="line">            RpcContext.getContext().setFuture(<span class="keyword">new</span> FutureAdapter&lt;Object&gt;(future));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            RpcContext.getContext().setFuture(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (Result) currentClient.request(inv, timeout).get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.TIMEOUT_EXCEPTION, <span class="string">&quot;Invoke remote method timeout. method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, provider: &quot;</span> + getUrl() + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.NETWORK_EXCEPTION, <span class="string">&quot;Failed to invoke remote method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, provider: &quot;</span> + getUrl() + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeaderExchangeChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message, <span class="keyword">boolean</span> sent)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>.getLocalAddress(), <span class="keyword">null</span>, <span class="string">&quot;Failed to send message &quot;</span> + message + <span class="string">&quot;, cause: The channel &quot;</span> + <span class="keyword">this</span> + <span class="string">&quot; is closed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request</span><br><span class="line">            || message <span class="keyword">instanceof</span> Response</span><br><span class="line">            || message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        channel.send(message, sent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request();</span><br><span class="line">        request.setVersion(<span class="string">&quot;2.0.0&quot;</span>);</span><br><span class="line">        request.setTwoWay(<span class="keyword">false</span>);</span><br><span class="line">        request.setData(message);</span><br><span class="line">        channel.send(request, sent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NettyChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message, <span class="keyword">boolean</span> sent)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.send(message, sent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> timeout = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ChannelFuture future = channel.write(message);</span><br><span class="line">        <span class="keyword">if</span> (sent) &#123;</span><br><span class="line">            timeout = getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">            success = future.await(timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        Throwable cause = future.getCause();</span><br><span class="line">        <span class="keyword">if</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> cause;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>, <span class="string">&quot;Failed to send message &quot;</span> + message + <span class="string">&quot; to &quot;</span> + getRemoteAddress() + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>, <span class="string">&quot;Failed to send message &quot;</span> + message + <span class="string">&quot; to &quot;</span> + getRemoteAddress()</span><br><span class="line">                + <span class="string">&quot;in timeout(&quot;</span> + timeout + <span class="string">&quot;ms) limit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FailoverClusterInvoker如何负载的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (invokers == <span class="keyword">null</span> || invokers.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//只有一个直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (invokers.size() == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> invokers.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// If we only have two invokers, use round-robin instead.</span></span><br><span class="line">    <span class="keyword">if</span> (invokers.size() == <span class="number">2</span> &amp;&amp; selected != <span class="keyword">null</span> &amp;&amp; !selected.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> selected.get(<span class="number">0</span>) == invokers.get(<span class="number">0</span>) ? invokers.get(<span class="number">1</span>) : invokers.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (loadbalance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE);</span><br><span class="line">    &#125;</span><br><span class="line">    Invoker&lt;T&gt; invoker = loadbalance.select(invokers, getUrl(), invocation);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//If the `invoker` is in the  `selected` or invoker is unavailable &amp;&amp; availablecheck is true, reselect.</span></span><br><span class="line">    <span class="comment">//失效了重新选取</span></span><br><span class="line">    <span class="keyword">if</span> ((selected != <span class="keyword">null</span> &amp;&amp; selected.contains(invoker))</span><br><span class="line">            || (!invoker.isAvailable() &amp;&amp; getUrl() != <span class="keyword">null</span> &amp;&amp; availablecheck)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Invoker&lt;T&gt; rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);</span><br><span class="line">            <span class="keyword">if</span> (rinvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                invoker = rinvoker;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//Check the index of current selected invoker, if it&#x27;s not the last one, choose the one at index+1.</span></span><br><span class="line">                <span class="keyword">int</span> index = invokers.indexOf(invoker);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//Avoid collision</span></span><br><span class="line">                    invoker = index &lt; invokers.size() - <span class="number">1</span> ? invokers.get(index + <span class="number">1</span>) : invoker;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage() + <span class="string">&quot; may because invokers list dynamic change, ignore.&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;cluster reselect fail reason is :&quot;</span> + t.getMessage() + <span class="string">&quot; if can not solve, you can set cluster.availablecheck=false in url&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RandomLoadBalance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = invokers.size(); <span class="comment">// Number of invokers</span></span><br><span class="line">    <span class="keyword">int</span> totalWeight = <span class="number">0</span>; <span class="comment">// The sum of weights</span></span><br><span class="line">    <span class="keyword">boolean</span> sameWeight = <span class="keyword">true</span>; <span class="comment">// Every invoker has the same weight?</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class="line">        totalWeight += weight; <span class="comment">// Sum</span></span><br><span class="line">        <span class="keyword">if</span> (sameWeight &amp;&amp; i &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; weight != getWeight(invokers.get(i - <span class="number">1</span>), invocation)) &#123;</span><br><span class="line">            sameWeight = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (totalWeight &gt; <span class="number">0</span> &amp;&amp; !sameWeight) &#123;</span><br><span class="line">        <span class="comment">// If (not every invoker has the same weight &amp; at least one invoker&#x27;s weight&gt;0), select randomly based on totalWeight.</span></span><br><span class="line">        <span class="keyword">int</span> offset = random.nextInt(totalWeight);</span><br><span class="line">        <span class="comment">// Return a invoker based on the random value.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            offset -= getWeight(invokers.get(i), invocation);</span><br><span class="line">            <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> invokers.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If all invokers have the same weight value or totalWeight=0, return evenly.</span></span><br><span class="line">    <span class="keyword">return</span> invokers.get(random.nextInt(length));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（五） ReferenceConfig</title>
      <link href="/hexo/post/26e556d8.html"/>
      <url>/hexo/post/26e556d8.html</url>
      
        <content type="html"><![CDATA[<p>分析完了服务提供者，紧接着分析消费者。</p><p>从ReferenceBean入手</p><span id="more"></span><h2 id="Config层"><a href="#Config层" class="headerlink" title="Config层"></a>Config层</h2><h3 id="ReferenceBean"><a href="#ReferenceBean" class="headerlink" title="ReferenceBean"></a>ReferenceBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//init consumerConfig</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//init applicationConfig</span></span><br><span class="line">    <span class="comment">//init moduleConfig</span></span><br><span class="line">    <span class="comment">//init registryConfigs</span></span><br><span class="line">    <span class="comment">//init monitorConfig</span></span><br><span class="line">    Boolean b = isInit();</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span> &amp;&amp; getConsumer() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        b = getConsumer().isInit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="keyword">null</span> &amp;&amp; b.booleanValue()) &#123;</span><br><span class="line">        <span class="comment">//referenceConfig#get</span></span><br><span class="line">        <span class="comment">//init</span></span><br><span class="line">        getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心点在于getObject，其他都是一些config的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    checkApplication();</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    Map&lt;Object, Object&gt; attributes = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">    map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);</span><br><span class="line">    map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());</span><br><span class="line">    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    <span class="keyword">if</span> (ConfigUtils.getPid() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isGeneric()) &#123;</span><br><span class="line">        String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">        <span class="keyword">if</span> (revision != <span class="keyword">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;revision&quot;</span>, revision);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">        <span class="keyword">if</span> (methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;NO method found in service interface &quot;</span> + interfaceClass.getName());</span><br><span class="line">            map.put(<span class="string">&quot;methods&quot;</span>, Constants.ANY_VALUE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;methods&quot;</span>, StringUtils.join(<span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(methods)), <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(Constants.INTERFACE_KEY, interfaceName);</span><br><span class="line">    appendParameters(map, application);</span><br><span class="line">    appendParameters(map, <span class="keyword">module</span>);</span><br><span class="line">    appendParameters(map, consumer, Constants.DEFAULT_KEY);</span><br><span class="line">    appendParameters(map, <span class="keyword">this</span>);</span><br><span class="line">    String prefix = StringUtils.getServiceKey(map);</span><br><span class="line">    <span class="keyword">if</span> (methods != <span class="keyword">null</span> &amp;&amp; !methods.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MethodConfig method : methods) &#123;</span><br><span class="line">            appendParameters(map, method, method.getName());</span><br><span class="line">            String retryKey = method.getName() + <span class="string">&quot;.retry&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(retryKey)) &#123;</span><br><span class="line">                String retryValue = map.remove(retryKey);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;false&quot;</span>.equals(retryValue)) &#123;</span><br><span class="line">                    map.put(method.getName() + <span class="string">&quot;.retries&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            appendAttributes(attributes, method, prefix + <span class="string">&quot;.&quot;</span> + method.getName());</span><br><span class="line">            checkAndConvertImplicitConfig(method, map, attributes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);</span><br><span class="line">    <span class="keyword">if</span> (hostToRegistry == <span class="keyword">null</span> || hostToRegistry.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        hostToRegistry = NetUtils.getLocalHost();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isInvalidLocalHost(hostToRegistry)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Specified invalid registry ip from property:&quot;</span> + Constants.DUBBO_IP_TO_REGISTRY + <span class="string">&quot;, value:&quot;</span> + hostToRegistry);</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(Constants.REGISTER_IP_KEY, hostToRegistry);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//attributes are stored by system context.</span></span><br><span class="line">    StaticContext.getSystemContext().putAll(attributes);</span><br><span class="line">    <span class="comment">//创建代理类</span></span><br><span class="line">    <span class="comment">//FailoverClusterInvoker</span></span><br><span class="line">    ref = createProxy(map);</span><br><span class="line">    ConsumerModel consumerModel = <span class="keyword">new</span> ConsumerModel(getUniqueServiceName(), <span class="keyword">this</span>, ref, interfaceClass.getMethods());</span><br><span class="line">    ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心点在于createProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createProxy</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">    URL tmpUrl = <span class="keyword">new</span> URL(<span class="string">&quot;temp&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="number">0</span>, map);</span><br><span class="line">    <span class="comment">//处理isJvmRefer</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isJvmRefer) &#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, <span class="number">0</span>, interfaceClass.getName()).addParameters(map);</span><br><span class="line">        invoker = refprotocol.refer(interfaceClass, url);</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Using injvm service &quot;</span> + interfaceClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (url != <span class="keyword">null</span> &amp;&amp; url.length() &gt; <span class="number">0</span>) &#123; <span class="comment">// user specified URL, could be peer-to-peer address, or register center&#x27;s address.</span></span><br><span class="line">            String[] us = Constants.SEMICOLON_SPLIT_PATTERN.split(url);</span><br><span class="line">            <span class="keyword">if</span> (us != <span class="keyword">null</span> &amp;&amp; us.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String u : us) &#123;</span><br><span class="line">                    URL url = URL.valueOf(u);</span><br><span class="line">                    <span class="keyword">if</span> (url.getPath() == <span class="keyword">null</span> || url.getPath().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                        url = url.setPath(interfaceName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                        urls.add(url.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        urls.add(ClusterUtils.mergeUrl(url, map));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// assemble URL from register center&#x27;s configuration</span></span><br><span class="line">            <span class="comment">//RegistryConfig读取配置转化为url</span></span><br><span class="line">            <span class="comment">// registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.0&amp;pid=10852&amp;qos.port=33333&amp;refer=application=demo-consumer&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=10852&amp;qos.port=33333&amp;register.ip=172.17.8.254&amp;side=consumer&amp;timestamp=1522667530807&amp;registry=zookeeper&amp;timestamp=1522667559837</span></span><br><span class="line">            List&lt;URL&gt; us = loadRegistries(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (us != <span class="keyword">null</span> &amp;&amp; !us.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (URL u : us) &#123;</span><br><span class="line">                    URL monitorUrl = loadMonitor(u);</span><br><span class="line">                    <span class="keyword">if</span> (monitorUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//   zookeeper://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.0&amp;pid=10852&amp;qos.port=33333&amp;refer=application=demo-consumer&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=10852&amp;qos.port=33333&amp;register.ip=172.17.8.254&amp;side=consumer&amp;timestamp=1522667530807&amp;timestamp=1522667559837</span></span><br><span class="line">                    urls.add(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (urls == <span class="keyword">null</span> || urls.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No such any registry to reference &quot;</span> + interfaceName + <span class="string">&quot; on the consumer &quot;</span> + NetUtils.getLocalHost() + <span class="string">&quot; use dubbo version &quot;</span> + Version.getVersion() + <span class="string">&quot;, please config &lt;dubbo:registry address=\&quot;...\&quot; /&gt; to your spring config.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//如果只有一服务提供者，直接协议引用获取invoker</span></span><br><span class="line">        <span class="keyword">if</span> (urls.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//ProtocolFilterWrapper-&gt;ProtocolListenerWrapper-&gt;RegistryProtocol#refer</span></span><br><span class="line">            <span class="comment">//返回FailoverClusterInvoker</span></span><br><span class="line">            invoker = refprotocol.refer(interfaceClass, urls.get(<span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//有多个需要使用负载算法负载出相应的invoker</span></span><br><span class="line">            List&lt;Invoker&lt;?&gt;&gt; invokers = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;?&gt;&gt;();</span><br><span class="line">            URL registryURL = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">                invokers.add(refprotocol.refer(interfaceClass, url));</span><br><span class="line">                <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                    registryURL = url; <span class="comment">// use last registry url</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (registryURL != <span class="keyword">null</span>) &#123; <span class="comment">// registry url is available</span></span><br><span class="line">                <span class="comment">// use AvailableCluster only when register&#x27;s cluster is available</span></span><br><span class="line">                URL u = registryURL.addParameter(Constants.CLUSTER_KEY, AvailableCluster.NAME);</span><br><span class="line">                <span class="comment">//AvailableCluster </span></span><br><span class="line">                invoker = cluster.join(<span class="keyword">new</span> StaticDirectory(u, invokers));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// not a registry url</span></span><br><span class="line">                <span class="comment">//FailoverCluster</span></span><br><span class="line">                invoker = cluster.join(<span class="keyword">new</span> StaticDirectory(invokers));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean c = check;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span> &amp;&amp; consumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        c = consumer.isCheck();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        c = <span class="keyword">true</span>; <span class="comment">// default true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c &amp;&amp; !invoker.isAvailable()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Failed to check the status of the service &quot;</span> + interfaceName + <span class="string">&quot;. No provider available for the service &quot;</span> + (group == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : group + <span class="string">&quot;/&quot;</span>) + interfaceName + (version == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;:&quot;</span> + version) + <span class="string">&quot; from the url &quot;</span> + invoker.getUrl() + <span class="string">&quot; to the consumer &quot;</span> + NetUtils.getLocalHost() + <span class="string">&quot; use dubbo version &quot;</span> + Version.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Refer dubbo service &quot;</span> + interfaceClass.getName() + <span class="string">&quot; from url &quot;</span> + invoker.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create service proxy</span></span><br><span class="line">    <span class="comment">//JavassistProxyFactory</span></span><br><span class="line">    <span class="keyword">return</span> (T) proxyFactory.getProxy(invoker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="protocol层"><a href="#protocol层" class="headerlink" title="protocol层"></a>protocol层</h2><p>RegistryProtocol</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    url = url.setProtocol(url.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_REGISTRY)).removeParameter(Constants.REGISTRY_KEY);</span><br><span class="line">    <span class="comment">//ZookeeperRegistry</span></span><br><span class="line">    Registry registry = registryFactory.getRegistry(url);</span><br><span class="line">    <span class="keyword">if</span> (RegistryService.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> proxyFactory.getInvoker((T) registry, type, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// group=&quot;a,b&quot; or group=&quot;*&quot;</span></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Map&lt;String, String&gt; qs = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));</span><br><span class="line">    String group = qs.get(Constants.GROUP_KEY);</span><br><span class="line">    <span class="keyword">if</span> (group != <span class="keyword">null</span> &amp;&amp; group.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((Constants.COMMA_SPLIT_PATTERN.split(group)).length &gt; <span class="number">1</span></span><br><span class="line">                || <span class="string">&quot;*&quot;</span>.equals(group)) &#123;</span><br><span class="line">            <span class="keyword">return</span> doRefer(getMergeableCluster(), registry, type, url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doRefer(cluster, registry, type, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doRefer</span><span class="params">(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//type-&gt;com.alibaba.dubbo.demo.DemoService</span></span><br><span class="line">    <span class="comment">//url-&gt;zookeeper://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.0&amp;pid=10852&amp;qos.port=33333&amp;refer=application=demo-consumer&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=10852&amp;qos.port=33333&amp;register.ip=172.17.8.254&amp;side=consumer&amp;timestamp=1522667530807&amp;timestamp=1522667559837</span></span><br><span class="line">    RegistryDirectory&lt;T&gt; directory = <span class="keyword">new</span> RegistryDirectory&lt;T&gt;(type, url);</span><br><span class="line">    directory.setRegistry(registry);</span><br><span class="line">    <span class="comment">//设置DubboProtocol</span></span><br><span class="line">    directory.setProtocol(protocol);</span><br><span class="line">    <span class="comment">// all attributes of REFER_KEY</span></span><br><span class="line">    Map&lt;String, String&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;(directory.getUrl().getParameters());</span><br><span class="line">    URL subscribeUrl = <span class="keyword">new</span> URL(Constants.CONSUMER_PROTOCOL, parameters.remove(Constants.REGISTER_IP_KEY), <span class="number">0</span>, type.getName(), parameters);</span><br><span class="line">    <span class="keyword">if</span> (!Constants.ANY_VALUE.equals(url.getServiceInterface())</span><br><span class="line">            &amp;&amp; url.getParameter(Constants.REGISTER_KEY, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        registry.register(subscribeUrl.addParameters(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY,</span><br><span class="line">                Constants.CHECK_KEY, String.valueOf(<span class="keyword">false</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//订阅RegistryDirectory#subscrib</span></span><br><span class="line">    <span class="comment">//调用ZookeeperRegistry(FailbackRegistry)#subscribe-&gt;doSubscribe</span></span><br><span class="line">    <span class="comment">//上一文已经解析过,但是注意的是，这里notify是调用RegistryDirectory的</span></span><br><span class="line">    directory.subscribe(subscribeUrl.addParameter(Constants.CATEGORY_KEY,</span><br><span class="line">            Constants.PROVIDERS_CATEGORY</span><br><span class="line">                    + <span class="string">&quot;,&quot;</span> + Constants.CONFIGURATORS_CATEGORY</span><br><span class="line">                    + <span class="string">&quot;,&quot;</span> + Constants.ROUTERS_CATEGORY));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    <span class="comment">//(MockClusterWrapper)-&gt;FailoverCluster</span></span><br><span class="line">    <span class="comment">//返回(MockClusterInvoker)-&gt;FailoverClusterInvoker</span></span><br><span class="line">    Invoker invoker = cluster.join(directory);</span><br><span class="line">    ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory);</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zk事件变化的通知</p><p>RegistryDirectory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(List&lt;URL&gt; urls)</span> </span>&#123;</span><br><span class="line">    List&lt;URL&gt; invokerUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; routerUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; configuratorUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">    <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">        String protocol = url.getProtocol();</span><br><span class="line">        String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">        <span class="keyword">if</span> (Constants.ROUTERS_CATEGORY.equals(category)</span><br><span class="line">                || Constants.ROUTE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            routerUrls.add(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Constants.CONFIGURATORS_CATEGORY.equals(category)</span><br><span class="line">                || Constants.OVERRIDE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            configuratorUrls.add(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Constants.PROVIDERS_CATEGORY.equals(category)) &#123;</span><br><span class="line">            invokerUrls.add(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Unsupported category &quot;</span> + category + <span class="string">&quot; in notified url: &quot;</span> + url + <span class="string">&quot; from registry &quot;</span> + getUrl().getAddress() + <span class="string">&quot; to consumer &quot;</span> + NetUtils.getLocalHost());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// configurators</span></span><br><span class="line">    <span class="keyword">if</span> (configuratorUrls != <span class="keyword">null</span> &amp;&amp; !configuratorUrls.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configurators = toConfigurators(configuratorUrls);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// routers</span></span><br><span class="line">    <span class="keyword">if</span> (routerUrls != <span class="keyword">null</span> &amp;&amp; !routerUrls.isEmpty()) &#123;</span><br><span class="line">        List&lt;Router&gt; routers = toRouters(routerUrls);</span><br><span class="line">        <span class="keyword">if</span> (routers != <span class="keyword">null</span>) &#123; <span class="comment">// null - do nothing</span></span><br><span class="line">            setRouters(routers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Configurator&gt; localConfigurators = <span class="keyword">this</span>.configurators; <span class="comment">// local reference</span></span><br><span class="line">    <span class="comment">// merge override parameters</span></span><br><span class="line">    <span class="keyword">this</span>.overrideDirectoryUrl = directoryUrl;</span><br><span class="line">    <span class="keyword">if</span> (localConfigurators != <span class="keyword">null</span> &amp;&amp; !localConfigurators.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Configurator configurator : localConfigurators) &#123;</span><br><span class="line">            <span class="keyword">this</span>.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主要功能是缓存起来methodInvokerMap-&gt;RegistryDirectory$InvokerDelegate(DubboInvoker)</span></span><br><span class="line">    refreshInvoker(invokerUrls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>refreshInvoker里面包括toInvokers和toMethodInvokers两个方法，使用refreshInvoker方法后将把url对应的服务提供者的invoker全都缓存到RegistryDirectory类的methodInvokerMap，后续当使用FailoverCluster失效转移的时候将会使用这个map并使用相应负载算法负载出一个invoker。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Invoker&lt;T&gt;&gt; toInvokers(List&lt;URL&gt; urls) &#123;</span><br><span class="line">    Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = <span class="keyword">new</span> HashMap&lt;String, Invoker&lt;T&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (urls == <span class="keyword">null</span> || urls.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> newUrlInvokerMap;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; keys = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    String queryProtocols = <span class="keyword">this</span>.queryMap.get(Constants.PROTOCOL_KEY);</span><br><span class="line">    <span class="keyword">for</span> (URL providerUrl : urls) &#123;</span><br><span class="line">        <span class="comment">// If protocol is configured at the reference side, only the matching protocol is selected</span></span><br><span class="line">        <span class="keyword">if</span> (queryProtocols != <span class="keyword">null</span> &amp;&amp; queryProtocols.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> accept = <span class="keyword">false</span>;</span><br><span class="line">            String[] acceptProtocols = queryProtocols.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String acceptProtocol : acceptProtocols) &#123;</span><br><span class="line">                <span class="keyword">if</span> (providerUrl.getProtocol().equals(acceptProtocol)) &#123;</span><br><span class="line">                    accept = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!accept) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) &#123;</span><br><span class="line">            logger.error(<span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unsupported protocol &quot;</span> + providerUrl.getProtocol() + <span class="string">&quot; in notified url: &quot;</span> + providerUrl + <span class="string">&quot; from registry &quot;</span> + getUrl().getAddress() + <span class="string">&quot; to consumer &quot;</span> + NetUtils.getLocalHost()</span><br><span class="line">                    + <span class="string">&quot;, supported protocol: &quot;</span> + ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        URL url = mergeUrl(providerUrl);</span><br><span class="line"></span><br><span class="line">        String key = url.toFullString(); <span class="comment">// The parameter urls are sorted</span></span><br><span class="line">        <span class="keyword">if</span> (keys.contains(key)) &#123; <span class="comment">// Repeated url</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        keys.add(key);</span><br><span class="line">        <span class="comment">// Cache key is url that does not merge with consumer side parameters, regardless of how the consumer combines parameters, if the server url changes, then refer again</span></span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; localUrlInvokerMap = <span class="keyword">this</span>.urlInvokerMap; <span class="comment">// local reference</span></span><br><span class="line">        Invoker&lt;T&gt; invoker = localUrlInvokerMap == <span class="keyword">null</span> ? <span class="keyword">null</span> : localUrlInvokerMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (invoker == <span class="keyword">null</span>) &#123; <span class="comment">// Not in the cache, refer again</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> enabled = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (url.hasParameter(Constants.DISABLED_KEY)) &#123;</span><br><span class="line">                    enabled = !url.getParameter(Constants.DISABLED_KEY, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    enabled = url.getParameter(Constants.ENABLED_KEY, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (enabled) &#123;</span><br><span class="line">                    <span class="comment">//ProtocolFilterWrapper-&gt;ProtocolListenerWrapper-&gt;DubboProtocal#refer</span></span><br><span class="line">                    <span class="comment">//返回DubboInvoker</span></span><br><span class="line">                    <span class="comment">//RegistryDirectory$InvokerDelegate</span></span><br><span class="line">                    invoker = <span class="keyword">new</span> InvokerDelegate&lt;T&gt;(protocol.refer(serviceType, url), url, providerUrl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;Failed to refer invoker for interface:&quot;</span> + serviceType + <span class="string">&quot;,url:(&quot;</span> + url + <span class="string">&quot;)&quot;</span> + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (invoker != <span class="keyword">null</span>) &#123; <span class="comment">// Put new invoker in cache</span></span><br><span class="line">                newUrlInvokerMap.put(key, invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newUrlInvokerMap.put(key, invoker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    keys.clear();</span><br><span class="line">    <span class="keyword">return</span> newUrlInvokerMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; toMethodInvokers(Map&lt;String, Invoker&lt;T&gt;&gt; invokersMap) &#123;</span><br><span class="line">    Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; newMethodInvokerMap = <span class="keyword">new</span> HashMap&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt;();</span><br><span class="line">    <span class="comment">// According to the methods classification declared by the provider URL, the methods is compatible with the registry to execute the filtered methods</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokersList = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (invokersMap != <span class="keyword">null</span> &amp;&amp; invokersMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokersMap.values()) &#123;</span><br><span class="line">            String parameter = invoker.getUrl().getParameter(Constants.METHODS_KEY);</span><br><span class="line">            <span class="keyword">if</span> (parameter != <span class="keyword">null</span> &amp;&amp; parameter.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String[] methods = Constants.COMMA_SPLIT_PATTERN.split(parameter);</span><br><span class="line">                <span class="keyword">if</span> (methods != <span class="keyword">null</span> &amp;&amp; methods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String method : methods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (method != <span class="keyword">null</span> &amp;&amp; method.length() &gt; <span class="number">0</span></span><br><span class="line">                                &amp;&amp; !Constants.ANY_VALUE.equals(method)) &#123;</span><br><span class="line">                            List&lt;Invoker&lt;T&gt;&gt; methodInvokers = newMethodInvokerMap.get(method);</span><br><span class="line">                            <span class="keyword">if</span> (methodInvokers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                methodInvokers = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">                                newMethodInvokerMap.put(method, methodInvokers);</span><br><span class="line">                            &#125;</span><br><span class="line">                            methodInvokers.add(invoker);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            invokersList.add(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过MockInvokersSelector</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; newInvokersList = route(invokersList, <span class="keyword">null</span>);</span><br><span class="line">    newMethodInvokerMap.put(Constants.ANY_VALUE, newInvokersList);</span><br><span class="line">    <span class="keyword">if</span> (serviceMethods != <span class="keyword">null</span> &amp;&amp; serviceMethods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String method : serviceMethods) &#123;</span><br><span class="line">            List&lt;Invoker&lt;T&gt;&gt; methodInvokers = newMethodInvokerMap.get(method);</span><br><span class="line">            <span class="keyword">if</span> (methodInvokers == <span class="keyword">null</span> || methodInvokers.isEmpty()) &#123;</span><br><span class="line">                methodInvokers = newInvokersList;</span><br><span class="line">            &#125;</span><br><span class="line">            newMethodInvokerMap.put(method, route(methodInvokers, method));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sort and unmodifiable</span></span><br><span class="line">    <span class="keyword">for</span> (String method : <span class="keyword">new</span> HashSet&lt;String&gt;(newMethodInvokerMap.keySet())) &#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; methodInvokers = newMethodInvokerMap.get(method);</span><br><span class="line">        Collections.sort(methodInvokers, InvokerComparator.getComparator());</span><br><span class="line">        newMethodInvokerMap.put(method, Collections.unmodifiableList(methodInvokers));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(newMethodInvokerMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cluster层"><a href="#cluster层" class="headerlink" title="cluster层"></a>cluster层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(FailoverCluster.NAME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cluster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merge the directory invokers to a virtual invoker.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> cluster invoker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">join</span><span class="params">(Directory&lt;T&gt; directory)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FailoverCluster把RegistryDirectory引用放进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailoverCluster</span> <span class="keyword">implements</span> <span class="title">Cluster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String NAME = <span class="string">&quot;failover&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">join</span><span class="params">(Directory&lt;T&gt; directory)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FailoverClusterInvoker&lt;T&gt;(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（四）registry</title>
      <link href="/hexo/post/ee087dca.html"/>
      <url>/hexo/post/ee087dca.html</url>
      
        <content type="html"><![CDATA[<p>registry层</p><p>通过dubbo解析一我们分析了整个ServiceConfig，留下了RegistryProtocol这个没有分析，接下来我们来分析分析RegistryProtocol</p><p><img src="https://user-images.githubusercontent.com/7789698/42802903-e087d48c-89d6-11e8-820b-99af7de93450.jpg" alt="reg333321"></p><p>在ServiceConfig的loadRegistries方法里面，当spring容器初始化，服务提供方（消费方也差不多）暴露过程，就会拼接生成registryURL</p><p>registryURL:</p><p><em>registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;pid=9966&amp;qos.port=22222&amp;registry=zookeeper&amp;timestamp=1522650082230</em></p><span id="more"></span><p>RegistryProtocol</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="comment">//export invoker</span></span><br><span class="line">    <span class="keyword">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);</span><br><span class="line"></span><br><span class="line">    URL registryUrl = getRegistryUrl(originInvoker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取registry provider</span></span><br><span class="line">    <span class="comment">//return registryFactory.getRegistry(registryUrl);</span></span><br><span class="line">    <span class="comment">//zookeeper=com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistryFactory</span></span><br><span class="line">    <span class="comment">//ZookeeperRegistryFactory.getRegistry</span></span><br><span class="line">    <span class="comment">//最后返回ZookeeperRegistry</span></span><br><span class="line">    <span class="keyword">final</span> Registry registry = getRegistry(originInvoker);</span><br><span class="line">    <span class="comment">//获取url，去除monitor、bind.ip、bind.port、qos.enable、qos.port、qos.accept.foreign.ip</span></span><br><span class="line">    <span class="comment">//zookeeper://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;export=dubbo://172.17.8.254:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;bind.ip=172.17.8.254&amp;bind.port=20880&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=10350&amp;qos.port=22222&amp;side=provider&amp;timestamp=1522656496788&amp;pid=10350&amp;qos.port=22222&amp;timestamp=1522656486762</span></span><br><span class="line">    <span class="keyword">final</span> URL registedProviderUrl = getRegistedProviderUrl(originInvoker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否延迟发布</span></span><br><span class="line">    <span class="keyword">boolean</span> register = registedProviderUrl.getParameter(<span class="string">&quot;register&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&quot;com.alibaba.dubbo.demo.DemoService&quot; -&gt; ConcurrentHashSet&lt;ConsumerInvokerWrapper&gt;</span></span><br><span class="line">    ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registedProviderUrl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (register) &#123;</span><br><span class="line">        <span class="comment">//立马注册</span></span><br><span class="line">        <span class="comment">//ZookeeperRegistry(FailbackRegistry)</span></span><br><span class="line">        <span class="comment">// registry.register(registedProviderUrl);</span></span><br><span class="line">        <span class="comment">//registry.doRegister 下面讲</span></span><br><span class="line">        register(registryUrl, registedProviderUrl);</span><br><span class="line">        ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subscribe the override data</span></span><br><span class="line">    <span class="comment">// FIXME When the provider subscribes, it will affect the scene : a certain JVM exposes the service and call the same service. Because the subscribed is cached key with the name of the service, it causes the subscription information to cover.</span></span><br><span class="line">    <span class="comment">//加category=configurators&amp;check=false</span></span><br><span class="line">    <span class="comment">// provider://172.17.8.254:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators&amp;check=false&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=10350&amp;side=provider&amp;timestamp=1522656496788</span></span><br><span class="line">    <span class="keyword">final</span> URL overrideSubscribeUrl = getSubscribedOverrideUrl(registedProviderUrl);</span><br><span class="line">    <span class="keyword">final</span> OverrideListener overrideSubscribeListener = <span class="keyword">new</span> OverrideListener(overrideSubscribeUrl, originInvoker);</span><br><span class="line">    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    <span class="comment">//订阅，最后调用overrideSubscribeListener#notify</span></span><br><span class="line">    <span class="comment">//url和listener进行绑定订阅</span></span><br><span class="line">    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    <span class="comment">//Ensure that a new exporter instance is returned every time export</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DestroyableExporter&lt;T&gt;(exporter, originInvoker, overrideSubscribeUrl, registedProviderUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">ExporterChangeableWrapper&lt;T&gt; <span class="title">doLocalExport</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//去掉dynamic、enabled两参数得到url作为key</span></span><br><span class="line">    String key = getCacheKey(originInvoker);</span><br><span class="line">    ExporterChangeableWrapper&lt;T&gt; exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">    <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (bounds) &#123;</span><br><span class="line">            exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">            <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> Invoker&lt;?&gt; invokerDelegete = <span class="keyword">new</span> InvokerDelegete&lt;T&gt;(originInvoker, getProviderUrl(originInvoker));</span><br><span class="line">                <span class="comment">//调用DubboProtocol.export</span></span><br><span class="line">                <span class="comment">//DubboExporter放入ExporterChangeableWrapper</span></span><br><span class="line">                exporter = <span class="keyword">new</span> ExporterChangeableWrapper&lt;T&gt;((Exporter&lt;T&gt;) protocol.export(invokerDelegete), originInvoker);</span><br><span class="line">                bounds.put(key, exporter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>protocol和registryFactory这里又是啥呢？我们看下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RegistryProtocol <span class="title">getRegistryProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(Constants.REGISTRY_PROTOCOL); <span class="comment">// load</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为含有set开头的public，会被注入Protocol，而默认的是dubbo也就是DubboProtocol</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocol</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为含有set开头的public，会注入registryFactory，也就是ZookeeperRegistryFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegistryFactory</span><span class="params">(RegistryFactory registryFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.registryFactory = registryFactory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperRegistryFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRegistryFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZookeeperTransporter zookeeperTransporter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZookeeperTransporter</span><span class="params">(ZookeeperTransporter zookeeperTransporter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zookeeperTransporter = zookeeperTransporter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Registry <span class="title">createRegistry</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperRegistry(url, zookeeperTransporter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/38189092-202df524-3691-11e8-9445-0be328b6b5c4.png" alt="image"></p><p>ZookeeperRegistry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ZookeeperClient zkClient;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZookeeperRegistry</span><span class="params">(URL url, ZookeeperTransporter zookeeperTransporter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(url);</span><br><span class="line">    <span class="keyword">if</span> (url.isAnyHost()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;registry address == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);</span><br><span class="line">    <span class="keyword">if</span> (!group.startsWith(Constants.PATH_SEPARATOR)) &#123;</span><br><span class="line">        group = Constants.PATH_SEPARATOR + group;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有group则root是/group 否则就是/dubbo</span></span><br><span class="line">    <span class="keyword">this</span>.root = group;</span><br><span class="line">    zkClient = zookeeperTransporter.connect(url);</span><br><span class="line">    zkClient.addStateListener(<span class="keyword">new</span> StateListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (state == RECONNECTED) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    recover();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.error(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册,父类的register最终调用了子类的doRegister</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//根据路径创建结点，dynamic为true就是临时结点否则就是实体结点</span></span><br><span class="line">        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class="keyword">true</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Failed to register &quot;</span> + url + <span class="string">&quot; to zookeeper &quot;</span> + getUrl() + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//路径</span></span><br><span class="line"><span class="comment">//  /dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo://172.17.8.254:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=10350&amp;side=provider&amp;timestamp=1522656496788</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">toUrlPath</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toCategoryPath(url) + Constants.PATH_SEPARATOR + URL.encode(url.toFullString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅，registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);，先缓存到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentMap&lt;URL, Set&lt;NotifyListener&gt;&gt; subscribed = <span class="keyword">new</span> ConcurrentHashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;();</span><br></pre></td></tr></table></figure><p>里面最终调用了doSubscribe</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSubscribe</span><span class="params">(<span class="keyword">final</span> URL url, <span class="keyword">final</span> NotifyListener listener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//如果要订阅的服务是 *</span></span><br><span class="line">        <span class="keyword">if</span> (Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">            <span class="comment">// 拿到root， /group 或/dubbo</span></span><br><span class="line">            String root = toRootPath();</span><br><span class="line">            ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">            <span class="keyword">if</span> (listeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">                zkListeners.putIfAbsent(url, <span class="keyword">new</span> ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                listeners = zkListeners.get(url);</span><br><span class="line">            &#125;</span><br><span class="line">            ChildListener zkListener = listeners.get(listener);</span><br><span class="line">            <span class="keyword">if</span> (zkListener == <span class="keyword">null</span>) &#123;</span><br><span class="line">                　　<span class="comment">//添加监听子节点变化事件，变化则子节点调用订阅逻辑</span></span><br><span class="line">                listeners.putIfAbsent(listener, <span class="keyword">new</span> ChildListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childChanged</span><span class="params">(String parentPath, List&lt;String&gt; currentChilds)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">for</span> (String child : currentChilds) &#123;</span><br><span class="line">                            child = URL.decode(child);</span><br><span class="line">                            <span class="keyword">if</span> (!anyServices.contains(child)) &#123;</span><br><span class="line">                                anyServices.add(child);</span><br><span class="line">                                subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child,</span><br><span class="line">                                        Constants.CHECK_KEY, String.valueOf(<span class="keyword">false</span>)), listener);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                zkListener = listeners.get(listener);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建root结点</span></span><br><span class="line">            zkClient.create(root, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 监听zk上root子节点变化事件，变化则返回子节点名，也就是services名</span></span><br><span class="line">            List&lt;String&gt; services = zkClient.addChildListener(root, zkListener);</span><br><span class="line">            <span class="keyword">if</span> (services != <span class="keyword">null</span> &amp;&amp; !services.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">                    service = URL.decode(service);</span><br><span class="line">                    anyServices.add(service);</span><br><span class="line">                    subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service,</span><br><span class="line">                            Constants.CHECK_KEY, String.valueOf(<span class="keyword">false</span>)), listener);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;URL&gt; urls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String path : toCategoriesPath(url)) &#123;</span><br><span class="line">                ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">                <span class="keyword">if</span> (listeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    zkListeners.putIfAbsent(url, <span class="keyword">new</span> ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                    listeners = zkListeners.get(url);</span><br><span class="line">                &#125;</span><br><span class="line">                ChildListener zkListener = listeners.get(listener);</span><br><span class="line">                <span class="keyword">if</span> (zkListener == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//加watch</span></span><br><span class="line">                    listeners.putIfAbsent(listener, <span class="keyword">new</span> ChildListener() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childChanged</span><span class="params">(String parentPath, List&lt;String&gt; currentChilds)</span> </span>&#123;</span><br><span class="line">                            ZookeeperRegistry.<span class="keyword">this</span>.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    zkListener = listeners.get(listener);</span><br><span class="line">                &#125;</span><br><span class="line">                zkClient.create(path, <span class="keyword">false</span>);</span><br><span class="line">                <span class="comment">//overrideSubscribeListener注册到结点上</span></span><br><span class="line">                List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);</span><br><span class="line">                <span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    urls.addAll(toUrlsWithEmpty(url, path, children));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//通知</span></span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Failed to subscribe &quot;</span> + url + <span class="string">&quot; to zookeeper &quot;</span> + getUrl() + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>override协议：</p><ol><li><p>禁用提供者：(通常用于临时踢除某台提供者机器，相似的，禁止消费者访问请使用路由规则)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override://10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;disbaled=true</span><br></pre></td></tr></table></figure></li><li><p>调整权重：(通常用于容量评估，缺省权重为 100)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override://10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;weight=200</span><br></pre></td></tr></table></figure></li><li><p>调整负载均衡策略：(缺省负载均衡策略为 random)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override://10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;loadbalance=leastactive</span><br></pre></td></tr></table></figure></li><li><p>服务降级：(通常用于临时屏蔽某个出错的非关键服务)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null</span><br></pre></td></tr></table></figure></li></ol><p>0.0.0.0表示所有的host</p><p>OverrideListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideListener</span> <span class="keyword">implements</span> <span class="title">NotifyListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL subscribeUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker originInvoker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OverrideListener</span><span class="params">(URL subscribeUrl, Invoker originalInvoker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subscribeUrl = subscribeUrl;</span><br><span class="line">        <span class="keyword">this</span>.originInvoker = originalInvoker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls The list of registered information , is always not empty, The meaning is the same as the return value of &#123;<span class="doctag">@link</span> com.alibaba.dubbo.registry.RegistryService#lookup(URL)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(List&lt;URL&gt; urls)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;original override urls: &quot;</span> + urls);</span><br><span class="line">        <span class="comment">//判断提供者消费者几个参数是否匹配，1、接口名 2、提供者消费者category是否一致 3、group 4、version 5、classifier </span></span><br><span class="line">        <span class="comment">//拿到所有匹配的提供者url</span></span><br><span class="line">        List&lt;URL&gt; matchedUrls = getMatchedUrls(urls, subscribeUrl);</span><br><span class="line">        logger.debug(<span class="string">&quot;subscribe url: &quot;</span> + subscribeUrl + <span class="string">&quot;, override urls: &quot;</span> + matchedUrls);</span><br><span class="line">        <span class="comment">// No matching results</span></span><br><span class="line">        <span class="keyword">if</span> (matchedUrls.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// override协议</span></span><br><span class="line">        List&lt;Configurator&gt; configurators = RegistryDirectory.toConfigurators(matchedUrls);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Invoker&lt;?&gt; invoker;</span><br><span class="line">        <span class="keyword">if</span> (originInvoker <span class="keyword">instanceof</span> InvokerDelegete) &#123;</span><br><span class="line">            invoker = ((InvokerDelegete&lt;?&gt;) originInvoker).getInvoker();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            invoker = originInvoker;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//The origin invoker</span></span><br><span class="line">        URL originUrl = RegistryProtocol.<span class="keyword">this</span>.getProviderUrl(invoker);</span><br><span class="line">        String key = getCacheKey(originInvoker);</span><br><span class="line">        ExporterChangeableWrapper&lt;?&gt; exporter = bounds.get(key);</span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.warn(<span class="keyword">new</span> IllegalStateException(<span class="string">&quot;error state, exporter should not be null&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//The current, may have been merged many times</span></span><br><span class="line">        URL currentUrl = exporter.getInvoker().getUrl();</span><br><span class="line">        <span class="comment">//合并configuratorUrls 中的属性   合并override协议和absent协议，</span></span><br><span class="line">        URL newUrl = getConfigedInvokerUrl(configurators, originUrl);</span><br><span class="line">        <span class="comment">//暴露者url变更</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUrl.equals(newUrl)) &#123;</span><br><span class="line">            RegistryProtocol.<span class="keyword">this</span>.doChangeLocalExport(originInvoker, newUrl);</span><br><span class="line">            logger.info(<span class="string">&quot;exported provider url changed, origin url: &quot;</span> + originUrl + <span class="string">&quot;, old export url: &quot;</span> + currentUrl + <span class="string">&quot;, new export url: &quot;</span> + newUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>合并override协议和absent协议过程：</p><p>List<Configurator> configurators = RegistryDirectory.toConfigurators(matchedUrls);    先获取到所有的Configurator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Configurator&gt; <span class="title">toConfigurators</span><span class="params">(List&lt;URL&gt; urls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (urls == <span class="keyword">null</span> || urls.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Configurator&gt; configurators = <span class="keyword">new</span> ArrayList&lt;Configurator&gt;(urls.size());</span><br><span class="line">    <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">        <span class="comment">//包含empty协议，返回空</span></span><br><span class="line">        <span class="keyword">if</span> (Constants.EMPTY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">            configurators.clear();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; override = <span class="keyword">new</span> HashMap&lt;String, String&gt;(url.getParameters());</span><br><span class="line">        <span class="comment">// 去掉anyhost参数 override://ip:port...?anyhost=true</span></span><br><span class="line">        override.remove(Constants.ANYHOST_KEY);</span><br><span class="line">        <span class="keyword">if</span> (override.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            configurators.clear();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据url协议生成 override-&gt;OverrideConfigurator absent-&gt;AbsentConfigurator</span></span><br><span class="line">        configurators.add(configuratorFactory.getConfigurator(url));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按host、priority排序</span></span><br><span class="line">    Collections.sort(configurators);</span><br><span class="line">    <span class="keyword">return</span> configurators;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始url和Configurators进行合并</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> URL <span class="title">getConfigedInvokerUrl</span><span class="params">(List&lt;Configurator&gt; configurators, URL url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Configurator configurator : configurators) &#123;</span><br><span class="line">        url = configurator.configure(url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> URL <span class="title">configure</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">if</span> (configuratorUrl == <span class="keyword">null</span> || configuratorUrl.getHost() == <span class="keyword">null</span></span><br><span class="line">            || url == <span class="keyword">null</span> || url.getHost() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有端口号且相同configuratorUrl-&gt;url</span></span><br><span class="line">    <span class="keyword">if</span> (configuratorUrl.getPort() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.getPort() == configuratorUrl.getPort()) &#123;</span><br><span class="line">            <span class="keyword">return</span> configureIfMatch(url.getHost(), url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果是消费端</span></span><br><span class="line">        <span class="keyword">if</span> (url.getParameter(Constants.SIDE_KEY, Constants.PROVIDER).equals(Constants.CONSUMER)) &#123;</span><br><span class="line">            <span class="comment">//本地host、url</span></span><br><span class="line">            <span class="keyword">return</span> configureIfMatch(NetUtils.getLocalHost(), url);</span><br><span class="line">         <span class="comment">//提供端</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.getParameter(Constants.SIDE_KEY, Constants.CONSUMER).equals(Constants.PROVIDER)) &#123;</span><br><span class="line">            <span class="comment">//0.0.0.0（影响所有提供端）、url</span></span><br><span class="line">            <span class="keyword">return</span> configureIfMatch(Constants.ANYHOST_VALUE, url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> URL <span class="title">configureIfMatch</span><span class="params">(String host, URL url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置为0.0.0.0或者host相同，意味着要合并url</span></span><br><span class="line">    <span class="keyword">if</span> (Constants.ANYHOST_VALUE.equals(configuratorUrl.getHost()) || host.equals(configuratorUrl.getHost())) &#123;</span><br><span class="line">        <span class="comment">//获取override里面的application</span></span><br><span class="line">        String configApplication = configuratorUrl.getParameter(Constants.APPLICATION_KEY,</span><br><span class="line">                configuratorUrl.getUsername());</span><br><span class="line">        <span class="comment">//获取当前url的application</span></span><br><span class="line">        String currentApplication = url.getParameter(Constants.APPLICATION_KEY, url.getUsername());</span><br><span class="line">        <span class="comment">//application一样</span></span><br><span class="line">        <span class="keyword">if</span> (configApplication == <span class="keyword">null</span> || Constants.ANY_VALUE.equals(configApplication)</span><br><span class="line">                || configApplication.equals(currentApplication)) &#123;</span><br><span class="line">            Set&lt;String&gt; condtionKeys = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">            <span class="comment">//category、check、dynamic、enabled</span></span><br><span class="line">            condtionKeys.add(Constants.CATEGORY_KEY);</span><br><span class="line">            condtionKeys.add(Constants.CHECK_KEY);</span><br><span class="line">            condtionKeys.add(Constants.DYNAMIC_KEY);</span><br><span class="line">            condtionKeys.add(Constants.ENABLED_KEY);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : configuratorUrl.getParameters().entrySet()) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                String value = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (key.startsWith(<span class="string">&quot;~&quot;</span>) || Constants.APPLICATION_KEY.equals(key) || Constants.SIDE_KEY.equals(key)) &#123;</span><br><span class="line">                    condtionKeys.add(key);</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; !Constants.ANY_VALUE.equals(value)</span><br><span class="line">                            &amp;&amp; !value.equals(url.getParameter(key.startsWith(<span class="string">&quot;~&quot;</span>) ? key.substring(<span class="number">1</span>) : key))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> url;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//移除category、check、dynamic、enabled，如果是OverrideConfigurator就合并配置，AbsentConfigurator就只添加没有的配置</span></span><br><span class="line">            <span class="keyword">return</span> doConfigure(url, configuratorUrl.removeParameters(condtionKeys));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url变更了，doChangeLocalExport重新暴露</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">doChangeLocalExport</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker, URL newInvokerUrl)</span> </span>&#123;</span><br><span class="line">    String key = getCacheKey(originInvoker);</span><br><span class="line">    <span class="keyword">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">    <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger.warn(<span class="keyword">new</span> IllegalStateException(<span class="string">&quot;error state, exporter should not be null&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Invoker&lt;T&gt; invokerDelegete = <span class="keyword">new</span> InvokerDelegete&lt;T&gt;(originInvoker, newInvokerUrl);</span><br><span class="line">        exporter.setExporter(protocol.export(invokerDelegete));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/Users/wangwenwei/.dubbo/dubbo-registry-demo-provider-localhost:2181.cache</p><p>当doSubscribe订阅失败的时候才会拿cache的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveProperties</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Map&lt;String, List&lt;URL&gt;&gt; categoryNotified = notified.get(url);</span><br><span class="line">        <span class="keyword">if</span> (categoryNotified != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (List&lt;URL&gt; us : categoryNotified.values()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (URL u : us) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (buf.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        buf.append(URL_SEPARATOR);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buf.append(u.toFullString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        properties.setProperty(url.getServiceKey(), buf.toString());</span><br><span class="line">        <span class="keyword">long</span> version = lastCacheChanged.incrementAndGet();</span><br><span class="line">        <span class="comment">//同步写入</span></span><br><span class="line">        <span class="keyword">if</span> (syncSaveFile) &#123;</span><br><span class="line">            doSaveProperties(version);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            registryCacheExecutor.execute(<span class="keyword">new</span> SaveProperties(version));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        logger.warn(t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSaveProperties</span><span class="params">(<span class="keyword">long</span> version)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (version &lt; lastCacheChanged.get()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Save</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//添加文件锁lock</span></span><br><span class="line">        File lockfile = <span class="keyword">new</span> File(file.getAbsolutePath() + <span class="string">&quot;.lock&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!lockfile.exists()) &#123;</span><br><span class="line">            lockfile.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(lockfile, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileChannel channel = raf.getChannel();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileLock lock = channel.tryLock();</span><br><span class="line">                <span class="keyword">if</span> (lock == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Can not lock the registry cache file &quot;</span> + file.getAbsolutePath() + <span class="string">&quot;, ignore and retry later, maybe multi java process use the file, please config: dubbo.registry.file=xxx.properties&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Save</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                        file.createNewFile();</span><br><span class="line">                    &#125;</span><br><span class="line">                    FileOutputStream outputFile = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        properties.store(outputFile, <span class="string">&quot;Dubbo Registry Cache&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        outputFile.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            raf.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (version &lt; lastCacheChanged.get()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            registryCacheExecutor.execute(<span class="keyword">new</span> SaveProperties(lastCacheChanged.incrementAndGet()));</span><br><span class="line">        &#125;</span><br><span class="line">        logger.warn(<span class="string">&quot;Failed to save registry store file, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册中心扩展"><a href="#注册中心扩展" class="headerlink" title="注册中心扩展"></a>注册中心扩展</h2><h3 id="扩展说明"><a href="#扩展说明" class="headerlink" title="扩展说明"></a>扩展说明</h3><p>负责服务的注册与发现。</p><h3 id="扩展接口"><a href="#扩展接口" class="headerlink" title="扩展接口"></a>扩展接口</h3><ul><li><code>com.alibaba.dubbo.registry.RegistryFactory</code></li><li><code>com.alibaba.dubbo.registry.Registry</code></li></ul><h3 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义注册中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">&quot;xxx1&quot;</span> <span class="attr">address</span>=<span class="string">&quot;xxx://ip:port&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用注册中心，如果没有配置registry属性，将在ApplicationContext中自动扫描registry配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">registry</span>=<span class="string">&quot;xxx1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用注册中心缺省值，当&lt;dubbo:service&gt;没有配置registry属性时，使用此配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">registry</span>=<span class="string">&quot;xxx1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="扩展契约"><a href="#扩展契约" class="headerlink" title="扩展契约"></a>扩展契约</h3><p>RegistryFactory.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegistryFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接注册中心.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 连接注册中心需处理契约：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 当设置check=false时表示不检查连接，否则在连接不上时抛出异常。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. 支持URL上的username:password权限认证。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 3. 支持backup=10.20.153.10备选注册中心集群地址。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 4. 支持file=registry.cache本地磁盘文件缓存。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 5. 支持timeout=1000请求超时设置。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 6. 支持session=60000会话超时或过期设置。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 注册中心地址，不允许为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 注册中心引用，总不返回空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Registry <span class="title">getRegistry</span><span class="params">(URL url)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegistryService.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegistryService</span> </span>&#123; <span class="comment">// Registry extends RegistryService </span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册服务.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 注册需处理契约：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 当URL设置了check=false时，注册失败后不报错，在后台定时重试，否则抛出异常。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. 当URL设置了dynamic=false参数，则需持久存储，否则，当注册者出现断电等情况异常退出时，需自动删除。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 3. 当URL设置了category=overrides时，表示分类存储，缺省类别为providers，可按分类部分通知数据。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 4. 当注册中心重启，网络抖动，不能丢失数据，包括断线自动删除数据。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 5. 允许URI相同但参数不同的URL并存，不能覆盖。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 注册信息，不允许为空，如：dubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(URL url)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消注册服务.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 取消注册需处理契约：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 如果是dynamic=false的持久存储数据，找不到注册数据，则抛IllegalStateException，否则忽略。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. 按全URL匹配取消注册。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 注册信息，不允许为空，如：dubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregister</span><span class="params">(URL url)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅服务.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 订阅需处理契约：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 当URL设置了check=false时，订阅失败后不报错，在后台定时重试。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. 当URL设置了category=overrides，只通知指定分类的数据，多个分类用逗号分隔，并允许星号通配，表示订阅所有分类数据。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 3. 允许以interface,group,version,classifier作为条件查询，如：interface=com.alibaba.foo.BarService&amp;version=1.0.0&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 4. 并且查询条件允许星号通配，订阅所有接口的所有分组的所有版本，或：interface=*&amp;group=*&amp;version=*&amp;classifier=*&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 5. 当注册中心重启，网络抖动，需自动恢复订阅请求。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 6. 允许URI相同但参数不同的URL并存，不能覆盖。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 7. 必须阻塞订阅过程，等第一次通知完后再返回。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 订阅条件，不允许为空，如：consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 变更事件监听器，不允许为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(URL url, NotifyListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消订阅服务.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 取消订阅需处理契约：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 如果没有订阅，直接忽略。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. 按全URL匹配取消订阅。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 订阅条件，不允许为空，如：consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 变更事件监听器，不允许为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">(URL url, NotifyListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询注册列表，与订阅的推模式相对应，这里为拉模式，只返回一次结果。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.registry.NotifyListener#notify(List)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 查询条件，不允许为空，如：consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 已注册信息列表，可能为空，含义同&#123;<span class="doctag">@link</span> com.alibaba.dubbo.registry.NotifyListener#notify(List&lt;URL&gt;)&#125;的参数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;URL&gt; <span class="title">lookup</span><span class="params">(URL url)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NotifyListener.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NotifyListener</span> </span>&#123; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当收到服务变更通知时触发。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 通知需处理契约：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 总是以服务接口和数据类型为维度全量通知，即不会通知一个服务的同类型的部分数据，用户不需要对比上一次通知结果。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. 订阅时的第一次通知，必须是一个服务的所有类型数据的全量通知。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 3. 中途变更时，允许不同类型的数据分开通知，比如：providers, consumers, routes, overrides，允许只通知其中一种类型，但该类型的数据必须是全量的，不是增量的。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 4. 如果一种类型的数据为空，需通知一个empty协议并带category参数的标识性URL数据。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 5. 通知者(即注册中心实现)需保证通知的顺序，比如：单线程推送，队列串行化，带版本对比。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls 已注册信息列表，总不为空，含义同&#123;<span class="doctag">@link</span> com.alibaba.dubbo.registry.RegistryService#lookup(URL)&#125;的返回值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(List&lt;URL&gt; urls)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="已知扩展"><a href="#已知扩展" class="headerlink" title="已知扩展"></a>已知扩展</h3><p><code>com.alibaba.dubbo.registry.support.dubbo.DubboRegistryFactory</code></p><h4 id="扩展示例"><a href="#扩展示例" class="headerlink" title="扩展示例"></a>扩展示例</h4><p>Maven 项目结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line"> |-main</span><br><span class="line">    |-java</span><br><span class="line">        |-com</span><br><span class="line">            |-xxx</span><br><span class="line">                |-XxxRegistryFactory.java (实现RegistryFactory接口)</span><br><span class="line">                |-XxxRegistry.java (实现Registry接口)</span><br><span class="line">    |-resources</span><br><span class="line">        |-META-INF</span><br><span class="line">            |-dubbo</span><br><span class="line">                |-com.alibaba.dubbo.registry.RegistryFactory (纯文本文件，内容为：xxx=com.xxx.XxxRegistryFactory)</span><br></pre></td></tr></table></figure><p>XxxRegistryFactory.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.registry.RegistryFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxxRegistryFactory</span> <span class="keyword">implements</span> <span class="title">RegistryFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Registry <span class="title">getRegistry</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XxxRegistry(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XxxRegistry.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.registry.NotifyListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxxRegistry</span> <span class="keyword">implements</span> <span class="title">Registry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(URL url, NotifyListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">(URL url, NotifyListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>META-INF/dubbo/com.alibaba.dubbo.registry.RegistryFactory：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxx</span>=<span class="string">com.xxx.XxxRegistryFactory</span></span><br></pre></td></tr></table></figure><p>比如dubbo官方给出的基于redis的注册方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis</span>=<span class="string">com.alibaba.dubbo.registry.redis.RedisRegistryFactory</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRegistryFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRegistryFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Registry <span class="title">createRegistry</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisRegistry(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedisRegistry就不具体分析了，注册的时候主要使用hset放入所有url、publish通知订阅者要订阅，订阅的时候使用hgetAll获取所有url、psubscribe进行订阅通知</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（三）serialize</title>
      <link href="/hexo/post/de6ecf19.html"/>
      <url>/hexo/post/de6ecf19.html</url>
      
        <content type="html"><![CDATA[<p>serialize层</p><p>dubbo的序列化方式包括：hessian2、fastjson、fst、jdk、kryo</p><p>只要通过配置<code>&lt;dubbo:protocol serialization=&quot;&quot;&gt;</code> 或<code>&lt;dubbo:service serialization=&quot;&quot;&gt;</code> 就可以实现</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;hessian2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get content type id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> content type id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">byte</span> <span class="title">getContentTypeId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get content type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> content type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create serializer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> output</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> serializer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    <span class="function">ObjectOutput <span class="title">serialize</span><span class="params">(URL url, OutputStream output)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create deserializer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> deserializer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    <span class="function">ObjectInput <span class="title">deserialize</span><span class="params">(URL url, InputStream input)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hessian2Serialization</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hessian2Serialization</span> <span class="keyword">implements</span> <span class="title">Serialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> ID = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">getContentTypeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-application/hessian2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectOutput <span class="title">serialize</span><span class="params">(URL url, OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hessian2ObjectOutput(out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectInput <span class="title">deserialize</span><span class="params">(URL url, InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hessian2ObjectInput(is);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/38181129-bb58f0fe-3663-11e8-8e76-98520d072598.png" alt="image"></p><p>KryoSerialization</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KryoSerialization</span> <span class="keyword">implements</span> <span class="title">Serialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">getContentTypeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-application/kryo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectOutput <span class="title">serialize</span><span class="params">(URL url, OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KryoObjectOutput(out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectInput <span class="title">deserialize</span><span class="params">(URL url, InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KryoObjectInput(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/38181141-cad287d4-3663-11e8-9dc7-bf0312b3b890.png" alt="image"></p><p>FastJsonSerialization</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonSerialization</span> <span class="keyword">implements</span> <span class="title">Serialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">getContentTypeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/json&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectOutput <span class="title">serialize</span><span class="params">(URL url, OutputStream output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FastJsonObjectOutput(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectInput <span class="title">deserialize</span><span class="params">(URL url, InputStream input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FastJsonObjectInput(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/var/folders/cf/lq_f9wkn3gx_l9nghhvyt7240000gn/T/abnerworks.Typora/image-201804021051571.png" alt="mage-20180402105157"></p><p>FstSerialization</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FstSerialization</span> <span class="keyword">implements</span> <span class="title">Serialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">getContentTypeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-application/fst&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectOutput <span class="title">serialize</span><span class="params">(URL url, OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FstObjectOutput(out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectInput <span class="title">deserialize</span><span class="params">(URL url, InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FstObjectInput(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/var/folders/cf/lq_f9wkn3gx_l9nghhvyt7240000gn/T/abnerworks.Typora/image-201804021052292.png" alt="mage-20180402105229"></p><p><img src="https://user-images.githubusercontent.com/7789698/38181199-29213bc8-3664-11e8-8c64-2bc6e6a37a2c.png" alt="image"></p><p>从上面我们可以看到最重要的接口就是ObjectInput、ObjectOutput、DataInput、DataOutput</p><p><img src="https://user-images.githubusercontent.com/7789698/38181371-222c4d16-3665-11e8-978d-a78198e123a4.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/38181395-33b176d8-3665-11e8-81da-45d35ba4595c.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（二）remoting</title>
      <link href="/hexo/post/dee5b4dd.html"/>
      <url>/hexo/post/dee5b4dd.html</url>
      
        <content type="html"><![CDATA[<p>本篇将着重分析dubbo的remoting模块</p><span id="more"></span><h2 id="exchange-信息交换层"><a href="#exchange-信息交换层" class="headerlink" title="exchange 信息交换层"></a>exchange 信息交换层</h2><h3 id="Exchangers（门面）"><a href="#Exchangers（门面）" class="headerlink" title="Exchangers（门面）"></a>Exchangers（门面）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exchangers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// check duplicate jar package</span></span><br><span class="line">        Version.checkDuplicate(Exchangers.class);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//bind ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExchangeServer <span class="title">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class="string">&quot;exchange&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getExchanger(url).bind(url, handler);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//connect ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExchangeClient <span class="title">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class="string">&quot;exchange&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getExchanger(url).connect(url, handler);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//取到HeaderExchanger</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Exchanger <span class="title">getExchanger</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        String type = url.getParameter(Constants.EXCHANGER_KEY, Constants.DEFAULT_EXCHANGER);</span><br><span class="line">        <span class="keyword">return</span> getExchanger(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Exchanger <span class="title">getExchanger</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExtensionLoader.getExtensionLoader(Exchanger.class).getExtension(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(HeaderExchanger.NAME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Exchanger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bind.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> message server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.EXCHANGER_KEY&#125;)</span></span><br><span class="line">    <span class="function">ExchangeServer <span class="title">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * connect.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> message channel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.EXCHANGER_KEY&#125;)</span></span><br><span class="line">    <span class="function">ExchangeClient <span class="title">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>incubator-dubbo/dubbo-remoting/dubbo-remoting-api/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.remoting.exchange.Exchanger</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">header</span>=<span class="string">com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchanger</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchanger</span> <span class="keyword">implements</span> <span class="title">Exchanger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;header&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExchangeClient <span class="title">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeaderExchangeClient(Transporters.connect(url, <span class="keyword">new</span> DecodeHandler(<span class="keyword">new</span> HeaderExchangeHandler(handler))), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExchangeServer <span class="title">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeaderExchangeServer(Transporters.bind(url, <span class="keyword">new</span> DecodeHandler(<span class="keyword">new</span> HeaderExchangeHandler(handler))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img width="236" alt="wx20180330-220243 2x" src="https://user-images.githubusercontent.com/7789698/38150011-82cb0d24-348f-11e8-8d4d-b572848cc9ac.png"><h3 id="HeaderExchangeServer"><a href="#HeaderExchangeServer" class="headerlink" title="HeaderExchangeServer"></a>HeaderExchangeServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchangeServer</span> <span class="keyword">implements</span> <span class="title">ExchangeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduled = Executors.newScheduledThreadPool(<span class="number">1</span>,</span><br><span class="line">            <span class="keyword">new</span> NamedThreadFactory(</span><br><span class="line">                    <span class="string">&quot;dubbo-remoting-server-heartbeat&quot;</span>,</span><br><span class="line">                    <span class="keyword">true</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Server server;</span><br><span class="line">    <span class="comment">// heartbeat timer</span></span><br><span class="line">    <span class="keyword">private</span> ScheduledFuture&lt;?&gt; heatbeatTimer;</span><br><span class="line">    <span class="comment">// heartbeat timeout (ms), default value is 0 , won&#x27;t execute a heartbeat.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> heartbeat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> heartbeatTimeout;</span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean closed = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeaderExchangeServer</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;server == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.server = server;</span><br><span class="line">        <span class="keyword">this</span>.heartbeat = server.getUrl().getParameter(Constants.HEARTBEAT_KEY, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.heartbeatTimeout = server.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (heartbeatTimeout &lt; heartbeat * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;heartbeatTimeout &lt; heartbeatInterval * 2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        startHeatbeatTimer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">getServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> server.isClosed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;Channel&gt; channels = getChannels();</span><br><span class="line">        <span class="keyword">for</span> (Channel channel : channels) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DefaultFuture.hasFuture(channel)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doClose();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        startClose();</span><br><span class="line">        <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> max = (<span class="keyword">long</span>) timeout;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (getUrl().getParameter(Constants.CHANNEL_SEND_READONLYEVENT_KEY, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                sendChannelReadOnlyEvent();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (HeaderExchangeServer.<span class="keyword">this</span>.isRunning()</span><br><span class="line">                    &amp;&amp; System.currentTimeMillis() - start &lt; max) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        doClose();</span><br><span class="line">        server.close(timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        server.startClose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendChannelReadOnlyEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request();</span><br><span class="line">        request.setEvent(Request.READONLY_EVENT);</span><br><span class="line">        request.setTwoWay(<span class="keyword">false</span>);</span><br><span class="line">        request.setVersion(Version.getVersion());</span><br><span class="line"></span><br><span class="line">        Collection&lt;Channel&gt; channels = getChannels();</span><br><span class="line">        <span class="keyword">for</span> (Channel channel : channels) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (channel.isConnected())</span><br><span class="line">                    channel.send(request, getUrl().getParameter(Constants.CHANNEL_READONLYEVENT_SENT_KEY, <span class="keyword">true</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;send connot write messge error.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!closed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stopHeartbeatTimer();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduled.shutdown();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.warn(t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ExchangeChannel&gt; <span class="title">getExchangeChannels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;ExchangeChannel&gt; exchangeChannels = <span class="keyword">new</span> ArrayList&lt;ExchangeChannel&gt;();</span><br><span class="line">        Collection&lt;Channel&gt; channels = server.getChannels();</span><br><span class="line">        <span class="keyword">if</span> (channels != <span class="keyword">null</span> &amp;&amp; !channels.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Channel channel : channels) &#123;</span><br><span class="line">                exchangeChannels.add(HeaderExchangeChannel.getOrAddChannel(channel));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exchangeChannels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExchangeChannel <span class="title">getExchangeChannel</span><span class="params">(InetSocketAddress remoteAddress)</span> </span>&#123;</span><br><span class="line">        Channel channel = server.getChannel(remoteAddress);</span><br><span class="line">        <span class="keyword">return</span> HeaderExchangeChannel.getOrAddChannel(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Channel&gt; <span class="title">getChannels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Collection) getExchangeChannels();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Channel <span class="title">getChannel</span><span class="params">(InetSocketAddress remoteAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getExchangeChannel(remoteAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> server.isBound();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InetSocketAddress <span class="title">getLocalAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> server.getLocalAddress();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> server.getUrl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">getChannelHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> server.getChannelHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        server.reset(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.hasParameter(Constants.HEARTBEAT_KEY)</span><br><span class="line">                    || url.hasParameter(Constants.HEARTBEAT_TIMEOUT_KEY)) &#123;</span><br><span class="line">                <span class="keyword">int</span> h = url.getParameter(Constants.HEARTBEAT_KEY, heartbeat);</span><br><span class="line">                <span class="keyword">int</span> t = url.getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, h * <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (t &lt; h * <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;heartbeatTimeout &lt; heartbeatInterval * 2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (h != heartbeat || t != heartbeatTimeout) &#123;</span><br><span class="line">                    heartbeat = h;</span><br><span class="line">                    heartbeatTimeout = t;</span><br><span class="line">                    startHeatbeatTimer();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.error(t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(com.alibaba.dubbo.common.Parameters parameters)</span> </span>&#123;</span><br><span class="line">        reset(getUrl().addParameters(parameters.getParameters()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (closed.get()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>.getLocalAddress(), <span class="keyword">null</span>, <span class="string">&quot;Failed to send message &quot;</span> + message + <span class="string">&quot;, cause: The server &quot;</span> + getLocalAddress() + <span class="string">&quot; is closed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        server.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message, <span class="keyword">boolean</span> sent)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (closed.get()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>.getLocalAddress(), <span class="keyword">null</span>, <span class="string">&quot;Failed to send message &quot;</span> + message + <span class="string">&quot;, cause: The server &quot;</span> + getLocalAddress() + <span class="string">&quot; is closed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        server.send(message, sent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startHeatbeatTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stopHeartbeatTimer();</span><br><span class="line">        <span class="keyword">if</span> (heartbeat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            heatbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class="line">                    <span class="keyword">new</span> HeartBeatTask(<span class="keyword">new</span> HeartBeatTask.ChannelProvider() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Collection&lt;Channel&gt; <span class="title">getChannels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> Collections.unmodifiableCollection(</span><br><span class="line">                                    HeaderExchangeServer.<span class="keyword">this</span>.getChannels());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, heartbeat, heartbeatTimeout),</span><br><span class="line">                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopHeartbeatTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ScheduledFuture&lt;?&gt; timer = heatbeatTimer;</span><br><span class="line">            <span class="keyword">if</span> (timer != <span class="keyword">null</span> &amp;&amp; !timer.isCancelled()) &#123;</span><br><span class="line">                timer.cancel(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.warn(t.getMessage(), t);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            heatbeatTimer = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="transport-网络传输层"><a href="#transport-网络传输层" class="headerlink" title="transport 网络传输层"></a>transport 网络传输层</h2><h3 id="Transporters"><a href="#Transporters" class="headerlink" title="Transporters"></a>Transporters</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transporters</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// check duplicate jar package</span></span><br><span class="line">        Version.checkDuplicate(Transporters.class);</span><br><span class="line">        Version.checkDuplicate(RemotingException.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Transporters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title">bind</span><span class="params">(String url, ChannelHandler... handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bind(URL.valueOf(url), handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title">bind</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handlers == <span class="keyword">null</span> || handlers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;handlers == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ChannelHandler handler;</span><br><span class="line">        <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">            handler = handlers[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getTransporter().bind(url, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title">connect</span><span class="params">(String url, ChannelHandler... handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connect(URL.valueOf(url), handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ChannelHandler handler;</span><br><span class="line">        <span class="keyword">if</span> (handlers == <span class="keyword">null</span> || handlers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerAdapter();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">            handler = handlers[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getTransporter().connect(url, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transporter <span class="title">getTransporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExtensionLoader.getExtensionLoader(Transporter.class).getAdaptiveExtension();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;netty&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transporter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bind a server.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     server url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> server</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RemotingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.remoting.Transporters#bind(URL, Receiver, ChannelHandler)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.SERVER_KEY, Constants.TRANSPORTER_KEY&#125;)</span></span><br><span class="line">    <span class="function">Server <span class="title">bind</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Connect to a server.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     server url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RemotingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.alibaba.dubbo.remoting.Transporters#connect(URL, Receiver, ChannelListener)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY&#125;)</span></span><br><span class="line">    <span class="function">Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上最新版本的dubbo还有基于netty4的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:protocol server=<span class="string">&quot;netty4&quot;</span> /&gt;</span><br><span class="line">或</span><br><span class="line">&lt;dubbo:provider server=<span class="string">&quot;netty4&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netty=com.alibaba.dubbo.remoting.transport.netty.NettyTransporter</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyTransporter</span> <span class="keyword">implements</span> <span class="title">Transporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;netty&quot;</span>;</span><br><span class="line"><span class="comment">//DecodeHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">bind</span><span class="params">(URL url, ChannelHandler listener)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NettyServer(url, listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler listener)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NettyClient(url, listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelHandlerDispatcher</span> <span class="keyword">implements</span> <span class="title">ChannelHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ChannelHandlerDispatcher.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;ChannelHandler&gt; channelHandlers = <span class="keyword">new</span> CopyOnWriteArraySet&lt;ChannelHandler&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChannelHandlerDispatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChannelHandlerDispatcher</span><span class="params">(ChannelHandler... handlers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(handlers == <span class="keyword">null</span> ? <span class="keyword">null</span> : Arrays.asList(handlers));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChannelHandlerDispatcher</span><span class="params">(Collection&lt;ChannelHandler&gt; handlers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handlers != <span class="keyword">null</span> &amp;&amp; !handlers.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.channelHandlers.addAll(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ChannelHandler&gt; <span class="title">getChannelHandlers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channelHandlers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandlerDispatcher <span class="title">addChannelHandler</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.channelHandlers.add(handler);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandlerDispatcher <span class="title">removeChannelHandler</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.channelHandlers.remove(handler);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ChannelHandler listener : channelHandlers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                listener.connected(channel);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ChannelHandler listener : channelHandlers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                listener.disconnected(channel);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sent</span><span class="params">(Channel channel, Object message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ChannelHandler listener : channelHandlers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                listener.sent(channel, message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ChannelHandler listener : channelHandlers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                listener.received(channel, message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caught</span><span class="params">(Channel channel, Throwable exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ChannelHandler listener : channelHandlers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                listener.caught(channel, exception);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/38122701-1b4b084c-3409-11e8-91c3-54b151aa9a24.png" alt="image"></p><ul><li>AbstractServer的构造方法调用了子类的doOpen</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractServer</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(url, handler);</span><br><span class="line">    localAddress = getUrl().toInetSocketAddress();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//bind.ip 或者url里面的host</span></span><br><span class="line">    String bindIp = getUrl().getParameter(Constants.BIND_IP_KEY, getUrl().getHost());</span><br><span class="line">     <span class="comment">//bind.port 或者url里面的port</span></span><br><span class="line">    <span class="keyword">int</span> bindPort = getUrl().getParameter(Constants.BIND_PORT_KEY, getUrl().getPort());</span><br><span class="line">    <span class="comment">//localhost改成0.0.0.0</span></span><br><span class="line">    <span class="keyword">if</span> (url.getParameter(Constants.ANYHOST_KEY, <span class="keyword">false</span>) || NetUtils.isInvalidLocalHost(bindIp)) &#123;</span><br><span class="line">        bindIp = NetUtils.ANYHOST;</span><br><span class="line">    &#125;</span><br><span class="line">    bindAddress = <span class="keyword">new</span> InetSocketAddress(bindIp, bindPort);</span><br><span class="line">    <span class="keyword">this</span>.accepts = url.getParameter(Constants.ACCEPTS_KEY, Constants.DEFAULT_ACCEPTS);</span><br><span class="line">    <span class="keyword">this</span>.idleTimeout = url.getParameter(Constants.IDLE_TIMEOUT_KEY, Constants.DEFAULT_IDLE_TIMEOUT);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doOpen();</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Start &quot;</span> + getClass().getSimpleName() + <span class="string">&quot; bind &quot;</span> + getBindAddress() + <span class="string">&quot;, export &quot;</span> + getLocalAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(url.toInetSocketAddress(), <span class="keyword">null</span>, <span class="string">&quot;Failed to bind &quot;</span> + getClass().getSimpleName()</span><br><span class="line">                + <span class="string">&quot; on &quot;</span> + getLocalAddress() + <span class="string">&quot;, cause: &quot;</span> + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fixme replace this with better method</span></span><br><span class="line">    DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();</span><br><span class="line">    executor = (ExecutorService) dataStore.get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Netty部分"><a href="#Netty部分" class="headerlink" title="Netty部分"></a>Netty部分</h3><p>netty3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> <span class="keyword">extends</span> <span class="title">AbstractServer</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(NettyServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Channel&gt; channels; <span class="comment">// &lt;ip:port, channel&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerBootstrap bootstrap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> org.jboss.netty.channel.Channel channel;</span><br><span class="line"><span class="comment">//DecodeHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOpen</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        NettyHelper.setNettyLoggerFactory();</span><br><span class="line">        <span class="comment">//boss线程池</span></span><br><span class="line">        ExecutorService boss = Executors.newCachedThreadPool(<span class="keyword">new</span> NamedThreadFactory(<span class="string">&quot;NettyServerBoss&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">//worker线程池</span></span><br><span class="line">        ExecutorService worker = Executors.newCachedThreadPool(<span class="keyword">new</span> NamedThreadFactory(<span class="string">&quot;NettyServerWorker&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">//基于nio</span></span><br><span class="line">        <span class="comment">//workCount 设置为如果iothreads有值就取否则则取cpu数+1和32中较小的</span></span><br><span class="line">        ChannelFactory channelFactory = <span class="keyword">new</span> NioServerSocketChannelFactory(boss, worker, getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS));</span><br><span class="line">        bootstrap = <span class="keyword">new</span> ServerBootstrap(channelFactory);</span><br><span class="line"><span class="comment">//handler封装</span></span><br><span class="line">        <span class="keyword">final</span> NettyHandler nettyHandler = <span class="keyword">new</span> NettyHandler(getUrl(), <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//pipeline</span></span><br><span class="line">        channels = nettyHandler.getChannels();</span><br><span class="line">        <span class="comment">// https://issues.jboss.org/browse/NETTY-365</span></span><br><span class="line">        <span class="comment">// https://issues.jboss.org/browse/NETTY-379</span></span><br><span class="line">        <span class="comment">// final Timer timer = new HashedWheelTimer(new NamedThreadFactory(&quot;NettyIdleTimer&quot;, true));</span></span><br><span class="line">        <span class="comment">//设置pipeline 工厂</span></span><br><span class="line">        bootstrap.setPipelineFactory(<span class="keyword">new</span> ChannelPipelineFactory() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> ChannelPipeline <span class="title">getPipeline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//默认DubboCodec</span></span><br><span class="line">                NettyCodecAdapter adapter = <span class="keyword">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class="keyword">this</span>);</span><br><span class="line">                ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line">                <span class="comment">/*int idleTimeout = getIdleTimeout();</span></span><br><span class="line"><span class="comment">                if (idleTimeout &gt; 10000) &#123;</span></span><br><span class="line"><span class="comment">                    pipeline.addLast(&quot;timer&quot;, new IdleStateHandler(timer, idleTimeout / 1000, 0, 0));</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="comment">//编解码器</span></span><br><span class="line">                pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, adapter.getDecoder());</span><br><span class="line">                pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, adapter.getEncoder());</span><br><span class="line">                pipeline.addLast(<span class="string">&quot;handler&quot;</span>, nettyHandler);</span><br><span class="line">                <span class="keyword">return</span> pipeline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 绑定</span></span><br><span class="line">        channel = bootstrap.bind(getBindAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// unbind.</span></span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Collection&lt;com.alibaba.dubbo.remoting.Channel&gt; channels = getChannels();</span><br><span class="line">            <span class="keyword">if</span> (channels != <span class="keyword">null</span> &amp;&amp; !channels.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (com.alibaba.dubbo.remoting.Channel channel : channels) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        channel.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        logger.warn(e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bootstrap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// release external resource.</span></span><br><span class="line">                bootstrap.releaseExternalResources();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channels != <span class="keyword">null</span>) &#123;</span><br><span class="line">                channels.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Channel&gt; <span class="title">getChannels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;Channel&gt; chs = <span class="keyword">new</span> HashSet&lt;Channel&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Channel channel : <span class="keyword">this</span>.channels.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel.isConnected()) &#123;</span><br><span class="line">                chs.add(channel);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channels.remove(NetUtils.toAddressString(channel.getRemoteAddress()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Channel <span class="title">getChannel</span><span class="params">(InetSocketAddress remoteAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channels.get(NetUtils.toAddressString(remoteAddress));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channel.isBound();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>netty4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> <span class="keyword">extends</span> <span class="title">AbstractServer</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(NettyServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Channel&gt; channels; <span class="comment">// &lt;ip:port, channel&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerBootstrap bootstrap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> io.netty.channel.Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup bossGroup;</span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup workerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOpen</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        NettyHelper.setNettyLoggerFactory();</span><br><span class="line"></span><br><span class="line">        bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boss</span></span><br><span class="line">        bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>, <span class="keyword">new</span> DefaultThreadFactory(<span class="string">&quot;NettyServerBoss&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">//worker</span></span><br><span class="line">        workerGroup = <span class="keyword">new</span> NioEventLoopGroup(getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS),</span><br><span class="line">                <span class="keyword">new</span> DefaultThreadFactory(<span class="string">&quot;NettyServerWorker&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> NettyServerHandler nettyServerHandler = <span class="keyword">new</span> NettyServerHandler(getUrl(), <span class="keyword">this</span>);</span><br><span class="line">        channels = nettyServerHandler.getChannels();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">            <span class="comment">//TCP/IP协议中针对TCP默认开启了Nagle算法。Nagle算法通过减少需要传输的数据包，来优化网络。启动TCP_NODELAY，就意味着禁用了Nagle算法，允许小包的发送。对于延时敏感型，同时数据传输量比较小的应用，开启TCP_NODELAY选项无疑是一个正确的选择。</span></span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)</span><br><span class="line"><span class="comment">// 1.允许启动一个监听服务器并捆绑其众所周知端口，即使以前建立的将此端口用做他们的本地端口的连接仍存在。这通常是重启监听服务器时出现，若不设置此选项，则bind时将出错。</span></span><br><span class="line"><span class="comment">//2.允许在同一端口上启动同一服务器的多个实例，只要每个实例捆绑一个不同的本地IP地址即可。对于TCP，我们根本不可能启动捆绑相同IP地址和相同端口号的多个服务器。</span></span><br><span class="line"><span class="comment">//3.允许单个进程捆绑同一端口到多个套接口上，只要每个捆绑指定不同的本地IP地址即可。这一般不用于TCP服务器。</span></span><br><span class="line"><span class="comment">//4.允许完全重复的捆绑：当一个IP地址和端口绑定到某个套接口上时，还允许此IP地址和端口捆绑到另一个套接口上。一般来说，这个特性仅在支持多播的系统上才有，而且只对UDP套接口而言（TCP不支持多播）。</span></span><br><span class="line">                .childOption(ChannelOption.SO_REUSEADDR, Boolean.TRUE)</span><br><span class="line">            <span class="comment">//池化对象</span></span><br><span class="line">                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        NettyCodecAdapter adapter = <span class="keyword">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class="keyword">this</span>);</span><br><span class="line">                        ch.pipeline()<span class="comment">//.addLast(&quot;logging&quot;,new LoggingHandler(LogLevel.INFO))//for debug</span></span><br><span class="line">                                .addLast(<span class="string">&quot;decoder&quot;</span>, adapter.getDecoder())</span><br><span class="line">                                .addLast(<span class="string">&quot;encoder&quot;</span>, adapter.getEncoder())</span><br><span class="line">                                .addLast(<span class="string">&quot;handler&quot;</span>, nettyServerHandler);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// bind</span></span><br><span class="line">        ChannelFuture channelFuture = bootstrap.bind(getBindAddress());</span><br><span class="line">        channelFuture.syncUninterruptibly();</span><br><span class="line">        channel = channelFuture.channel();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// unbind.</span></span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Collection&lt;com.alibaba.dubbo.remoting.Channel&gt; channels = getChannels();</span><br><span class="line">            <span class="keyword">if</span> (channels != <span class="keyword">null</span> &amp;&amp; channels.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (com.alibaba.dubbo.remoting.Channel channel : channels) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        channel.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        logger.warn(e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bootstrap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bossGroup.shutdownGracefully();</span><br><span class="line">                workerGroup.shutdownGracefully();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channels != <span class="keyword">null</span>) &#123;</span><br><span class="line">                channels.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Channel&gt; <span class="title">getChannels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;Channel&gt; chs = <span class="keyword">new</span> HashSet&lt;Channel&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Channel channel : <span class="keyword">this</span>.channels.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel.isConnected()) &#123;</span><br><span class="line">                chs.add(channel);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channels.remove(NetUtils.toAddressString(channel.getRemoteAddress()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Channel <span class="title">getChannel</span><span class="params">(InetSocketAddress remoteAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channels.get(NetUtils.toAddressString(remoteAddress));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channel.isActive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，dubbo就顺利的利用netty绑定到了本地的20880端口上进行监听。接下来当这个端口上接收到消息包，就会进行解码处理</p><p><img src="https://user-images.githubusercontent.com/7789698/38150033-9c99dd48-348f-11e8-928b-66b360d224e3.jpg" alt="dubbo_protocol_header"></p><p>dubbo协议默认使用DubboCodec处理编码</p><h3 id="ExchangeCodec"><a href="#ExchangeCodec" class="headerlink" title="ExchangeCodec"></a>ExchangeCodec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(Channel channel, ChannelBuffer buffer)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> readable = buffer.readableBytes();</span><br><span class="line">    <span class="comment">//读取16位魔数</span></span><br><span class="line">    <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[Math.min(readable, HEADER_LENGTH)];</span><br><span class="line">    buffer.readBytes(header);</span><br><span class="line">    <span class="keyword">return</span> decode(channel, buffer, readable, header);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">decode</span><span class="params">(Channel channel, ChannelBuffer buffer, <span class="keyword">int</span> readable, <span class="keyword">byte</span>[] header)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 检查魔数0xdabb</span></span><br><span class="line">        <span class="keyword">if</span> (readable &gt; <span class="number">0</span> &amp;&amp; header[<span class="number">0</span>] != MAGIC_HIGH</span><br><span class="line">                || readable &gt; <span class="number">1</span> &amp;&amp; header[<span class="number">1</span>] != MAGIC_LOW) &#123;</span><br><span class="line">            <span class="keyword">int</span> length = header.length;</span><br><span class="line">            <span class="keyword">if</span> (header.length &lt; readable) &#123;</span><br><span class="line">                header = Bytes.copyOf(header, readable);</span><br><span class="line">                buffer.readBytes(header, length, readable - length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; header.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (header[i] == MAGIC_HIGH &amp;&amp; header[i + <span class="number">1</span>] == MAGIC_LOW) &#123;</span><br><span class="line">                    buffer.readerIndex(buffer.readerIndex() - header.length + i);</span><br><span class="line">                    header = Bytes.copyOf(header, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.decode(channel, buffer, readable, header);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 长度太小</span></span><br><span class="line">        <span class="keyword">if</span> (readable &lt; HEADER_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据长度 第12字节开始，也就是96-127，转化为int</span></span><br><span class="line">        <span class="keyword">int</span> len = Bytes.bytes2int(header, <span class="number">12</span>);</span><br><span class="line">        checkPayload(channel, len);</span><br><span class="line">        <span class="comment">//头部长度加上body长度，长度不够</span></span><br><span class="line">        <span class="keyword">int</span> tt = len + HEADER_LENGTH;</span><br><span class="line">        <span class="keyword">if</span> (readable &lt; tt) &#123;</span><br><span class="line">            <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// body内容读成流</span></span><br><span class="line">        ChannelBufferInputStream is = <span class="keyword">new</span> ChannelBufferInputStream(buffer, len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> decodeBody(channel, is, header);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(<span class="string">&quot;Skip input stream &quot;</span> + is.available());</span><br><span class="line">                    &#125;</span><br><span class="line">                    StreamUtils.skipUnusedStream(is);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> Object <span class="title">decodeBody</span><span class="params">(Channel channel, InputStream is, <span class="keyword">byte</span>[] header)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">//16~23 包括serialization id 、event、two way、req／res</span></span><br><span class="line">     <span class="comment">//proto 是与上0x1f 拿到低5位也就是 16~20</span></span><br><span class="line">        <span class="keyword">byte</span> flag = header[<span class="number">2</span>], proto = (<span class="keyword">byte</span>) (flag &amp; SERIALIZATION_MASK);</span><br><span class="line">     <span class="comment">//根据serialization id 解析出Serialization类</span></span><br><span class="line">        Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto);</span><br><span class="line">        <span class="comment">// get request id. 第四字节开始，也就是32-95转化为long</span></span><br><span class="line">        <span class="keyword">long</span> id = Bytes.bytes2long(header, <span class="number">4</span>);</span><br><span class="line">     <span class="comment">//与上0x80 flag第八位 也就是第23位</span></span><br><span class="line">        <span class="keyword">if</span> ((flag &amp; FLAG_REQUEST) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// decode response.</span></span><br><span class="line">            Response res = <span class="keyword">new</span> Response(id);</span><br><span class="line">            <span class="keyword">if</span> ((flag &amp; FLAG_EVENT) != <span class="number">0</span>) &#123;</span><br><span class="line">                res.setEvent(Response.HEARTBEAT_EVENT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// get status. 24～31位</span></span><br><span class="line">            <span class="keyword">byte</span> status = header[<span class="number">3</span>];</span><br><span class="line">            res.setStatus(status);</span><br><span class="line">            <span class="keyword">if</span> (status == Response.OK) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object data;</span><br><span class="line">                    <span class="keyword">if</span> (res.isHeartbeat()) &#123;</span><br><span class="line">                        <span class="comment">//反序列化心跳数据</span></span><br><span class="line">                        data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.isEvent()) &#123;</span><br><span class="line">                        <span class="comment">//反序列化事件数据</span></span><br><span class="line">                        data = decodeEventData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//反序列化响应</span></span><br><span class="line">                        DecodeableRpcResult result;</span><br><span class="line">                        <span class="keyword">if</span> (channel.getUrl().getParameter(</span><br><span class="line">                                Constants.DECODE_IN_IO_THREAD_KEY,</span><br><span class="line">                                Constants.DEFAULT_DECODE_IN_IO_THREAD)) &#123;</span><br><span class="line">                            result = <span class="keyword">new</span> DecodeableRpcResult(channel, res, is,</span><br><span class="line">                                    (Invocation) getRequestData(id), proto);</span><br><span class="line">                            result.decode();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            result = <span class="keyword">new</span> DecodeableRpcResult(channel, res,</span><br><span class="line">                                    <span class="keyword">new</span> UnsafeByteArrayInputStream(readMessageData(is)),</span><br><span class="line">                                    (Invocation) getRequestData(id), proto);</span><br><span class="line">                        &#125;</span><br><span class="line">                        data = result;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.setResult(data);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;Decode response failed: &quot;</span> + t.getMessage(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.setStatus(Response.CLIENT_ERROR);</span><br><span class="line">                    res.setErrorMessage(StringUtils.toString(t));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.setErrorMessage(deserialize(s, channel.getUrl(), is).readUTF());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// decode request.</span></span><br><span class="line">            Request req = <span class="keyword">new</span> Request(id);</span><br><span class="line">            req.setVersion(<span class="string">&quot;2.0.0&quot;</span>);</span><br><span class="line">            <span class="comment">//与0x40 flag第7位是1也就是第22位</span></span><br><span class="line">            req.setTwoWay((flag &amp; FLAG_TWOWAY) != <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//与0x20 flag第6位是1也就是第21位</span></span><br><span class="line">            <span class="keyword">if</span> ((flag &amp; FLAG_EVENT) != <span class="number">0</span>) &#123;</span><br><span class="line">                req.setEvent(Request.HEARTBEAT_EVENT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object data;</span><br><span class="line">                <span class="keyword">if</span> (req.isHeartbeat()) &#123;</span><br><span class="line">                    data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.isEvent()) &#123;</span><br><span class="line">                    data = decodeEventData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//反序列化请求</span></span><br><span class="line">                    DecodeableRpcInvocation inv;</span><br><span class="line">                    <span class="keyword">if</span> (channel.getUrl().getParameter(</span><br><span class="line">                            Constants.DECODE_IN_IO_THREAD_KEY,</span><br><span class="line">                            Constants.DEFAULT_DECODE_IN_IO_THREAD)) &#123;</span><br><span class="line">                        inv = <span class="keyword">new</span> DecodeableRpcInvocation(channel, req, is, proto);</span><br><span class="line">                        inv.decode();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        inv = <span class="keyword">new</span> DecodeableRpcInvocation(channel, req,</span><br><span class="line">                                <span class="keyword">new</span> UnsafeByteArrayInputStream(readMessageData(is)), proto);</span><br><span class="line">                    &#125;</span><br><span class="line">                    data = inv;</span><br><span class="line">                &#125;</span><br><span class="line">                req.setData(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;Decode request failed: &quot;</span> + t.getMessage(), t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// bad request</span></span><br><span class="line">                req.setBroken(<span class="keyword">true</span>);</span><br><span class="line">                req.setData(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> req;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编解码后就会使用Handler处理</p><h4 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h4><p>netty3使用SimpleChannelHandler处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Channel&gt; channels = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Channel&gt;(); <span class="comment">// &lt;ip:port, channel&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br><span class="line"><span class="comment">//NettyServer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyHandler</span><span class="params">(URL url, ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Channel&gt; <span class="title">getChannels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelConnected</span><span class="params">(ChannelHandlerContext ctx, ChannelStateEvent e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                channels.put(NetUtils.toAddressString((InetSocketAddress) ctx.getChannel().getRemoteAddress()), channel);</span><br><span class="line">            &#125;</span><br><span class="line">            handler.connected(channel);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelDisconnected</span><span class="params">(ChannelHandlerContext ctx, ChannelStateEvent e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channels.remove(NetUtils.toAddressString((InetSocketAddress) ctx.getChannel().getRemoteAddress()));</span><br><span class="line">            handler.disconnected(channel);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(ChannelHandlerContext ctx, MessageEvent e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.received(channel, e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeRequested</span><span class="params">(ChannelHandlerContext ctx, MessageEvent e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.writeRequested(ctx, e);</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.sent(channel, e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, ExceptionEvent e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.caught(channel, e.getCause());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>netty4使用ChannelDuplexHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@io</span>.netty.channel.ChannelHandler.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelDuplexHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Channel&gt; channels = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Channel&gt;(); <span class="comment">// &lt;ip:port, channel&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br><span class="line"><span class="comment">//NettyServer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServerHandler</span><span class="params">(URL url, ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Channel&gt; <span class="title">getChannels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelActive();</span><br><span class="line"></span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                channels.put(NetUtils.toAddressString((InetSocketAddress) ctx.channel().remoteAddress()), channel);</span><br><span class="line">            &#125;</span><br><span class="line">            handler.connected(channel);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channels.remove(NetUtils.toAddressString((InetSocketAddress) ctx.channel().remoteAddress()));</span><br><span class="line">            handler.disconnected(channel);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(ChannelHandlerContext ctx, ChannelPromise future)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.received(channel, msg);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.write(ctx, msg, promise);</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.sent(channel, msg);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.caught(channel, cause);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NettyServer的sent、received其实是调用了handler.sent、received</p><p>handler又是DubboProtocol带过来的，其实最后是DubboProtocol里面的requestHandler变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExchangeHandler requestHandler = <span class="keyword">new</span> ExchangeHandlerAdapter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Object</span> <span class="params">(ExchangeChannel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Invocation) &#123;</span><br><span class="line">            Invocation inv = (Invocation) message;</span><br><span class="line">            <span class="comment">//根据请求获取Invoker</span></span><br><span class="line">            Invoker&lt;?&gt; invoker = getInvoker(channel, inv);</span><br><span class="line">            <span class="comment">// need to consider backward-compatibility if it&#x27;s a callback</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) &#123;</span><br><span class="line">                <span class="comment">//从url获取methods（一个service多个method）</span></span><br><span class="line">                String methodsStr = invoker.getUrl().getParameters().get(<span class="string">&quot;methods&quot;</span>);</span><br><span class="line">                <span class="keyword">boolean</span> hasMethod = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (methodsStr == <span class="keyword">null</span> || methodsStr.indexOf(<span class="string">&quot;,&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//url是单个method看下是否匹配</span></span><br><span class="line">                    hasMethod = inv.getMethodName().equals(methodsStr);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//查看是方法名在url里面</span></span><br><span class="line">                    String[] methods = methodsStr.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String method : methods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (inv.getMethodName().equals(method)) &#123;</span><br><span class="line">                            hasMethod = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!hasMethod) &#123;</span><br><span class="line">                    logger.warn(<span class="keyword">new</span> IllegalStateException(<span class="string">&quot;The methodName &quot;</span> + inv.getMethodName()</span><br><span class="line">                            + <span class="string">&quot; not found in callback service interface ,invoke will be ignored.&quot;</span></span><br><span class="line">                            + <span class="string">&quot; please update the api interface. url is:&quot;</span></span><br><span class="line">                            + invoker.getUrl()) + <span class="string">&quot; ,invocation is :&quot;</span> + inv);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());</span><br><span class="line">            <span class="comment">//代理调用</span></span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(inv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(channel, <span class="string">&quot;Unsupported request: &quot;</span></span><br><span class="line">                + (message == <span class="keyword">null</span> ? <span class="keyword">null</span> : (message.getClass().getName() + <span class="string">&quot;: &quot;</span> + message))</span><br><span class="line">                + <span class="string">&quot;, channel: consumer: &quot;</span> + channel.getRemoteAddress() + <span class="string">&quot; --&gt; provider: &quot;</span> + channel.getLocalAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Invocation) &#123;</span><br><span class="line">            reply((ExchangeChannel) channel, message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.received(channel, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        invoke(channel, Constants.ON_CONNECT_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;disconnected from &quot;</span> + channel.getRemoteAddress() + <span class="string">&quot;,url:&quot;</span> + channel.getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        invoke(channel, Constants.ON_DISCONNECT_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Channel channel, String methodKey)</span> </span>&#123;</span><br><span class="line">        Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);</span><br><span class="line">        <span class="keyword">if</span> (invocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                received(channel, invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Failed to invoke event method &quot;</span> + invocation.getMethodName() + <span class="string">&quot;(), cause: &quot;</span> + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Invocation <span class="title">createInvocation</span><span class="params">(Channel channel, URL url, String methodKey)</span> </span>&#123;</span><br><span class="line">        String method = url.getParameter(methodKey);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span> || method.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RpcInvocation invocation = <span class="keyword">new</span> RpcInvocation(method, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">        invocation.setAttachment(Constants.PATH_KEY, url.getPath());</span><br><span class="line">        invocation.setAttachment(Constants.GROUP_KEY, url.getParameter(Constants.GROUP_KEY));</span><br><span class="line">        invocation.setAttachment(Constants.INTERFACE_KEY, url.getParameter(Constants.INTERFACE_KEY));</span><br><span class="line">        invocation.setAttachment(Constants.VERSION_KEY, url.getParameter(Constants.VERSION_KEY));</span><br><span class="line">        <span class="keyword">if</span> (url.getParameter(Constants.STUB_EVENT_KEY, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            invocation.setAttachment(Constants.STUB_EVENT_KEY, Boolean.TRUE.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Invoker&lt;?&gt; getInvoker(Channel channel, Invocation inv) <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="keyword">boolean</span> isCallBackServiceInvoke = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isStubServiceInvoke = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> port = channel.getLocalAddress().getPort();</span><br><span class="line">    String path = inv.getAttachments().get(Constants.PATH_KEY);</span><br><span class="line">    <span class="comment">// if it&#x27;s callback service on client side</span></span><br><span class="line">    isStubServiceInvoke = Boolean.TRUE.toString().equals(inv.getAttachments().get(Constants.STUB_EVENT_KEY));</span><br><span class="line">    <span class="keyword">if</span> (isStubServiceInvoke) &#123;</span><br><span class="line">        port = channel.getRemoteAddress().getPort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//callback</span></span><br><span class="line">    isCallBackServiceInvoke = isClientSide(channel) &amp;&amp; !isStubServiceInvoke;</span><br><span class="line">    <span class="keyword">if</span> (isCallBackServiceInvoke) &#123;</span><br><span class="line">        path = inv.getAttachments().get(Constants.PATH_KEY) + <span class="string">&quot;.&quot;</span> + inv.getAttachments().get(Constants.CALLBACK_SERVICE_KEY);</span><br><span class="line">        inv.getAttachments().put(IS_CALLBACK_SERVICE_INVOKE, Boolean.TRUE.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据端口、路径、版本号、组别生成serviceKey区别不同service</span></span><br><span class="line">    <span class="comment">//[serviceGroup/serviceName:serviceVersion:port] </span></span><br><span class="line">    String serviceKey = serviceKey(port, path, inv.getAttachments().get(Constants.VERSION_KEY), inv.getAttachments().get(Constants.GROUP_KEY));</span><br><span class="line"><span class="comment">//从暴露的接口取</span></span><br><span class="line">    DubboExporter&lt;?&gt; exporter = (DubboExporter&lt;?&gt;) exporterMap.get(serviceKey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exporter == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(channel, <span class="string">&quot;Not found exported service: &quot;</span> + serviceKey + <span class="string">&quot; in &quot;</span> + exporterMap.keySet() + <span class="string">&quot;, may be version or group mismatch &quot;</span> + <span class="string">&quot;, channel: consumer: &quot;</span> + channel.getRemoteAddress() + <span class="string">&quot; --&gt; provider: &quot;</span> + channel.getLocalAddress() + <span class="string">&quot;, message:&quot;</span> + inv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exporter.getInvoker();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结下提供者被调用的路线：1.接收消息转化成DecodeableRpcInvocation 2.根据DecodeableRpcInvocation的端口、路径、版本号、组别信息生成serviceKey 3.根据serviceKey从缓存的exporterMap获取DubboExporter 4.调用invoke（内部使用DelegateProviderMetaDataInvoker的invoke）最终调用被代理的service</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo源码解析（一）ServiceConfig</title>
      <link href="/hexo/post/34093d70.html"/>
      <url>/hexo/post/34093d70.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Dubbo"><a href="#什么是Dubbo" class="headerlink" title="什么是Dubbo?"></a>什么是Dubbo?</h2><p>Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能，以及SOA服务治理方案，和spring框架无缝集成。</p><p>dubbo作为一个非常好的rpc项目，广泛在国内使用。</p><p>官网：<a href="http://dubbo.incubator.apache.org/">http://dubbo.incubator.apache.org/</a></p><p>github地址：<a href="https://github.com/apache/incubator-dubbo">https://github.com/apache/incubator-dubbo</a></p><span id="more"></span><p>我们先看下项目结构：<br><img src="https://user-images.githubusercontent.com/7789698/38068732-4c032100-3345-11e8-9a0b-ff30047a09ec.png" alt="image"></p><p>模块说明：</p><ul><li><strong>dubbo-common 公共逻辑模块</strong>：包括 Util 类和通用模型。</li><li><strong>dubbo-remoting 远程通讯模块</strong>：相当于 Dubbo 协议的实现，如果 RPC 用 RMI协议则不需要使用此包。</li><li><strong>dubbo-rpc 远程调用模块</strong>：抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理。</li><li><strong>dubbo-cluster 集群模块</strong>：将多个服务提供方伪装为一个提供方，包括：负载均衡, 容错，路由等，集群的地址列表可以是静态配置的，也可以是由注册中心下发。</li><li><strong>dubbo-registry 注册中心模块</strong>：基于注册中心下发地址的集群方式，以及对各种注册中心的抽象。</li><li><strong>dubbo-monitor 监控模块</strong>：统计服务调用次数，调用时间的，调用链跟踪的服务。</li><li><strong>dubbo-config 配置模块</strong>：是 Dubbo 对外的 API，用户通过 Config 使用D ubbo，隐藏 Dubbo 所有细节。</li><li><strong>dubbo-container 容器模块</strong>：是一个 Standlone 的容器，以简单的 Main 加载 Spring 启动，因为服务通常不需要 Tomcat/JBoss 等 Web 容器的特性，没必要用 Web 容器去加载服务。</li></ul><p>整体上按照分层结构进行分包，与分层的不同点在于：</p><ul><li>container 为服务容器，用于部署运行服务，没有在层中画出。</li><li>protocol 层和 proxy 层都放在 rpc 模块中，这两层是 rpc 的核心，在不需要集群也就是只有一个提供者时，可以只使用这两层完成 rpc 调用。</li><li>transport 层和 exchange 层都放在 remoting 模块中，为 rpc 调用的通讯基础。</li><li>serialize 层放在 common 模块中，以便更大程度复用。</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/38149891-0c82215c-348f-11e8-8bb7-12c61bc8f3d2.jpg" alt="dubbo-framework"></p><p>图例说明：</p><ul><li>图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。</li><li>图中从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表层之间的依赖关系，每一层都可以剥离上层被复用，其中，Service 和 Config 层为 API，其它各层均为 SPI。</li><li>图中绿色小块的为扩展接口，蓝色小块为实现类，图中只显示用于关联各层的实现类。</li><li>图中蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行时调时链，紫色三角箭头为继承，可以把子类看作父类的同一个节点，线上的文字为调用的方法。</li></ul><h2 id="各层说明"><a href="#各层说明" class="headerlink" title="各层说明"></a>各层说明</h2><ul><li><strong>config 配置层</strong>：对外配置接口，以 <code>ServiceConfig</code>, <code>ReferenceConfig</code> 为中心，可以直接初始化配置类，也可以通过 spring 解析配置生成配置类</li><li><strong>proxy 服务代理层</strong>：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 <code>ServiceProxy</code> 为中心，扩展接口为 <code>ProxyFactory</code></li><li><strong>registry 注册中心层</strong>：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 <code>RegistryFactory</code>, <code>Registry</code>, <code>RegistryService</code></li><li><strong>cluster 路由层</strong>：封装多个提供者的路由及负载均衡，并桥接注册中心，以 <code>Invoker</code> 为中心，扩展接口为 <code>Cluster</code>, <code>Directory</code>, <code>Router</code>, <code>LoadBalance</code></li><li><strong>monitor 监控层</strong>：RPC 调用次数和调用时间监控，以 <code>Statistics</code> 为中心，扩展接口为 <code>MonitorFactory</code>, <code>Monitor</code>, <code>MonitorService</code></li><li><strong>protocol 远程调用层</strong>：封装 RPC 调用，以 <code>Invocation</code>, <code>Result</code> 为中心，扩展接口为 <code>Protocol</code>, <code>Invoker</code>, <code>Exporter</code></li><li><strong>exchange 信息交换层</strong>：封装请求响应模式，同步转异步，以 <code>Request</code>, <code>Response</code> 为中心，扩展接口为 <code>Exchanger</code>, <code>ExchangeChannel</code>, <code>ExchangeClient</code>, <code>ExchangeServer</code></li><li><strong>transport 网络传输层</strong>：抽象 mina 和 netty 为统一接口，以 <code>Message</code> 为中心，扩展接口为 <code>Channel</code>, <code>Transporter</code>, <code>Client</code>, <code>Server</code>, <code>Codec</code></li><li><strong>serialize 数据序列化层</strong>：可复用的一些工具，扩展接口为 <code>Serialization</code>, <code>ObjectInput</code>, <code>ObjectOutput</code>, <code>ThreadPool</code><br><img src="https://user-images.githubusercontent.com/7789698/38149952-44d81a98-348f-11e8-86d2-af78b14b4ce7.png" alt="image-201803301749139"></li></ul><h2 id="启动demo"><a href="#启动demo" class="headerlink" title="启动demo"></a>启动demo</h2><p>dubbo-demo里面有一个例子，一个消费者一个提供者</p><h3 id="dubbo-demo-api"><a href="#dubbo-demo-api" class="headerlink" title="dubbo-demo-api"></a>dubbo-demo-api</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dubbo-demo-provider"><a href="#dubbo-demo-provider" class="headerlink" title="dubbo-demo-provider"></a>dubbo-demo-provider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()) + <span class="string">&quot;] Hello &quot;</span> + name + <span class="string">&quot;, request from consumer: &quot;</span> + RpcContext.getContext().getRemoteAddress());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, response from provider: &quot;</span> + RpcContext.getContext().getLocalAddress();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Prevent to get IPV6 address,this way only work in debug mode</span></span><br><span class="line">        <span class="comment">//But you can pass use -Djava.net.preferIPv4Stack=true,then it work well whether in debug mode or not</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.net.preferIPv4Stack&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;META-INF/spring/dubbo-demo-provider.xml&quot;</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line"></span><br><span class="line">        System.in.read(); <span class="comment">// press any key to exit</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dubbo-demo-provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- provider&#x27;s application name, used for tracing dependency relationship --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-provider&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- use multicast registry center to export service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- use dubbo protocol to export service on port 20880 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- service implementation, as same as regular local bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.dubbo.demo.provider.DemoServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- declare the service interface to be exported --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.alibaba.dubbo.demo.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dubbo-demo-consumer"><a href="#dubbo-demo-consumer" class="headerlink" title="dubbo-demo-consumer"></a>dubbo-demo-consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Prevent to get IPV6 address,this way only work in debug mode</span></span><br><span class="line">        <span class="comment">//But you can pass use -Djava.net.preferIPv4Stack=true,then it work well whether in debug mode or not</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.net.preferIPv4Stack&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;META-INF/spring/dubbo-demo-consumer.xml&quot;</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        DemoService demoService = (DemoService) context.getBean(<span class="string">&quot;demoService&quot;</span>); <span class="comment">// get remote service proxy</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                String hello = demoService.sayHello(<span class="string">&quot;world&quot;</span>); <span class="comment">// call remote method</span></span><br><span class="line">                System.out.println(hello); <span class="comment">// get result</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dubbo-demo-consumer.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- consumer&#x27;s application name, used for tracing dependency relationship (not a matching criterion),</span></span><br><span class="line"><span class="comment">    don&#x27;t set it same as provider --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-consumer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- use multicast registry center to discover service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- generate proxy for the remote service, then demoService can be used in the same way as the</span></span><br><span class="line"><span class="comment">    local regular interface --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.alibaba.dubbo.demo.DemoService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动provider后</p><p>我们可以看到zk里面的状况</p><p>会出现两个节点/dubbo/com.alibaba.dubbo.demo.DemoService/configurators和/dubbo/com.alibaba.dubbo.demo.DemoService/providers</p><img width="563" alt="image-201803291409570" src="https://user-images.githubusercontent.com/7789698/38073175-83cdfdfa-335c-11e8-84fd-68271bb820e2.png"><p>我们对他解码可以看到</p><p>dubbo://172.17.8.254:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=85385&amp;side=provider&amp;timestamp=1522303604681</p><p>启动consumer后</p><p>zk的节点/dubbo/com.alibaba.dubbo.demo.DemoService下多了routers, consumers两个节点</p><p>consumers再次解码可以看到</p><p>consumer://172.17.8.254/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=85452&amp;qos.port=33333&amp;side=consumer&amp;timestamp=1522303933804</p><p>最后我们看到控制台每秒打印<br><img width="403" alt="image-201803291414597" src="https://user-images.githubusercontent.com/7789698/38073163-75ecd68e-335c-11e8-8c03-a8b8c49d3443.png"></p><h2 id="xml解析分析"><a href="#xml解析分析" class="headerlink" title="xml解析分析"></a>xml解析分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//分别解析到对应的config类</span></span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;application&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;module&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;registry&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;monitor&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;provider&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;consumer&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;protocol&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;service&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;reference&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;annotation&quot;</span>, <span class="keyword">new</span> AnnotationBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DubboBeanDefinitionParser里面包含了解析xml的行为，就不具体展开</p><h2 id="config-配置层"><a href="#config-配置层" class="headerlink" title="config 配置层"></a>config 配置层</h2><h3 id="ServiceBean源码分析"><a href="#ServiceBean源码分析" class="headerlink" title="ServiceBean源码分析"></a>ServiceBean源码分析</h3><p><img src="https://user-images.githubusercontent.com/7789698/38073283-e8c810ba-335c-11e8-94d6-77e0cb2adff7.png" alt="image"></p><p>ApplicationContextAware</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    <span class="comment">//加入SpringExtensionFactory</span></span><br><span class="line">    SpringExtensionFactory.addApplicationContext(applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        SPRING_CONTEXT = applicationContext;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//反射AbstractApplicationContext的addApplicationListener将本类实例加入，监听容器加载完成后调用onApplicationEvent方法</span></span><br><span class="line">            Method method = applicationContext.getClass().getMethod(<span class="string">&quot;addApplicationListener&quot;</span>, <span class="keyword">new</span> Class&lt;?&gt;[]&#123;ApplicationListener.class&#125;); <span class="comment">// backward compatibility to spring 2.0.1</span></span><br><span class="line">            method.invoke(applicationContext, <span class="keyword">new</span> Object[]&#123;<span class="keyword">this</span>&#125;);</span><br><span class="line">            supportedApplicationListener = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (applicationContext <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Method method = AbstractApplicationContext.class.getDeclaredMethod(<span class="string">&quot;addListener&quot;</span>, <span class="keyword">new</span> Class&lt;?&gt;[]&#123;ApplicationListener.class&#125;); <span class="comment">// backward compatibility to spring 2.0.1</span></span><br><span class="line">                    <span class="keyword">if</span> (!method.isAccessible()) &#123;</span><br><span class="line">                        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    method.invoke(applicationContext, <span class="keyword">new</span> Object[]&#123;<span class="keyword">this</span>&#125;);</span><br><span class="line">                    supportedApplicationListener = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承<code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code> 监听事件，bean加载的最后调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//delay是-1或者没配置就延迟到Spring 初始化完成后，再暴露服务</span></span><br><span class="line">    <span class="keyword">if</span> (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;The service ready on spring started. service: &quot;</span> + getInterface());</span><br><span class="line">        &#125;</span><br><span class="line">        export();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bean被初始化的时候利用InitializingBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getProvider() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Map&lt;String, ProviderConfig&gt; providerConfigMap = applicationContext == <span class="keyword">null</span> ? <span class="keyword">null</span> : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProviderConfig.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (providerConfigMap != <span class="keyword">null</span> &amp;&amp; providerConfigMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Map&lt;String, ProtocolConfig&gt; protocolConfigMap = applicationContext == <span class="keyword">null</span> ? <span class="keyword">null</span> : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProtocolConfig.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> ((protocolConfigMap == <span class="keyword">null</span> || protocolConfigMap.size() == <span class="number">0</span>)</span><br><span class="line">                    &amp;&amp; providerConfigMap.size() &gt; <span class="number">1</span>) &#123; <span class="comment">// backward compatibility</span></span><br><span class="line">                List&lt;ProviderConfig&gt; providerConfigs = <span class="keyword">new</span> ArrayList&lt;ProviderConfig&gt;();</span><br><span class="line">                <span class="keyword">for</span> (ProviderConfig config : providerConfigMap.values()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (config.isDefault() != <span class="keyword">null</span> &amp;&amp; config.isDefault().booleanValue()) &#123;</span><br><span class="line">                        providerConfigs.add(config);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!providerConfigs.isEmpty()) &#123;</span><br><span class="line">                    setProviders(providerConfigs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ProviderConfig providerConfig = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (ProviderConfig config : providerConfigMap.values()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (config.isDefault() == <span class="keyword">null</span> || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (providerConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Duplicate provider configs: &quot;</span> + providerConfig + <span class="string">&quot; and &quot;</span> + config);</span><br><span class="line">                        &#125;</span><br><span class="line">                        providerConfig = config;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (providerConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    setProvider(providerConfig);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getApplication() == <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; (getProvider() == <span class="keyword">null</span> || getProvider().getApplication() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="comment">//&quot;demo-provider&quot; -&gt; &quot;&lt;dubbo:application name=&quot;demo-provider&quot; id=&quot;demo-provider&quot; /&gt;&quot;</span></span><br><span class="line">        Map&lt;String, ApplicationConfig&gt; applicationConfigMap = applicationContext == <span class="keyword">null</span> ? <span class="keyword">null</span> : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ApplicationConfig.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (applicationConfigMap != <span class="keyword">null</span> &amp;&amp; applicationConfigMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ApplicationConfig applicationConfig = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (ApplicationConfig config : applicationConfigMap.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (config.isDefault() == <span class="keyword">null</span> || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (applicationConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Duplicate application configs: &quot;</span> + applicationConfig + <span class="string">&quot; and &quot;</span> + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    applicationConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (applicationConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                setApplication(applicationConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getModule() == <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; (getProvider() == <span class="keyword">null</span> || getProvider().getModule() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        Map&lt;String, ModuleConfig&gt; moduleConfigMap = applicationContext == <span class="keyword">null</span> ? <span class="keyword">null</span> : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ModuleConfig.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (moduleConfigMap != <span class="keyword">null</span> &amp;&amp; moduleConfigMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ModuleConfig moduleConfig = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (ModuleConfig config : moduleConfigMap.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (config.isDefault() == <span class="keyword">null</span> || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (moduleConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Duplicate module configs: &quot;</span> + moduleConfig + <span class="string">&quot; and &quot;</span> + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    moduleConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (moduleConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                setModule(moduleConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&lt;dubbo:registry address=&quot;zookeeper://localhost:2181&quot; id=&quot;com.alibaba.dubbo.config.RegistryConfig&quot; /&gt;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> ((getRegistries() == <span class="keyword">null</span> || getRegistries().isEmpty())</span><br><span class="line">            &amp;&amp; (getProvider() == <span class="keyword">null</span> || getProvider().getRegistries() == <span class="keyword">null</span> || getProvider().getRegistries().isEmpty())</span><br><span class="line">        <span class="comment">//&lt;dubbo:application name=&quot;demo-provider&quot; id=&quot;demo-provider&quot; /&gt;</span></span><br><span class="line">            &amp;&amp; (getApplication() == <span class="keyword">null</span> || getApplication().getRegistries() == <span class="keyword">null</span> || getApplication().getRegistries().isEmpty())) &#123;</span><br><span class="line">        <span class="comment">//&quot;com.alibaba.dubbo.config.RegistryConfig&quot; -&gt; &quot;&lt;dubbo:registry address=&quot;zookeeper://localhost:2181&quot; id=&quot;com.alibaba.dubbo.config.RegistryConfig&quot; /&gt;&quot;</span></span><br><span class="line">        Map&lt;String, RegistryConfig&gt; registryConfigMap = applicationContext == <span class="keyword">null</span> ? <span class="keyword">null</span> : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, RegistryConfig.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryConfigMap != <span class="keyword">null</span> &amp;&amp; registryConfigMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            List&lt;RegistryConfig&gt; registryConfigs = <span class="keyword">new</span> ArrayList&lt;RegistryConfig&gt;();</span><br><span class="line">            <span class="keyword">for</span> (RegistryConfig config : registryConfigMap.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (config.isDefault() == <span class="keyword">null</span> || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    registryConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (registryConfigs != <span class="keyword">null</span> &amp;&amp; !registryConfigs.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">super</span>.setRegistries(registryConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (getMonitor() == <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; (getProvider() == <span class="keyword">null</span> || getProvider().getMonitor() == <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; (getApplication() == <span class="keyword">null</span> || getApplication().getMonitor() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        Map&lt;String, MonitorConfig&gt; monitorConfigMap = applicationContext == <span class="keyword">null</span> ? <span class="keyword">null</span> : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, MonitorConfig.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (monitorConfigMap != <span class="keyword">null</span> &amp;&amp; monitorConfigMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            MonitorConfig monitorConfig = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (MonitorConfig config : monitorConfigMap.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (config.isDefault() == <span class="keyword">null</span> || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (monitorConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Duplicate monitor configs: &quot;</span> + monitorConfig + <span class="string">&quot; and &quot;</span> + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    monitorConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (monitorConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                setMonitor(monitorConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//dubbo:service没设置protocol，也没设置provider，或者设置了provider但是指向的dubbo:provider的protocols没设置</span></span><br><span class="line">    <span class="keyword">if</span> ((getProtocols() == <span class="keyword">null</span> || getProtocols().isEmpty())</span><br><span class="line">            &amp;&amp; (getProvider() == <span class="keyword">null</span> || getProvider().getProtocols() == <span class="keyword">null</span> || getProvider().getProtocols().isEmpty())) &#123;</span><br><span class="line">        <span class="comment">//拿&quot;dubbo&quot; -&gt; &quot;&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; id=&quot;dubbo&quot; /&gt;&quot;</span></span><br><span class="line">        Map&lt;String, ProtocolConfig&gt; protocolConfigMap = applicationContext == <span class="keyword">null</span> ? <span class="keyword">null</span> : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProtocolConfig.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocolConfigMap != <span class="keyword">null</span> &amp;&amp; protocolConfigMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            List&lt;ProtocolConfig&gt; protocolConfigs = <span class="keyword">new</span> ArrayList&lt;ProtocolConfig&gt;();</span><br><span class="line">            <span class="keyword">for</span> (ProtocolConfig config : protocolConfigMap.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (config.isDefault() == <span class="keyword">null</span> || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    protocolConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (protocolConfigs != <span class="keyword">null</span> &amp;&amp; !protocolConfigs.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">super</span>.setProtocols(protocolConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (getPath() == <span class="keyword">null</span> || getPath().length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName != <span class="keyword">null</span> &amp;&amp; beanName.length() &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; getInterface() != <span class="keyword">null</span> &amp;&amp; getInterface().length() &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; beanName.startsWith(getInterface())) &#123;</span><br><span class="line">            <span class="comment">//dubbo:service设置了path就用不然设置bean名为path com.alibaba.dubbo.demo.DemoService</span></span><br><span class="line">            setPath(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先看dubbo:service有没有设置delay，没有则取dubbo:provider的delay，假如都没设置或者是-1则返回false</span></span><br><span class="line">    <span class="keyword">if</span> (!isDelay()) &#123;</span><br><span class="line">        <span class="comment">//有delay则延迟delay秒调用doExport</span></span><br><span class="line">        export();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后最重要的doExport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doExport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (unexported) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Already unexported!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (exported) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exported = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (interfaceName == <span class="keyword">null</span> || interfaceName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;&lt;dubbo:service interface=\&quot;\&quot; /&gt; interface not allow null!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    checkDefault();</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (application == <span class="keyword">null</span>) &#123;</span><br><span class="line">            application = provider.getApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">module</span> = provider.getModule();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">            registries = provider.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            monitor = provider.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (protocols == <span class="keyword">null</span>) &#123;</span><br><span class="line">            protocols = provider.getProtocols();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">module</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">            registries = <span class="keyword">module</span>.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            monitor = <span class="keyword">module</span>.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (application != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">            registries = application.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            monitor = application.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ref <span class="keyword">instanceof</span> GenericService) &#123;</span><br><span class="line">        interfaceClass = GenericService.class;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(generic)) &#123;</span><br><span class="line">            generic = Boolean.TRUE.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里是最重要的地方，反射</span></span><br><span class="line">            interfaceClass = Class.forName(interfaceName, <span class="keyword">true</span>, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">        checkRef();</span><br><span class="line">        generic = Boolean.FALSE.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (local != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(local)) &#123;</span><br><span class="line">            local = interfaceName + <span class="string">&quot;Local&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; localClass;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            localClass = ClassHelper.forNameWithThreadContextClassLoader(local);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!interfaceClass.isAssignableFrom(localClass)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;The local implementation class &quot;</span> + localClass.getName() + <span class="string">&quot; not implement interface &quot;</span> + interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stub != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(stub)) &#123;</span><br><span class="line">            stub = interfaceName + <span class="string">&quot;Stub&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; stubClass;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stubClass = ClassHelper.forNameWithThreadContextClassLoader(stub);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!interfaceClass.isAssignableFrom(stubClass)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;The stub implementation class &quot;</span> + stubClass.getName() + <span class="string">&quot; not implement interface &quot;</span> + interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    checkApplication();</span><br><span class="line">    checkRegistry();</span><br><span class="line">    checkProtocol();</span><br><span class="line">    appendProperties(<span class="keyword">this</span>);</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line">    <span class="comment">//服务发现的path，缺省为接口名</span></span><br><span class="line">    <span class="keyword">if</span> (path == <span class="keyword">null</span> || path.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        path = interfaceName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成url   </span></span><br><span class="line">  <span class="comment">//  dubbo://172.17.8.254:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;bind.ip=172.17.8.254&amp;bind.port=20880&amp;channel.readonly.sent=true&amp;codec=dubbo&amp;dubbo=2.0.0&amp;generic=false&amp;heartbeat=60000&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=6755&amp;qos.port=22222&amp;side=provider&amp;timestamp=1522308929779</span></span><br><span class="line">    <span class="comment">//host由this.findConfigedHosts(protocolConfig, registryURLs, map); 取 dubbo:protocol host，没有的话取本地ip 并且设置到bind.ip</span></span><br><span class="line">     <span class="comment">// port由this.findConfigedPorts(protocolConfig, name, map);取 dubbo:protocol port，没有的话取本地ip 并且设置到bind.port</span></span><br><span class="line">    <span class="comment">//拼接registry:协议，registryURLs</span></span><br><span class="line">    doExportUrls();</span><br><span class="line">    <span class="comment">//转化成ProviderModel注册</span></span><br><span class="line">    ProviderModel providerModel = <span class="keyword">new</span> ProviderModel(getUniqueServiceName(), <span class="keyword">this</span>, ref);</span><br><span class="line">    ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doExportUrlsFor1Protocol部分重要源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (URL registryURL : registryURLs) &#123;</span><br><span class="line">        url = url.addParameterIfAbsent(<span class="string">&quot;dynamic&quot;</span>, registryURL.getParameter(<span class="string">&quot;dynamic&quot;</span>));</span><br><span class="line">        URL monitorUrl = loadMonitor(registryURL);</span><br><span class="line">        <span class="keyword">if</span> (monitorUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Register dubbo service &quot;</span> + interfaceClass.getName() + <span class="string">&quot; url &quot;</span> + url + <span class="string">&quot; to registry &quot;</span> + registryURL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过动态代理工厂生成实现类调用器Invoker, Invoker相当于动态代理类</span></span><br><span class="line">        <span class="comment">// private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();</span></span><br><span class="line">        <span class="comment">//默认是JavassistProxyFactory</span></span><br><span class="line">        <span class="comment">//ref指的是service类这里就会被代理成一个Invoker类</span></span><br><span class="line">        Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class="line">        DelegateProviderMetaDataInvoker wrapperInvoker = <span class="keyword">new</span> DelegateProviderMetaDataInvoker(invoker, <span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span></span><br><span class="line">        <span class="comment">//ProtocolListenerWrapper-&gt;ProtocolFilterWrapper-&gt;RegistryProtocol，实际最后是DubboProtocol，这里是因为SPI，SPI比较复杂，后面阐述</span></span><br><span class="line">        Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class="line">        exporters.add(exporter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>incubator-dubbo/dubbo-rpc/dubbo-rpc-api/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.rpc.ProxyFactory</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stub</span>=<span class="string">com.alibaba.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper</span></span><br><span class="line"><span class="attr">jdk</span>=<span class="string">com.alibaba.dubbo.rpc.proxy.jdk.JdkProxyFactory</span></span><br><span class="line"><span class="attr">javassist</span>=<span class="string">com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory</span></span><br></pre></td></tr></table></figure><h2 id="proxy-服务代理层"><a href="#proxy-服务代理层" class="headerlink" title="proxy 服务代理层"></a>proxy 服务代理层</h2><h3 id="JavassistProxyFactory源码分析"><a href="#JavassistProxyFactory源码分析" class="headerlink" title="JavassistProxyFactory源码分析"></a>JavassistProxyFactory源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyFactory</span> <span class="keyword">extends</span> <span class="title">AbstractProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class="keyword">new</span> InvokerInvocationHandler(invoker));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 包含&#x27;$&#x27;无法处理</span></span><br><span class="line">        <span class="keyword">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class="string">&#x27;$&#x27;</span>) &lt; <span class="number">0</span> ? proxy.getClass() : type);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      Object[] arguments)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProxyInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T proxy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractProxyInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (proxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;proxy == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;interface == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!type.isInstance(proxy)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(proxy.getClass().getName() + <span class="string">&quot; not implement interface &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.proxy = proxy;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(e.getTargetException());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Failed to invoke remote proxy method &quot;</span> + invocation.getMethodName() + <span class="string">&quot; to &quot;</span> + getUrl() + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInterface() + <span class="string">&quot; -&gt; &quot;</span> + (getUrl() == <span class="keyword">null</span> ? <span class="string">&quot; &quot;</span> : getUrl().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegateProviderMetaDataInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Invoker&lt;T&gt; invoker;</span><br><span class="line">    <span class="keyword">private</span> ServiceConfig metadata;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelegateProviderMetaDataInvoker</span><span class="params">(Invoker&lt;T&gt; invoker,ServiceConfig metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.invoker = invoker;</span><br><span class="line">        <span class="keyword">this</span>.metadata = metadata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.getInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.getUrl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.isAvailable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        invoker.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceConfig <span class="title">getMetadata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> metadata;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>incubator-dubbo/dubbo-rpc/dubbo-rpc-dubbo/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo</span>=<span class="string">com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol</span></span><br></pre></td></tr></table></figure><h2 id="protocol-远程调用层"><a href="#protocol-远程调用层" class="headerlink" title="protocol 远程调用层"></a>protocol 远程调用层</h2><h3 id="DubboProtocol源码分析"><a href="#DubboProtocol源码分析" class="headerlink" title="DubboProtocol源码分析"></a>DubboProtocol源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    URL url = invoker.getUrl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// url转化为com.alibaba.dubbo.demo.DemoService:20880</span></span><br><span class="line">    String key = serviceKey(url);</span><br><span class="line">    <span class="comment">//DelegateProviderMetaDataInvoker封装到DubboExporter</span></span><br><span class="line">    DubboExporter&lt;T&gt; exporter = <span class="keyword">new</span> DubboExporter&lt;T&gt;(invoker, key, exporterMap);</span><br><span class="line">    <span class="comment">//缓存起来，每次被调用的时候直接使用</span></span><br><span class="line">    exporterMap.put(key, exporter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//export an stub service for dispatching event</span></span><br><span class="line">    Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);</span><br><span class="line">    Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice) &#123;</span><br><span class="line">        String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);</span><br><span class="line">        <span class="keyword">if</span> (stubServiceMethods == <span class="keyword">null</span> || stubServiceMethods.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="keyword">new</span> IllegalStateException(<span class="string">&quot;consumer [&quot;</span> + url.getParameter(Constants.INTERFACE_KEY) +</span><br><span class="line">                        <span class="string">&quot;], has set stubproxy support event ,but no stub methods founded.&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//server = Exchangers.bind(url, requestHandler);</span></span><br><span class="line">    openServer(url);</span><br><span class="line">    optimizeSerialization(url);</span><br><span class="line">    <span class="keyword">return</span> exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>openServer最后是调用了<code>server = Exchangers.bind(url, requestHandler)</code>后文会详细说明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboExporter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractExporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Exporter&lt;?&gt;&gt; exporterMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboExporter</span><span class="params">(Invoker&lt;T&gt; invoker, String key, Map&lt;String, Exporter&lt;?&gt;&gt; exporterMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(invoker);</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.exporterMap = exporterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.unexport();</span><br><span class="line">        exporterMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于SPI可以参考</p><p><a href="http://www1350.github.io/#post/114">http://www1350.github.io/#post/114</a></p><h3 id="Exporter"><a href="#Exporter" class="headerlink" title="Exporter"></a>Exporter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Exporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get invoker.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> invoker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * unexport.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;</span></span><br><span class="line"><span class="comment">     * getInvoker().destroy();</span></span><br><span class="line"><span class="comment">     * &lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unexport</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Invoker"><a href="#Invoker" class="headerlink" title="Invoker"></a>Invoker</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get service interface.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> service interface.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * invoke.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get url.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> url.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">URL <span class="title">getUrl</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * is available.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> available.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * destroy.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图阐述了这个过程，但是并不是直接调用DubboProtocol，而是RegistryProtocol，这个后面阐述。</p><p><img src="https://user-images.githubusercontent.com/7789698/38093235-e75677b8-339c-11e8-9165-58b6380f68bf.png" alt="sequencediagram133"></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javassist</title>
      <link href="/hexo/post/2e60fe2e.html"/>
      <url>/hexo/post/2e60fe2e.html</url>
      
        <content type="html"><![CDATA[<p>java字节码被存储在一个叫做类文件的二进制文件。CtClass的对象代表一个类文件。ClassPool是存放CtClass的hash列表，用类名做key，如果CtClass没发现get()会读取一个class建造一个新的类记录到hash表并返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(&quot;test.Rectangle&quot;);</span><br><span class="line">cc.setSuperclass(pool.get(&quot;test.Point&quot;));</span><br><span class="line">byte[] b = cc.toBytecode();</span><br><span class="line">Class aClass = cc.toClass();</span><br><span class="line">cc.writeFile();</span><br></pre></td></tr></table></figure><p>如果系统使用多个类装载器，getDefault()只能搜索当前jvm的路径，可能加载不到对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool.insertClassPath(new ClassClassPath(this.getClass()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">pool.insertClassPath(&quot;/usr/local/javalib&quot;);</span><br></pre></td></tr></table></figure><p>甚至你可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">ClassPath cp = new URLClassPath(&quot;www.javassist.org&quot;, 80, &quot;/java/&quot;, &quot;org.javassist.&quot;);</span><br><span class="line">pool.insertClassPath(cp);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ClassPool cp = ClassPool.getDefault();</span><br><span class="line">byte[] b = a byte array;</span><br><span class="line">String name = class name;</span><br><span class="line">cp.insertClassPath(new ByteArrayClassPath(name, b));</span><br><span class="line">CtClass cc = cp.get(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ClassPool cp = ClassPool.getDefault();</span><br><span class="line">InputStream ins = an input stream for reading a class file;</span><br><span class="line">CtClass cc = cp.makeClass(ins);</span><br></pre></td></tr></table></figure><p>一个新类可以被定义为一个现有的类的一个副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(&quot;Point&quot;);</span><br><span class="line">cc.setName(&quot;Pair&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Hello &#123;</span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(&quot;Hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        ClassPool cp = ClassPool.getDefault();</span><br><span class="line">        CtClass cc = cp.get(&quot;Hello&quot;);</span><br><span class="line">        CtMethod m = cc.getDeclaredMethod(&quot;say&quot;);</span><br><span class="line">        m.insertBefore(&quot;&#123; System.out.println(\&quot;Hello.say():\&quot;); &#125;&quot;);</span><br><span class="line">        Class c = cc.toClass();</span><br><span class="line">        Hello h = (Hello)c.newInstance();</span><br><span class="line">        h.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于内省<br><a href="http://jboss-javassist.github.io/javassist/tutorial/tutorial2.html#intro">http://jboss-javassist.github.io/javassist/tutorial/tutorial2.html#intro</a></p><p>$0, $1, $2, … | 参数<br>$args | 数组参数Object[]<br>$$ | 所有参数m($$) 相当于m($1,$2,…)<br>$cflow(…) | cflow variable<br>$r | 结果类型.<br>$w | The wrapper type. It is used in a cast expression.<br>$_ | 结果值<br>$sig | An array of java.lang.Class objects representing the formal parameter types.<br>$type | A java.lang.Class object representing the formal result type.<br>$class | A java.lang.Class object representing the class currently edited.</p><h4 id="0-1-2-…"><a href="#0-1-2-…" class="headerlink" title="$0, $1, $2, …"></a>$0, $1, $2, …</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    int x, y;</span><br><span class="line">    void move(int dx, int dy) &#123; x += dx; y += dy; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(&quot;Point&quot;);</span><br><span class="line">CtMethod m = cc.getDeclaredMethod(&quot;move&quot;);</span><br><span class="line">m.insertBefore(&quot;&#123; System.out.println($1); System.out.println($2); &#125;&quot;);</span><br><span class="line">cc.writeFile();</span><br></pre></td></tr></table></figure><p>结果》</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    int x, y;</span><br><span class="line">    void move(int dx, int dy) &#123;</span><br><span class="line">        &#123; System.out.println(dx); System.out.println(dy); &#125;</span><br><span class="line">        x += dx; y += dy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cflow"><a href="#cflow" class="headerlink" title="$cflow"></a>$cflow</h4><h4 id="w"><a href="#w" class="headerlink" title="$w"></a>$w</h4><p>Integer i = ($w)5;</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 字节码 </tag>
            
            <tag> Javassist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取方法参数名</title>
      <link href="/hexo/post/a3cd3679.html"/>
      <url>/hexo/post/a3cd3679.html</url>
      
        <content type="html"><![CDATA[<p>通过spring的asm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = CarServiceImpl.class.getMethods();</span><br><span class="line">        LocalVariableTableParameterNameDiscoverer local=<span class="keyword">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class="line">        String[] params=local.getParameterNames( methods[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(String param: params)&#123;</span><br><span class="line">            System.out.println(param);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>通过javassist</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.absurd.rick.service.impl.CarServiceImpl&quot;</span>);</span><br><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(clazz.getName());</span><br><span class="line"></span><br><span class="line">Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method mt:declaredMethods) &#123;</span><br><span class="line">    String modifier = Modifier.toString(mt.getModifiers());</span><br><span class="line">    Class&lt;?&gt; returnType = mt.getReturnType();</span><br><span class="line">    String name = mt.getName();</span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = mt.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;\n&quot;</span>+modifier+<span class="string">&quot; &quot;</span>+returnType.getName()+<span class="string">&quot; &quot;</span>+name+<span class="string">&quot; (&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//CtMethod[] declaredMethods1 = cc.getDeclaredMethods();</span></span><br><span class="line">    CtMethod ctm = cc.getDeclaredMethod(name);</span><br><span class="line">    MethodInfo methodInfo = ctm.getMethodInfo();</span><br><span class="line">    CodeAttribute codeAttribute = methodInfo.getCodeAttribute();</span><br><span class="line">    LocalVariableAttribute attribute = (LocalVariableAttribute)codeAttribute.getAttribute(LocalVariableAttribute.tag);</span><br><span class="line">    <span class="keyword">int</span> pos = Modifier.isStatic(ctm.getModifiers()) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ctm.getParameterTypes().length;i++) &#123;</span><br><span class="line">        System.out.print(parameterTypes[i]+<span class="string">&quot; &quot;</span>+attribute.variableName(i+pos));</span><br><span class="line">        <span class="keyword">if</span> (i&lt;ctm.getParameterTypes().length-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exceptionTypes = mt.getExceptionTypes();</span><br><span class="line">    <span class="keyword">if</span> (exceptionTypes.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot; throws &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; cl:exceptionTypes) &#123;</span><br><span class="line">            System.out.print(cl.getName());</span><br><span class="line">            <span class="keyword">if</span> (j&lt;exceptionTypes.length-<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从源码了解spring bean实例化过程</title>
      <link href="/hexo/post/60402e58.html"/>
      <url>/hexo/post/60402e58.html</url>
      
        <content type="html"><![CDATA[<h2 id="初始化示例"><a href="#初始化示例" class="headerlink" title="初始化示例"></a>初始化示例</h2><p>我们先来看下spring如何手动初始化一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassPathResource res = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">XmlBeanDefinitionReader reader = <span class="keyword">new</span> XmlBeanDefinitionReader(factory);</span><br><span class="line">reader.loadBeanDefinitions(res);</span><br><span class="line">User user=(User) factory.getBean(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/3095882-5ff18c4b78b18301.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h2 id="spring源码解析"><a href="#spring源码解析" class="headerlink" title="spring源码解析"></a>spring源码解析</h2><p>所以我们先从DefaultListableBeanFactory开始了解</p><h3 id="AbstractBeanFactory"><a href="#AbstractBeanFactory" class="headerlink" title="AbstractBeanFactory"></a>AbstractBeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> doGetBean(name, requiredType, args, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>1.去掉&amp;开头</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">transformedBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> canonicalName(BeanFactoryUtils.transformedBeanName(name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.如果是单例且存在，就直接取过来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object bean;</span><br><span class="line"><span class="comment">//拿到缓存的单例实例</span></span><br><span class="line">Object sharedInstance = getSingleton(beanName);</span><br><span class="line"><span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">....</span><br><span class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.不存在单例缓存里面却处于创建状态，可能是循环引用，抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//可能是一个循环引用，因为拿不到bean但是却处于创建状态</span></span><br><span class="line"><span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">              <span class="comment">//Requested bean is currently in creation: Is there an unresolvable circular reference?</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4.在父BeanFactory查找</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line"><span class="comment">//本beanfactory找不到</span></span><br><span class="line"><span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line"><span class="comment">// 找不到拿原始名去找</span></span><br><span class="line">String nameToLookup = originalBeanName(name);</span><br><span class="line"><span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line"><span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line"><span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>5.创建标记，（用于清除）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">markBeanAsCreated(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6.寻找bean定义信息，并针对bean定义进行验证</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">checkMergedBeanDefinition(mbd, beanName, args);</span><br></pre></td></tr></table></figure><ul><li>7.处理依赖信息，这里会针对xml定义中的depends-on进行处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String[] dependsOn = mbd.getDependsOn();</span><br><span class="line"><span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (String dependsOnBean : dependsOn) &#123;</span><br><span class="line"><span class="keyword">if</span> (isDependent(beanName, dependsOnBean)) &#123;</span><br><span class="line">....</span><br><span class="line">registerDependentBean(dependsOnBean, beanName);</span><br><span class="line">getBean(dependsOnBean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体通过这个私有方法来解决依赖的<br>假设A依赖于B，那么在创建A之前，必须保证B先被创建。<br>在创建了B之后，这里会进行依赖信息存储。后面在递归调用一下，不过依赖关系反过来。<br>dependentBeanMap放 A-&gt;［B,C,D］ （A所依赖的B,C,D）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDependent</span><span class="params">(String beanName, String dependentBeanName, Set&lt;String&gt; alreadySeen)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (alreadySeen != <span class="keyword">null</span> &amp;&amp; alreadySeen.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">String canonicalName = canonicalName(beanName);</span><br><span class="line">Set&lt;String&gt; dependentBeans = <span class="keyword">this</span>.dependentBeanMap.get(canonicalName);</span><br><span class="line"><span class="keyword">if</span> (dependentBeans == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dependentBeans.contains(dependentBeanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String transitiveDependency : dependentBeans) &#123;</span><br><span class="line"><span class="keyword">if</span> (alreadySeen == <span class="keyword">null</span>) &#123;</span><br><span class="line">alreadySeen = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">&#125;</span><br><span class="line">alreadySeen.add(beanName);</span><br><span class="line"><span class="keyword">if</span> (isDependent(transitiveDependency, dependentBeanName, alreadySeen)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单例模式就调用getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例</span></span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">....</span><br><span class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">              ....</span><br><span class="line"><span class="comment">//private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;String, Object&gt;(256);</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">....</span><br><span class="line">beforeSingletonCreation(beanName);</span><br><span class="line">....</span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line">....</span><br><span class="line">addSingleton(beanName, singletonObject);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型模式，来一次创一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line">prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他模式，比如scope=request</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">String scopeName = mbd.getScope();</span><br><span class="line"><span class="comment">//private final Map&lt;String, Scope&gt; scopes = new LinkedHashMap&lt;String, Scope&gt;(8);</span></span><br><span class="line"><span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">....</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Object scopedInstance = scope.get(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>8.无论哪种模式都会进入AbstractAutowireCapableBeanFactory的createBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)</p><p>类会被包装成一个RootBeanDefinition</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">              ....</span><br><span class="line">RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"><span class="comment">// 解析beanDefinition，以确保bean定义中的class可以被正确解析，这里拷贝一个是为了防止多线程修改</span></span><br><span class="line">Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"><span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备和验证配置的方法注入，若验证失败抛出BeanDefinitionValidationException</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mbdToUse.prepareMethodOverrides();</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 如果实现了InstantiationAwareBeanPostProcessor就先postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)-&gt;postProcessAfterInitialization(Object bean, String beanName)</span></span><br><span class="line">Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beanInstance;</span><br></pre></td></tr></table></figure><ul><li>9.Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//反射出类</span></span><br><span class="line">instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">&#125;            </span><br><span class="line"><span class="keyword">final</span> Object bean = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedInstance() : <span class="keyword">null</span>);</span><br><span class="line">Class&lt;?&gt; beanType = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedClass() : <span class="keyword">null</span>);</span><br><span class="line">mbd.resolvedTargetType = beanType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步，</span></span><br><span class="line"><span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//获取所有MergedBeanDefinitionPostProcessor，调用一遍postProcessMergedBeanDefinition</span></span><br><span class="line">               <span class="comment">//找出所有的字段或者方法上的@Autowired @Value @Inject @PostConstruct注解加入到BeanDefinition</span></span><br><span class="line">applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line">   <span class="comment">//InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation</span></span><br><span class="line">     <span class="comment">//InstantiationAwareBeanPostProcessor#postProcessPropertyValues</span></span><br><span class="line">   populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line"><span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>10.Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                     <span class="comment">//setBeanName#BeanNameAware</span></span><br><span class="line">                     <span class="comment">//-&gt;setBeanClassLoader#BeanClassLoaderAware</span></span><br><span class="line">                     <span class="comment">//-&gt;setBeanFactory#BeanFactoryAware</span></span><br><span class="line">invokeAwareMethods(beanName, bean);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">invokeAwareMethods(beanName, bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object wrappedBean = bean;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">                  <span class="comment">//-&gt;postProcessBeforeInitialization#BeanPostProcessor</span></span><br><span class="line">wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                      <span class="comment">//-&gt;afterPropertiesSet#InitializingBean</span></span><br><span class="line">invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">                  <span class="comment">//-&gt;postProcessAfterInitialization#BeanPostProcessor</span></span><br><span class="line">wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> wrappedBean;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareMethods</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware) &#123;</span><br><span class="line">((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeInitMethods</span><span class="params">(String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isInitializingBean = (bean <span class="keyword">instanceof</span> InitializingBean);</span><br><span class="line"><span class="keyword">if</span> (isInitializingBean &amp;&amp; (mbd == <span class="keyword">null</span> || !mbd.isExternallyManagedInitMethod(<span class="string">&quot;afterPropertiesSet&quot;</span>))) &#123;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Object&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line"><span class="keyword">throw</span> pae.getException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">String initMethodName = mbd.getInitMethodName();</span><br><span class="line"><span class="keyword">if</span> (initMethodName != <span class="keyword">null</span> &amp;&amp; !(isInitializingBean &amp;&amp; <span class="string">&quot;afterPropertiesSet&quot;</span>.equals(initMethodName)) &amp;&amp;</span><br><span class="line">!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>10.destroyBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyBean</span><span class="params">(Object existingBean)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">new</span> DisposableBeanAdapter(existingBean, getBeanPostProcessors(), getAccessControlContext()).destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="keyword">this</span>.beanPostProcessors)) &#123;</span><br><span class="line">        <span class="comment">//获取所有DestructionAwareBeanPostProcessor 调用postProcessBeforeDestruction</span></span><br><span class="line">        <span class="comment">//@PreDestroy</span></span><br><span class="line"><span class="keyword">for</span> (DestructionAwareBeanPostProcessor processor : <span class="keyword">this</span>.beanPostProcessors) &#123;</span><br><span class="line">processor.postProcessBeforeDestruction(<span class="keyword">this</span>.bean, <span class="keyword">this</span>.beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用DisposableBean#destroy</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.invokeDisposableBean) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Invoking destroy() on bean with name &#x27;&quot;</span> + <span class="keyword">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Object&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">((DisposableBean) bean).destroy();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, acc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">((DisposableBean) bean).destroy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">String msg = <span class="string">&quot;Invocation of destroy method failed on bean with name &#x27;&quot;</span> + <span class="keyword">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">         <span class="comment">//xml的destroy-method</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">invokeCustomDestroyMethod(<span class="keyword">this</span>.destroyMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethodName != <span class="keyword">null</span>) &#123;</span><br><span class="line">Method methodToCall = determineDestroyMethod();</span><br><span class="line"><span class="keyword">if</span> (methodToCall != <span class="keyword">null</span>) &#123;</span><br><span class="line">invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitAndDestroySeqBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>,<span class="title">DisposableBean</span>,<span class="title">BeanPostProcessor</span>,<span class="title">InstantiationAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitAndDestroySeqBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PostConstruct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterPropertiesSet()#InitializingBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init-method&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PreDestroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy()#DisposableBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy-method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeforeInitialization(Object bean, String beanName)#BeanPostProcessor&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessAfterInitialization(Object bean, String beanName)#BeanPostProcessor&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)#InstantiationAwareBeanPostProcessor&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessAfterInstantiation(Object bean, String beanName)#InstantiationAwareBeanPostProcessor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, PropertyDescriptor[] pds,</span></span></span><br><span class="line"><span class="params"><span class="function">            Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds,\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;            Object bean, String beanName)#InstantiationAwareBeanPostProcessor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20170308</span>:<span class="number">11</span>:<span class="number">34</span>:<span class="number">52.866</span> [main] INFO   Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@49c43f4e, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@290dbf45, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@<span class="number">12028586</span>, org.springframework.test.context.support.DirtiesContextTestExecutionListener@17776a8, org.springframework.test.context.transaction.TransactionalTestExecutionListener@69a10787, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@2d127a61]<span class="number">20170308</span>:<span class="number">11</span>:<span class="number">34</span>:<span class="number">52.972</span> [main] INFO   Loading XML bean definitions from URL [file:/Users/dsc/IdeaProjects/firDemo/firdemo/web/target/classes/init.xml]</span><br><span class="line"><span class="number">20170308</span>:<span class="number">11</span>:<span class="number">34</span>:<span class="number">53.105</span> [main] INFO   Refreshing org.springframework.context.support.GenericApplicationContext@2b4a2ec7: startup date [Wed Mar 08 <span class="number">11</span>:<span class="number">34</span>:<span class="number">53</span> CST <span class="number">2017</span>]; root of context hierarchy</span><br><span class="line">构造方法</span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line">afterPropertiesSet()#InitializingBean</span><br><span class="line">init-method</span><br><span class="line">beanName)#InstantiationAwareBeanPostProcessor**<span class="function">guavaCache</span></span><br><span class="line"><span class="function"><span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span>#InstantiationAwareBeanPostProcessor**guavaCache</span></span><br><span class="line"><span class="function"><span class="title">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, PropertyDescriptor[] pds,</span></span></span><br><span class="line"><span class="params"><span class="function">            Object bean, String beanName)</span>#InstantiationAwareBeanPostProcessor**guavaCache</span></span><br><span class="line"><span class="function"><span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span>#BeanPostProcessor**guavaCache</span></span><br><span class="line"><span class="function">afterPropertiesSet#InitializingBean**guavaCache</span></span><br><span class="line"><span class="function"><span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span>#BeanPostProcessor**guavaCache</span></span><br><span class="line"><span class="function">20170308:11:34:53.286 [Thread-0] INFO   Closing org.springframework.context.support.GenericApplicationContext@2b4a2ec7: startup date [Wed Mar 08 11:34:53 CST 2017]</span>; root of context hierarchy</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line">destroy()#DisposableBean</span><br><span class="line">destroy-method</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="Spring生命周期"><a href="#Spring生命周期" class="headerlink" title="Spring生命周期"></a>Spring生命周期</h2><p>通过源码我们清晰的看到</p><ol><li>拿到应用中所有实现了InstantiationAwareBeanPostProcessor接口的类，就先postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)-&gt;postProcessAfterInitialization(Object bean, String beanName)</li></ol><p>如果已经能拿到相应的bean则直接返回不进行下面的操作</p><ol start="2"><li><p><strong>反射实例化bean</strong></p></li><li><p>拿到应用中所有实现了InstantiationAwareBeanPostProcessor调用postProcessAfterInstantiation，然后调用postProcessPropertyValues</p></li><li><p>本bean如果</p></li></ol><ul><li><p>实现了BeanNameAware就调用setBeanName把bean名字放入</p></li><li><p>实现了BeanClassLoaderAware就调用setBeanClassLoader把ClassLoader放入</p></li><li><p>实现了BeanFactoryAware调用setBeanFactory把BeanFactory放入</p></li></ul><ol start="5"><li>拿到应用中所有实现了BeanPostProcessor接口的类，调用postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)拿到bean (@PostConstruct注解的方法)</li><li>本bean如果实现了InitializingBean接口，则调用afterPropertiesSet</li><li>本bean如果在xml里面配置了init-method则调用</li><li>拿到应用中所有实现了BeanPostProcessor接口的类，调用postProcessAfterInitialization(Object bean, String beanName) 拿到bean返回，就是最终在容器里面的bean</li><li>@PreDestroy注解的方法（获取所有DestructionAwareBeanPostProcessor 调用postProcessBeforeDestruction）</li><li>本bean如果实现了DisposableBean则调用destroy()</li><li>本bean如果在xml里面配置了destroy-method则调用</li></ol><p>刚才反复提到了几个接口，我们来单独看下他们的使用：</p><p>InstantiationAwareBeanPostProcessor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"><span class="function">Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanNameAware接口，通过实现这个接口可以获取到bean的id名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanNameAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanClassLoaderAware接口，可以获取到bean的ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanClassLoaderAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanFactoryAware接口，通过实现这个接口可以获取到beanFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ApplicationContextAware接口，获取ApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContextAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanPostProcessor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"><span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InitializingBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DisposableBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MergedBeanDefinitionPostProcessor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MergedBeanDefinitionPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DestructionAwareBeanPostProcessor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DestructionAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">postProcessBeforeDestruction</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">requiresDestruction</span><span class="params">(Object bean)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij+ JRebel +maven+jetty实现热部署</title>
      <link href="/hexo/post/be301519.html"/>
      <url>/hexo/post/be301519.html</url>
      
        <content type="html"><![CDATA[<p>pom.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;scanIntervalSeconds&gt;1&lt;/scanIntervalSeconds&gt;</span><br><span class="line">        &lt;reload&gt;automatic&lt;/reload&gt;</span><br><span class="line">        &lt;stopPort&gt;9966&lt;/stopPort&gt;</span><br><span class="line">        &lt;stopKey&gt;foo&lt;/stopKey&gt;</span><br><span class="line">        &lt;contextXml&gt;$&#123;project.basedir&#125;/src/main/resources/jetty-context.xml&lt;/contextXml&gt;</span><br><span class="line">        &lt;connectors&gt;</span><br><span class="line">            &lt;connector implementation=&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;&gt;</span><br><span class="line">                &lt;port&gt;8080&lt;/port&gt;</span><br><span class="line">                &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;</span><br><span class="line">            &lt;/connector&gt;</span><br><span class="line">        &lt;/connectors&gt;</span><br><span class="line">        &lt;webAppSourceDirectory&gt;$&#123;basedir&#125;/WebRoot&lt;/webAppSourceDirectory&gt;</span><br><span class="line">        &lt;webAppConfig&gt;</span><br><span class="line">            &lt;contextPath&gt;/absurd&lt;/contextPath&gt;</span><br><span class="line">        &lt;/webAppConfig&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>关于这部分的参数，详见<a href="http://www.importnew.com/17936.html">链接</a></p><p>安装jrebel以及破解见<br><a href="http://blog.csdn.net/mark_sssss/article/details/51259117">IDEA破解</a><br><a href="http://my.oschina.net/boltwu/blog/676606?p=%3C!--swig%EF%BF%BC2--%3E">jrebel破解</a></p><p><img src="https://cloud.githubusercontent.com/assets/7789698/18374922/c4e9734c-7683-11e6-9c79-e0a8d53ddbf5.png" alt="qq 20160909115113"><br><img src="https://cloud.githubusercontent.com/assets/7789698/18374928/d61dfc78-7683-11e6-9781-0d567d9e8bc1.png" alt="qq 20160909115148"></p><p>${project.basedir}/src/main/resources/jetty-context.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Configure PUBLIC &quot;-//Mort Bay Consulting//DTD Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&gt;</span><br><span class="line">&lt;Configure class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&gt;</span><br><span class="line">    &lt;Call name=&quot;setAttribute&quot;&gt;</span><br><span class="line">        &lt;Arg&gt;org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern&lt;/Arg&gt;</span><br><span class="line">        &lt;Arg&gt;.*/.*jsp-api-[^/]\.jar$|./.*jsp-[^/]\.jar$|./.*taglibs[^/]*\.jar$&lt;/Arg&gt;</span><br><span class="line">    &lt;/Call&gt;</span><br><span class="line">&lt;/Configure&gt;</span><br></pre></td></tr></table></figure><p>ctrl+shift+f9编译当前class<br>ctrl+f9编译全部</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决emoji存储</title>
      <link href="/hexo/post/1e7e0292.html"/>
      <url>/hexo/post/1e7e0292.html</url>
      
        <content type="html"><![CDATA[<p>1.utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本。</p><p>2.修改mysql配置文件my.cnf（windows为my.ini）<br>my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake = FALSE</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在mysql中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set character_set_client = utf8mb4;</span><br><span class="line">set character_set_connection = utf8mb4;</span><br><span class="line">set character_set_database = utf8mb4;</span><br><span class="line">set character_set_results = utf8mb4;</span><br><span class="line">set character_set_server = utf8mb4;</span><br></pre></td></tr></table></figure><p>重启mysql<br>Linux:<code>service mysql restart</code></p><p>3.修改database、table和column字符集。参考以下语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</span><br><span class="line">ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">ALTER TABLE table_name MODIFY COLUMN column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;</span><br></pre></td></tr></table></figure><p>查看是否修改成功<br><code>SHOW VARIABLES WHERE Variable_name LIKE &#39;character\_set\_%&#39; OR Variable_name LIKE &#39;collation%&#39;;  </code></p><p>4.如果你用的是java服务器，升级或确保你的mysql connector版本高于5.1.13，否则仍然无法使用utf8mb4</p><p>5.jdbc的url必须&amp;characterEncoding=utf8</p><p>6.备份数据库的时候<br><code>mysqldump -uroot -p --default-character-set=utf8mb4 --hex-blob databasename &gt; databasename.sql</code></p><p><strong>注：在navicat里面会看到乱码</strong><br>可选：</p><p>7.解决不兼容问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmojiUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] ios5emoji ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] ios4emoji ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] androidnullemoji ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] adsbuniemoji;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initios5emoji</span><span class="params">(String[] i5emj,String[] i4emj,String[] adnullemoji,String[] adsbemoji)</span></span>&#123;</span><br><span class="line">        ios5emoji = i5emj;</span><br><span class="line">        ios4emoji = i4emj;</span><br><span class="line">        androidnullemoji = adnullemoji;</span><br><span class="line">        adsbuniemoji = adsbemoji;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在ios上将ios5转换为ios4编码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transToIOS4emoji</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replaceEach(src, ios5emoji, ios4emoji);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在ios上将ios4转换为ios5编码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transToIOS5emoji</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replaceEach(src, ios4emoji, ios5emoji);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在android上将ios5的表情符替换为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transToAndroidemojiNull</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replaceEach(src, ios5emoji, androidnullemoji);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在android上将ios5的表情符替换为SBUNICODE</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transToAndroidemojiSB</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replaceEach(src, ios5emoji, adsbuniemoji);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在android上将SBUNICODE的表情符替换为ios5</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transSBToIOS5emoji</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replaceEach(src, adsbuniemoji, ios5emoji);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//eg. param: 0xF0 0x9F 0x8F 0x80</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hexstr2String</span><span class="params">(String hexstr)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = hexstr2bytes(hexstr);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(b, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//eg. param: E018</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sbunicode2utfString</span><span class="params">(String sbhexstr)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = sbunicode2utfbytes(sbhexstr);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(b, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//eg. param: 0xF0 0x9F 0x8F 0x80</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexstr2bytes(String hexstr)&#123;</span><br><span class="line">        String[] hexstrs = hexstr.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[hexstrs.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hexstrs.length;i++)&#123;</span><br><span class="line">            b[i] = hexStringToByte(hexstrs[i].substring(<span class="number">2</span>))[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//eg. param: E018</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] sbunicode2utfbytes(String sbhexstr) <span class="keyword">throws</span> UnsupportedEncodingException&#123;</span><br><span class="line">        <span class="keyword">int</span> inthex = Integer.parseInt(sbhexstr, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">char</span>[] schar = &#123;(<span class="keyword">char</span>)inthex&#125;;</span><br><span class="line">        <span class="keyword">byte</span>[] b = (<span class="keyword">new</span> String(schar)).getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexStringToByte(String hex) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = (hex.length() / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">        <span class="keyword">char</span>[] achar = hex.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = i * <span class="number">2</span>;</span><br><span class="line">            result[i] = (<span class="keyword">byte</span>) (toByte(achar[pos]) &lt;&lt; <span class="number">4</span> | toByte(achar[pos + <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">toByte</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) <span class="string">&quot;0123456789ABCDEF&quot;</span>.indexOf(c);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将str中的emoji表情转为byte数组</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">resolveToByteFromEmoji</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern</span><br><span class="line">                .compile(<span class="string">&quot;[^(\u2E80-\u9FFF\\w\\s`~!@#\\$%\\^&amp;\\*\\(\\)_+-？（）——=\\[\\]&#123;&#125;\\|;。，、《》”：；“！……’:&#x27;\&quot;&lt;,&gt;\\.?/\\\\*)]&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(str);</span><br><span class="line">        StringBuffer sb2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            matcher.appendReplacement(sb2, resolveToByte(matcher.group(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        matcher.appendTail(sb2);</span><br><span class="line">        <span class="keyword">return</span> sb2.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将str中的byte数组类型的emoji表情转为正常显示的emoji表情</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">resolveToEmojiFromByte</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        Pattern pattern2 = Pattern.compile(<span class="string">&quot;&lt;:([[-]\\d*[,]]+):&gt;&quot;</span>);</span><br><span class="line">        Matcher matcher2 = pattern2.matcher(str);</span><br><span class="line">        StringBuffer sb3 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (matcher2.find()) &#123;</span><br><span class="line">            matcher2.appendReplacement(sb3, resolveToEmoji(matcher2.group(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        matcher2.appendTail(sb3);</span><br><span class="line">        <span class="keyword">return</span> sb3.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">resolveToByte</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = str.getBytes();</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; b.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(Byte.valueOf(b[i]).toString() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(Byte.valueOf(b[i]).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;:&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">resolveToEmoji</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str = str.replaceAll(<span class="string">&quot;&lt;:&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;:&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        String[] s = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[s.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            b[i] = Byte.valueOf(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">byte</span>[] b1 = &#123;-<span class="number">30</span>,-<span class="number">102</span>,-<span class="number">67</span>&#125;; <span class="comment">//ios5 //0xE2 0x9A 0xBD     </span></span><br><span class="line">        <span class="keyword">byte</span>[] b2 = &#123;-<span class="number">18</span>,-<span class="number">128</span>,-<span class="number">104</span>&#125;; <span class="comment">//ios4 //&quot;E018&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] b3 = &#123;-<span class="number">16</span>,-<span class="number">97</span>,-<span class="number">113</span>,-<span class="number">128</span>&#125;;    <span class="comment">//0xF0 0x9F 0x8F 0x80       </span></span><br><span class="line">        <span class="keyword">byte</span>[] b4 = &#123;-<span class="number">18</span>,-<span class="number">112</span>,-<span class="number">86</span>&#125;;         <span class="comment">//E42A  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ios5emoji = <span class="keyword">new</span> String[]&#123;<span class="keyword">new</span> String(b1,<span class="string">&quot;utf-8&quot;</span>),<span class="keyword">new</span> String(b3,<span class="string">&quot;utf-8&quot;</span>)&#125;;</span><br><span class="line">        ios4emoji = <span class="keyword">new</span> String[]&#123;<span class="keyword">new</span> String(b2,<span class="string">&quot;utf-8&quot;</span>),<span class="keyword">new</span> String(b4,<span class="string">&quot;utf-8&quot;</span>)&#125;;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试字符串</span></span><br><span class="line">        <span class="keyword">byte</span>[] testbytes = &#123;<span class="number">105</span>,<span class="number">111</span>,<span class="number">115</span>,-<span class="number">30</span>,-<span class="number">102</span>,-<span class="number">67</span>,<span class="number">32</span>,<span class="number">36</span>,-<span class="number">18</span>,-<span class="number">128</span>,-<span class="number">104</span>,<span class="number">32</span>,<span class="number">36</span>,-<span class="number">16</span>,-<span class="number">97</span>,-<span class="number">113</span>,-<span class="number">128</span>,<span class="number">32</span>,<span class="number">36</span>,-<span class="number">18</span>,-<span class="number">112</span>,-<span class="number">86</span>&#125;;</span><br><span class="line">        String tmpstr = <span class="keyword">new</span> String(testbytes,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(tmpstr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转成ios4的表情</span></span><br><span class="line">        String ios4str = transToIOS5emoji(tmpstr);</span><br><span class="line">        <span class="keyword">byte</span>[] tmp = ios4str.getBytes();</span><br><span class="line">        <span class="comment">//System.out.print(new String(tmp,&quot;utf-8&quot;));        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span> b:tmp)&#123;</span><br><span class="line">            System.out.print(b);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>另：<br>如果你不想重启数据库，可以这样做：</p></blockquote><p>1.表必须是utf8mb4</p><p>2.连接池<br>      <code>  &lt;property name=&quot;connectionInitSqls&quot; value=&quot;set names utf8mb4;&quot;/&gt;</code></p><p>或者每次插入前执行<br><code>set names utf8mb4</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven 笔记</title>
      <link href="/hexo/post/6badd4fd.html"/>
      <url>/hexo/post/6badd4fd.html</url>
      
        <content type="html"><![CDATA[<p>原文地址： <a href="http://www.infoq.com/cn/author/%E8%AE%B8%E6%99%93%E6%96%8C">http://www.infoq.com/cn/author/%E8%AE%B8%E6%99%93%E6%96%8C</a></p><p>这里只是摘录点笔记</p><h2 id="坐标的原则"><a href="#坐标的原则" class="headerlink" title="坐标的原则"></a>坐标的原则</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>滥用坐标、错用坐标的样例比比皆是，在中央仓库中我们能看到SpringFramework有两种坐标，其一是直接使用springframework作为groupId，如springframework:spring-beans:1.2.6，另一种是用org.springframework作为groupId，如org.springframework:spring-beans:2.5。细心看看，前一种方式显得比较随意，后一种方式则是基于域名衍生出来的，显然后者更合理，因为用户能一眼根据域名联想到其Maven坐标，方便寻找。因此新版本的SpringFramework构件都使用org.springframework作为groupId。由这个例子我们可以看到坐标规划一个原则是基于项目域名衍生。其实很多流行的开源项目都破坏了这个原则，例如JUnit，这是因为Maven社区在最开始接受构件并部署到中央仓库的时候，没有很很严格的限制，而对于这些流行的项目来说，一时间更改坐标会影响大量用户，因此也算是个历史遗留问题了。</p><p>还有一个常见的问题是将groupId直接匹配到公司或者组织名称，因为乍一看这是显而易见的。例如组织是zoo.com，有个项目是dog，那有些人就直接使用groupId com.zoo了。如果项目只有一个模块，这是没有什么问题的，但现实世界的项目往往会有很多模块，Maven的一大长处就是通过多模块的方式管理项目。那dog项目可能会有很多模块，我们用坐标的哪个部分来定义模块呢？groupId显然不对，version也不可能是，那只有artifactId。因此要这里有了另外一个原则，用artifactId来定义模块，而不是定义项目。接下来，很显然的，项目就必须用groupId来定义。因此对于dog项目来说，应该使用groupId com.zoo.dog，不仅体现出这是zoo.com下的一个项目，而且可以与该组织下的其他项目如com.zoo.cat区分开来。</p><p>除此之外，artifactId的定义也有最佳实践，我们常常可以看到一个项目有很多的模块，例如api，dao，service，web等等。Maven项目在默认情况下生成的构件，其名称不会是基于artifactId，version和packaging生成的，例如api-1.0.jar，dao-1.0.jar等等，他们不会带有groupId的信息，这会造成一个问题，例如当我们把所有这些构件放到Web容器下的时候，你会发现项目dog有api-1.0.jar，项目cat也有api-1.0.jar，这就造成了冲突。更坏的情况是，dog项目有api-1.0.jar，cat项目有api-2.0.jar，其实两者没什么关系，可当放在一起的时候，却很容易让人混淆。为了让坐标更加清晰，又出现了一个原则，即在定义artiafctId时也加入项目的信息，例如dog项目的api模块，那就使用artifactId dog-api，其他就是dog-dao，dao-service等等。虽然连字号是不允许出现在Java的包名中的，但Maven没这个限制。现在dog-api-1.0.jar，cat-2.0.jar被放在一起时，就不容易混淆了。</p><p>关于坐标，我们还没谈到version，这里不再详述因为读者可以从Maven: The Complete Guide中找到详细的解释，简言之就是使用这样一个格式：</p><p>&lt;主版本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;-&lt;限定符&gt;<br>其中主版本主要表示大型架构变更，次版本主要表示特性的增加，增量版本主要服务于bug修复，而限定符如alpha、beta等等是用来表示里程碑。当然不是每个项目的版本都要用到这些4个部分，根据需要选择性的使用即可。在此基础上Maven还引入了SNAPSHOT的概念，用来表示活动的开发状态，由于不涉及坐标规划，这里不进行详述。不过有点要提醒的是，由于SNAPSHOT的存在，自己显式地在version中使用时间戳字符串其实没有必要。</p><p>2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;source&gt;1.5&lt;/source&gt;</span><br><span class="line">    &lt;target&gt;1.5&lt;/target&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p> mvn dependency:analyze<br>分析依赖</p><p>最后，还一些重要的POM内容通常被大多数项目所忽略，这些内容不会影响项目的构建，但能方便信息的沟通，它们包括项目URL，开发者信息，SCM信息，持续集成服务器信息等等，这些信息对于开源项目来说尤其重要。对于那些想了解项目的人来说，这些信息能他们帮助找到想要的信息，基于这些信息生成的Maven站点也更有价值。相关的POM配置很简单，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;description&gt;...&lt;/description&gt;</span><br><span class="line">  &lt;url&gt;...&lt;/url&gt;</span><br><span class="line">  &lt;licenses&gt;...&lt;/licenses&gt;</span><br><span class="line">  &lt;organization&gt;...&lt;/organization&gt;</span><br><span class="line">  &lt;developers&gt;...&lt;/developers&gt;</span><br><span class="line">  &lt;issueManagement&gt;...&lt;/issueManagement&gt;</span><br><span class="line">  &lt;ciManagement&gt;...&lt;/ciManagement&gt;</span><br><span class="line">  &lt;mailingLists&gt;...&lt;/mailingLists&gt;</span><br><span class="line">  &lt;scm&gt;...&lt;/scm&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactid&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactid&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactid&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>你会在一个项目中使用不同版本的SpringFramework组件么？答案显然是不会。因此这里就没必要重复写三次<code>&lt;version&gt;2.5&lt;/version&gt;</code>，使用Maven属性将2.5提取出来如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depencencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">depencencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在2.5只出现在一个地方，虽然代码稍微长了点，但重复消失了，日后升级依赖版本的时候，只需要修改一处，而且也能避免漏掉升级某个依赖。</p><p>读者可能已经非常熟悉这个例子了，我这里再啰嗦一遍是为了给后面做铺垫，多模块POM重构的目的和该例一样，也是为了消除重复，模块越多，潜在的重复就越多，重构就越有必要。</p><p>dependencyManagement只会影响现有依赖的配置，但不会引入依赖。例如我们可以在父模块中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段配置不会给任何子模块引入依赖，但如果某个子模块需要使用JUnit和Log4j的时候，我们就可以简化依赖配置成这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以把dependencyManagement放到单独的专门用来管理依赖的POM中，然后在需要使用依赖的模块中通过import scope依赖，就可以引入dependencyManagement。例如可以写这样一个用于依赖管理的POM：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.sample<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample-dependency-infrastructure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我就可以通过非继承的方式来引入这段依赖管理配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.sample<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>sample-dependency-infrastructure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，父模块的POM就会非常干净，由专门的packaging为pom的POM来管理依赖，也契合的面向对象设计中的单一职责原则。此外，我们还能够创建多个这样的依赖管理POM，以更细化的方式管理依赖。这种做法与面向对象设计中使用组合而非继承也有点相似的味道。</p><h2 id="消除多模块插件配置重复"><a href="#消除多模块插件配置重复" class="headerlink" title="消除多模块插件配置重复"></a>消除多模块插件配置重复</h2><p>与dependencyManagement类似的，我们也可以使用pluginManagement元素管理插件。一个常见的用法就是我们希望项目所有模块的使用Maven Compiler Plugin的时候，都使用Java 1.5，以及指定Java源文件编码为UTF-8，这时可以在父模块的POM中如下配置pluginManagement：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段配置会被应用到所有子模块的maven-compiler-plugin中，由于Maven内置了maven-compiler-plugin与生命周期的绑定，因此子模块就不再需要任何maven-compiler-plugin的配置了。</p><p>持续集成？</p><ul><li>只维护一个源码仓库</li><li>让构建自行测试</li><li>每人每天向主干提交代码</li><li>每次提交都应在持续集成机器上构建主干</li><li>保持快速的构建</li><li>在模拟生产环境中测试</li><li>让每个人都能轻易获得最新的可执行文件</li><li>每个人都能看到进度</li><li>自动化部署</li></ul><p>现在，我们希望Maven在integration-test阶段执行所有以IT结尾命名的测试类，配置Maven Surefire Plugin如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>run-integration-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>integration-test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*IT.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应于同样的package生命周期阶段，Maven为jar项目调用了maven-jar-plugin，为war项目调用了maven-war-plugin，换言之，packaging直接影响Maven的构建生命周期。了解这一点非常重要，特别是当你需要自定义打包行为的时候，你就必须知道去配置哪个插件。一个常见的例子就是在打包war项目的时候排除某些web资源文件，这时就应该配置maven-war-plugin如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.jpg<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本专栏的《坐标规划》一文中曾解释过，一个Maven项目只生成一个主构件，当需要生成其他附属构件的时候，就需要用上classifier。源码包和Javadoc包就是附属构件的极佳例子。它们有着广泛的用途，尤其是源码包，当你使用一个第三方依赖的时候，有时候会希望在IDE中直接进入该依赖的源码查看其实现的细节，如果该依赖将源码包发布到了Maven仓库，那么像Eclipse就能通过m2eclipse插件解析下载源码包并关联到你的项目中，十分方便。由于生成源码包是极其常见的需求，因此Maven官方提供了一个插件来帮助用户完成这个任务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似的，生成Javadoc包只需要配置插件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>          </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>为了帮助所有Maven用户更方便的使用Maven中央库中海量的资源，中央仓库的维护者强制要求开源项目提交构件的时候同时提供源码包和Javadoc包。这是个很好的实践，读者也可以尝试在自己所处的公司内部实行，以促进不同项目之间的交流。</p><h2 id="可执行CLI包"><a href="#可执行CLI包" class="headerlink" title="可执行CLI包"></a>可执行CLI包</h2><p>除了前面提到了常规JAR包、WAR包，源码包和Javadoc包，另一种常被用到的包是在命令行可直接运行的CLI（Command Line）包。默认Maven生成的JAR包只包含了编译生成的.class文件和项目资源文件，而要得到一个可以直接在命令行通过java命令运行的JAR文件，还要满足两个条件：</p><p>JAR包中的/META-INF/MANIFEST.MF元数据文件必须包含Main-Class信息。<br>项目所有的依赖都必须在Classpath中。<br>Maven有好几个插件能帮助用户完成上述任务，不过用起来最方便的还是maven-shade-plugin，它可以让用户配置Main-Class的值，然后在打包的时候将值填入/META-INF/MANIFEST.MF文件。关于项目的依赖，它很聪明地将依赖JAR文件全部解压后，再将得到的.class文件连同当前项目的.class文件一起合并到最终的CLI包中，这样，在执行CLI JAR文件的时候，所有需要的类就都在Classpath中了。下面是一个配置样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.juvenxu.mavenbook.HelloWorldCli<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述例子中的，我的Main-Class是com.juvenxu.mavenbook.HelloWorldCli，构建完成后，对应于一个常规的hello-world-1.0.jar文件，我还得到了一个hello-world-1.0-cli.jar文件。细心的读者可能已经注意到了，这里用的是cli这个classifier。最后，我可以通过java -jar hello-world-1.0-cli.jar命令运行程序。</p><p>自定义格式包</p><p>实际的软件项目常常会有更复杂的打包需求，例如我们可能需要为客户提供一份产品的分发包，这个包不仅仅包含项目的字节码文件，还得包含依赖以及相关脚本文件以方便客户解压后就能运行，此外分发包还得包含一些必要的文档。这时项目的源码目录结构大致是这样的：</p><p>pom.xml<br>src/main/java/<br>src/main/resources/<br>src/test/java/<br>src/test/resources/<br>src/main/scripts/<br>src/main/assembly/<br>README.txt<br>除了基本的pom.xml和一般Maven目录之外，这里还有一个src/main/scripts/目录，该目录会包含一些脚本文件如run.sh和run.bat，src/main/assembly/会包含一个assembly.xml，这是打包的描述文件，稍后介绍，最后的README.txt是份简单的文档。</p><p>我们希望最终生成一个zip格式的分发包，它包含如下的一个结构：</p><p>bin/<br>lib/<br>README.txt<br>其中bin/目录包含了可执行脚本run.sh和run.bat，lib/目录包含了项目JAR包和所有依赖JAR，README.txt就是前面提到的文档。</p><p>描述清楚需求后，我们就要搬出Maven最强大的打包插件：maven-assembly-plugin。它支持各种打包文件格式，包括zip、tar.gz、tar.bz2等等，通过一个打包描述文件（该例中是src/main/assembly.xml），它能够帮助用户选择具体打包哪些文件集合、依赖、模块、和甚至本地仓库文件，每个项的具体打包路径用户也能自由控制。如下就是对应上述需求的打包描述文件src/main/assembly.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>README.txt<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/scripts<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/bin<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>run.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>run.bat<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先这个assembly.xml文件的id对应了其最终生成文件的classifier。<br>其次formats定义打包生成的文件格式，这里是zip。因此结合id我们会得到一个名为hello-world-1.0-bin.zip的文件。（假设artifactId为hello-world，version为1.0）<br>dependencySets用来定义选择依赖并定义最终打包到什么目录，这里我们声明的一个depenencySet默认包含所有所有依赖，而useProjectArtifact表示将项目本身生成的构件也包含在内，最终打包至输出包内的lib路径下（由outputDirectory指定）。<br>fileSets允许用户通过文件或目录的粒度来控制打包。这里的第一个fileSet打包README.txt文件至包的根目录下，第二个fileSet则将src/main/scripts下的run.sh和run.bat文件打包至输出包的bin目录下。<br>打包描述文件所支持的配置远超出本文所能覆盖的范围，为了避免读者被过多细节扰乱思维，这里不再展开，读者若有需要可以去参考这份文档。</p><p>最后，我们需要配置maven-assembly-plugin使用打包描述文件，并绑定生命周期阶段使其自动执行打包操作：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/assembly/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行mvn clean package之后，我们就能在target/目录下得到名为hello-world-1.0-bin.zip的分发包了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>netty入门到精通</title>
      <link href="/hexo/post/d38fb5d0.html"/>
      <url>/hexo/post/d38fb5d0.html</url>
      
        <content type="html"><![CDATA[<h1 id="netty3-x"><a href="#netty3-x" class="headerlink" title="netty3.x"></a>netty3.x</h1><p><strong>入门</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Configure the server.</span></span><br><span class="line">    ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap(</span><br><span class="line">            <span class="keyword">new</span> NioServerSocketChannelFactory(</span><br><span class="line">                    Executors.newCachedThreadPool(),</span><br><span class="line">                    Executors.newCachedThreadPool()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up the pipeline factory.</span></span><br><span class="line">    bootstrap.setPipelineFactory(<span class="keyword">new</span> ChannelPipelineFactory() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ChannelPipeline <span class="title">getPipeline</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Channels.pipeline(<span class="keyword">new</span> EchoServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">         bootstrap.setOption(<span class="string">&quot;child.tcpNoDelay&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        bootstrap.setOption(<span class="string">&quot;child.keepAlive&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">....</span><br><span class="line">    <span class="comment">// Bind and start to accept incoming connections.</span></span><br><span class="line">    bootstrap.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelUpstreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            ChannelHandlerContext ctx, MessageEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Send back the received message to the remote peer.</span></span><br><span class="line">        e.getChannel().write(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>精通</strong><br>手册：<a href="http://netty.io/3.7/guide/">http://netty.io/3.7/guide/</a></p><h1 id="netty4-x"><a href="#netty4-x" class="headerlink" title="netty4.x"></a>netty4.x</h1><p><strong>入门</strong><br>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 服务端监听的端口地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> portNumber = <span class="number">7878</span>;</span><br><span class="line"></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">  EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">      b.group(bossGroup, workerGroup);</span><br><span class="line">      b.channel(NioServerSocketChannel.class);</span><br><span class="line">      b.childHandler(<span class="keyword">new</span> HelloServerInitializer());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 服务器绑定端口监听</span></span><br><span class="line">      ChannelFuture f = b.bind(portNumber).sync();</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;init server&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 监听服务器关闭监听</span></span><br><span class="line">      f.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 可以简写为</span></span><br><span class="line">      <span class="comment">/* b.bind(portNumber).sync().channel().closeFuture().sync(); */</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      bossGroup.shutdownGracefully();</span><br><span class="line">      workerGroup.shutdownGracefully();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以(&quot;\n&quot;)为结尾分割的 解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;framer&quot;</span>, <span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">8192</span>, Delimiters.lineDelimiter()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串解码 和 编码</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自己的逻辑Handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;handler&quot;</span>, <span class="keyword">new</span> HelloServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 收到消息直接打印输出</span></span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot; Say : &quot;</span> + msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回客户端消息 - 我已经接收到了你的消息</span></span><br><span class="line">        ctx.writeAndFlush(<span class="string">&quot;我Received your message &quot;</span>+msg+<span class="string">&quot;!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 覆盖 channelActive 方法 在channel被启用的时候触发 (在建立连接的时候)</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * channelActive 和 channelInActive 在后面的内容中讲述，这里先不做详细的描述</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="comment">/*    @Override</span></span><br><span class="line"><span class="comment">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(&quot;RamoteAddress : &quot; + ctx.channel().remoteAddress() + &quot; active !&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ctx.writeAndFlush( &quot;Welcome to &quot; + InetAddress.getLocalHost().getHostName() + &quot; service!\n&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        super.channelActive(ctx);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">7878</span>;</span><br><span class="line"></span><br><span class="line">    EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        b.group(group)</span><br><span class="line">        .channel(NioSocketChannel.class)</span><br><span class="line">        .handler(<span class="keyword">new</span> HelloClientInitializer());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接服务端</span></span><br><span class="line">        Channel ch = b.connect(host, port).sync().channel();</span><br><span class="line">        System.out.println(<span class="string">&quot;init client&quot;</span>);</span><br><span class="line">        <span class="comment">// 控制台输入</span></span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            String line = in.readLine();</span><br><span class="line">            <span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 向服务端发送在控制台输入的文本 并用&quot;\r\n&quot;结尾</span></span><br><span class="line"><span class="comment">             * 之所以用\r\n结尾 是因为我们在handler中添加了 DelimiterBasedFrameDecoder 帧解码。</span></span><br><span class="line"><span class="comment">             * 这个解码器是一个根据\n符号位分隔符的解码器。所以每条消息的最后必须加上\n否则无法识别和解码</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            ch.writeAndFlush(line + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// The connection is closed automatically on shutdown.</span></span><br><span class="line">        group.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 收到消息直接打印输出</span></span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot; Say : &quot;</span> + msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 以(&quot;\n&quot;)为结尾分割的 解码器</span></span><br><span class="line">            pipeline.addLast(<span class="string">&quot;framer&quot;</span>, <span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">8192</span>, Delimiters.lineDelimiter()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字符串解码 和 编码</span></span><br><span class="line">            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自己的逻辑Handler</span></span><br><span class="line">            pipeline.addLast(<span class="string">&quot;handler&quot;</span>, <span class="keyword">new</span> HelloClientHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个EventLoopGroup包含一个或多个EventLoop</li><li>一个EventLoop在它生命周期只和一个Thread绑定</li><li>所有EventLoop处理的I/O事件都将在专有的Thread上处理</li><li>一个channel在生命周期只注册于一个EventLoop</li><li>一个EventLoop可能会分配给一个或多个channel</li></ul><h1 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h1><ul><li>线程安全</li><li>write:数据写到远程结点。数据传给channelpipeline排队直到被冲刷</li><li>flush：已写数据冲刷到传输底层socket</li><li>内置的传输：</li></ul><ol><li>NIO／io.netty.channel.socket.nio／基于选择器</li><li>Epoll／io.netty.channel.epoll／JNI驱动的epoll和非阻塞IO</li><li>OIO／io.netty.channel.socket.oio／java.net基础／阻塞流</li><li>Local／io.netty.channel.local／VM内部通过管道进行通信／本地传输</li><li>Embedded／io.netty.channel.embedded／Embedded，ChannelHandler不需经过网络</li></ol><h2 id="Channel生命周期"><a href="#Channel生命周期" class="headerlink" title="Channel生命周期"></a>Channel生命周期</h2><ul><li>ChannelUnregistered  channel已创建，但还没注册到EventLoop</li><li>ChannelRegistered 注册到EventLoop</li><li>ChannelActive channel处于活动状态（已连接到远程结点），可以接收和发送数据</li><li>ChannelInactive 没有连接到远程结点<br><img src="https://user-images.githubusercontent.com/7789698/33238160-3fe36bf2-d2c2-11e7-8ecb-cd339369a28e.png" alt="image"></li></ul><h2 id="ChannelHandler生命周期"><a href="#ChannelHandler生命周期" class="headerlink" title="ChannelHandler生命周期"></a>ChannelHandler生命周期</h2><ul><li>handlerAdded   当ChannelHandler被添加到一个ChannelPipeline时被调用</li><li>handlerRemoved   当ChannelHandler从一个ChannelPipeline中移除时被调用</li><li>exceptionCaught  处理过程中ChannelPipeline中发生错误时被调用</li></ul><h3 id="ChannelInboundHandler——处理输入数据和所有类型的状态变化"><a href="#ChannelInboundHandler——处理输入数据和所有类型的状态变化" class="headerlink" title="ChannelInboundHandler——处理输入数据和所有类型的状态变化"></a>ChannelInboundHandler——处理输入数据和所有类型的状态变化</h3><p>方法：<br><img src="https://user-images.githubusercontent.com/7789698/33238166-663b09d6-d2c2-11e7-83a9-ad54630d7866.png" alt="image"></p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>channelRegistered</td><td>当一个Channel注册到EventLoop上，可以处理I/O时被调用</td></tr><tr><td>channelUnregistered</td><td>当一个Channel从它的EventLoop上解除注册，不再处理I/O时被调用</td></tr><tr><td>channelActive</td><td>当Channel变成活跃状态时被调用；Channel是连接/绑定、就绪的</td></tr><tr><td>channelInactive</td><td>当Channel离开活跃状态，不再连接到某个远端时被调用</td></tr><tr><td>channelReadComplete</td><td>当Channel上的某个读操作完成时被调用</td></tr><tr><td>channelRead</td><td>当从Channel中读数据时被调用</td></tr><tr><td>channelWritabilityChanged</td><td>当Channel的可写状态改变时被调用。通过这个方法，用户可以确保写操作不会进行地太快（避免OutOfMemoryError）或者当Channel又变成可写时继续写操作。Channel类的isWritable()方法可以用来检查Channel的可写状态。可写性的阈值可以通过Channel.config().setWriteHighWaterMark()和Channel.config().setWriteLowWaterMark()来设定。</td></tr><tr><td>userEventTriggered</td><td>因某个POJO穿过ChannelPipeline引发ChannelnboundHandler.fireUserEventTriggered()时被调用</td></tr></tbody></table><p>当一个ChannelInboundHandler实现类重写channelRead()方法时，它要负责释放ByteBuf相关的内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class DiscardHandler extends ChannelInboundHandlerAdapter &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;  </span><br><span class="line">        //手动释放消息  </span><br><span class="line">        ReferenceCountUtil.release(msg);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>一个更简单的替代方法就是用SimpleChannelInboundHandler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class SimpleDiscardHandler extends SimpleChannelInboundHandler&lt;Object&gt; &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception &#123;  </span><br><span class="line">        //不需要手动释放  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public abstract class SimpleChannelInboundHandler&lt;I&gt; extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line">...</span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        boolean release = true;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (acceptInboundMessage(msg)) &#123;</span><br><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">                I imsg = (I) msg;</span><br><span class="line">                channelRead0(ctx, imsg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                release = false;</span><br><span class="line">                ctx.fireChannelRead(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (autoRelease &amp;&amp; release) &#123;</span><br><span class="line">                ReferenceCountUtil.release(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> protected abstract void channelRead0(ChannelHandlerContext ctx, I msg) throws Exception;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ChannelOutboundHandler——处理输出数据，可以拦截所有操作"><a href="#ChannelOutboundHandler——处理输出数据，可以拦截所有操作" class="headerlink" title="ChannelOutboundHandler——处理输出数据，可以拦截所有操作"></a>ChannelOutboundHandler——处理输出数据，可以拦截所有操作</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>bind(ChannelHandlerContext,SocketAddress,ChannelPromise)</td><td>请求绑定Channel到一个本地地址</td></tr><tr><td>connect(ChannelHandlerContext, SocketAddress,SocketAddress,ChannelPromise)</td><td>请求连接Channel到远端</td></tr><tr><td>disconnect(ChannelHandlerContext, ChannelPromise)</td><td>请求从远端断开Channel</td></tr><tr><td>close(ChannelHandlerContext,ChannelPromise)</td><td>请求关闭Channel</td></tr><tr><td>deregister(ChannelHandlerContext, ChannelPromise)</td><td>请求Channel从它的EventLoop上解除注册</td></tr><tr><td>read(ChannelHandlerContext)</td><td>请求从Channel中读更多的数据</td></tr><tr><td>flush(ChannelHandlerContext)</td><td>请求通过Channel刷队列数据到远端</td></tr><tr><td>write(ChannelHandlerContext,Object, ChannelPromise)</td><td>请求通过Channel写数据到远端</td></tr></tbody></table><blockquote><p> CHANNELPROMISE VS. CHANNELFUTURE<br> ChannelOutboundHandler的大部分方法都用了一个ChannelPromise输入参数，用于当操作完成时收到通知。ChannelPromise是ChannelFuture的子接口，定义了可写的方法，比如setSuccess()，或者setFailure()，而ChannelFuture则是不可变对象。</p></blockquote><h3 id="ChannelHandler适配器类"><a href="#ChannelHandler适配器类" class="headerlink" title="ChannelHandler适配器类"></a>ChannelHandler适配器类</h3><p><img src="https://user-images.githubusercontent.com/7789698/33238280-80455306-d2c5-11e7-9b35-5970d907283b.png" alt="image"></p><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>无论何时你对数据操作ChannelInboundHandler.channelRead()或者ChannelOutboundHandler.write()，你需要确保没有资源泄露。也许你还记得上一章我们提到过，Netty采用引用计数来处理ByteBuf池。所以，在你用完一个ByteBuf后，调整引用计数的值是很重要的。</p><p>为了帮助你诊断潜在的问题， Netty提供了ResourceLeakDetector类，它通过采样应用程序1%的buffer分配来检查是否有内存泄露。这个过程的开销是很小的。</p><p>如果泄露被检测到，会产生类似下面这样的日志消息：</p><blockquote><p>LEAK: ByteBuf.release() was not called before it’s garbage-collected. Enable<br>advanced leak reporting to find out where the leak occurred. To enable<br>advanced leak reporting, specify the JVM option<br>‘-Dio.netty.leakDetectionLevel=ADVANCED’ or call<br>ResourceLeakDetector.setLevel().</p></blockquote><table><thead><tr><th>级别</th><th>描述</th></tr></thead><tbody><tr><td>DISABLED</td><td>关闭内存泄露检测。 只有在大量测试后，才能用这个级别</td></tr><tr><td>SIMPLE</td><td>报告默认的1%采样率中发现的任何泄露。这是默认的级别，在大部分情况下适用</td></tr><tr><td>ADVANCED</td><td>报告发现的泄露和消息的位置。使用默认的采样率。</td></tr><tr><td>PARANOID</td><td>类似ADVANCED级别，但是每个消息的获取都被检测采样。这对性能有很大影响，只能在调试阶段使用。</td></tr></tbody></table><p>用上表中的某个值来配置下面这个Java系统属性，就可以设定内存泄露检测级别：</p><p><code>java -Dio.netty.leakDetectionLevel=ADVANCED</code></p><p>如果你设定这个JVM选项然后重启你的应用，你会看到应用中泄露buffer的最新位置。下面是一个单元测试产生的典型的内存泄露报告：</p><blockquote><p>Running io.netty.handler.codec.xml.XmlFrameDecoderTest<br>15:03:36.886 [main] ERROR io.netty.util.ResourceLeakDetector - LEAK:<br>ByteBuf.release() was not called before it’s garbage-collected.<br>Recent access records: 1</p><p>1:io.netty.buffer.AdvancedLeakAwareByteBuf.toString(AdvancedLeakAwareByteBuf.java:697)</p><p>io.netty.handler.codec.xml.XmlFrameDecoderTest.testDecodeWithXml(XmlFrameDecoderTest.java:157)<br>io.netty.handler.codec.xml.XmlFrameDecoderTest.testDecodeWithTwoMessages(XmlFrameDecoderTest.java:133)</p></blockquote><p>在你实现ChannelInboundHandler.channelRead()或者ChannelOutboundHandler.write()时，你怎样用这个诊断工具来防止内存泄露呢？让我们来看下ChannelRead()操作“消费(consume)”输入数据这个情况：就是说，当前handler没有通过ChannelContext.fireChannelRead()把消息传递到下一个ChannelInboundHandler。下面的代码说明了如何释放这条消息占用的内存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class DiscardInboundHandler extends ChannelInboundHandlerAdapter &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">   public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;  </span><br><span class="line">        ReferenceCountUtil.release(msg);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class DiscardOutboundHandler extends ChannelOutboundHandlerAdapter &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception &#123;  </span><br><span class="line">        ReferenceCountUtil.release(msg);  </span><br><span class="line">        promise.setSuccess();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>重要的是，不仅要释放资源，而且要通知ChannelPromise，否则会出现某个ChannelFutureListener没有被通知到消息已经被处理的情况。</p><p>总之，如果一个消息被“消费”或者丢弃，没有送到ChannelPipeline中的下一个ChannelOutboundHandler，用户就要负责调用ReferenceCountUtil.release()。如果消息到达了真正的传输层，在它被写到socket中或者Channel关闭时，会被自动释放（这种情况下用户就不用管了）。</p><h2 id="ChannelPipeline接口"><a href="#ChannelPipeline接口" class="headerlink" title="ChannelPipeline接口"></a>ChannelPipeline接口</h2><p><a href="https://segmentfault.com/a/1190000007308934">https://segmentfault.com/a/1190000007308934</a><br>如果你把一个ChannelPipeline看成是一串ChannelHandler实例，拦截穿过Channel的输入输出event，那么就很容易明白这些ChannelHandler的交互是如何构成了一个应用程序数据和事件处理逻辑的核心。</p><p>每个新创建的Channel都会分配一个新的ChannelPipeline。这个关系是恒定的；Channel不可以换别ChannelPipeline，也不可以解除掉当前分配的ChannelPipeline。在Netty组件的整个生命周期中这个关系是固定的，不需要开发者采取什么操作。</p><p>根据来源，一个event可以被一个ChannelInboundHandler或者ChannelOutboundHandler处理。接下来，通过调用ChannelHandlerContext的方法，它会被转发到下一个同类型的handler。</p><p><img src="https://user-images.githubusercontent.com/7789698/33238425-90b989a2-d2c8-11e7-8b81-ae8eb80ed1ae.png" alt="image"></p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>fireChannelRegistered</td><td>调用ChannelPipeline中下一个ChannelInboundHandler的channelRegistered(ChannelHandlerContext)</td></tr><tr><td>fireChannelUnregistered</td><td>调用ChannelPipeline中下一个ChannelInboundHandler的channelUnRegistered(ChannelHandlerContext)</td></tr><tr><td>fireChannelActive</td><td>调用ChannelPipeline中下一个ChannelInboundHandler的channelActive(ChannelHandlerContext)</td></tr><tr><td>fireChannelInactive</td><td>调用ChannelPipeline中下一个ChannelInboundHandler的channelInactive(ChannelHandlerContext)</td></tr><tr><td>fireExceptionCaught</td><td>调用ChannelPipeline中下一个ChanneHandler的exceptionCaught(ChannelHandlerContext,Throwable)</td></tr><tr><td>fireUserEventTriggered</td><td>调用ChannelPipeline中下一个ChannelInboundHandler的userEventTriggered(ChannelHandlerContext, Object)</td></tr><tr><td>fireChannelRead</td><td>调用ChannelPipeline中下一个ChannelInboundHandler的channelRead(ChannelHandlerContext, Object msg)</td></tr><tr><td>fireChannelReadComplete</td><td>调用ChannelPipeline中下一个ChannelStateHandler的channelReadComplete(ChannelHandlerContext)</td></tr></tbody></table><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>bind</td><td>绑定Channel到一个本地地址。这会调用ChannelPipeline中下一个ChannelOutboundHandler的bind(ChannelHandlerContext, SocketAddress, ChannelPromise)</td></tr><tr><td>connect</td><td>连接Channel到一个远端地址。这会调用ChannelPipeline中下一个ChannelOutboundHandler的connect(ChannelHandlerContext, SocketAddress, ChannelPromise)</td></tr><tr><td>disconnect</td><td>断开Channel。这会调用ChannelPipeline中下一个ChannelOutboundHandler的disconnect(ChannelHandlerContext, ChannelPromise)</td></tr><tr><td>close</td><td>关闭Channel。这会调用ChannelPipeline中下一个ChannelOutboundHandler的close(ChannelHandlerContext,ChannelPromise)</td></tr><tr><td>deregister</td><td>Channel从它之前分配的EventLoop上解除注册。这会调用ChannelPipeline中下一个ChannelOutboundHandler的deregister(ChannelHandlerContext, ChannelPromise)</td></tr><tr><td>flush</td><td>刷所有Channel待写的数据。这会调用ChannelPipeline中下一个ChannelOutboundHandler的flush(ChannelHandlerContext)</td></tr><tr><td>write</td><td>往Channel写一条消息。这会调用ChannelPipeline中下一个ChannelOutboundHandler的write(ChannelHandlerContext, Object msg, ChannelPromise)   注意：不会写消息到底层的Socket，只是排队等候。如果要写到Socket中，调用flush()或者writeAndFlush()</td></tr><tr><td>writeAndFlush</td><td>这是先后调用write()和flush()的便捷方法。</td></tr><tr><td>read</td><td>请求从Channel中读更多的数据。这会调用ChannelPipeline中下一个ChannelOutboundHandler的read(ChannelHandlerContext)</td></tr></tbody></table><h2 id="ChannelHandlerContext接口"><a href="#ChannelHandlerContext接口" class="headerlink" title="ChannelHandlerContext接口"></a>ChannelHandlerContext接口</h2><p>ChannelHandlerContext代表了一个ChannelHandler和一个ChannelPipeline之间的关系，它在ChannelHandler被添加到ChannelPipeline时被创建。ChannelHandlerContext的主要功能是管理它对应的ChannelHandler和属于同一个ChannelPipeline的其他ChannelHandler之间的交互。</p><p>ChannelHandlerContext有很多方法，其中一些方法Channel和ChannelPipeline也有，但是有些区别。如果你在Channel或者ChannelPipeline实例上调用这些方法，它们的调用会穿过整个pipeline。而在ChannelHandlerContext上调用的同样的方法，仅仅从当前ChannelHandler开始，走到pipeline中下一个可以处理这个event的ChannelHandler。</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>bind</td><td>绑定到给定的SocketAddress，返回一个ChannelFuture</td></tr><tr><td>channel</td><td>返回绑定的Channel</td></tr><tr><td>close</td><td>关闭Channel，返回一个ChannelFuture</td></tr><tr><td>connect</td><td>连接到给定的SocketAddress，返回一个ChannelFuture</td></tr><tr><td>deregister</td><td>从先前分配的EventExecutor上解除注册，返回一个ChannelFuture</td></tr><tr><td>disconnect</td><td>从远端断开，返回一个ChannelFuture</td></tr><tr><td>executor</td><td>返回分发event的EventExecutor</td></tr><tr><td>fireChannelActive</td><td>触发调用下一个ChannelInboundHandler的channelActive()（已连接）</td></tr><tr><td>fireChannelInactive</td><td>触发调用下一个ChannelInboundHandler的channelInactive()（断开连接）</td></tr><tr><td>fireChannelRead</td><td>触发调用下一个ChannelInboundHandler的channelRead()（收到消息）</td></tr><tr><td>fireChannelReadComplete</td><td>触发channelWritabilityChanged event到下一个ChannelInboundHandler</td></tr><tr><td>handler</td><td>返回绑定的ChannelHandler</td></tr><tr><td>isRemoved</td><td>如果绑定的ChannelHandler已从ChannelPipeline中删除，返回true</td></tr><tr><td>name</td><td>返回本ChannelHandlerContext 实例唯一的名字</td></tr><tr><td>Pipeline</td><td>返回绑定的ChannelPipeline</td></tr><tr><td>read</td><td>从Channel读数据到第一个输入buffer；如果成功，触发一条channelRead event，通知handler channelReadComplete</td></tr><tr><td>write</td><td>通过本ChannelHandlerContext写消息穿过pipeline</td></tr><tr><td>在使用ChannelHandlerContext API时，请牢记下面几点：</td><td></td></tr></tbody></table><ul><li>一个ChannelHandler绑定的ChannelHandlerContext 永远不会改变，所以把它的引用缓存起来是安全的。</li><li>像我们在这节刚开始解释过的，ChannelHandlerContext的一些方法和其他类（Channel和ChannelPipeline）的方法名字相似，但是ChannelHandlerContext的方法采用了更短的event传递路程。我们应该尽可能利用这一点来实现最好的性能。</li></ul><h2 id="异常出站"><a href="#异常出站" class="headerlink" title="异常出站"></a>异常出站</h2><p>1.添加ChannelFutureListener就是为了在ChannelFuture实例上调用addListener(ChannelFutureListener)方法，有两种方法可以做到这个。最常用的方法是在输出操作（比如write()）返回的ChannelFuture上调用addListener()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ChannelFuture future = channel.write(...);</span><br><span class="line"> future.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void operationComplete(ChannelFuture f) throws Exception &#123;</span><br><span class="line">                    if (!f.isSuccess()) &#123;</span><br><span class="line">                        f.cause().printStackTrace();</span><br><span class="line">                        r.channel().close();</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>2.添加一个ChannelFutureListener到ChannelPromise，然后将这个ChannelPromise作为参数传入ChannelOutboundHandler方法。下面的代码和前一段代码有相同的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class OutboundExceptionHandler extends ChannelOutboundHandlerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) &#123;</span><br><span class="line">        promise.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void operationComplete(ChannelFuture f) &#123;</span><br><span class="line">                if (!f.isSuccess()) &#123;</span><br><span class="line">                    f.cause().printStackTrace();</span><br><span class="line">                    f.channel().close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h1><p><img src="https://user-images.githubusercontent.com/7789698/33237900-9d46f7ac-d2bb-11e7-9c72-0cbb05445aa6.png" alt="image"></p><ol><li>reader index前面的数据是已经读过的数据，这些数据可以扔掉</li><li>从reader index开始，到writer index之前的数据是可读数据</li><li>从writer index开始，为可写区域<br>正是因为这样的设计，ByteBuf可以同时读写数据（只要可读区域和可写区域都还有空闲空间），而java.nio.ByteBuffer则必须调用flip()方法才能从写状态切换到读状态。</li></ol><h1 id="ByteBufAllocator"><a href="#ByteBufAllocator" class="headerlink" title="ByteBufAllocator"></a>ByteBufAllocator</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBufAllocator byteBufAllocator = channel.alloc();</span><br><span class="line">        //        byteBufAllocator.compositeBuffer();</span><br><span class="line">        //        byteBufAllocator.buffer();</span><br><span class="line">ByteBuf byteBuf = byteBufAllocator.directBuffer();</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/33237903-c687db40-d2bb-11e7-99b5-6e232728da4d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/7789698/33237904-ca2bdbc0-d2bb-11e7-922a-04325053362e.png" alt="image"></p><p>UnpooledByteBufAllocator:不池化，每次调用返回新实例<br>PooledByteBufAllocator:池化了ByteBuf并最大限度减少内存碎片。使用jemalloc(<a href="https://www.cnblogs.com/gaoxing/p/4253833.html">https://www.cnblogs.com/gaoxing/p/4253833.html</a>)</p><h1 id="Unpooled"><a href="#Unpooled" class="headerlink" title="Unpooled"></a>Unpooled</h1><p>创建未池化ByteBuf</p><h1 id="ByteBufUtil类"><a href="#ByteBufUtil类" class="headerlink" title="ByteBufUtil类"></a>ByteBufUtil类</h1><ul><li>hexdump 十六进制形式打印ByteBuf内容</li><li>equals 判断两个ByteBuf相等</li></ul><p><a href="http://www.infoq.com/cn/articles/netty-high-performance/">Netty系列之Netty高性能之道</a></p><p><a href="http://www.infoq.com/cn/articles/netty-threading-model#mainLogin">Netty系列之Netty线程模型</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql查询优化技巧</title>
      <link href="/hexo/post/c2da5a2b.html"/>
      <url>/hexo/post/c2da5a2b.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.jobbole.com/24006/">http://blog.jobbole.com/24006/</a></p><h1 id="索引区分度"><a href="#索引区分度" class="headerlink" title="索引区分度"></a>索引区分度</h1><blockquote><p>区分度: 指字段在数据库中的不重复比<br>区分度在新建索引时有着非常重要的参考价值,在MySQL中,区分度的计算规则如下:</p></blockquote><blockquote><p>字段去重后的总数与全表总记录数的商。</p></blockquote><p>例如:</p><p><code>select count(distinct(name))/count(*) from t_base_user;</code></p><h2 id="count-distinct-name-count"><a href="#count-distinct-name-count" class="headerlink" title="count(distinct(name))/count(*)"></a>count(distinct(name))/count(*)</h2><p>1.0000</p><p>其中区分度最大值为1.000,最小为0.0000,区分度的值越大,也就是数据不重复率越大，新建索引效果也越好,在主键以及唯一键上面的区分度是最高的,为1.0000,在状态,性别等字段上面的区分度值是最小的。 (这个就要看数据量了,如果只有几条数据,这时区分度还挺高的,如果数据量多,区分度基本为0.0000。也就是在这些字段上添加索引后,效果也不佳的原因。)</p><p>值得注意的是: 如果表中没有任何记录时,计算区分度的结果是为空值，其他情况下,区分度值均分布在0.0000-1.0000之间。</p><p>个人强烈建议, 建索引时,一定要先计算该字段的区分度,原因如下:</p><p>1、单列索引</p><p>可以查看该字段的区分度,根据区分度的大小,也能大概知道在该字段上的新建索引是否有效，以及效果如何。区分度越大,索引效果越明显。</p><p>2、多列索引(联合索引)</p><p>多列索引中其实还有一个字段的先后顺序问题,一般是将区分度较高的放在前面,这样联合索引才更有效,例如:</p><p><code>select * from t_base_user where name=&quot;&quot; and status=1;</code></p><p>像上述语句,如果建联合索引的话,就应该是:</p><p><code>alter table t_base_user add index idx_name_status(name,status);</code></p><p>而不是:</p><p><code>alter table t_base_user add index idx_status_name(status,name)；</code></p><h1 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h1><p>  MySQL会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如<br><code>select * from t_base_user where type=&quot;10&quot; and created_at&lt;&quot;2017-11-03&quot; and status=1</code>, (该语句仅作为演示)</p><p>在上述语句中,status就不会走索引,因为遇到&lt;时,MySQL已经停止匹配,此时走的索引为:(type,created_at),其先后顺序是可以调整的,而走不到status索引,此时需要修改语句为:</p><p><code>select * from t_base_user where type=10 and status=1 and created_at&lt;&quot;2017-11-03&quot;</code></p><p>举例：<br>CREATE TABLE <code>titles</code> (<br>  <code>id</code> varchar(50) NOT NULL DEFAULT ‘’,<br>  <code>emp_no</code> varchar(50) NOT NULL DEFAULT ‘’,<br>  <code>title</code> varchar(50) NOT NULL DEFAULT ‘’,<br>  <code>from_date</code> datetime DEFAULT NULL COMMENT ‘from’,<br>  <code>to_date</code> datetime DEFAULT NULL,<br>  <code>date_create</code> datetime DEFAULT NULL,<br>  <code>date_update</code> datetime DEFAULT NULL,<br>  <code>date_delete</code> datetime DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>),<br>  KEY <code>idx_emp</code> (<code>emp_no</code>,<code>title</code>,<code>from_date</code>) USING BTREE<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p><p>一：全列匹配<br><code>EXPLAIN SELECT * FROM titles WHERE emp_no=&#39;10001&#39; AND title=&#39;Senior Engineer&#39; AND from_date=&#39;1986-06-26&#39;;</code></p><table><thead><tr><th align="left">id</th><th align="center">select_type</th><th align="center">table</th><th align="center">type</th><th align="center">possible_keys</th><th align="center">key</th><th align="center">key_len</th><th align="center">ref</th><th align="center">rows</th><th align="right">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">SIMPLE</td><td align="center">titles</td><td align="center">ref</td><td align="center">idx_emp</td><td align="center">idx_emp</td><td align="center">310</td><td align="center">const,const,const</td><td align="center">1</td><td align="right"></td></tr></tbody></table><p>次序调换也是一样<br><code>EXPLAIN SELECT * FROM titles WHERE from_date=&#39;1986-06-26&#39; AND emp_no=&#39;10001&#39; AND title=&#39;Senior Engineer&#39;;</code></p><p>二：最左前缀匹配</p><p><code>EXPLAIN SELECT * FROM titles WHERE emp_no=&#39;10001&#39;;</code></p><table><thead><tr><th align="left">id</th><th align="center">select_type</th><th align="center">table</th><th align="center">type</th><th align="center">possible_keys</th><th align="center">key</th><th align="center">key_len</th><th align="center">ref</th><th align="center">rows</th><th align="right">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">SIMPLE</td><td align="center">titles</td><td align="center">ref</td><td align="center">idx_emp</td><td align="center">idx_emp</td><td align="center">152</td><td align="center">const</td><td align="center">1</td><td align="right"></td></tr></tbody></table><p>三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供<br><code>EXPLAIN SELECT * FROM employees.titles WHERE emp_no=&#39;10001&#39; AND from_date=&#39;1986-06-26&#39;;</code></p><table><thead><tr><th align="left">id</th><th align="center">select_type</th><th align="center">table</th><th align="center">type</th><th align="center">possible_keys</th><th align="center">key</th><th align="center">key_len</th><th align="center">ref</th><th align="center">rows</th><th align="right">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">SIMPLE</td><td align="center">titles</td><td align="center">ref</td><td align="center">idx_emp</td><td align="center">idx_emp</td><td align="center">152</td><td align="center">const</td><td align="center">1</td><td align="right">Using index condition</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM titles</span><br><span class="line">WHERE emp_no=&#x27;10001&#x27;</span><br><span class="line">AND title IN (&#x27;Senior Engineer&#x27;, &#x27;Staff&#x27;, &#x27;Engineer&#x27;, &#x27;Senior Staff&#x27;, &#x27;Assistant Engineer&#x27;, &#x27;Technique Leader&#x27;, &#x27;Manager&#x27;)</span><br><span class="line">AND from_date=&#x27;1986-06-26&#x27;;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">id</th><th align="center">select_type</th><th align="center">table</th><th align="center">type</th><th align="center">possible_keys</th><th align="center">key</th><th align="center">key_len</th><th align="center">ref</th><th align="center">rows</th><th align="right">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">SIMPLE</td><td align="center">titles</td><td align="center">ALL</td><td align="center">idx_emp</td><td align="center"></td><td align="center"></td><td align="center">NULL</td><td align="center">7</td><td align="right">Using where</td></tr></tbody></table><p>四：查询条件没有指定索引第一列</p><p><code>EXPLAIN SELECT * FROM titles WHERE from_date=&#39;1986-06-26&#39;;</code></p><table><thead><tr><th align="left">id</th><th align="center">select_type</th><th align="center">table</th><th align="center">type</th><th align="center">possible_keys</th><th align="center">key</th><th align="center">key_len</th><th align="center">ref</th><th align="center">rows</th><th align="right">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">SIMPLE</td><td align="center">titles</td><td align="center">ALL</td><td align="center">NULL</td><td align="center">NULL</td><td align="center">NULL</td><td align="center">NULL</td><td align="center">443308</td><td align="right">Using where</td></tr></tbody></table><p>五：匹配某列的前缀字符串<br><code>EXPLAIN SELECT * FROM employees.titles WHERE emp_no=&#39;10001&#39; AND title LIKE &#39;Senior%&#39;;</code></p><table><thead><tr><th align="left">id</th><th align="center">select_type</th><th align="center">table</th><th align="center">type</th><th align="center">possible_keys</th><th align="center">key</th><th align="center">key_len</th><th align="center">ref</th><th align="center">rows</th><th align="right">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">SIMPLE</td><td align="center">titles</td><td align="center">range</td><td align="center">PRIMARY</td><td align="center">PRIMARY</td><td align="center">56</td><td align="center">NULL</td><td align="center">1</td><td align="right">Using where</td></tr></tbody></table><h1 id="避免全表扫描"><a href="#避免全表扫描" class="headerlink" title="避免全表扫描"></a>避免全表扫描</h1><ol><li>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</li><li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li><li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描<br>如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num is null</span><br></pre></td></tr></table></figure><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num=0</span><br></pre></td></tr></table></figure><ol><li>尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num=10 or num=20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以这样查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num=10</span><br><span class="line">union all</span><br><span class="line">select id from t where num=20</span><br></pre></td></tr></table></figure><p>5.不能前置百分号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where name like ‘hkjh%’</span><br></pre></td></tr></table></figure><p> 若要提高效率，可以考虑全文检索。</p><ol><li>in 和 not in 也要慎用，如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num in(1,2,3)</span><br></pre></td></tr></table></figure><p>对于连续的数值，能用 between 就不要用 in 了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num between 1 and 3</span><br></pre></td></tr></table></figure><p>7.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num=@num</span><br></pre></td></tr></table></figure><p>可以改为强制查询使用索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t with(index(索引名)) where num=@num</span><br></pre></td></tr></table></figure><p>8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id from t where substring(name,1,3)=’abc’–name以abc开头的id</span><br><span class="line">select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id</span><br></pre></td></tr></table></figure><p>应改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id from t where name like ‘abc%’</span><br><span class="line">select id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′</span><br></pre></td></tr></table></figure><h1 id="用-exists-代替-in"><a href="#用-exists-代替-in" class="headerlink" title="用 exists 代替 in"></a>用 exists 代替 in</h1><p>很多时候用 exists 代替 in 是一个好的选择：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select num from a where num in(select num from b)</span><br></pre></td></tr></table></figure><p>用下面的语句替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select num from a where exists(select 1 from b where num=a.num)</span><br></pre></td></tr></table></figure><h1 id="使用数字型字段"><a href="#使用数字型字段" class="headerlink" title="使用数字型字段"></a>使用数字型字段</h1><p>1.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>2.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><h1 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h1><ul><li>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</li><li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</li><li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。<h1 id="重构查询的方式"><a href="#重构查询的方式" class="headerlink" title="重构查询的方式"></a>重构查询的方式</h1></li></ul><ol><li>将一个复杂查询拆分为数个小且简单的查询，数据返回也快。</li><li>切分查询，如删除10万条数据，可以切分为10次，每次删除1万条。</li><li>分解关联查询：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tag</span><br><span class="line">    JOIN tag_post ON tag_post.tag_id = tag.id</span><br><span class="line">    JOIN post ON tag_post.post_id = post.id</span><br><span class="line">WHERE tag.name = &#x27;mysql&#x27;;</span><br></pre></td></tr></table></figure><p>分解为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tag WHERE name = &#x27;mysql&#x27;;</span><br><span class="line">SELECT * FROM tag_post WHERE tag_id = 1234;</span><br><span class="line">SELECT * FROM post WHERE post.id in (123,456,789,818);</span><br></pre></td></tr></table></figure><p>4.当只要一行数据时使用 LIMIT 1</p><p>一个实例，如何对单表查询优化：</p><p><code>select * from   product   limit </code>    866613,20 37.44秒</p><p><code>select id from  product   limit  866613,20  </code>   0.2秒(主键索引)</p><p><code>SELECT *  FROM  product  WHERE    ID   &gt;=  (select   id   from  product  limit   866613,1)  limit  20</code><br>0.2秒</p><h1 id="慢查询基础"><a href="#慢查询基础" class="headerlink" title="慢查询基础"></a>慢查询基础</h1><p> 优化数据访问，就是优化访问的数据，操作对象是要访问的数据，两方面，是否向服务器请求了大量不需要的数据，二是是否逼迫MySQL扫描额外的记录（没有必要扫描）。</p><p>  请求不需要数据的典型案例：不加LIMIT（返回全部数据，只取10条）、多表关联Select * 返回全部列（多表关联查询时*返回多个表的全部列）、还是Select *（可能写程序方面或代码复用方面有好处，但还要权衡）、重复查询相同数据（真需要这样，可以缓存下来，移动开发这个很有必要本地存储）。</p><p>标志额外扫描的三个指标：响应时间（自己判断是否合理值）、扫描的行数、返回的行数，一般扫描行数&gt;返回行数。</p><p>扫描的行数需要与一个“访问类型”概念关联，就是 Explain 中的 type，explain的type结果由差到优分别是：ALL（全表扫描）、index（索引扫描）、range（范围扫描）、ref（唯一索引查询 key_col=xx）、const（常数引用）等。从“访问类型”可以明白，索引让 MySQL 以最高效、扫描行数最少的方式找到需要的记录。</p><p>书中有个例子，说明在where中使用已是索引的列和取消该列的索引后两种结果，type由ref变为All，预估要访问的rows从10变为5073，差异非常明显。</p><h1 id="MySQL查询优化器的局限性"><a href="#MySQL查询优化器的局限性" class="headerlink" title="MySQL查询优化器的局限性"></a>MySQL查询优化器的局限性</h1><p>一个UNION限制，无法将限制条件从外层下推到内层，改造例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(SELECT first_name,last_name</span><br><span class="line">FROM sak.actor</span><br><span class="line">ORDER BY last_name)</span><br><span class="line">UNION ALL</span><br><span class="line">(SELECT first_name,last_name</span><br><span class="line">FROM sak.customer</span><br><span class="line">ORDER BY last_name)</span><br><span class="line">LIMIT 20;</span><br></pre></td></tr></table></figure><p>优化后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(SELECT first_name,last_name</span><br><span class="line">FROM sak.actor</span><br><span class="line">ORDER BY last_name</span><br><span class="line">LIMIT 20)</span><br><span class="line">UNION ALL</span><br><span class="line">(SELECT first_name,last_name</span><br><span class="line">FROM sak.customer</span><br><span class="line">ORDER BY last_name</span><br><span class="line">LIMIT 20)</span><br><span class="line">LIMIT 20;</span><br></pre></td></tr></table></figure><p>等值传递：讲的IN列表，MySQL会将IN列表的值传到各个过滤子句，如果IN列表太大，会造成额外消耗，优化和执行都很慢。</p><p>最大值和最小值，MySQL对 MIN()和MAX()做得不好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(actor_id) FROM sak.actor WHERE first_name = &#x27;EE&#x27;;</span><br></pre></td></tr></table></figure><p>改造后（first_name 不是索引，原来必须全表查询）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT actor_id FROM sak.actor USE INDEX(PRIMARY)</span><br><span class="line">WHERE first_name = &#x27;EE&#x27; LIMIT 1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 源码分析(四) ----rocketmq-store分析</title>
      <link href="/hexo/post/5909dfe9.html"/>
      <url>/hexo/post/5909dfe9.html</url>
      
        <content type="html"><![CDATA[<h2 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h2><p>rocketmq-store主要提供了消息存储及管理。主要针对CommitLog、ConsumeQueue的相关操作。 ConsumeQueue是消息的逻辑队列，队列的每一个元素是一个20字节的定长的数据，元素结构有三部分构成：commitLogOffset（8byte,消息所在CommitLog的实际偏移量），size(4byte,消息的大小),hashTag(8byte,消息Tag的哈希值)）。 实际上ConsumeQueue中存储的只是消息所在CommitLog的偏移量，可以理解为是CommitLog的索引文件。</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li><p>提供保存消息至CommitLog并持久化到物理文件(刷盘方式：同步、异步)</p></li><li><p>维护Topic与ConsumeQueue的关系</p></li><li><p>维护内存映射文件及队列（MapedFile、MapedFileQueue）</p></li><li><p>提供broker主从同步功能（同步双写、异步复制）</p></li><li><p>提供recover数据恢复功能（正常恢复、异常恢复（OSCRASH或者JVM CRASH或者机器掉电等））</p></li><li><p>提供数据索引服务</p></li></ul><h3 id="BrokerRole"><a href="#BrokerRole" class="headerlink" title="BrokerRole"></a>BrokerRole</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BrokerRole</span> </span>&#123;</span><br><span class="line">    ASYNC_MASTER,</span><br><span class="line">    SYNC_MASTER,</span><br><span class="line">    SLAVE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FlushDiskType"><a href="#FlushDiskType" class="headerlink" title="FlushDiskType"></a>FlushDiskType</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FlushDiskType</span> </span>&#123;</span><br><span class="line">    SYNC_FLUSH,<span class="comment">//同步刷盘</span></span><br><span class="line">    ASYNC_FLUSH<span class="comment">//异步刷盘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CommitLog"><a href="#CommitLog" class="headerlink" title="CommitLog"></a>CommitLog</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Message&#x27;s MAGIC CODE daa320a7</span></span><br><span class="line"><span class="comment">//魔数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MESSAGE_MAGIC_CODE = <span class="number">0xAABBCCDD</span> ^ <span class="number">1880681586</span> + <span class="number">8</span>;</span><br><span class="line"><span class="comment">// End of file empty MAGIC CODE cbd43194</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> BLANK_MAGIC_CODE = <span class="number">0xBBCCDDEE</span> ^ <span class="number">1880681586</span> + <span class="number">8</span>;</span><br><span class="line"><span class="comment">//消息文件队列，包含所有保存在磁盘上的文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MappedFileQueue mappedFileQueue;</span><br><span class="line"><span class="comment">//默认消息存储类对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DefaultMessageStore defaultMessageStore;</span><br><span class="line"><span class="comment">//刷盘操作服务类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FlushCommitLogService flushCommitLogService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//If TransientStorePool enabled, we must flush message to FileChannel at fixed periods</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FlushCommitLogService commitLogService;</span><br><span class="line"><span class="comment">//添加消息的回调，在doAppend方法中追加消息到内存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AppendMessageCallback appendMessageCallback;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;MessageExtBatchEncoder&gt; batchEncoderThreadLocal;</span><br><span class="line"><span class="comment">//Topic与每个队列的偏移量关系</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String<span class="comment">/* topic-queueid */</span>, Long<span class="comment">/* offset */</span>&gt; topicQueueTable = <span class="keyword">new</span> HashMap&lt;String, Long&gt;(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> confirmOffset = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> beginTimeInLock = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PutMessageLock putMessageLock;</span><br></pre></td></tr></table></figure><p>putMessage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PutMessageResult <span class="title">putMessage</span><span class="params">(<span class="keyword">final</span> MessageExtBrokerInner msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Set the storage time</span></span><br><span class="line">    msg.setStoreTimestamp(System.currentTimeMillis());</span><br><span class="line">    <span class="comment">// Set the message body BODY CRC (consider the most appropriate setting</span></span><br><span class="line">    <span class="comment">// on the client)</span></span><br><span class="line">    msg.setBodyCRC(UtilAll.crc32(msg.getBody()));</span><br><span class="line">    <span class="comment">// Back to Results</span></span><br><span class="line">    AppendMessageResult result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    StoreStatsService storeStatsService = <span class="keyword">this</span>.defaultMessageStore.getStoreStatsService();</span><br><span class="line"></span><br><span class="line">    String topic = msg.getTopic();</span><br><span class="line">    <span class="keyword">int</span> queueId = msg.getQueueId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());</span><br><span class="line">    <span class="keyword">if</span> (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE</span><br><span class="line">        || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) &#123;</span><br><span class="line">        <span class="comment">// Delay Delivery</span></span><br><span class="line">        <span class="keyword">if</span> (msg.getDelayTimeLevel() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg.getDelayTimeLevel() &gt; <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) &#123;</span><br><span class="line">                msg.setDelayTimeLevel(<span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            topic = ScheduleMessageService.SCHEDULE_TOPIC;</span><br><span class="line">            queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Backup real topic, queueId</span></span><br><span class="line">            MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());</span><br><span class="line">            MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));</span><br><span class="line">            msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));</span><br><span class="line"></span><br><span class="line">            msg.setTopic(topic);</span><br><span class="line">            msg.setQueueId(queueId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> eclipseTimeInLock = <span class="number">0</span>;</span><br><span class="line">    MappedFile unlockMappedFile = <span class="keyword">null</span>;</span><br><span class="line">    MappedFile mappedFile = <span class="keyword">this</span>.mappedFileQueue.getLastMappedFile();</span><br><span class="line"></span><br><span class="line">    putMessageLock.lock(); <span class="comment">//spin or ReentrantLock ,depending on store config</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> beginLockTimestamp = <span class="keyword">this</span>.defaultMessageStore.getSystemClock().now();</span><br><span class="line">        <span class="keyword">this</span>.beginTimeInLock = beginLockTimestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Here settings are stored timestamp, in order to ensure an orderly</span></span><br><span class="line">        <span class="comment">// global</span></span><br><span class="line">        msg.setStoreTimestamp(beginLockTimestamp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mappedFile || mappedFile.isFull()) &#123;</span><br><span class="line">            mappedFile = <span class="keyword">this</span>.mappedFileQueue.getLastMappedFile(<span class="number">0</span>); <span class="comment">// Mark: NewFile may be cause noise</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mappedFile) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;create mapped file1 error, topic: &quot;</span> + msg.getTopic() + <span class="string">&quot; clientAddr: &quot;</span> + msg.getBornHostString());</span><br><span class="line">            beginTimeInLock = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = mappedFile.appendMessage(msg, <span class="keyword">this</span>.appendMessageCallback);</span><br><span class="line">        <span class="keyword">switch</span> (result.getStatus()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PUT_OK:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> END_OF_FILE:</span><br><span class="line">                unlockMappedFile = mappedFile;</span><br><span class="line">                <span class="comment">// Create a new file, re-write the message</span></span><br><span class="line">                mappedFile = <span class="keyword">this</span>.mappedFileQueue.getLastMappedFile(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == mappedFile) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></span><br><span class="line">                    log.error(<span class="string">&quot;create mapped file2 error, topic: &quot;</span> + msg.getTopic() + <span class="string">&quot; clientAddr: &quot;</span> + msg.getBornHostString());</span><br><span class="line">                    beginTimeInLock = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, result);</span><br><span class="line">                &#125;</span><br><span class="line">                result = mappedFile.appendMessage(msg, <span class="keyword">this</span>.appendMessageCallback);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_SIZE_EXCEEDED:</span><br><span class="line">            <span class="keyword">case</span> PROPERTIES_SIZE_EXCEEDED:</span><br><span class="line">                beginTimeInLock = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, result);</span><br><span class="line">            <span class="keyword">case</span> UNKNOWN_ERROR:</span><br><span class="line">                beginTimeInLock = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                beginTimeInLock = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        eclipseTimeInLock = <span class="keyword">this</span>.defaultMessageStore.getSystemClock().now() - beginLockTimestamp;</span><br><span class="line">        beginTimeInLock = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        putMessageLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eclipseTimeInLock &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;[NOTIFYME]putMessage in lock cost time(ms)=&#123;&#125;, bodyLength=&#123;&#125; AppendMessageResult=&#123;&#125;&quot;</span>, eclipseTimeInLock, msg.getBody().length, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != unlockMappedFile &amp;&amp; <span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().isWarmMapedFileEnable()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultMessageStore.unlockMappedFile(unlockMappedFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PutMessageResult putMessageResult = <span class="keyword">new</span> PutMessageResult(PutMessageStatus.PUT_OK, result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Statistics</span></span><br><span class="line">    storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).incrementAndGet();</span><br><span class="line">    storeStatsService.getSinglePutMessageTopicSizeTotal(topic).addAndGet(result.getWroteBytes());</span><br><span class="line"></span><br><span class="line">    handleDiskFlush(result, putMessageResult, msg);</span><br><span class="line">    handleHA(result, putMessageResult, msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> putMessageResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConsumeQueue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CQ_STORE_UNIT_SIZE = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DefaultMessageStore defaultMessageStore;</span><br><span class="line"><span class="comment">//消息文件队列，包含所有保存在磁盘上的文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MappedFileQueue mappedFileQueue;</span><br><span class="line"><span class="comment">//Topic名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line"><span class="comment">//队列ID</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> queueId;</span><br><span class="line"><span class="comment">//内存中索引位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ByteBuffer byteBufferIndex;</span><br><span class="line"><span class="comment">//存储的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String storePath;</span><br><span class="line"><span class="comment">//映射文件的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mappedFileSize;</span><br><span class="line"><span class="comment">//CommitLog最大的偏移</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> maxPhysicOffset = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//CommitLog最小的偏移</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> minLogicOffset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> ConsumeQueueExt consumeQueueExt = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><ul><li>MappedFileQueue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DELETE_FILES_BATCH_MAX = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//存储的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String storePath;</span><br><span class="line"><span class="comment">//映射文件的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mappedFileSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CopyOnWriteArrayList&lt;MappedFile&gt; mappedFiles = <span class="keyword">new</span> CopyOnWriteArrayList&lt;MappedFile&gt;();</span><br><span class="line"><span class="comment">//预创建MapedFile服务，MapedFile</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AllocateMappedFileService allocateMappedFileService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> flushedWhere = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//已刷盘位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> committedWhere = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//最后刷盘完成的时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> storeTimestamp = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>MappedFile</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//系统每页缓存大小为4K</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OS_PAGE_SIZE = <span class="number">1024</span> * <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong TOTAL_MAPPED_VIRTUAL_MEMORY = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//总共映射虚拟内存的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger TOTAL_MAPPED_FILES = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//文件开始写的位置</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> AtomicInteger wrotePosition = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//文件已经刷盘的位置</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> AtomicInteger committedPosition = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger flushedPosition = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//文件大小</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> fileSize;</span><br><span class="line"><span class="keyword">protected</span> FileChannel fileChannel;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Message will put to here first, and then reput to FileChannel if writeBuffer is not null.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> ByteBuffer writeBuffer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">protected</span> TransientStorePool transientStorePool = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//文件名称</span></span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"><span class="comment">//文件的全局offset，也就是文件名的前缀</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> fileFromOffset;</span><br><span class="line"><span class="comment">//文件对象</span></span><br><span class="line"><span class="keyword">private</span> File file;</span><br><span class="line"><span class="comment">//文件映射的内存</span></span><br><span class="line"><span class="keyword">private</span> MappedByteBuffer mappedByteBuffer;</span><br><span class="line"><span class="comment">//最后刷盘完成的时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> storeTimestamp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> firstCreateInQueue = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><p>接口MessageStore</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载之前存储的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Launch this message store.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if there is any error.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shutdown this message store.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Destroy this message store. Generally, all persistent files should be removed after invocation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store a message into store.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg Message instance to store</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> result of store operation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PutMessageResult <span class="title">putMessage</span><span class="params">(<span class="keyword">final</span> MessageExtBrokerInner msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store a batch of messages.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageExtBatch Message batch.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> result of storing batch messages.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PutMessageResult <span class="title">putMessages</span><span class="params">(<span class="keyword">final</span> MessageExtBatch messageExtBatch)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Query at most &lt;code&gt;maxMsgNums&lt;/code&gt; messages belonging to &lt;code&gt;topic&lt;/code&gt; at &lt;code&gt;queueId&lt;/code&gt; starting</span></span><br><span class="line"><span class="comment">     * from given &lt;code&gt;offset&lt;/code&gt;. Resulting messages will further be screened using provided message filter.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group Consumer group that launches this query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset Logical offset to start from.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxMsgNums Maximum count of messages to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageFilter Message filter used to screen desired messages.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Matched messages.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">GetMessageResult <span class="title">getMessage</span><span class="params">(<span class="keyword">final</span> String group, <span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> <span class="keyword">long</span> offset, <span class="keyword">final</span> <span class="keyword">int</span> maxMsgNums, <span class="keyword">final</span> MessageFilter messageFilter)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get maximum offset of the topic queue.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic name.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Maximum offset at present.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getMaxOffsetInQueue</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the minimum offset of the topic queue.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic name.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Minimum offset at present.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getMinOffsetInQueue</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the offset of the message in the commit log, which is also known as physical offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic of the message to lookup.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consumeQueueOffset offset of consume queue.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> physical offset.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getCommitLogOffsetInQueue</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> consumeQueueOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Look up the physical offset of the message whose store timestamp is as specified.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic of the message.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp Timestamp to look up.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> physical offset which matches.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getOffsetInQueueByTime</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Look up the message by given commit log offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commitLogOffset physical offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Message whose physical offset is as specified.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">MessageExt <span class="title">lookMessageByOffset</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> commitLogOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get one message from the specified commit log offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commitLogOffset commit log offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> wrapped result of the message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SelectMappedBufferResult <span class="title">selectOneMessageByOffset</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> commitLogOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get one message from the specified commit log offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commitLogOffset commit log offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgSize message size.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> wrapped result of the message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SelectMappedBufferResult <span class="title">selectOneMessageByOffset</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> commitLogOffset, <span class="keyword">final</span> <span class="keyword">int</span> msgSize)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the running information of this store.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> message store running info.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getRunningDataInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Message store runtime information, which should generally contains various statistical information.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> runtime information of the message store in format of key-value pairs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">HashMap&lt;String, String&gt; <span class="title">getRuntimeInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the maximum commit log offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> maximum commit log offset.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getMaxPhyOffset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the minimum commit log offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> minimum commit log offset.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getMinPhyOffset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the store time of the earliest message in the given queue.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic of the messages to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID to find.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> store time of the earliest message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getEarliestMessageTime</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the store time of the earliest message in this store.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> timestamp of the earliest message in this store.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getEarliestMessageTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the store time of the message specified.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic message topic.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consumeQueueOffset consume queue offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> store timestamp of the message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getMessageStoreTimeStamp</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> consumeQueueOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the total number of the messages in the specified queue.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> total number.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getMessageTotalInQueue</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the raw commit log data starting from the given offset, which should used for replication purpose.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset starting offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> commit log data.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SelectMappedBufferResult <span class="title">getCommitLogData</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Append data to commit log.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startOffset starting offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data data to append.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if success; false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">appendToCommitLog</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> startOffset, <span class="keyword">final</span> <span class="keyword">byte</span>[] data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute file deletion manually.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">executeDeleteFilesManually</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Query messages by given key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic topic of the message.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key message key.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxNum maximum number of the messages possible.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin begin timestamp.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end end timestamp.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">QueryMessageResult <span class="title">queryMessage</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="keyword">int</span> maxNum, <span class="keyword">final</span> <span class="keyword">long</span> begin,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Update HA master address.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newAddr new address.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateHaMasterAddress</span><span class="params">(<span class="keyword">final</span> String newAddr)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return how much the slave falls behind.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number of bytes that slave falls behind.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">slaveFallBehindMuch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the current timestamp of the store.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> current time in milliseconds since 1970-01-01.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clean unused topics.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topics all valid topics.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number of the topics deleted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cleanUnusedTopic</span><span class="params">(<span class="keyword">final</span> Set&lt;String&gt; topics)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clean expired consume queues.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanExpiredConsumerQueue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Check if the given message has been swapped out of the memory.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic topic.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consumeOffset consume queue offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the message is no longer in memory; false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">checkInDiskByConsumeOffset</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">long</span> consumeOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get number of the bytes that have been stored in commit log and not yet dispatched to consume queue.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number of the bytes to dispatch.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">dispatchBehindBytes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flush the message store to persist all data.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> maximum offset flushed to persistent storage device.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reset written offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phyOffset new offset.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if success; false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">resetWriteOffset</span><span class="params">(<span class="keyword">long</span> phyOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get confirm offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> confirm offset.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getConfirmOffset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set confirm offset.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phyOffset confirm offset to set.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setConfirmOffset</span><span class="params">(<span class="keyword">long</span> phyOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Check if the operation system page cache is busy or not.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the OS page cache is busy; false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isOSPageCacheBusy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get lock time in milliseconds of the store by far.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> lock time in milliseconds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">lockTimeMills</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Check if the transient store pool is deficient.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the transient store pool is running out; false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTransientStorePoolDeficient</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the dispatcher list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list of the dispatcher.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">LinkedList&lt;CommitLogDispatcher&gt; <span class="title">getDispatcherList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get consume queue of the topic/queue.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic Topic.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueId Queue ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Consume queue.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ConsumeQueue <span class="title">getConsumeQueue</span><span class="params">(String topic, <span class="keyword">int</span> queueId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefaultMessageStore"><a href="#DefaultMessageStore" class="headerlink" title="DefaultMessageStore"></a>DefaultMessageStore</h4>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap源码分析（jdk1.8）</title>
      <link href="/hexo/post/5e828f26.html"/>
      <url>/hexo/post/5e828f26.html</url>
      
        <content type="html"><![CDATA[<p>不同版本jdk实现都不太一样。<br>关于1.6<br><a href="http://ifeve.com/java-concurrent-hashmap-1/">http://ifeve.com/java-concurrent-hashmap-1/</a><br><a href="http://ifeve.com/java-concurrent-hashmap-2/">http://ifeve.com/java-concurrent-hashmap-2/</a><br><a href="http://www.importnew.com/16147.html">http://www.importnew.com/16147.html</a><br>为什么ConcurrentHashMap是弱一致的？ （注意这是jdk1.6，1.7、1.8都不是弱一致了）<br><a href="http://ifeve.com/concurrenthashmap-weakly-consistent/">http://ifeve.com/concurrenthashmap-weakly-consistent/</a></p><p>关于1.7<br><a href="http://www.blogjava.net/DLevin/archive/2013/10/18/405030.html">http://www.blogjava.net/DLevin/archive/2013/10/18/405030.html</a></p><p>关于1.7和1.8区别<br><a href="http://www.importnew.com/23610.html">http://www.importnew.com/23610.html</a></p><p>接下来我们来分析1.8源码<br>先看下类的层次结构<br><img src="https://user-images.githubusercontent.com/7789698/38029713-3789bf9e-32c9-11e8-8e4c-bf0ea2e685b8.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大容量不得超过1&lt;&lt;30</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认初始化容量，ConcurrentHashMap容量必须是2的幂次方</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The largest possible (non-power of two) array size.</span></span><br><span class="line"><span class="comment">     * Needed by toArray and related methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表的默认并发级别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认装载因子，0.75是权衡空间和时间开销之后的综合考虑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过这个阈值将使用红黑树组织桶中的结点，而不是链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有表的大小超过这个阈值，桶才可以被转换成树而不是链表（为超过这个值时，应该使用resize）</span></span><br><span class="line"><span class="comment">//这个值是TREEIFY_THRESHOLD的4倍，以便resizing和treeification之间产生冲突</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Minimum number of rebinnings per transfer step. Ranges are</span></span><br><span class="line"><span class="comment">     * subdivided to allow multiple resizer threads.  This value</span></span><br><span class="line"><span class="comment">     * serves as a lower bound to avoid resizers encountering</span></span><br><span class="line"><span class="comment">     * excessive memory contention.  The value should be at least</span></span><br><span class="line"><span class="comment">     * DEFAULT_CAPACITY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of bits used for generation stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     * Must be at least 6 for 32bit arrays.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum number of threads that can help resize.</span></span><br><span class="line"><span class="comment">     * Must fit in 32 - RESIZE_STAMP_BITS bits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bit shift for recording size stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Encodings for Node hash fields. See above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// hash for roots of trees</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; <span class="comment">// hash for transient reservations</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Number of CPUS, to place bounds on some sizings */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** For serialization compatibility. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields = &#123;</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">&quot;segments&quot;</span>, Segment[].class),</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">&quot;segmentMask&quot;</span>, Integer.TYPE),</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">&quot;segmentShift&quot;</span>, Integer.TYPE)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储元素的实体数组</span></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base counter value, used mainly when there is no contention,</span></span><br><span class="line"><span class="comment">     * but also as a fallback during table initialization</span></span><br><span class="line"><span class="comment">     * races. Updated via CAS.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//表初始化和扩容的控制变量</span></span><br><span class="line">     <span class="comment">//负数时候表正在初始化或者扩容的时候：-1表示初始化，其他时候是-(1+活跃的扩容线程数)</span></span><br><span class="line">     <span class="comment">//正数表空的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next table index (plus one) to split while resizing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table of counter cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// views</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> KeySetView&lt;K,V&gt; keySet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ValuesView&lt;K,V&gt; values;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> EntrySetView&lt;K,V&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">            initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">        <span class="keyword">long</span> size = (<span class="keyword">long</span>)(<span class="number">1.0</span> + (<span class="keyword">long</span>)initialCapacity / loadFactor);</span><br><span class="line">        <span class="keyword">int</span> cap = (size &gt;= (<span class="keyword">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">            MAXIMUM_CAPACITY : tableSizeFor((<span class="keyword">int</span>)size);</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; k = ConcurrentHashMap.class;</span><br><span class="line">            <span class="comment">//取到sizeCtl字段的偏移值，用于CAS操作</span></span><br><span class="line">            SIZECTL = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;sizeCtl&quot;</span>));</span><br><span class="line">            TRANSFERINDEX = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;transferIndex&quot;</span>));</span><br><span class="line">            BASECOUNT = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;baseCount&quot;</span>));</span><br><span class="line">            CELLSBUSY = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;cellsBusy&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; ck = CounterCell.class;</span><br><span class="line">            CELLVALUE = U.objectFieldOffset</span><br><span class="line">                (ck.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; ak = Node[].class;</span><br><span class="line">            <span class="comment">//Node数组首指针偏移量</span></span><br><span class="line">            ABASE = U.arrayBaseOffset(ak);</span><br><span class="line">            <span class="comment">//数组中元素的增量地址</span></span><br><span class="line">            <span class="keyword">int</span> scale = U.arrayIndexScale(ak);</span><br><span class="line">            <span class="comment">//不是2的平方报错</span></span><br><span class="line">            <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;data type scale not a power of two&quot;</span>);</span><br><span class="line">                <span class="comment">//log&lt;sub&gt;2&lt;/sub&gt;(x)  数组元素的bit偏移量</span></span><br><span class="line">            ASHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们看下最重要的Node类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line"><span class="comment">//与hashmap的Node区别最重要的一点，使用volatile保证可见性防重排</span></span><br><span class="line">        <span class="keyword">volatile</span> V val;</span><br><span class="line">        <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line"><span class="comment">//取出快照</span></span><br><span class="line">                    (v == (u = val) || v.equals(u)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表取到结点</span></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; e = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    K ek;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//小于0表示另一个线程在使用，挂起等待</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="comment">//第一个参数为需要改变的对象，第二个为偏移量(即之前求出来的valueOffset的值)，第三个参数为期待的值，第四个为更新后的值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS判断获取桶的第i个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS设置桶的第i个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS设置桶第i个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">    U.putObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>put</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">           <span class="comment">//表为空初始化</span></span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="comment">//hash不到（桶空的）</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                             <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果hash到结点是-1，表示hash到ForwardingNode</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="comment">//hash到的桶里不为空</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//多线程同步</span></span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="comment">//再次取出节点，还是那个节点的话，表示没被其他线程修改</span></span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="comment">//hash值大于0</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="comment">//找到一样的节点，替换掉</span></span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">//不一样则尾插</span></span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, <span class="keyword">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果是红黑树，更新或添加节点</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果链表节点binCount大于8个转化为红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>hash值为-1的节点，代表正在扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">        <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.nextTable = tab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></span><br><span class="line">        outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> eh; K ek;</span><br><span class="line">                <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                        <span class="keyword">continue</span> outer;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">return</span> e.find(h, k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表转红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//桶长度小于64，则会触发扩容，不转树</span></span><br><span class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//桶大于64，重新取出该位置元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                <span class="comment">//未被操作</span></span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                        <span class="comment">//遍历构造每一个</span></span><br><span class="line">                        TreeNode&lt;K,V&gt; p =</span><br><span class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//首节点设为hd</span></span><br><span class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</span><br><span class="line">                            hd = p;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            tl.next = p;</span><br><span class="line">                        tl = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryPresize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给定的容量若&gt;=MAXIMUM_CAPACITY的一半，直接扩容到允许的最大值，否则调用tableSizeFor函数扩容 </span></span><br><span class="line">    <span class="keyword">int</span> c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">        tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="comment">//只有大于等于0才表示该线程可以扩容，小于0时候表示有线程正在扩容，自旋等待下</span></span><br><span class="line">    <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab = table; <span class="keyword">int</span> n;</span><br><span class="line">        <span class="comment">//空的，重新初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            n = (sc &gt; c) ? sc : c;</span><br><span class="line">            <span class="comment">//同样设置为-1表示正在扩容</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                        table = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//没被其他线程修改过</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] nt;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    <span class="comment">//真正扩容的地方</span></span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transfer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">        stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">    <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">            nextTab = nt;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">            sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nextTable = nextTab;</span><br><span class="line">        transferIndex = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">    <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">        <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">            <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                i = -<span class="number">1</span>;</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                     (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                      nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                   nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                bound = nextBound;</span><br><span class="line">                i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">            <span class="keyword">int</span> sc;</span><br><span class="line">            <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                nextTable = <span class="keyword">null</span>;</span><br><span class="line">                table = nextTab;</span><br><span class="line">                sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">            advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                            <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                runBit = b;</span><br><span class="line">                                lastRun = p;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                            ln = lastRun;</span><br><span class="line">                            hn = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            hn = lastRun;</span><br><span class="line">                            ln = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                        TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                    lo = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = p;</span><br><span class="line">                                loTail = p;</span><br><span class="line">                                ++lc;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                    hi = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = p;</span><br><span class="line">                                hiTail = p;</span><br><span class="line">                                ++hc;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                            (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                            (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ConcurrentHashMap </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 源码分析(三) ----broker模块分析</title>
      <link href="/hexo/post/cba0f441.html"/>
      <url>/hexo/post/cba0f441.html</url>
      
        <content type="html"><![CDATA[<h1 id="脚本分析"><a href="#脚本分析" class="headerlink" title="脚本分析"></a>脚本分析</h1><p>mqbroker.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">if [ -z &quot;$ROCKETMQ_HOME&quot; ] ; then</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># resolve links - $0 may be a link to maven&#x27;s home</span></span></span><br><span class="line">  PRG=&quot;$0&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> need this <span class="keyword">for</span> relative symlinks</span></span><br><span class="line">  while [ -h &quot;$PRG&quot; ] ; do</span><br><span class="line">    ls=`ls -ld &quot;$PRG&quot;`</span><br><span class="line">    link=`expr &quot;$ls&quot; : &#x27;.*-&gt; \(.*\)$&#x27;`</span><br><span class="line">    if expr &quot;$link&quot; : &#x27;/.*&#x27; &gt; /dev/null; then</span><br><span class="line">      PRG=&quot;$link&quot;</span><br><span class="line">    else</span><br><span class="line">      PRG=&quot;`dirname &quot;$PRG&quot;`/$link&quot;</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">  saveddir=`pwd`</span><br><span class="line"></span><br><span class="line">  ROCKETMQ_HOME=`dirname &quot;$PRG&quot;`/..</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> make it fully qualified</span></span><br><span class="line">  ROCKETMQ_HOME=`cd &quot;$ROCKETMQ_HOME&quot; &amp;&amp; pwd`</span><br><span class="line"></span><br><span class="line">  cd &quot;$saveddir&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export ROCKETMQ_HOME</span><br><span class="line"></span><br><span class="line">sh $&#123;ROCKETMQ_HOME&#125;/bin/runbroker.sh org.apache.rocketmq.broker.BrokerStartup $@</span><br></pre></td></tr></table></figure><p><code>BrokerStartup</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrokerStartup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Properties properties = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommandLine commandLine = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String configFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        start(createBrokerController(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BrokerController <span class="title">start</span><span class="params">(BrokerController controller)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            controller.start();</span><br><span class="line">            String tip = <span class="string">&quot;The broker[&quot;</span> + controller.getBrokerConfig().getBrokerName() + <span class="string">&quot;, &quot;</span></span><br><span class="line">                + controller.getBrokerAddr() + <span class="string">&quot;] boot success. serializeType=&quot;</span> + RemotingCommand.getSerializeTypeConfigInThisServer();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != controller.getBrokerConfig().getNamesrvAddr()) &#123;</span><br><span class="line">                tip += <span class="string">&quot; and name server is &quot;</span> + controller.getBrokerConfig().getNamesrvAddr();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(tip);</span><br><span class="line">            <span class="keyword">return</span> controller;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BrokerController <span class="title">createBrokerController</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置rocketmq.remoting.version，设置版本号</span></span><br><span class="line">        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));</span><br><span class="line">        <span class="comment">//获取com.rocketmq.remoting.socket.sndbuf.size配置，没有则设置为131072</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_SNDBUF_SIZE)) &#123;</span><br><span class="line">            NettySystemConfig.socketSndbufSize = <span class="number">131072</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//com.rocketmq.remoting.socket.rcvbuf.size配置</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_RCVBUF_SIZE)) &#123;</span><br><span class="line">            NettySystemConfig.socketRcvbufSize = <span class="number">131072</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Options options = ServerUtil.buildCommandlineOptions(<span class="keyword">new</span> Options());</span><br><span class="line">            commandLine = ServerUtil.parseCmdLine(<span class="string">&quot;mqbroker&quot;</span>, args, buildCommandlineOptions(options),</span><br><span class="line">                <span class="keyword">new</span> PosixParser());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == commandLine) &#123;</span><br><span class="line">                System.exit(-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> BrokerConfig brokerConfig = <span class="keyword">new</span> BrokerConfig();</span><br><span class="line">            <span class="keyword">final</span> NettyServerConfig nettyServerConfig = <span class="keyword">new</span> NettyServerConfig();</span><br><span class="line">            <span class="keyword">final</span> NettyClientConfig nettyClientConfig = <span class="keyword">new</span> NettyClientConfig();</span><br><span class="line">            nettyServerConfig.setListenPort(<span class="number">10911</span>);</span><br><span class="line">            <span class="keyword">final</span> MessageStoreConfig messageStoreConfig = <span class="keyword">new</span> MessageStoreConfig();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ASYNC_MASTER,SYNC_MASTER,SLAVE; new的时候默认ASYNC_MASTER</span></span><br><span class="line">            <span class="keyword">if</span> (BrokerRole.SLAVE == messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">                <span class="keyword">int</span> ratio = messageStoreConfig.getAccessMessageInMemoryMaxRatio() - <span class="number">10</span>;</span><br><span class="line">                messageStoreConfig.setAccessMessageInMemoryMaxRatio(ratio);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;c&#x27;</span>)) &#123;</span><br><span class="line">                String file = commandLine.getOptionValue(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    configFile = file;</span><br><span class="line">                    InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">                    properties = <span class="keyword">new</span> Properties();</span><br><span class="line">                    properties.load(in);</span><br><span class="line">                    properties2SystemEnv(properties);</span><br><span class="line">                    MixAll.properties2Object(properties, brokerConfig);</span><br><span class="line">                    MixAll.properties2Object(properties, nettyServerConfig);</span><br><span class="line">                    MixAll.properties2Object(properties, nettyClientConfig);</span><br><span class="line">                    MixAll.properties2Object(properties, messageStoreConfig);</span><br><span class="line">                    BrokerPathConfigHelper.setBrokerConfigPath(file);</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), brokerConfig);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == brokerConfig.getRocketmqHome()) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;Please set the &quot;</span> + MixAll.ROCKETMQ_HOME_ENV</span><br><span class="line">                    + <span class="string">&quot; variable in your environment to match the location of the RocketMQ installation&quot;</span>);</span><br><span class="line">                System.exit(-<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String namesrvAddr = brokerConfig.getNamesrvAddr();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != namesrvAddr) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String[] addrArray = namesrvAddr.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String addr : addrArray) &#123;</span><br><span class="line">                        RemotingUtil.string2SocketAddress(addr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.printf(</span><br><span class="line">                        <span class="string">&quot;The Name Server Address[%s] illegal, please set it as follows, \&quot;127.0.0.1:9876;192.168.0.1:9876\&quot;%n&quot;</span>,</span><br><span class="line">                        namesrvAddr);</span><br><span class="line">                    System.exit(-<span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">                <span class="keyword">case</span> ASYNC_MASTER:</span><br><span class="line">                <span class="keyword">case</span> SYNC_MASTER:</span><br><span class="line">                    brokerConfig.setBrokerId(MixAll.MASTER_ID);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> SLAVE:</span><br><span class="line">                    <span class="keyword">if</span> (brokerConfig.getBrokerId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;Slave&#x27;s brokerId must be &gt; 0&quot;</span>);</span><br><span class="line">                        System.exit(-<span class="number">3</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            messageStoreConfig.setHaListenPort(nettyServerConfig.getListenPort() + <span class="number">1</span>);</span><br><span class="line">            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">            JoranConfigurator configurator = <span class="keyword">new</span> JoranConfigurator();</span><br><span class="line">            configurator.setContext(lc);</span><br><span class="line">            lc.reset();</span><br><span class="line">            configurator.doConfigure(brokerConfig.getRocketmqHome() + <span class="string">&quot;/conf/logback_broker.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;p&#x27;</span>)) &#123;</span><br><span class="line">                Logger console = LoggerFactory.getLogger(LoggerName.BROKER_CONSOLE_NAME);</span><br><span class="line">                MixAll.printObjectProperties(console, brokerConfig);</span><br><span class="line">                MixAll.printObjectProperties(console, nettyServerConfig);</span><br><span class="line">                MixAll.printObjectProperties(console, nettyClientConfig);</span><br><span class="line">                MixAll.printObjectProperties(console, messageStoreConfig);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;m&#x27;</span>)) &#123;</span><br><span class="line">                Logger console = LoggerFactory.getLogger(LoggerName.BROKER_CONSOLE_NAME);</span><br><span class="line">                MixAll.printObjectProperties(console, brokerConfig, <span class="keyword">true</span>);</span><br><span class="line">                MixAll.printObjectProperties(console, nettyServerConfig, <span class="keyword">true</span>);</span><br><span class="line">                MixAll.printObjectProperties(console, nettyClientConfig, <span class="keyword">true</span>);</span><br><span class="line">                MixAll.printObjectProperties(console, messageStoreConfig, <span class="keyword">true</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);</span><br><span class="line">            MixAll.printObjectProperties(log, brokerConfig);</span><br><span class="line">            MixAll.printObjectProperties(log, nettyServerConfig);</span><br><span class="line">            MixAll.printObjectProperties(log, nettyClientConfig);</span><br><span class="line">            MixAll.printObjectProperties(log, messageStoreConfig);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> BrokerController controller = <span class="keyword">new</span> BrokerController(</span><br><span class="line">                brokerConfig,</span><br><span class="line">                nettyServerConfig,</span><br><span class="line">                nettyClientConfig,</span><br><span class="line">                messageStoreConfig);</span><br><span class="line">            <span class="comment">// remember all configs to prevent discard</span></span><br><span class="line">            controller.getConfiguration().registerConfig(properties);</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">            <span class="keyword">boolean</span> initResult = controller.initialize();</span><br><span class="line">            <span class="keyword">if</span> (!initResult) &#123;</span><br><span class="line">                controller.shutdown();</span><br><span class="line">                System.exit(-<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> hasShutdown = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">private</span> AtomicInteger shutdownTimes = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;Shutdown hook was invoked, &#123;&#125;&quot;</span>, <span class="keyword">this</span>.shutdownTimes.incrementAndGet());</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.hasShutdown) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.hasShutdown = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">                            controller.shutdown();</span><br><span class="line">                            <span class="keyword">long</span> consumingTimeTotal = System.currentTimeMillis() - beginTime;</span><br><span class="line">                            log.info(<span class="string">&quot;Shutdown hook over, consuming total time(ms): &#123;&#125;&quot;</span>, consumingTimeTotal);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;ShutdownHook&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> controller;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrokerController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BrokerConfig brokerConfig;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NettyServerConfig nettyServerConfig;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NettyClientConfig nettyClientConfig;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MessageStoreConfig messageStoreConfig;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsumerOffsetManager consumerOffsetManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsumerManager consumerManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsumerFilterManager consumerFilterManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ProducerManager producerManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ClientHousekeepingService clientHousekeepingService;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PullMessageProcessor pullMessageProcessor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PullRequestHoldService pullRequestHoldService;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MessageArrivingListener messageArrivingListener;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Broker2Client broker2Client;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SubscriptionGroupManager subscriptionGroupManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsumerIdsChangeListener consumerIdsChangeListener;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RebalanceLockManager rebalanceLockManager = <span class="keyword">new</span> RebalanceLockManager();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BrokerOuterAPI brokerOuterAPI;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(<span class="keyword">new</span> ThreadFactoryImpl(</span><br><span class="line">    <span class="string">&quot;BrokerControllerScheduledThread&quot;</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SlaveSynchronize slaveSynchronize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sendThreadPoolQueue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; pullThreadPoolQueue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; queryThreadPoolQueue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; clientManagerThreadPoolQueue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; consumerManagerThreadPoolQueue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FilterServerManager filterServerManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BrokerStatsManager brokerStatsManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SendMessageHook&gt; sendMessageHookList = <span class="keyword">new</span> ArrayList&lt;SendMessageHook&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;ConsumeMessageHook&gt; consumeMessageHookList = <span class="keyword">new</span> ArrayList&lt;ConsumeMessageHook&gt;();</span><br><span class="line"><span class="keyword">private</span> MessageStore messageStore;</span><br><span class="line"><span class="keyword">private</span> RemotingServer remotingServer;</span><br><span class="line"><span class="keyword">private</span> RemotingServer fastRemotingServer;</span><br><span class="line"><span class="keyword">private</span> TopicConfigManager topicConfigManager;</span><br><span class="line"><span class="keyword">private</span> ExecutorService sendMessageExecutor;</span><br><span class="line"><span class="keyword">private</span> ExecutorService pullMessageExecutor;</span><br><span class="line"><span class="keyword">private</span> ExecutorService queryMessageExecutor;</span><br><span class="line"><span class="keyword">private</span> ExecutorService adminBrokerExecutor;</span><br><span class="line"><span class="keyword">private</span> ExecutorService clientManageExecutor;</span><br><span class="line"><span class="keyword">private</span> ExecutorService consumerManageExecutor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> updateMasterHAServerAddrPeriodically = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> BrokerStats brokerStats;</span><br><span class="line"><span class="keyword">private</span> InetSocketAddress storeHost;</span><br><span class="line"><span class="keyword">private</span> BrokerFastFailure brokerFastFailure;</span><br><span class="line"><span class="keyword">private</span> Configuration configuration;</span><br></pre></td></tr></table></figure><p>initialize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    <span class="comment">//加载主要模块的配置信息</span></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">this</span>.topicConfigManager.load();</span><br><span class="line"></span><br><span class="line">        result = result &amp;&amp; <span class="keyword">this</span>.consumerOffsetManager.load();</span><br><span class="line">        result = result &amp;&amp; <span class="keyword">this</span>.subscriptionGroupManager.load();</span><br><span class="line">        result = result &amp;&amp; <span class="keyword">this</span>.consumerFilterManager.load();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.messageStore =</span><br><span class="line">                    <span class="keyword">new</span> DefaultMessageStore(<span class="keyword">this</span>.messageStoreConfig, <span class="keyword">this</span>.brokerStatsManager, <span class="keyword">this</span>.messageArrivingListener,</span><br><span class="line">                        <span class="keyword">this</span>.brokerConfig);</span><br><span class="line">                <span class="keyword">this</span>.brokerStats = <span class="keyword">new</span> BrokerStats((DefaultMessageStore) <span class="keyword">this</span>.messageStore);</span><br><span class="line">                <span class="comment">//load plugin</span></span><br><span class="line">                MessageStorePluginContext context = <span class="keyword">new</span> MessageStorePluginContext(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig);</span><br><span class="line">                <span class="keyword">this</span>.messageStore = MessageStoreFactory.build(context, <span class="keyword">this</span>.messageStore);</span><br><span class="line">                <span class="keyword">this</span>.messageStore.getDispatcherList().addFirst(<span class="keyword">new</span> CommitLogDispatcherCalcBitMap(<span class="keyword">this</span>.brokerConfig, <span class="keyword">this</span>.consumerFilterManager));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                result = <span class="keyword">false</span>;</span><br><span class="line">                log.error(<span class="string">&quot;Failed to initialize&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = result &amp;&amp; <span class="keyword">this</span>.messageStore.load();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line"> <span class="comment">//启动服务器初始化</span></span><br><span class="line">            <span class="keyword">this</span>.remotingServer = <span class="keyword">new</span> NettyRemotingServer(<span class="keyword">this</span>.nettyServerConfig, <span class="keyword">this</span>.clientHousekeepingService);</span><br><span class="line">            NettyServerConfig fastConfig = (NettyServerConfig) <span class="keyword">this</span>.nettyServerConfig.clone();</span><br><span class="line">            fastConfig.setListenPort(nettyServerConfig.getListenPort() - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">this</span>.fastRemotingServer = <span class="keyword">new</span> NettyRemotingServer(fastConfig, <span class="keyword">this</span>.clientHousekeepingService);</span><br><span class="line"><span class="comment">//初始化线程池</span></span><br><span class="line">            <span class="keyword">this</span>.sendMessageExecutor = <span class="keyword">new</span> BrokerFixedThreadPoolExecutor(</span><br><span class="line">                <span class="keyword">this</span>.brokerConfig.getSendMessageThreadPoolNums(),</span><br><span class="line">                <span class="keyword">this</span>.brokerConfig.getSendMessageThreadPoolNums(),</span><br><span class="line">                <span class="number">1000</span> * <span class="number">60</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">this</span>.sendThreadPoolQueue,</span><br><span class="line">                <span class="keyword">new</span> ThreadFactoryImpl(<span class="string">&quot;SendMessageThread_&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.pullMessageExecutor = <span class="keyword">new</span> BrokerFixedThreadPoolExecutor(</span><br><span class="line">                <span class="keyword">this</span>.brokerConfig.getPullMessageThreadPoolNums(),</span><br><span class="line">                <span class="keyword">this</span>.brokerConfig.getPullMessageThreadPoolNums(),</span><br><span class="line">                <span class="number">1000</span> * <span class="number">60</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">this</span>.pullThreadPoolQueue,</span><br><span class="line">                <span class="keyword">new</span> ThreadFactoryImpl(<span class="string">&quot;PullMessageThread_&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.adminBrokerExecutor =</span><br><span class="line">                Executors.newFixedThreadPool(<span class="keyword">this</span>.brokerConfig.getAdminBrokerThreadPoolNums(), <span class="keyword">new</span> ThreadFactoryImpl(</span><br><span class="line">                    <span class="string">&quot;AdminBrokerThread_&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.clientManageExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                <span class="keyword">this</span>.brokerConfig.getClientManageThreadPoolNums(),</span><br><span class="line">                <span class="keyword">this</span>.brokerConfig.getClientManageThreadPoolNums(),</span><br><span class="line">                <span class="number">1000</span> * <span class="number">60</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">this</span>.clientManagerThreadPoolQueue,</span><br><span class="line">                <span class="keyword">new</span> ThreadFactoryImpl(<span class="string">&quot;ClientManageThread_&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.consumerManageExecutor =</span><br><span class="line">                Executors.newFixedThreadPool(<span class="keyword">this</span>.brokerConfig.getConsumerManageThreadPoolNums(), <span class="keyword">new</span> ThreadFactoryImpl(</span><br><span class="line">                    <span class="string">&quot;ConsumerManageThread_&quot;</span>));</span><br><span class="line"><span class="comment">//注册请求处理器</span></span><br><span class="line">            <span class="keyword">this</span>.registerProcessor();</span><br><span class="line"><span class="comment">//设置各种定时任务 、、等等。</span></span><br><span class="line">            <span class="comment">//获取broker状态的</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> initialDelay = UtilAll.computNextMorningTimeMillis() - System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> period = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">            <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        BrokerController.<span class="keyword">this</span>.getBrokerStats().record();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;schedule record error.&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, initialDelay, period, TimeUnit.MILLISECONDS);</span><br><span class="line"><span class="comment">//周期性将消费者的offset刷到硬盘</span></span><br><span class="line">            <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        BrokerController.<span class="keyword">this</span>.consumerOffsetManager.persist();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;schedule persist consumerOffset error.&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="keyword">this</span>.brokerConfig.getFlushConsumerOffsetInterval(), TimeUnit.MILLISECONDS);</span><br><span class="line"><span class="comment">//周期性将消费者消息记录写入文件</span></span><br><span class="line">            <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        BrokerController.<span class="keyword">this</span>.consumerFilterManager.persist();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;schedule persist consumer filter error.&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="number">1000</span> * <span class="number">10</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"><span class="comment">//周期性检查消费者的消费能力以保护broker</span></span><br><span class="line">            <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        BrokerController.<span class="keyword">this</span>.protectBroker();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;protectBroker error.&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">3</span>, <span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line"><span class="comment">//定期打印消息消费标记</span></span><br><span class="line">            <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        BrokerController.<span class="keyword">this</span>.printWaterMark();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;printWaterMark error.&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">10</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;dispatch behind commit log &#123;&#125; bytes&quot;</span>, BrokerController.<span class="keyword">this</span>.getMessageStore().dispatchBehindBytes());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;schedule dispatchBehindBytes error.&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="number">1000</span> * <span class="number">60</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"><span class="comment">//获取name server的地址</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.brokerConfig.getNamesrvAddr() != <span class="keyword">null</span>) &#123;  <span class="keyword">this</span>.brokerOuterAPI.updateNameServerAddressList(<span class="keyword">this</span>.brokerConfig.getNamesrvAddr());</span><br><span class="line">                log.info(<span class="string">&quot;Set user specified name server address: &#123;&#125;&quot;</span>, <span class="keyword">this</span>.brokerConfig.getNamesrvAddr());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.brokerConfig.isFetchNamesrvAddrByAddressServer()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            BrokerController.<span class="keyword">this</span>.brokerOuterAPI.fetchNameServerAddr();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;ScheduledTask fetchNameServerAddr exception&quot;</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="number">1000</span> * <span class="number">60</span> * <span class="number">2</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (BrokerRole.SLAVE == <span class="keyword">this</span>.messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.messageStoreConfig.getHaMasterAddress() != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.messageStoreConfig.getHaMasterAddress().length() &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.messageStore.updateHaMasterAddress(<span class="keyword">this</span>.messageStoreConfig.getHaMasterAddress());</span><br><span class="line">                    <span class="keyword">this</span>.updateMasterHAServerAddrPeriodically = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.updateMasterHAServerAddrPeriodically = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//如果是slave，主从同步</span></span><br><span class="line">                <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            BrokerController.<span class="keyword">this</span>.slaveSynchronize.syncAll();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;ScheduledTask syncAll slave exception&quot;</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="number">1000</span> * <span class="number">60</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//打印主从差异配置</span></span><br><span class="line">                <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            BrokerController.<span class="keyword">this</span>.printMasterAndSlaveDiff();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;schedule printMasterAndSlaveDiff error.&quot;</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="number">1000</span> * <span class="number">60</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>start</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//启动存储服务</span></span><br><span class="line">    <span class="comment">//包括逻辑队列刷盘服务，就是把内存的msg刷入磁盘</span></span><br><span class="line">    <span class="comment">//元数据刷盘服务</span></span><br><span class="line">    <span class="comment">//存储层状态服务 比如 put_tps get_found_tps get_miss_tps get_transfered_tps</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.messageStore != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.messageStore.start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//启动 netty serverBootstrap 绑定端口 监听等</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.remotingServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.remotingServer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fastRemotingServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fastRemotingServer.start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//客户端netty启动</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.brokerOuterAPI != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.brokerOuterAPI.start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//启动请求Hold服务</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pullRequestHoldService != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pullRequestHoldService.start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//定期检测客户端连接</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clientHousekeepingService != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.clientHousekeepingService.start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//过滤服务启动</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.filterServerManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.filterServerManager.start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//向namesrv注册broker</span></span><br><span class="line">    <span class="keyword">this</span>.registerBrokerAll(<span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BrokerController.<span class="keyword">this</span>.registerBrokerAll(<span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;registerBrokerAll Exception&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="number">1000</span> * <span class="number">30</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"><span class="comment">// broker状态管理启动</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.brokerStatsManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.brokerStatsManager.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.brokerFastFailure != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.brokerFastFailure.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>registerBrokerAll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">registerBrokerAll</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> checkOrderConfig, <span class="keyword">boolean</span> oneway)</span> </span>&#123;</span><br><span class="line">    TopicConfigSerializeWrapper topicConfigWrapper = <span class="keyword">this</span>.getTopicConfigManager().buildTopicConfigSerializeWrapper();</span><br><span class="line"> <span class="comment">//同步 Broker 读写权限</span></span><br><span class="line">    <span class="keyword">if</span> (!PermName.isWriteable(<span class="keyword">this</span>.getBrokerConfig().getBrokerPermission())</span><br><span class="line">        || !PermName.isReadable(<span class="keyword">this</span>.getBrokerConfig().getBrokerPermission())) &#123;</span><br><span class="line">        ConcurrentHashMap&lt;String, TopicConfig&gt; topicConfigTable = <span class="keyword">new</span> ConcurrentHashMap&lt;String, TopicConfig&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TopicConfig topicConfig : topicConfigWrapper.getTopicConfigTable().values()) &#123;</span><br><span class="line">            TopicConfig tmp =</span><br><span class="line">                <span class="keyword">new</span> TopicConfig(topicConfig.getTopicName(), topicConfig.getReadQueueNums(), topicConfig.getWriteQueueNums(),</span><br><span class="line">                    <span class="keyword">this</span>.brokerConfig.getBrokerPermission());</span><br><span class="line">            topicConfigTable.put(topicConfig.getTopicName(), tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        topicConfigWrapper.setTopicConfigTable(topicConfigTable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RegisterBrokerResult registerBrokerResult = <span class="keyword">this</span>.brokerOuterAPI.registerBrokerAll(</span><br><span class="line">        <span class="keyword">this</span>.brokerConfig.getBrokerClusterName(),</span><br><span class="line">        <span class="keyword">this</span>.getBrokerAddr(),</span><br><span class="line">        <span class="keyword">this</span>.brokerConfig.getBrokerName(),</span><br><span class="line">        <span class="keyword">this</span>.brokerConfig.getBrokerId(),</span><br><span class="line">        <span class="keyword">this</span>.getHAServerAddr(),</span><br><span class="line">        topicConfigWrapper,</span><br><span class="line">        <span class="keyword">this</span>.filterServerManager.buildNewFilterServerList(),</span><br><span class="line">        oneway,</span><br><span class="line">        <span class="keyword">this</span>.brokerConfig.getRegisterBrokerTimeoutMills());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (registerBrokerResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.updateMasterHAServerAddrPeriodically &amp;&amp; registerBrokerResult.getHaServerAddr() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageStore.updateHaMasterAddress(registerBrokerResult.getHaServerAddr());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.slaveSynchronize.setMasterAddr(registerBrokerResult.getMasterAddr());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (checkOrderConfig) &#123;</span><br><span class="line">            <span class="keyword">this</span>.getTopicConfigManager().updateOrderTopicConfig(registerBrokerResult.getKvTable());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 源码分析(二) ----通信模块分析</title>
      <link href="/hexo/post/58cc55f9.html"/>
      <url>/hexo/post/58cc55f9.html</url>
      
        <content type="html"><![CDATA[<h2 id="rocketMQ通信模块"><a href="#rocketMQ通信模块" class="headerlink" title="rocketMQ通信模块"></a>rocketMQ通信模块</h2><p><img src="https://user-images.githubusercontent.com/7789698/32897440-358e21d4-caab-11e7-8f66-76a302229a2d.png" alt="image"></p><p>NettyRemotingClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//业务线程池</span></span><br><span class="line">        <span class="keyword">this</span>.defaultEventExecutorGroup = <span class="keyword">new</span> DefaultEventExecutorGroup(</span><br><span class="line">            nettyClientConfig.getClientWorkerThreads(),</span><br><span class="line">            <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">                <span class="keyword">private</span> AtomicInteger threadIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">&quot;NettyClientWorkerThread_&quot;</span> + <span class="keyword">this</span>.threadIndex.incrementAndGet());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        Bootstrap handler = <span class="keyword">this</span>.bootstrap.group(<span class="keyword">this</span>.eventLoopGroupWorker).channel(NioSocketChannel.class)</span><br><span class="line">            .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">            .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">false</span>)</span><br><span class="line">            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, nettyClientConfig.getConnectTimeoutMillis())</span><br><span class="line">            .option(ChannelOption.SO_SNDBUF, nettyClientConfig.getClientSocketSndBufSize())</span><br><span class="line">            .option(ChannelOption.SO_RCVBUF, nettyClientConfig.getClientSocketRcvBufSize())</span><br><span class="line">            .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ch.pipeline().addLast(</span><br><span class="line">                        defaultEventExecutorGroup,</span><br><span class="line"><span class="comment">//编码（RemotingCommand 的Header和Body依次写入）</span></span><br><span class="line">                        <span class="keyword">new</span> NettyEncoder(),</span><br><span class="line"><span class="comment">//解码（LengthFieldBasedFrameDecoder自定义长度解码器解决TCP粘包）</span></span><br><span class="line">                        <span class="keyword">new</span> NettyDecoder(),</span><br><span class="line"><span class="comment">//netty 4.X心跳检测 </span></span><br><span class="line"><span class="comment">//readerIdleTime：为读超时时间（即测试端一定时间内未接受到被测试端消息）、writerIdleTime：为写超时时间（即测试端一定时间内向被测试端发送消息）、allIdleTime：所有类型的超时时间 120</span></span><br><span class="line">                        <span class="keyword">new</span> IdleStateHandler(<span class="number">0</span>, <span class="number">0</span>, nettyClientConfig.getClientChannelMaxIdleTimeSeconds()),</span><br><span class="line"><span class="comment">//连接管理handler,处理connect, disconnect, close等事件</span></span><br><span class="line">                        <span class="keyword">new</span> NettyConnectManageHandler(),</span><br><span class="line"><span class="comment">//处理接收到RemotingCommand消息后的事件, 收到服务器端响应后的相关操作</span></span><br><span class="line">                        <span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">//每次有消息需要发送, 就会生成resposneFuture用于接收消息回应, 但是如果始终没有收到回应, //Map(scanResponseTable)中的responseFuture就会堆积.</span></span><br><span class="line"><span class="comment">//这个时候就需要一个线程来专门做Map的清理回收,</span></span><br><span class="line">        <span class="keyword">this</span>.timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    NettyRemotingClient.<span class="keyword">this</span>.scanResponseTable();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;scanResponseTable exception&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span> * <span class="number">3</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.channelEventListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.nettyEventExecutor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanResponseTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;ResponseFuture&gt; rfList = <span class="keyword">new</span> LinkedList&lt;ResponseFuture&gt;();</span><br><span class="line">        Iterator&lt;Entry&lt;Integer, ResponseFuture&gt;&gt; it = <span class="keyword">this</span>.responseTable.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Entry&lt;Integer, ResponseFuture&gt; next = it.next();</span><br><span class="line">            ResponseFuture rep = next.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((rep.getBeginTimestamp() + rep.getTimeoutMillis() + <span class="number">1000</span>) &lt;= System.currentTimeMillis()) &#123;</span><br><span class="line">                rep.release();</span><br><span class="line">                it.remove();</span><br><span class="line">                rfList.add(rep);</span><br><span class="line">                log.warn(<span class="string">&quot;remove timeout request, &quot;</span> + rep);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ResponseFuture rf : rfList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                executeInvokeCallback(rf);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;scanResponseTable, operationComplete Exception&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="RocketMQ-通信编解码源码解析"><a href="#RocketMQ-通信编解码源码解析" class="headerlink" title="RocketMQ 通信编解码源码解析"></a>RocketMQ 通信编解码源码解析</h2><p>编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">RemotingCommand</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand remotingCommand, ByteBuf out)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//nio ByteBuffer 具体见http://www1350.github.io/#post/115</span></span><br><span class="line">            ByteBuffer header = remotingCommand.encodeHeader();</span><br><span class="line">            out.writeBytes(header);</span><br><span class="line">            <span class="keyword">byte</span>[] body = remotingCommand.getBody();</span><br><span class="line">            <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.writeBytes(body);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;encode exception, &quot;</span> + RemotingHelper.parseChannelRemoteAddr(ctx.channel()), e);</span><br><span class="line">            <span class="keyword">if</span> (remotingCommand != <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.error(remotingCommand.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            RemotingUtil.closeChannel(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyDecoder</span> <span class="keyword">extends</span> <span class="title">LengthFieldBasedFrameDecoder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FRAME_MAX_LENGTH =</span><br><span class="line">        Integer.parseInt(System.getProperty(<span class="string">&quot;com.rocketmq.remoting.frameMaxLength&quot;</span>, <span class="string">&quot;16777216&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyDecoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(FRAME_MAX_LENGTH, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf frame = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            frame = (ByteBuf) <span class="keyword">super</span>.decode(ctx, in);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == frame) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//netty的ByteBuf 转化为nio 的ByteBuffer</span></span><br><span class="line"><span class="comment">//  http://www.jianshu.com/p/0f93834f23de</span></span><br><span class="line">            ByteBuffer byteBuffer = frame.nioBuffer();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> RemotingCommand.decode(byteBuffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;decode exception, &quot;</span> + RemotingHelper.parseChannelRemoteAddr(ctx.channel()), e);</span><br><span class="line">            RemotingUtil.closeChannel(ctx.channel());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != frame) &#123;</span><br><span class="line">                frame.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抓一下包：<br>三次握手<br><img src="https://user-images.githubusercontent.com/7789698/33132848-be28c574-cfd5-11e7-87d4-0630b2c14a4a.png" alt="b79ea69e-e0c3-4400-813b-66d201dab19d"></p><p>内容<br><img width="1253" alt="wx20171122-225830 2x" src="https://user-images.githubusercontent.com/7789698/33133766-c3a83662-cfd8-11e7-8f9a-043d4ceb7682.png"></p><p>我们来看看通信的时候编解码的包：<br><img src="https://user-images.githubusercontent.com/7789698/32903410-e1ca3d8c-cb2f-11e7-85dd-7cabb312482c.jpg" alt="main"></p><p>处理header</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encodeHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encodeHeader(<span class="keyword">this</span>.body != <span class="keyword">null</span> ? <span class="keyword">this</span>.body.length : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encodeHeader</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> bodyLength)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1&gt; header length size</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2&gt; header data length</span></span><br><span class="line">        <span class="keyword">byte</span>[] headerData;</span><br><span class="line">        headerData = <span class="keyword">this</span>.headerEncode();</span><br><span class="line"></span><br><span class="line">        length += headerData.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3&gt; body data length</span></span><br><span class="line">        length += bodyLength;</span><br><span class="line"></span><br><span class="line">        ByteBuffer result = ByteBuffer.allocate(<span class="number">4</span> + length - bodyLength);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// length</span></span><br><span class="line">        result.putInt(length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// header length</span></span><br><span class="line">        result.put(markProtocolType(headerData.length, serializeTypeCurrentRPC));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// header data</span></span><br><span class="line">        result.put(headerData);</span><br><span class="line"></span><br><span class="line">        result.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] markProtocolType(<span class="keyword">int</span> source, SerializeType type) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        result[<span class="number">0</span>] = type.getCode();</span><br><span class="line">        result[<span class="number">1</span>] = (<span class="keyword">byte</span>) ((source &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        result[<span class="number">2</span>] = (<span class="keyword">byte</span>) ((source &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        result[<span class="number">3</span>] = (<span class="keyword">byte</span>) (source &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="header内容："><a href="#header内容：" class="headerlink" title="header内容："></a>header内容：</h3><table><thead><tr><th>字段名</th><th align="center">类型</th><th align="center">Request</th><th align="center">Response</th><th align="right">描述</th></tr></thead><tbody><tr><td>code</td><td align="center">short</td><td align="center">请求操作码，请求接收方根据不同代码做不同操作</td><td align="center">应答结果代码，0成功非0失败</td><td align="right"></td></tr><tr><td>language</td><td align="center">byte</td><td align="center">请求发起方语言，默认JAVA</td><td align="center">应答接收方语言</td><td align="right">详见LanguageCode</td></tr><tr><td>version</td><td align="center">short</td><td align="center">请求发起方版本</td><td align="center">应答接收方</td><td align="right">环境变量 rocketmq.remoting.version</td></tr><tr><td>opaque</td><td align="center">int</td><td align="center">请求发起方在同一连接不同的请求标识符,多线程连接时复用</td><td align="center">应答方不做处理直接返回</td><td align="right">RPC请求的序号</td></tr><tr><td>flag</td><td align="center">int</td><td align="center">通信层标志位</td><td align="center">通信层标志位</td><td align="right">区分是普通RPC还是onewayRPC得标志</td></tr><tr><td>remark</td><td align="center">String</td><td align="center">传输自定义文本</td><td align="center">错误详细描述信息</td><td align="right"></td></tr><tr><td>extFields</td><td align="center">HashMap&lt;String, String&gt;</td><td align="center">请求自定义字段</td><td align="center">应答自定义字段</td><td align="right">customHeader的每个字段</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RPC_TYPE = <span class="number">0</span>; <span class="comment">// 0, REQUEST_COMMAND rpc类型的标注，一种是普通的RPC请求</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RPC_ONEWAY = <span class="number">1</span>; <span class="comment">// 0, 这种ONEWAY 是指单向RPC,比如心跳包</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;? extends CommandCustomHeader&gt;, Field[]&gt; clazzFieldsCache =</span><br><span class="line">        <span class="keyword">new</span> HashMap&lt;Class&lt;? extends CommandCustomHeader&gt;, Field[]&gt;();<span class="comment">//**CommandCustomHader**是所有headerData都要实现的接口，后面的Field[]就是解析header所对应的成员属性，所以这个map就是解析时候的字段缓存，下面两个map也是分别对应类名缓存和注解缓存。</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class, String&gt; canonicalNameCache = <span class="keyword">new</span> HashMap&lt;Class, String&gt;();</span><br><span class="line"> <span class="comment">// 1, RESPONSE_COMMAND</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Field, Annotation&gt; notNullAnnotationCache = <span class="keyword">new</span> HashMap&lt;Field, Annotation&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger requestId = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);<span class="comment">//这里的requestId是RPC请求的序号，每次请求的时候都会increment一下，同时后面会讲到的responseTable会用这个requestId作为key。   </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;<span class="comment">//这里的code是用来区分request类型的</span></span><br><span class="line"><span class="keyword">private</span> LanguageCode language = LanguageCode.JAVA;<span class="comment">//区分语言种类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> version = <span class="number">0</span>;<span class="comment">//RPC版本号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> opaque = requestId.getAndIncrement();<span class="comment">//这里的opaque就是requestId</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">0</span>;<span class="comment">//区分是普通RPC还是onewayRPC得标志</span></span><br><span class="line"><span class="keyword">private</span> String remark;<span class="comment">//标注信息</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, String&gt; extFields;<span class="comment">//存放本次RPC通信中所有的extFeilds，extFeilds其实就可以理解成本次通信的包头数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> CommandCustomHeader customHeader; <span class="comment">//包头数据，注意transient标记，不会被序列化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">byte</span>[] body; <span class="comment">//body数据，注意transient标记，不会被序列化</span></span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">byte</span>[] headerEncode() &#123;</span><br><span class="line">        <span class="keyword">this</span>.makeCustomHeaderToNet();</span><br><span class="line"><span class="comment">//基于rocketmq还是基于JSON的序列化方式</span></span><br><span class="line">        <span class="keyword">if</span> (SerializeType.ROCKETMQ == serializeTypeCurrentRPC) &#123;</span><br><span class="line">            <span class="keyword">return</span> RocketMQSerializable.rocketMQProtocolEncode(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RemotingSerializable.encode(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCustomHeaderToNet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.customHeader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Field[] fields = getClazzFields(customHeader.getClass());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.extFields) &#123;</span><br><span class="line">                <span class="keyword">this</span>.extFields = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    String name = field.getName();</span><br><span class="line">                    <span class="keyword">if</span> (!name.startsWith(<span class="string">&quot;this&quot;</span>)) &#123;</span><br><span class="line">                        Object value = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            value = field.get(<span class="keyword">this</span>.customHeader);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;Failed to access field [&#123;&#125;]&quot;</span>, name, e);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.extFields.put(name, value.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/32938009-b6449d98-cbb5-11e7-848a-cebb2631fc97.png" alt="ba3e2d6c-d79a-4148-9c88-facba76ff0e1"></p><h3 id="RocketMQ序列化"><a href="#RocketMQ序列化" class="headerlink" title="RocketMQ序列化"></a>RocketMQ序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] rocketMQProtocolEncode(RemotingCommand cmd) &#123;</span><br><span class="line">        <span class="comment">// String remark</span></span><br><span class="line">        <span class="keyword">byte</span>[] remarkBytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> remarkLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cmd.getRemark() != <span class="keyword">null</span> &amp;&amp; cmd.getRemark().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            remarkBytes = cmd.getRemark().getBytes(CHARSET_UTF8);</span><br><span class="line">            remarkLen = remarkBytes.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HashMap&lt;String, String&gt; extFields</span></span><br><span class="line">        <span class="keyword">byte</span>[] extFieldsBytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> extLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cmd.getExtFields() != <span class="keyword">null</span> &amp;&amp; !cmd.getExtFields().isEmpty()) &#123;</span><br><span class="line">            extFieldsBytes = mapSerialize(cmd.getExtFields());</span><br><span class="line">            extLen = extFieldsBytes.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> totalLen = calTotalLen(remarkLen, extLen);</span><br><span class="line"></span><br><span class="line">        ByteBuffer headerBuffer = ByteBuffer.allocate(totalLen);</span><br><span class="line">        <span class="comment">// int code(~32767)</span></span><br><span class="line">        headerBuffer.putShort((<span class="keyword">short</span>) cmd.getCode());</span><br><span class="line">        <span class="comment">// LanguageCode language</span></span><br><span class="line">        headerBuffer.put(cmd.getLanguage().getCode());</span><br><span class="line">        <span class="comment">// int version(~32767)</span></span><br><span class="line">        headerBuffer.putShort((<span class="keyword">short</span>) cmd.getVersion());</span><br><span class="line">        <span class="comment">// int opaque</span></span><br><span class="line">        headerBuffer.putInt(cmd.getOpaque());</span><br><span class="line">        <span class="comment">// int flag</span></span><br><span class="line">        headerBuffer.putInt(cmd.getFlag());</span><br><span class="line">        <span class="comment">// String remark</span></span><br><span class="line">        <span class="keyword">if</span> (remarkBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headerBuffer.putInt(remarkBytes.length);</span><br><span class="line">            headerBuffer.put(remarkBytes);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            headerBuffer.putInt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// HashMap&lt;String, String&gt; extFields;</span></span><br><span class="line">        <span class="keyword">if</span> (extFieldsBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headerBuffer.putInt(extFieldsBytes.length);</span><br><span class="line">            headerBuffer.put(extFieldsBytes);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            headerBuffer.putInt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headerBuffer.array();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(<span class="keyword">final</span> Object obj) &#123;</span><br><span class="line">    <span class="keyword">final</span> String json = toJson(obj, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (json != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> json.getBytes(CHARSET_UTF8);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OnewayRPC"><a href="#OnewayRPC" class="headerlink" title="OnewayRPC"></a>OnewayRPC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markOnewayRPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">1</span> &lt;&lt; RPC_ONEWAY;</span><br><span class="line">    <span class="keyword">this</span>.flag |= bits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JSONField(serialize = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOnewayRPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">1</span> &lt;&lt; RPC_ONEWAY;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.flag &amp; bits) == bits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField(serialize = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isResponseType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">1</span> &lt;&lt; RPC_TYPE;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.flag &amp; bits) == bits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">RemotingCommand</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        processMessageReceived(ctx, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMessageReceived</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> RemotingCommand cmd = msg;</span><br><span class="line">    <span class="keyword">if</span> (cmd != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (cmd.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_COMMAND:</span><br><span class="line">                processRequestCommand(ctx, cmd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESPONSE_COMMAND:</span><br><span class="line">                processResponseCommand(ctx, cmd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="processRequestCommand"><a href="#processRequestCommand" class="headerlink" title="processRequestCommand"></a>processRequestCommand</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequestCommand</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, <span class="keyword">final</span> RemotingCommand cmd)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓存着每个请求的code对应的处理器</span></span><br><span class="line"><span class="comment">//MQClientAPIImpl构造器里面初始化了</span></span><br><span class="line"><span class="comment">//CHECK_TRANSACTION_STATE(39)、NOTIFY_CONSUMER_IDS_CHANGED(40)、RESET_CONSUMER_CLIENT_OFFSET(220)、GET_CONSUMER_STATUS_FROM_CLIENT(221)、GET_CONSUMER_RUNNING_INFO(307)、CONSUME_MESSAGE_DIRECTLY（309）</span></span><br><span class="line">        <span class="keyword">final</span> Pair&lt;NettyRequestProcessor, ExecutorService&gt; matched = <span class="keyword">this</span>.processorTable.get(cmd.getCode());</span><br><span class="line">        <span class="keyword">final</span> Pair&lt;NettyRequestProcessor, ExecutorService&gt; pair = <span class="keyword">null</span> == matched ? <span class="keyword">this</span>.defaultRequestProcessor : matched;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> opaque = cmd.getOpaque();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pair != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Runnable run = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        RPCHook rpcHook = NettyRemotingAbstract.<span class="keyword">this</span>.getRPCHook();</span><br><span class="line">                        <span class="keyword">if</span> (rpcHook != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            rpcHook.doBeforeRequest(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> RemotingCommand response = pair.getObject1().processRequest(ctx, cmd);</span><br><span class="line">                        <span class="keyword">if</span> (rpcHook != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            rpcHook.doAfterResponse(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!cmd.isOnewayRPC()) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                response.setOpaque(opaque);</span><br><span class="line">                                response.markResponseType();</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    ctx.writeAndFlush(response);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                    log.error(<span class="string">&quot;process request over, but response failed&quot;</span>, e);</span><br><span class="line">                                    log.error(cmd.toString());</span><br><span class="line">                                    log.error(response.toString());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;process request exception&quot;</span>, e);</span><br><span class="line">                        log.error(cmd.toString());</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!cmd.isOnewayRPC()) &#123;</span><br><span class="line">                            <span class="keyword">final</span> RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR,</span><br><span class="line">                                RemotingHelper.exceptionSimpleDesc(e));</span><br><span class="line">                            response.setOpaque(opaque);</span><br><span class="line">                            ctx.writeAndFlush(response);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pair.getObject1().rejectRequest()) &#123;</span><br><span class="line">                <span class="keyword">final</span> RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,</span><br><span class="line">                    <span class="string">&quot;[REJECTREQUEST]system busy, start flow control for a while&quot;</span>);</span><br><span class="line">                response.setOpaque(opaque);</span><br><span class="line">                ctx.writeAndFlush(response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> RequestTask requestTask = <span class="keyword">new</span> RequestTask(run, ctx.channel(), cmd);</span><br><span class="line">                pair.getObject2().submit(requestTask);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((System.currentTimeMillis() % <span class="number">10000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    log.warn(RemotingHelper.parseChannelRemoteAddr(ctx.channel())</span><br><span class="line">                        + <span class="string">&quot;, too many requests and system thread pool busy, RejectedExecutionException &quot;</span></span><br><span class="line">                        + pair.getObject2().toString()</span><br><span class="line">                        + <span class="string">&quot; request code: &quot;</span> + cmd.getCode());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!cmd.isOnewayRPC()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,</span><br><span class="line">                        <span class="string">&quot;[OVERLOAD]system busy, start flow control for a while&quot;</span>);</span><br><span class="line">                    response.setOpaque(opaque);</span><br><span class="line">                    ctx.writeAndFlush(response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String error = <span class="string">&quot; request type &quot;</span> + cmd.getCode() + <span class="string">&quot; not supported&quot;</span>;</span><br><span class="line">            <span class="keyword">final</span> RemotingCommand response =</span><br><span class="line">                RemotingCommand.createResponseCommand(RemotingSysResponseCode.REQUEST_CODE_NOT_SUPPORTED, error);</span><br><span class="line">            response.setOpaque(opaque);</span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">            log.error(RemotingHelper.parseChannelRemoteAddr(ctx.channel()) + error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="processRequestCommand-1"><a href="#processRequestCommand-1" class="headerlink" title="processRequestCommand"></a>processRequestCommand</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResponseCommand</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> opaque = cmd.getOpaque();</span><br><span class="line">       <span class="comment">//获取请求对应的responseFuture</span></span><br><span class="line">        <span class="keyword">final</span> ResponseFuture responseFuture = responseTable.get(opaque);</span><br><span class="line">        <span class="keyword">if</span> (responseFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line">            responseFuture.setResponseCommand(cmd);</span><br><span class="line"></span><br><span class="line">            responseFuture.release();</span><br><span class="line"></span><br><span class="line">            responseTable.remove(opaque);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (responseFuture.getInvokeCallback() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                executeInvokeCallback(responseFuture);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                responseFuture.putResponse(cmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;receive response, but not matched any request, &quot;</span> + RemotingHelper.parseChannelRemoteAddr(ctx.channel()));</span><br><span class="line">            log.warn(cmd.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/33025070-d7112ef8-ce47-11e7-913f-4893bde369be.jpg" alt="sequencediagram1"></p><p>部分重点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> SendResult <span class="title">sendKernelImpl</span><span class="params">(<span class="keyword">final</span> Message msg,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> MessageQueue mq,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> CommunicationMode communicationMode,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> SendCallback sendCallback,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> TopicPublishInfo topicPublishInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> <span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException </span>&#123;</span><br><span class="line">        String brokerAddr = <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == brokerAddr) &#123;</span><br><span class="line">            tryToFindTopicPublishInfo(mq.getTopic());</span><br><span class="line">            brokerAddr = <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SendMessageContext context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (brokerAddr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            brokerAddr = MixAll.brokerVIPChannel(<span class="keyword">this</span>.defaultMQProducer.isSendMessageWithVIPChannel(), brokerAddr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] prevBody = msg.getBody();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//for MessageBatch,ID has been set in the generating process</span></span><br><span class="line">                <span class="keyword">if</span> (!(msg <span class="keyword">instanceof</span> MessageBatch)) &#123;</span><br><span class="line">                    MessageClientIDSetter.setUniqID(msg);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> sysFlag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.tryToCompressMessage(msg)) &#123;</span><br><span class="line">                    sysFlag |= MessageSysFlag.COMPRESSED_FLAG;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String tranMsg = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class="line">                <span class="keyword">if</span> (tranMsg != <span class="keyword">null</span> &amp;&amp; Boolean.parseBoolean(tranMsg)) &#123;</span><br><span class="line">                    sysFlag |= MessageSysFlag.TRANSACTION_PREPARED_TYPE;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (hasCheckForbiddenHook()) &#123;</span><br><span class="line">                    CheckForbiddenContext checkForbiddenContext = <span class="keyword">new</span> CheckForbiddenContext();</span><br><span class="line">                    checkForbiddenContext.setNameSrvAddr(<span class="keyword">this</span>.defaultMQProducer.getNamesrvAddr());</span><br><span class="line">                    checkForbiddenContext.setGroup(<span class="keyword">this</span>.defaultMQProducer.getProducerGroup());</span><br><span class="line">                    checkForbiddenContext.setCommunicationMode(communicationMode);</span><br><span class="line">                    checkForbiddenContext.setBrokerAddr(brokerAddr);</span><br><span class="line">                    checkForbiddenContext.setMessage(msg);</span><br><span class="line">                    checkForbiddenContext.setMq(mq);</span><br><span class="line">                    checkForbiddenContext.setUnitMode(<span class="keyword">this</span>.isUnitMode());</span><br><span class="line">                    <span class="keyword">this</span>.executeCheckForbiddenHook(checkForbiddenContext);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasSendMessageHook()) &#123;</span><br><span class="line">                    context = <span class="keyword">new</span> SendMessageContext();</span><br><span class="line">                    context.setProducer(<span class="keyword">this</span>);</span><br><span class="line">                    context.setProducerGroup(<span class="keyword">this</span>.defaultMQProducer.getProducerGroup());</span><br><span class="line">                    context.setCommunicationMode(communicationMode);</span><br><span class="line">                    context.setBornHost(<span class="keyword">this</span>.defaultMQProducer.getClientIP());</span><br><span class="line">                    context.setBrokerAddr(brokerAddr);</span><br><span class="line">                    context.setMessage(msg);</span><br><span class="line">                    context.setMq(mq);</span><br><span class="line">                    String isTrans = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class="line">                    <span class="keyword">if</span> (isTrans != <span class="keyword">null</span> &amp;&amp; isTrans.equals(<span class="string">&quot;true&quot;</span>)) &#123;</span><br><span class="line">                        context.setMsgType(MessageType.Trans_Msg_Half);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (msg.getProperty(<span class="string">&quot;__STARTDELIVERTIME&quot;</span>) != <span class="keyword">null</span> || msg.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        context.setMsgType(MessageType.Delay_Msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.executeSendMessageHookBefore(context);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">//构成cmd里面的customHeader</span></span><br><span class="line">                SendMessageRequestHeader requestHeader = <span class="keyword">new</span> SendMessageRequestHeader();</span><br><span class="line">              <span class="comment">//ProducerGroup</span></span><br><span class="line">                requestHeader.setProducerGroup(<span class="keyword">this</span>.defaultMQProducer.getProducerGroup());</span><br><span class="line">              <span class="comment">//Topic</span></span><br><span class="line">                requestHeader.setTopic(msg.getTopic());</span><br><span class="line">              <span class="comment">//DefaultTopic</span></span><br><span class="line">                requestHeader.setDefaultTopic(<span class="keyword">this</span>.defaultMQProducer.getCreateTopicKey());</span><br><span class="line">  <span class="comment">//DefaultTopicQueueNums在发送消息时，自动创建服务器不存在的topic，默认创建的队列数（默认4）</span></span><br><span class="line">requestHeader.setDefaultTopicQueueNums(<span class="keyword">this</span>.defaultMQProducer.getDefaultTopicQueueNums());</span><br><span class="line">              <span class="comment">//QueueId</span></span><br><span class="line">                requestHeader.setQueueId(mq.getQueueId());</span><br><span class="line">              <span class="comment">//参见MessageSysFlag 跟事务消息有关</span></span><br><span class="line">                requestHeader.setSysFlag(sysFlag);</span><br><span class="line">             <span class="comment">//</span></span><br><span class="line">                requestHeader.setBornTimestamp(System.currentTimeMillis());</span><br><span class="line">               </span><br><span class="line">                requestHeader.setFlag(msg.getFlag());</span><br><span class="line">                requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));</span><br><span class="line">             <span class="comment">//reconsumeTimes代表消息重试次数</span></span><br><span class="line">                requestHeader.setReconsumeTimes(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                requestHeader.setUnitMode(<span class="keyword">this</span>.isUnitMode());</span><br><span class="line">              <span class="comment">//如果是批处理消息，放入状态</span></span><br><span class="line">                requestHeader.setBatch(msg <span class="keyword">instanceof</span> MessageBatch);</span><br><span class="line">                <span class="keyword">if</span> (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                    String reconsumeTimes = MessageAccessor.getReconsumeTime(msg);</span><br><span class="line">                    <span class="keyword">if</span> (reconsumeTimes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        requestHeader.setReconsumeTimes(Integer.valueOf(reconsumeTimes));</span><br><span class="line">                        MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_RECONSUME_TIME);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String maxReconsumeTimes = MessageAccessor.getMaxReconsumeTimes(msg);</span><br><span class="line">                    <span class="keyword">if</span> (maxReconsumeTimes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        requestHeader.setMaxReconsumeTimes(Integer.valueOf(maxReconsumeTimes));</span><br><span class="line">                        MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_MAX_RECONSUME_TIMES);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                SendResult sendResult = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">switch</span> (communicationMode) &#123;</span><br><span class="line">                    <span class="keyword">case</span> ASYNC:</span><br><span class="line">                        sendResult = <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().sendMessage(</span><br><span class="line">                            brokerAddr,</span><br><span class="line">                            mq.getBrokerName(),</span><br><span class="line">                            msg,</span><br><span class="line">                            requestHeader,</span><br><span class="line">                            timeout,</span><br><span class="line">                            communicationMode,</span><br><span class="line">                            sendCallback,</span><br><span class="line">                            topicPublishInfo,</span><br><span class="line">                            <span class="keyword">this</span>.mQClientFactory,</span><br><span class="line">                            <span class="keyword">this</span>.defaultMQProducer.getRetryTimesWhenSendAsyncFailed(),</span><br><span class="line">                            context,</span><br><span class="line">                            <span class="keyword">this</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> ONEWAY:</span><br><span class="line">                    <span class="keyword">case</span> SYNC:</span><br><span class="line">                        sendResult = <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().sendMessage(</span><br><span class="line">                            brokerAddr,</span><br><span class="line">                            mq.getBrokerName(),</span><br><span class="line">                            msg,</span><br><span class="line">                            requestHeader,</span><br><span class="line">                            timeout,</span><br><span class="line">                            communicationMode,</span><br><span class="line">                            context,</span><br><span class="line">                            <span class="keyword">this</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">assert</span> <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasSendMessageHook()) &#123;</span><br><span class="line">                    context.setSendResult(sendResult);</span><br><span class="line">                    <span class="keyword">this</span>.executeSendMessageHookAfter(context);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> sendResult;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasSendMessageHook()) &#123;</span><br><span class="line">                    context.setException(e);</span><br><span class="line">                    <span class="keyword">this</span>.executeSendMessageHookAfter(context);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MQBrokerException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasSendMessageHook()) &#123;</span><br><span class="line">                    context.setException(e);</span><br><span class="line">                    <span class="keyword">this</span>.executeSendMessageHookAfter(context);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasSendMessageHook()) &#123;</span><br><span class="line">                    context.setException(e);</span><br><span class="line">                    <span class="keyword">this</span>.executeSendMessageHookAfter(context);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                msg.setBody(prevBody);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">&quot;The broker[&quot;</span> + mq.getBrokerName() + <span class="string">&quot;] not exist&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//12</span></span><br><span class="line">request = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, requestHeader);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RemotingCommand <span class="title">createRequestCommand</span><span class="params">(<span class="keyword">int</span> code, CommandCustomHeader customHeader)</span> </span>&#123;</span><br><span class="line">        RemotingCommand cmd = <span class="keyword">new</span> RemotingCommand();</span><br><span class="line">        cmd.setCode(code);</span><br><span class="line">        cmd.customHeader = customHeader;</span><br><span class="line">        setCmdVersion(cmd);</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发送端做了什么：<br><img src="https://user-images.githubusercontent.com/7789698/33022975-bcdea14c-ce41-11e7-83ec-895d892a8ce1.png" alt="invokesync-client png"></p><ul><li>构建ResponseFuture,设置opaque值，把ResponseFuture以opaque为键放入Map中保存</li><li>netty发送请送请求</li><li>发送成功设置ResponseFuture发送状态为成功；发送失败设置ResponseFuture发送失败，并且从Map存中移除ResponseFuture</li><li>responseFuture.waitResponse(timeoutMillis)获取响应(如果超时则抛出异常)</li><li>收到服务端的回应以后，从Map中根据opaque拿出responseFuture，将回应写入其中，并从Map中移除</li><li>resposneFuture得到回应，并将返回给客户端</li></ul><p>接收端做了什么：</p><ul><li>netty监听得到发送过来的消息，分拣给Server端进行处理</li><li>根据消息的code得到对应的处理器(Processor)</li><li>创建一个新的线程，在这个线程中让处理器去处理消息，并得到回应(Response)。判断如果消息不是单向的(one-way)，则把请求中的opaque放回response中，并把消息发回给请求端。</li><li>将线程放入线程池–这里注意 请求消息的code对应了一组(Processor，ExectorService)，处理器和线程池是对应的</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/33023053-fd89c410-ce41-11e7-9d66-b82a536b1d89.png" alt="invokesync2"></p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RemotingCommand <span class="title">invokeSync</span><span class="params">(String addr, <span class="keyword">final</span> RemotingCommand request, <span class="keyword">long</span> timeoutMillis)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//根据地址获取channel</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = <span class="keyword">this</span>.getAndCreateChannel(addr);</span><br><span class="line">        <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isActive()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.rpcHook != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.rpcHook.doBeforeRequest(addr, request);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">                RemotingCommand response = <span class="keyword">this</span>.invokeSyncImpl(channel, request, timeoutMillis);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.rpcHook != <span class="keyword">null</span>) &#123;<span class="keyword">this</span>.rpcHook.doAfterResponse(RemotingHelper.parseChannelRemoteAddr(channel), request, response);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemotingSendRequestException e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;invokeSync: send request exception, so close the channel[&#123;&#125;]&quot;</span>, addr);</span><br><span class="line">                <span class="keyword">this</span>.closeChannel(addr, channel);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemotingTimeoutException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nettyClientConfig.isClientCloseSocketIfTimeout()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.closeChannel(addr, channel);</span><br><span class="line">                    log.warn(<span class="string">&quot;invokeSync: close socket because of timeout, &#123;&#125;ms, &#123;&#125;&quot;</span>, timeoutMillis, addr);</span><br><span class="line">                &#125;</span><br><span class="line">                log.warn(<span class="string">&quot;invokeSync: wait response timeout exception, the channel[&#123;&#125;]&quot;</span>, addr);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.closeChannel(addr, channel);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingConnectException(addr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RemotingCommand <span class="title">invokeSyncImpl</span><span class="params">(<span class="keyword">final</span> Channel channel, <span class="keyword">final</span> RemotingCommand request,</span></span></span><br><span class="line"><span class="params"><span class="function">       <span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> InterruptedException, RemotingSendRequestException, RemotingTimeoutException </span>&#123;</span><br><span class="line">         <span class="comment">//获取请求的序号</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> opaque = request.getOpaque();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">final</span> ResponseFuture responseFuture = <span class="keyword">new</span> ResponseFuture(opaque, timeoutMillis, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">         <span class="comment">//根据opaque序号存入responseFuture</span></span><br><span class="line">          <span class="keyword">this</span>.responseTable.put(opaque, responseFuture);</span><br><span class="line">         <span class="comment">//获取addr</span></span><br><span class="line">           <span class="keyword">final</span> SocketAddress addr = channel.remoteAddress();</span><br><span class="line">         <span class="comment">//调用netty的channel发送请求，监听返回回写response结果到responseFuture</span></span><br><span class="line">           channel.writeAndFlush(request).addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture f)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                   <span class="keyword">if</span> (f.isSuccess()) &#123;</span><br><span class="line">                       responseFuture.setSendRequestOK(<span class="keyword">true</span>);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       responseFuture.setSendRequestOK(<span class="keyword">false</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//移除相应opaque对应responseFuture</span></span><br><span class="line">                   responseTable.remove(opaque);</span><br><span class="line">                   responseFuture.setCause(f.cause());</span><br><span class="line">                   responseFuture.putResponse(<span class="keyword">null</span>);</span><br><span class="line">                   log.warn(<span class="string">&quot;send a request command to channel &lt;&quot;</span> + addr + <span class="string">&quot;&gt; failed.&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">            <span class="comment">//等待putResponse 返回结果 this.countDownLatch.await(timeoutMillis, TimeUnit.MILLISECONDS); </span></span><br><span class="line">           RemotingCommand responseCommand = responseFuture.waitResponse(timeoutMillis);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">null</span> == responseCommand) &#123;</span><br><span class="line">               <span class="keyword">if</span> (responseFuture.isSendRequestOK()) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> RemotingTimeoutException(RemotingHelper.parseSocketAddressAddr(addr), timeoutMillis,</span><br><span class="line">                       responseFuture.getCause());</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> RemotingSendRequestException(RemotingHelper.parseSocketAddressAddr(addr), responseFuture.getCause());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> responseCommand;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.responseTable.remove(opaque);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>SendResult [sendStatus=SEND_OK, msgId=AC1107140D7C3764951D701DA4250000, offsetMsgId=AC1128E100002A9F0000000000579CFC, messageQueue=MessageQueue [topic=TopicTest, brokerName=kickseed, queueId=0], queueOffset=7595]</p><img width="1279" alt="wx20171122-231321 2x" src="https://user-images.githubusercontent.com/7789698/33134496-d6f9a352-cfda-11e7-9250-2e87e9b32275.png"><img width="1246" alt="wx20171122-231450 2x" src="https://user-images.githubusercontent.com/7789698/33134824-b2d92ed8-cfdb-11e7-9e4b-dc92a98af1a8.png">]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 源码解析（五）--处理线程的产生和处理</title>
      <link href="/hexo/post/e3943dbd.html"/>
      <url>/hexo/post/e3943dbd.html</url>
      
        <content type="html"><![CDATA[<p>Catalina</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digester.addRule(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                  new ConnectorCreateRule());</span><br><span class="line"> digester.addRule(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                  new SetAllPropertiesRule(new String[]&#123;&quot;executor&quot;, &quot;sslImplementationName&quot;&#125;));</span><br><span class="line"> digester.addSetNext(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                     &quot;addConnector&quot;,</span><br><span class="line">                     &quot;org.apache.catalina.connector.Connector&quot;);</span><br></pre></td></tr></table></figure><p>ConnectorCreateRule</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void begin(String namespace, String name, Attributes attributes)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        Service svc = (Service)digester.peek();</span><br><span class="line">        Executor ex = null;</span><br><span class="line">        if ( attributes.getValue(&quot;executor&quot;)!=null ) &#123;</span><br><span class="line">            ex = svc.getExecutor(attributes.getValue(&quot;executor&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">//根据protocol</span><br><span class="line">        Connector con = new Connector(attributes.getValue(&quot;protocol&quot;));</span><br><span class="line">        if (ex != null) &#123;</span><br><span class="line">            setExecutor(con, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        String sslImplementationName = attributes.getValue(&quot;sslImplementationName&quot;);</span><br><span class="line">        if (sslImplementationName != null) &#123;</span><br><span class="line">            setSSLImplementationName(con, sslImplementationName);</span><br><span class="line">        &#125;</span><br><span class="line">        digester.push(con);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Connector</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">    public Connector(String protocol) &#123;</span><br><span class="line">        setProtocol(protocol);</span><br><span class="line">        // Instantiate protocol handler</span><br><span class="line">        ProtocolHandler p = null;</span><br><span class="line">        try &#123;</span><br><span class="line">//加载ProtocolHandlerClassName </span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class="line">            p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    &quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;), e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            this.protocolHandler = p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Globals.STRICT_SERVLET_COMPLIANCE) &#123;</span><br><span class="line">            uriCharset = StandardCharsets.ISO_8859_1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            uriCharset = StandardCharsets.UTF_8;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Deprecated</span><br><span class="line">    public void setProtocol(String protocol) &#123;</span><br><span class="line"></span><br><span class="line">        boolean aprConnector = AprLifecycleListener.isAprAvailable() &amp;&amp;</span><br><span class="line">                AprLifecycleListener.getUseAprConnector();</span><br><span class="line"></span><br><span class="line">//如果是Connector protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">        if (&quot;HTTP/1.1&quot;.equals(protocol) || protocol == null) &#123;</span><br><span class="line">            if (aprConnector) &#123;</span><br><span class="line">//设置ProtocolHandlerClassName</span><br><span class="line">                setProtocolHandlerClassName(&quot;org.apache.coyote.http11.Http11AprProtocol&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                setProtocolHandlerClassName(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (&quot;AJP/1.3&quot;.equals(protocol)) &#123;</span><br><span class="line">            if (aprConnector) &#123;</span><br><span class="line">                setProtocolHandlerClassName(&quot;org.apache.coyote.ajp.AjpAprProtocol&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                setProtocolHandlerClassName(&quot;org.apache.coyote.ajp.AjpNioProtocol&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            setProtocolHandlerClassName(protocol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Http11AprProtocol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public Http11AprProtocol() &#123;</span><br><span class="line">        super(new AprEndpoint());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AbstractHttp11Protocol(AbstractEndpoint&lt;S&gt; endpoint) &#123;</span><br><span class="line">        super(endpoint);</span><br><span class="line">        setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">//初始化ConnectionHandler</span><br><span class="line">        ConnectionHandler&lt;S&gt; cHandler = new ConnectionHandler&lt;&gt;(this);</span><br><span class="line">        setHandler(cHandler);</span><br><span class="line">        getEndpoint().setHandler(cHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AbstractProtocol(AbstractEndpoint&lt;S&gt; endpoint) &#123;</span><br><span class="line">        this.endpoint = endpoint;</span><br><span class="line">        setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);</span><br><span class="line">        setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public AprEndpoint() &#123;</span><br><span class="line">        // Need to override the default for maxConnections to align it with what</span><br><span class="line">        // was pollerSize (before the two were merged)</span><br><span class="line">        setMaxConnections(8 * 1024);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/37265784-af4e45f8-25f0-11e8-84bc-03971bf6d410.png" alt="image"></p><p>AbstractProtocol的start</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">//AbstractEndpoint</span><br><span class="line">        endpoint.start();</span><br><span class="line"></span><br><span class="line">        // Start async timeout thread</span><br><span class="line">        asyncTimeout = new AsyncTimeout();</span><br><span class="line">//创建http-apr-8080-AsyncTimeout线程（守护进程）</span><br><span class="line">//作用：检测超时的请求，并将该请求再转发到工作线程池处理</span><br><span class="line">        Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + &quot;-AsyncTimeout&quot;);</span><br><span class="line">        int priority = endpoint.getThreadPriority();</span><br><span class="line">        if (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class="line">            priority = Thread.NORM_PRIORITY;</span><br><span class="line">        &#125;</span><br><span class="line">        timeoutThread.setPriority(priority);</span><br><span class="line">        timeoutThread.setDaemon(true);</span><br><span class="line">//启动</span><br><span class="line">        timeoutThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AprEndpoint（AbstractEndpoint）的start</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">    public final void start() throws Exception &#123;</span><br><span class="line">        if (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">//bind</span><br><span class="line">            bind();</span><br><span class="line">            bindState = BindState.BOUND_ON_START;</span><br><span class="line">        &#125;</span><br><span class="line">        startInternal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @Override</span><br><span class="line">    public void startInternal() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        if (!running) &#123;</span><br><span class="line">            running = true;</span><br><span class="line">            paused = false;</span><br><span class="line"></span><br><span class="line">            processorCache = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getProcessorCache());</span><br><span class="line"></span><br><span class="line">            // Create worker collection</span><br><span class="line">            if (getExecutor() == null) &#123;</span><br><span class="line">                createExecutor();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">            // Start poller thread</span><br><span class="line">            poller = new Poller();</span><br><span class="line">            poller.init();</span><br><span class="line">            Thread pollerThread = new Thread(poller, getName() + &quot;-Poller&quot;);</span><br><span class="line">            pollerThread.setPriority(threadPriority);</span><br><span class="line">            pollerThread.setDaemon(true);</span><br><span class="line">            pollerThread.start();</span><br><span class="line"></span><br><span class="line">            // Start sendfile thread</span><br><span class="line">            if (getUseSendfile()) &#123;</span><br><span class="line">                sendfile = new Sendfile();</span><br><span class="line">                sendfile.init();</span><br><span class="line">                Thread sendfileThread =</span><br><span class="line">                        new Thread(sendfile, getName() + &quot;-Sendfile&quot;);</span><br><span class="line">                sendfileThread.setPriority(threadPriority);</span><br><span class="line">                sendfileThread.setDaemon(true);</span><br><span class="line">                sendfileThread.start();</span><br><span class="line">            &#125;</span><br><span class="line">//创建Acceptor线程</span><br><span class="line">            startAcceptorThreads();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void createExecutor() &#123;</span><br><span class="line">        internalExecutor = true;</span><br><span class="line">        TaskQueue taskqueue = new TaskQueue();</span><br><span class="line">//http-apr-8080-exec-</span><br><span class="line">        TaskThreadFactory tf = new TaskThreadFactory(getName() + &quot;-exec-&quot;, daemon, getThreadPriority());</span><br><span class="line">        executor = new ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), 60, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">        taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected final void startAcceptorThreads() &#123;</span><br><span class="line">//accept队列的长度；当accept队列中连接的个数达到acceptCount时，队列满，进来的请求一律被拒绝。默认值是100。</span><br><span class="line">        int count = getAcceptorThreadCount();</span><br><span class="line">        acceptors = new Acceptor[count];</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">//new Acceptor()</span><br><span class="line">            acceptors[i] = createAcceptor();</span><br><span class="line">//http-apr-8080-Acceptor-0</span><br><span class="line">            String threadName = getName() + &quot;-Acceptor-&quot; + i;</span><br><span class="line">            acceptors[i].setThreadName(threadName);</span><br><span class="line">            Thread t = new Thread(acceptors[i], threadName);</span><br><span class="line">            t.setPriority(getAcceptorThreadPriority());</span><br><span class="line">            t.setDaemon(getDaemon());</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里就启动了一个http-apr-8080-AsyncTimeout线程和多个http-apr-8080-Acceptor-线程</p><p>这里我们着重看下Acceptor线程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">protected class Acceptor extends AbstractEndpoint.Acceptor &#123;</span><br><span class="line"></span><br><span class="line">        private final Log log = LogFactory.getLog(AprEndpoint.Acceptor.class);</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line"></span><br><span class="line">            int errorDelay = 0;</span><br><span class="line"></span><br><span class="line">            // 除非收到shutdown命令否则一直循环</span><br><span class="line">            while (running) &#123;</span><br><span class="line"></span><br><span class="line">                // Loop if endpoint is paused</span><br><span class="line">                while (paused &amp;&amp; running) &#123;</span><br><span class="line">                    state = AcceptorState.PAUSED;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(50);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        // Ignore</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (!running) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                state = AcceptorState.RUNNING;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    //if we have reached max connections, wait</span><br><span class="line">//使用了connectionLimitLatch限制最大连接数，到达上限就wait</span><br><span class="line">                    countUpOrAwaitConnection();</span><br><span class="line"></span><br><span class="line">                    long socket = 0;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        // Accept the next incoming connection from the server</span><br><span class="line">                        // socket 监听到客户端的连接</span><br><span class="line">                        socket = Socket.accept(serverSock);</span><br><span class="line"></span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        // We didn&#x27;t get a socket</span><br><span class="line">                        countDownConnection();</span><br><span class="line">                        if (running) &#123;</span><br><span class="line">                            // Introduce delay if necessary</span><br><span class="line">                            errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">                            // re-throw</span><br><span class="line">                            throw e;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // Successful accept, reset the error delay</span><br><span class="line">                    errorDelay = 0;</span><br><span class="line"></span><br><span class="line">                    if (running &amp;&amp; !paused) &#123;</span><br><span class="line">                        // 把这个socket给一个合适的处理器处理</span><br><span class="line">                        if (!processSocketWithOptions(socket)) &#123;</span><br><span class="line">                            // Close socket right away</span><br><span class="line">                            closeSocket(socket);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // Close socket right away</span><br><span class="line">                        // No code path could have added the socket to the</span><br><span class="line">                        // Poller so use destroySocket()</span><br><span class="line">                        destroySocket(socket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Throwable t) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    String msg = sm.getString(&quot;endpoint.accept.fail&quot;);</span><br><span class="line">                    if (t instanceof Error) &#123;</span><br><span class="line">                        Error e = (Error) t;</span><br><span class="line">                        if (e.getError() == 233) &#123;</span><br><span class="line">                            // Not an error on HP-UX so log as a warning</span><br><span class="line">                            // so it can be filtered out on that platform</span><br><span class="line">                            // See bug 50273</span><br><span class="line">                            log.warn(msg, t);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            log.error(msg, t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                            log.error(msg, t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                // The processor will recycle itself when it finishes</span><br><span class="line">            &#125;</span><br><span class="line">            state = AcceptorState.ENDED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected boolean processSocketWithOptions(long socket) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // During shutdown, executor may be null - avoid NPE</span><br><span class="line">            if (running) &#123;</span><br><span class="line">  //包装成AprSocketWrapper</span><br><span class="line">                AprSocketWrapper wrapper = new AprSocketWrapper(Long.valueOf(socket), this);</span><br><span class="line">                wrapper.setKeepAliveLeft(getMaxKeepAliveRequests());</span><br><span class="line">                wrapper.setSecure(isSSLEnabled());</span><br><span class="line">                wrapper.setReadTimeout(getConnectionTimeout());</span><br><span class="line">                wrapper.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">                connections.put(Long.valueOf(socket), wrapper);</span><br><span class="line">//SocketWithOptionsProcessor丢到线程池执行</span><br><span class="line">                getExecutor().execute(new SocketWithOptionsProcessor(wrapper));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (RejectedExecutionException x) &#123;</span><br><span class="line">            log.warn(&quot;Socket processing request was rejected for:&quot;+socket,x);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            // This means we got an OOM or similar creating a thread, or that</span><br><span class="line">            // the pool and its queue are full</span><br><span class="line">            log.error(sm.getString(&quot;endpoint.process.fail&quot;), t);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SocketWithOptionsProcessor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">protected class SocketWithOptionsProcessor implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">        protected SocketWrapperBase&lt;Long&gt; socket = null;</span><br><span class="line"></span><br><span class="line">        public SocketWithOptionsProcessor(SocketWrapperBase&lt;Long&gt; socket) &#123;</span><br><span class="line">            this.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line"></span><br><span class="line">            synchronized (socket) &#123;</span><br><span class="line">                if (!deferAccept) &#123;</span><br><span class="line">                    if (setSocketOptions(socket)) &#123;</span><br><span class="line">                        getPoller().add(socket.getSocket().longValue(),</span><br><span class="line">                                getConnectionTimeout(), Poll.APR_POLLIN);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // Close socket and pool</span><br><span class="line">                        closeSocket(socket.getSocket().longValue());</span><br><span class="line">                        socket = null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // Process the request from this socket</span><br><span class="line">                    if (!setSocketOptions(socket)) &#123;</span><br><span class="line">                        // Close socket and pool</span><br><span class="line">                        closeSocket(socket.getSocket().longValue());</span><br><span class="line">                        socket = null;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // Process the request from this socket</span><br><span class="line">//用Http11AprProtocol 处理</span><br><span class="line">                    Handler.SocketState state = getHandler().process(socket,</span><br><span class="line">                            SocketEvent.OPEN_READ);</span><br><span class="line">                    if (state == Handler.SocketState.CLOSED) &#123;</span><br><span class="line">                        // Close socket and pool</span><br><span class="line">                        closeSocket(socket.getSocket().longValue());</span><br><span class="line">                        socket = null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">        public SocketState process(SocketWrapperBase&lt;S&gt; wrapper, SocketEvent status) &#123;</span><br><span class="line">            if (wrapper == null) &#123;</span><br><span class="line">                // Nothing to do. Socket has been closed.</span><br><span class="line">                return SocketState.CLOSED;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            S socket = wrapper.getSocket();</span><br><span class="line">//缓存一个map</span><br><span class="line">            Processor processor = connections.get(socket);</span><br><span class="line"></span><br><span class="line">            if (processor != null) &#123;</span><br><span class="line">                // Make sure an async timeout doesn&#x27;t fire</span><br><span class="line">                getProtocol().removeWaitingProcessor(processor);</span><br><span class="line">            &#125; else if (status == SocketEvent.DISCONNECT || status == SocketEvent.ERROR) &#123;</span><br><span class="line">                // Nothing to do. Endpoint requested a close and there is no</span><br><span class="line">                // longer a processor associated with this socket.</span><br><span class="line">                return SocketState.CLOSED;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ContainerThreadMarker.set();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                if (processor == null) &#123;</span><br><span class="line">                    String negotiatedProtocol = wrapper.getNegotiatedProtocol();</span><br><span class="line">                    if (negotiatedProtocol != null) &#123;</span><br><span class="line">                        UpgradeProtocol upgradeProtocol =</span><br><span class="line">                                getProtocol().getNegotiatedProtocol(negotiatedProtocol);</span><br><span class="line">                        if (upgradeProtocol != null) &#123;</span><br><span class="line">                            processor = upgradeProtocol.getProcessor(</span><br><span class="line">                                    wrapper, getProtocol().getAdapter());</span><br><span class="line">                        &#125; else if (negotiatedProtocol.equals(&quot;http/1.1&quot;)) &#123;</span><br><span class="line">                            // Explicitly negotiated the default protocol.</span><br><span class="line">                            // Obtain a processor below.</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            // TODO:</span><br><span class="line">                            // OpenSSL 1.0.2&#x27;s ALPN callback doesn&#x27;t support</span><br><span class="line">                            // failing the handshake with an error if no</span><br><span class="line">                            // protocol can be negotiated. Therefore, we need to</span><br><span class="line">                            // fail the connection here. Once this is fixed,</span><br><span class="line">                            // replace the code below with the commented out</span><br><span class="line">                            // block.</span><br><span class="line">                            return SocketState.CLOSED;</span><br><span class="line">                            /*</span><br><span class="line">                             * To replace the code above once OpenSSL 1.1.0 is</span><br><span class="line">                             * used.</span><br><span class="line">                            // Failed to create processor. This is a bug.</span><br><span class="line">                            throw new IllegalStateException(sm.getString(</span><br><span class="line">                                    &quot;abstractConnectionHandler.negotiatedProcessor.fail&quot;,</span><br><span class="line">                                    negotiatedProtocol));</span><br><span class="line">                            */</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (processor == null) &#123;</span><br><span class="line">                    processor = recycledProcessors.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                if (processor == null) &#123;</span><br><span class="line">//创建processor，这里不贴代码了。实际上就是Http11AprProtocol（AbstractHttp11Protocol）的createProcessor，最后构造的是Http11Processor类。</span><br><span class="line">                    processor = getProtocol().createProcessor();</span><br><span class="line">                    register(processor);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                processor.setSslSupport(</span><br><span class="line">                        wrapper.getSslSupport(getProtocol().getClientCertProvider()));</span><br><span class="line"></span><br><span class="line">                // Associate the processor with the connection</span><br><span class="line">                connections.put(socket, processor);</span><br><span class="line"></span><br><span class="line">                SocketState state = SocketState.CLOSED;</span><br><span class="line">                do &#123;</span><br><span class="line">//最关键的地方！ </span><br><span class="line">                    state = processor.process(wrapper, status);</span><br><span class="line"></span><br><span class="line">                    if (state == SocketState.UPGRADING) &#123;</span><br><span class="line">...</span><br><span class="line">                       //UPGRADING</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; while ( state == SocketState.UPGRADING);</span><br><span class="line"></span><br><span class="line">                if (state == SocketState.LONG) &#123;</span><br><span class="line">                    // In the middle of processing a request/response. Keep the</span><br><span class="line">                    // socket associated with the processor. Exact requirements</span><br><span class="line">                    // depend on type of long poll</span><br><span class="line">                    longPoll(wrapper, processor);</span><br><span class="line">                    if (processor.isAsync()) &#123;</span><br><span class="line">                        getProtocol().addWaitingProcessor(processor);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if (state == SocketState.OPEN) &#123;</span><br><span class="line">                    // In keep-alive but between requests. OK to recycle</span><br><span class="line">                    // processor. Continue to poll for the next request.</span><br><span class="line">                    connections.remove(socket);</span><br><span class="line">                    release(processor);</span><br><span class="line">                    wrapper.registerReadInterest();</span><br><span class="line">                &#125; else if (state == SocketState.SENDFILE) &#123;</span><br><span class="line">                    // Sendfile in progress. If it fails, the socket will be</span><br><span class="line">                    // closed. If it works, the socket either be added to the</span><br><span class="line">                    // poller (or equivalent) to await more data or processed</span><br><span class="line">                    // if there are any pipe-lined requests remaining.</span><br><span class="line">                &#125; else if (state == SocketState.UPGRADED) &#123;</span><br><span class="line">                    // Don&#x27;t add sockets back to the poller if this was a</span><br><span class="line">                    // non-blocking write otherwise the poller may trigger</span><br><span class="line">                    // multiple read events which may lead to thread starvation</span><br><span class="line">                    // in the connector. The write() method will add this socket</span><br><span class="line">                    // to the poller if necessary.</span><br><span class="line">                    if (status != SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">                        longPoll(wrapper, processor);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if (state == SocketState.SUSPENDED) &#123;</span><br><span class="line">                    // Don&#x27;t add sockets back to the poller.</span><br><span class="line">                    // The resumeProcessing() method will add this socket</span><br><span class="line">                    // to the poller.</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">...</span><br><span class="line">//Upgrade</span><br><span class="line">                &#125;</span><br><span class="line">                return state;</span><br><span class="line">            &#125;  finally &#123;</span><br><span class="line">                ContainerThreadMarker.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Make sure socket/processor is removed from the list of current</span><br><span class="line">            // connections</span><br><span class="line">            connections.remove(socket);</span><br><span class="line">            release(processor);</span><br><span class="line">            return SocketState.CLOSED;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/37266564-00072780-25f6-11e8-8295-a142cb4e9f5f.png" alt="image"></p><p>AbstractProcessorLight的process</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public SocketState process(SocketWrapperBase&lt;?&gt; socketWrapper, SocketEvent status)</span><br><span class="line">           throws IOException &#123;</span><br><span class="line"></span><br><span class="line">       SocketState state = SocketState.CLOSED;</span><br><span class="line">       Iterator&lt;DispatchType&gt; dispatches = null;</span><br><span class="line">       do &#123;</span><br><span class="line">           if (dispatches != null) &#123;</span><br><span class="line">               DispatchType nextDispatch = dispatches.next();</span><br><span class="line">               state = dispatch(nextDispatch.getSocketStatus());</span><br><span class="line">           &#125; else if (status == SocketEvent.DISCONNECT) &#123;</span><br><span class="line">               // Do nothing here, just wait for it to get recycled</span><br><span class="line">           &#125; else if (isAsync() || isUpgrade() || state == SocketState.ASYNC_END) &#123;</span><br><span class="line">               state = dispatch(status);</span><br><span class="line">               if (state == SocketState.OPEN) &#123;</span><br><span class="line">                   // There may be pipe-lined data to read. If the data isn&#x27;t</span><br><span class="line">                   // processed now, execution will exit this loop and call</span><br><span class="line">                   // release() which will recycle the processor (and input</span><br><span class="line">                   // buffer) deleting any pipe-lined data. To avoid this,</span><br><span class="line">                   // process it now.</span><br><span class="line">                   state = service(socketWrapper);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; else if (status == SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">               // Extra write event likely after async, ignore</span><br><span class="line">               state = SocketState.LONG;</span><br><span class="line">           &#125; else if (status == SocketEvent.OPEN_READ)&#123;</span><br><span class="line">               state = service(socketWrapper);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               // Default to closing the socket if the SocketEvent passed in</span><br><span class="line">               // is not consistent with the current state of the Processor</span><br><span class="line">               state = SocketState.CLOSED;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (state != SocketState.CLOSED &amp;&amp; isAsync()) &#123;</span><br><span class="line">               state = asyncPostProcess();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           if (dispatches == null || !dispatches.hasNext()) &#123;</span><br><span class="line">               // Only returns non-null iterator if there are</span><br><span class="line">               // dispatches to process.</span><br><span class="line">               dispatches = getIteratorAndClearDispatches();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; while (state == SocketState.ASYNC_END ||</span><br><span class="line">               dispatches != null &amp;&amp; state != SocketState.CLOSED);</span><br><span class="line"></span><br><span class="line">       return state;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public SocketState service(SocketWrapperBase&lt;?&gt; socketWrapper)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">        RequestInfo rp = request.getRequestProcessor();</span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);</span><br><span class="line"></span><br><span class="line">        // Setting up the I/O</span><br><span class="line">        setSocketWrapper(socketWrapper);</span><br><span class="line">        inputBuffer.init(socketWrapper);</span><br><span class="line">        outputBuffer.init(socketWrapper);</span><br><span class="line"></span><br><span class="line">        // Flags</span><br><span class="line">        keepAlive = true;</span><br><span class="line">        openSocket = false;</span><br><span class="line">        readComplete = true;</span><br><span class="line">        boolean keptAlive = false;</span><br><span class="line">        SendfileState sendfileState = SendfileState.DONE;</span><br><span class="line"></span><br><span class="line">        while (!getErrorState().isError() &amp;&amp; keepAlive &amp;&amp; !isAsync() &amp;&amp; upgradeToken == null &amp;&amp;</span><br><span class="line">                sendfileState == SendfileState.DONE &amp;&amp; !endpoint.isPaused()) &#123;</span><br><span class="line"></span><br><span class="line">            // Parsing the request header</span><br><span class="line">            try &#123;</span><br><span class="line">//解析请求头，并装入inputBuffer里的私有字段org.apache.coyote.Request的属性里</span><br><span class="line">                if (!inputBuffer.parseRequestLine(keptAlive)) &#123;</span><br><span class="line">                    if (inputBuffer.getParsingRequestLinePhase() == -1) &#123;</span><br><span class="line">                        return SocketState.UPGRADING;</span><br><span class="line">                    &#125; else if (handleIncompleteRequestLineRead()) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (endpoint.isPaused()) &#123;</span><br><span class="line">                    // 503 - Service unavailable</span><br><span class="line">                    response.setStatus(503);</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CLEAN, null);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    keptAlive = true;</span><br><span class="line">                    // Set this every time in case limit has been changed via JMX</span><br><span class="line">                    request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());</span><br><span class="line">                    if (!inputBuffer.parseHeaders()) &#123;</span><br><span class="line">                        // We&#x27;ve read part of the request, don&#x27;t recycle it</span><br><span class="line">                        // instead associate it with the socket</span><br><span class="line">                        openSocket = true;</span><br><span class="line">                        readComplete = false;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (!disableUploadTimeout) &#123;</span><br><span class="line">                        socketWrapper.setReadTimeout(connectionUploadTimeout);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;http11processor.header.parse&quot;), e);</span><br><span class="line">                &#125;</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);</span><br><span class="line">                break;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">...           </span><br><span class="line">                // 400 - Bad Request</span><br><span class="line">                response.setStatus(400);</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">                getAdapter().log(request, response, 0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Has an upgrade been requested?</span><br><span class="line">            Enumeration&lt;String&gt; connectionValues = request.getMimeHeaders().values(&quot;Connection&quot;);</span><br><span class="line">            boolean foundUpgrade = false;</span><br><span class="line">            while (connectionValues.hasMoreElements() &amp;&amp; !foundUpgrade) &#123;</span><br><span class="line">                foundUpgrade = connectionValues.nextElement().toLowerCase(</span><br><span class="line">                        Locale.ENGLISH).contains(&quot;upgrade&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (foundUpgrade) &#123;</span><br><span class="line">                // Check the protocol</span><br><span class="line">                String requestedProtocol = request.getHeader(&quot;Upgrade&quot;);</span><br><span class="line"></span><br><span class="line">                UpgradeProtocol upgradeProtocol = httpUpgradeProtocols.get(requestedProtocol);</span><br><span class="line">//转换传输协议</span><br><span class="line">                if (upgradeProtocol != null) &#123;</span><br><span class="line">                    if (upgradeProtocol.accept(request)) &#123;</span><br><span class="line">                        // TODO Figure out how to handle request bodies at this</span><br><span class="line">                        // point.</span><br><span class="line">                        response.setStatus(HttpServletResponse.SC_SWITCHING_PROTOCOLS);</span><br><span class="line">                        response.setHeader(&quot;Connection&quot;, &quot;Upgrade&quot;);</span><br><span class="line">                        response.setHeader(&quot;Upgrade&quot;, requestedProtocol);</span><br><span class="line">                        action(ActionCode.CLOSE,  null);</span><br><span class="line">                        getAdapter().log(request, response, 0);</span><br><span class="line"></span><br><span class="line">                        InternalHttpUpgradeHandler upgradeHandler =</span><br><span class="line">                                upgradeProtocol.getInternalUpgradeHandler(</span><br><span class="line">                                        getAdapter(), cloneRequest(request));</span><br><span class="line">                        UpgradeToken upgradeToken = new UpgradeToken(upgradeHandler, null, null);</span><br><span class="line">                        action(ActionCode.UPGRADE, upgradeToken);</span><br><span class="line">                        return SocketState.UPGRADING;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!getErrorState().isError()) &#123;</span><br><span class="line">                // Setting up filters, and parse some request headers</span><br><span class="line">                rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);</span><br><span class="line">                try &#123;</span><br><span class="line">                    prepareRequest();</span><br><span class="line">                &#125; catch (Throwable t) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    if (log.isDebugEnabled()) &#123;</span><br><span class="line">                        log.debug(sm.getString(&quot;http11processor.request.prepare&quot;), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 500 - Internal Server Error</span><br><span class="line">                    response.setStatus(500);</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">                    getAdapter().log(request, response, 0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (maxKeepAliveRequests == 1) &#123;</span><br><span class="line">                keepAlive = false;</span><br><span class="line">            &#125; else if (maxKeepAliveRequests &gt; 0 &amp;&amp;</span><br><span class="line">                    socketWrapper.decrementKeepAlive() &lt;= 0) &#123;</span><br><span class="line">                keepAlive = false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Process the request in the adapter</span><br><span class="line">//用adapter处理请求</span><br><span class="line">            if (!getErrorState().isError()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);</span><br><span class="line">                    getAdapter().service(request, response);</span><br><span class="line">                    // Handle when the response was committed before a serious</span><br><span class="line">                    // error occurred.  Throwing a ServletException should both</span><br><span class="line">                    // set the status to 500 and set the errorException.</span><br><span class="line">                    // If we fail here, then the response is likely already</span><br><span class="line">                    // committed, so we can&#x27;t try and set headers.</span><br><span class="line">                    if(keepAlive &amp;&amp; !getErrorState().isError() &amp;&amp; !isAsync() &amp;&amp;</span><br><span class="line">                            statusDropsConnection(response.getStatus())) &#123;</span><br><span class="line">                        setErrorState(ErrorState.CLOSE_CLEAN, null);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (InterruptedIOException e) &#123;</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);</span><br><span class="line">                &#125; catch (HeadersTooLargeException e) &#123;</span><br><span class="line">                    log.error(sm.getString(&quot;http11processor.request.process&quot;), e);</span><br><span class="line">                    // The response should not have been committed but check it</span><br><span class="line">                    // anyway to be safe</span><br><span class="line">                    if (response.isCommitted()) &#123;</span><br><span class="line">                        setErrorState(ErrorState.CLOSE_NOW, e);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        response.reset();</span><br><span class="line">                        response.setStatus(500);</span><br><span class="line">                        setErrorState(ErrorState.CLOSE_CLEAN, e);</span><br><span class="line">                        response.setHeader(&quot;Connection&quot;, &quot;close&quot;); // TODO: Remove</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Throwable t) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    log.error(sm.getString(&quot;http11processor.request.process&quot;), t);</span><br><span class="line">                    // 500 - Internal Server Error</span><br><span class="line">                    response.setStatus(500);</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">                    getAdapter().log(request, response, 0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Finish the handling of the request</span><br><span class="line">            rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);</span><br><span class="line">            if (!isAsync()) &#123;</span><br><span class="line">                // If this is an async request then the request ends when it has</span><br><span class="line">                // been completed. The AsyncContext is responsible for calling</span><br><span class="line">                // endRequest() in that case.</span><br><span class="line">                endRequest();</span><br><span class="line">            &#125;</span><br><span class="line">            rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);</span><br><span class="line"></span><br><span class="line">            // If there was an error, make sure the request is counted as</span><br><span class="line">            // and error, and update the statistics counter</span><br><span class="line">            if (getErrorState().isError()) &#123;</span><br><span class="line">                response.setStatus(500);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!isAsync() || getErrorState().isError()) &#123;</span><br><span class="line">                request.updateCounters();</span><br><span class="line">                if (getErrorState().isIoAllowed()) &#123;</span><br><span class="line">                    inputBuffer.nextRequest();</span><br><span class="line">                    outputBuffer.nextRequest();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!disableUploadTimeout) &#123;</span><br><span class="line">                int soTimeout = endpoint.getConnectionTimeout();</span><br><span class="line">                if(soTimeout &gt; 0) &#123;</span><br><span class="line">                    socketWrapper.setReadTimeout(soTimeout);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    socketWrapper.setReadTimeout(0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);</span><br><span class="line"></span><br><span class="line">            sendfileState = processSendfile(socketWrapper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);</span><br><span class="line"></span><br><span class="line">        if (getErrorState().isError() || endpoint.isPaused()) &#123;</span><br><span class="line">            return SocketState.CLOSED;</span><br><span class="line">        &#125; else if (isAsync()) &#123;</span><br><span class="line">            return SocketState.LONG;</span><br><span class="line">        &#125; else if (isUpgrade()) &#123;</span><br><span class="line">            return SocketState.UPGRADING;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (sendfileState == SendfileState.PENDING) &#123;</span><br><span class="line">                return SocketState.SENDFILE;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (openSocket) &#123;</span><br><span class="line">                    if (readComplete) &#123;</span><br><span class="line">                        return SocketState.OPEN;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return SocketState.LONG;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return SocketState.CLOSED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以很重要的一句<code>getAdapter().service(request, response);</code>，而这里的adapter就是CoyoteAdapter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void service(org.apache.coyote.Request req, org.apache.coyote.Response res)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">//org.apache.coyote.Request转化成org.apache.catalina.connector.Request </span><br><span class="line">        Request request = (Request) req.getNote(ADAPTER_NOTES);</span><br><span class="line">//类似</span><br><span class="line">        Response response = (Response) res.getNote(ADAPTER_NOTES);</span><br><span class="line"></span><br><span class="line">        if (request == null) &#123;</span><br><span class="line">            // Create objects</span><br><span class="line">            request = connector.createRequest();</span><br><span class="line">            request.setCoyoteRequest(req);</span><br><span class="line">            response = connector.createResponse();</span><br><span class="line">            response.setCoyoteResponse(res);</span><br><span class="line"></span><br><span class="line">            // Link objects</span><br><span class="line">            request.setResponse(response);</span><br><span class="line">            response.setRequest(request);</span><br><span class="line"></span><br><span class="line">            // Set as notes</span><br><span class="line">            req.setNote(ADAPTER_NOTES, request);</span><br><span class="line">            res.setNote(ADAPTER_NOTES, response);</span><br><span class="line"></span><br><span class="line">            // Set query string encoding</span><br><span class="line">            req.getParameters().setQueryStringCharset(connector.getURICharset());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (connector.getXpoweredBy()) &#123;</span><br><span class="line">            response.addHeader(&quot;X-Powered-By&quot;, POWERED_BY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean async = false;</span><br><span class="line">        boolean postParseSuccess = false;</span><br><span class="line"></span><br><span class="line">        req.getRequestProcessor().setWorkerThreadName(THREAD_NAME.get());</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Parse and set Catalina and configuration specific</span><br><span class="line">            // request parameters</span><br><span class="line">//很关键，请求转化为 Host、Context、Wrapper组件</span><br><span class="line">            postParseSuccess = postParseRequest(req, request, res, response);</span><br><span class="line">            if (postParseSuccess) &#123;</span><br><span class="line">                //check valves if we support async</span><br><span class="line">                request.setAsyncSupported(</span><br><span class="line">                        connector.getService().getContainer().getPipeline().isAsyncSupported());</span><br><span class="line">                // Calling the container</span><br><span class="line">//connector.getService()获取StandardService</span><br><span class="line">//getContainer()获取StandardEngine</span><br><span class="line">//getPipeline()获取StandardPipeline</span><br><span class="line">//getFirst() 获取第一个阀 Valve</span><br><span class="line">//这里的基础阀其实就是StandardContextValve，见下面</span><br><span class="line">                connector.getService().getContainer().getPipeline().getFirst().invoke(</span><br><span class="line">                        request, response);</span><br><span class="line">            &#125;</span><br><span class="line">            if (request.isAsync()) &#123;</span><br><span class="line">                async = true;</span><br><span class="line">                ReadListener readListener = req.getReadListener();</span><br><span class="line">                if (readListener != null &amp;&amp; request.isFinished()) &#123;</span><br><span class="line">                    // Possible the all data may have been read during service()</span><br><span class="line">                    // method so this needs to be checked here</span><br><span class="line">                    ClassLoader oldCL = null;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        oldCL = request.getContext().bind(false, null);</span><br><span class="line">                        if (req.sendAllDataReadEvent()) &#123;</span><br><span class="line">                            req.getReadListener().onAllDataRead();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        request.getContext().unbind(false, oldCL);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Throwable throwable =</span><br><span class="line">                        (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span><br><span class="line"></span><br><span class="line">                // If an async request was started, is not going to end once</span><br><span class="line">                // this container thread finishes and an error occurred, trigger</span><br><span class="line">                // the async error process</span><br><span class="line">                if (!request.isAsyncCompleting() &amp;&amp; throwable != null) &#123;</span><br><span class="line">                    request.getAsyncContextInternal().setErrorState(throwable, true);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                request.finishRequest();</span><br><span class="line">                response.finishResponse();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            // Ignore</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            AtomicBoolean error = new AtomicBoolean(false);</span><br><span class="line">            res.action(ActionCode.IS_ERROR, error);</span><br><span class="line"></span><br><span class="line">            if (request.isAsyncCompleting() &amp;&amp; error.get()) &#123;</span><br><span class="line">                // Connection will be forcibly closed which will prevent</span><br><span class="line">                // completion happening at the usual point. Need to trigger</span><br><span class="line">                // call to onComplete() here.</span><br><span class="line">                res.action(ActionCode.ASYNC_POST_PROCESS,  null);</span><br><span class="line">                async = false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Access log</span><br><span class="line">            if (!async &amp;&amp; postParseSuccess) &#123;</span><br><span class="line">                // Log only if processing was invoked.</span><br><span class="line">                // If postParseRequest() failed, it has already logged it.</span><br><span class="line">                Context context = request.getContext();</span><br><span class="line">                // If the context is null, it is likely that the endpoint was</span><br><span class="line">                // shutdown, this connection closed and the request recycled in</span><br><span class="line">                // a different thread. That thread will have updated the access</span><br><span class="line">                // log so it is OK not to update the access log here in that</span><br><span class="line">                // case.</span><br><span class="line">                if (context != null) &#123;</span><br><span class="line">                    context.logAccess(request, response,</span><br><span class="line">                            System.currentTimeMillis() - req.getStartTime(), false);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            req.getRequestProcessor().setWorkerThreadName(null);</span><br><span class="line"></span><br><span class="line">            // Recycle the wrapper request and response</span><br><span class="line">            if (!async) &#123;</span><br><span class="line">                request.recycle();</span><br><span class="line">                response.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>postParseRequest</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line">protected boolean postParseRequest(org.apache.coyote.Request req, Request request,</span><br><span class="line">            org.apache.coyote.Response res, Response response) throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        // If the processor has set the scheme (AJP does this, HTTP does this if</span><br><span class="line">        // SSL is enabled) use this to set the secure flag as well. If the</span><br><span class="line">        // processor hasn&#x27;t set it, use the settings from the connector</span><br><span class="line">        if (req.scheme().isNull()) &#123;</span><br><span class="line">            // Use connector scheme and secure configuration, (defaults to</span><br><span class="line">            // &quot;http&quot; and false respectively)</span><br><span class="line">            req.scheme().setString(connector.getScheme());</span><br><span class="line">            request.setSecure(connector.getSecure());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Use processor specified scheme to determine secure state</span><br><span class="line">            request.setSecure(req.scheme().equals(&quot;https&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // At this point the Host header has been processed.</span><br><span class="line">        // Override if the proxyPort/proxyHost are set</span><br><span class="line">        String proxyName = connector.getProxyName();</span><br><span class="line">        int proxyPort = connector.getProxyPort();</span><br><span class="line">        if (proxyPort != 0) &#123;</span><br><span class="line">            req.setServerPort(proxyPort);</span><br><span class="line">        &#125; else if (req.getServerPort() == -1) &#123;</span><br><span class="line">            // Not explicitly set. Use default ports based on the scheme</span><br><span class="line">            if (req.scheme().equals(&quot;https&quot;)) &#123;</span><br><span class="line">                req.setServerPort(443);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                req.setServerPort(80);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (proxyName != null) &#123;</span><br><span class="line">            req.serverName().setString(proxyName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//uri</span><br><span class="line">        MessageBytes undecodedURI = req.requestURI();</span><br><span class="line"></span><br><span class="line">        // Check for ping OPTIONS * request</span><br><span class="line">        if (undecodedURI.equals(&quot;*&quot;)) &#123;</span><br><span class="line">            if (req.method().equalsIgnoreCase(&quot;OPTIONS&quot;)) &#123;</span><br><span class="line">                StringBuilder allow = new StringBuilder();</span><br><span class="line">                allow.append(&quot;GET, HEAD, POST, PUT, DELETE&quot;);</span><br><span class="line">                // Trace if allowed</span><br><span class="line">                if (connector.getAllowTrace()) &#123;</span><br><span class="line">                    allow.append(&quot;, TRACE&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                // Always allow options</span><br><span class="line">                allow.append(&quot;, OPTIONS&quot;);</span><br><span class="line">                res.setHeader(&quot;Allow&quot;, allow.toString());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                res.setStatus(404);</span><br><span class="line">                res.setMessage(&quot;Not found&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            connector.getService().getContainer().logAccess(</span><br><span class="line">                    request, response, 0, true);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MessageBytes decodedURI = req.decodedURI();</span><br><span class="line"></span><br><span class="line">        if (undecodedURI.getType() == MessageBytes.T_BYTES) &#123;</span><br><span class="line">            // Copy the raw URI to the decodedURI</span><br><span class="line">            decodedURI.duplicate(undecodedURI);</span><br><span class="line"></span><br><span class="line">            // Parse the path parameters. This will:</span><br><span class="line">            //   - strip out the path parameters</span><br><span class="line">            //   - convert the decodedURI to bytes</span><br><span class="line">            parsePathParameters(req, request);</span><br><span class="line"></span><br><span class="line">            // URI decoding</span><br><span class="line">            // %xx decoding of the URL</span><br><span class="line">            try &#123;</span><br><span class="line">                req.getURLDecoder().convert(decodedURI, false);</span><br><span class="line">            &#125; catch (IOException ioe) &#123;</span><br><span class="line">                res.setStatus(400);</span><br><span class="line">                res.setMessage(&quot;Invalid URI: &quot; + ioe.getMessage());</span><br><span class="line">                connector.getService().getContainer().logAccess(</span><br><span class="line">                        request, response, 0, true);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            // Normalization</span><br><span class="line">            if (!normalize(req.decodedURI())) &#123;</span><br><span class="line">                res.setStatus(400);</span><br><span class="line">                res.setMessage(&quot;Invalid URI&quot;);</span><br><span class="line">                connector.getService().getContainer().logAccess(</span><br><span class="line">                        request, response, 0, true);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            // Character decoding</span><br><span class="line">            convertURI(decodedURI, request);</span><br><span class="line">            // Check that the URI is still normalized</span><br><span class="line">            if (!checkNormalize(req.decodedURI())) &#123;</span><br><span class="line">                res.setStatus(400);</span><br><span class="line">                res.setMessage(&quot;Invalid URI character encoding&quot;);</span><br><span class="line">                connector.getService().getContainer().logAccess(</span><br><span class="line">                        request, response, 0, true);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            /* The URI is chars or String, and has been sent using an in-memory</span><br><span class="line">             * protocol handler. The following assumptions are made:</span><br><span class="line">             * - req.requestURI() has been set to the &#x27;original&#x27; non-decoded,</span><br><span class="line">             *   non-normalized URI</span><br><span class="line">             * - req.decodedURI() has been set to the decoded, normalized form</span><br><span class="line">             *   of req.requestURI()</span><br><span class="line">             */</span><br><span class="line">            decodedURI.toChars();</span><br><span class="line">            // Remove all path parameters; any needed path parameter should be set</span><br><span class="line">            // using the request object rather than passing it in the URL</span><br><span class="line">            CharChunk uriCC = decodedURI.getCharChunk();</span><br><span class="line">            int semicolon = uriCC.indexOf(&#x27;;&#x27;);</span><br><span class="line">            if (semicolon &gt; 0) &#123;</span><br><span class="line">                decodedURI.setChars</span><br><span class="line">                    (uriCC.getBuffer(), uriCC.getStart(), semicolon);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Request mapping.</span><br><span class="line">        MessageBytes serverName;</span><br><span class="line">        if (connector.getUseIPVHosts()) &#123;</span><br><span class="line">            serverName = req.localName();</span><br><span class="line">            if (serverName.isNull()) &#123;</span><br><span class="line">                // well, they did ask for it</span><br><span class="line">                res.action(ActionCode.REQ_LOCAL_NAME_ATTRIBUTE, null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            serverName = req.serverName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Version for the second mapping loop and</span><br><span class="line">        // Context that we expect to get for that version</span><br><span class="line">        String version = null;</span><br><span class="line">        Context versionContext = null;</span><br><span class="line">        boolean mapRequired = true;</span><br><span class="line"></span><br><span class="line">        while (mapRequired) &#123;</span><br><span class="line">            // This will map the the latest version by default</span><br><span class="line">//请求转化成Host、Context、Wrapper</span><br><span class="line">            connector.getService().getMapper().map(serverName, decodedURI,</span><br><span class="line">                    version, request.getMappingData());</span><br><span class="line"></span><br><span class="line">            // If there is no context at this point, it is likely no ROOT context</span><br><span class="line">            // has been deployed</span><br><span class="line">            if (request.getContext() == null) &#123;</span><br><span class="line">                res.setStatus(404);</span><br><span class="line">                res.setMessage(&quot;Not found&quot;);</span><br><span class="line">                // No context, so use host</span><br><span class="line">                Host host = request.getHost();</span><br><span class="line">                // Make sure there is a host (might not be during shutdown)</span><br><span class="line">                if (host != null) &#123;</span><br><span class="line">                    host.logAccess(request, response, 0, true);</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Now we have the context, we can parse the session ID from the URL</span><br><span class="line">            // (if any). Need to do this before we redirect in case we need to</span><br><span class="line">            // include the session id in the redirect</span><br><span class="line">            String sessionID;</span><br><span class="line">            if (request.getServletContext().getEffectiveSessionTrackingModes()</span><br><span class="line">                    .contains(SessionTrackingMode.URL)) &#123;</span><br><span class="line"></span><br><span class="line">                // Get the session ID if there was one</span><br><span class="line">                sessionID = request.getPathParameter(</span><br><span class="line">                        SessionConfig.getSessionUriParamName(</span><br><span class="line">                                request.getContext()));</span><br><span class="line">                if (sessionID != null) &#123;</span><br><span class="line">                    request.setRequestedSessionId(sessionID);</span><br><span class="line">                    request.setRequestedSessionURL(true);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Look for session ID in cookies and SSL session</span><br><span class="line">            parseSessionCookiesId(request);</span><br><span class="line">            parseSessionSslId(request);</span><br><span class="line"></span><br><span class="line">            sessionID = request.getRequestedSessionId();</span><br><span class="line"></span><br><span class="line">            mapRequired = false;</span><br><span class="line">            if (version != null &amp;&amp; request.getContext() == versionContext) &#123;</span><br><span class="line">                // We got the version that we asked for. That is it.</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                version = null;</span><br><span class="line">                versionContext = null;</span><br><span class="line"></span><br><span class="line">                Context[] contexts = request.getMappingData().contexts;</span><br><span class="line">                // Single contextVersion means no need to remap</span><br><span class="line">                // No session ID means no possibility of remap</span><br><span class="line">                if (contexts != null &amp;&amp; sessionID != null) &#123;</span><br><span class="line">                    // Find the context associated with the session</span><br><span class="line">                    for (int i = (contexts.length); i &gt; 0; i--) &#123;</span><br><span class="line">                        Context ctxt = contexts[i - 1];</span><br><span class="line">                        if (ctxt.getManager().findSession(sessionID) != null) &#123;</span><br><span class="line">                            // We found a context. Is it the one that has</span><br><span class="line">                            // already been mapped?</span><br><span class="line">                            if (!ctxt.equals(request.getMappingData().context)) &#123;</span><br><span class="line">                                // Set version so second time through mapping</span><br><span class="line">                                // the correct context is found</span><br><span class="line">                                version = ctxt.getWebappVersion();</span><br><span class="line">                                versionContext = ctxt;</span><br><span class="line">                                // Reset mapping</span><br><span class="line">                                request.getMappingData().recycle();</span><br><span class="line">                                mapRequired = true;</span><br><span class="line">                                // Recycle cookies and session info in case the</span><br><span class="line">                                // correct context is configured with different</span><br><span class="line">                                // settings</span><br><span class="line">                                request.recycleSessionInfo();</span><br><span class="line">                                request.recycleCookieInfo(true);</span><br><span class="line">                            &#125;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!mapRequired &amp;&amp; request.getContext().getPaused()) &#123;</span><br><span class="line">                // Found a matching context but it is paused. Mapping data will</span><br><span class="line">                // be wrong since some Wrappers may not be registered at this</span><br><span class="line">                // point.</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    // Should never happen</span><br><span class="line">                &#125;</span><br><span class="line">                // Reset mapping</span><br><span class="line">                request.getMappingData().recycle();</span><br><span class="line">                mapRequired = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Possible redirect</span><br><span class="line">        MessageBytes redirectPathMB = request.getMappingData().redirectPath;</span><br><span class="line">        if (!redirectPathMB.isNull()) &#123;</span><br><span class="line">            String redirectPath = URLEncoder.DEFAULT.encode(</span><br><span class="line">                    redirectPathMB.toString(), StandardCharsets.UTF_8);</span><br><span class="line">            String query = request.getQueryString();</span><br><span class="line">            if (request.isRequestedSessionIdFromURL()) &#123;</span><br><span class="line">                // This is not optimal, but as this is not very common, it</span><br><span class="line">                // shouldn&#x27;t matter</span><br><span class="line">                redirectPath = redirectPath + &quot;;&quot; +</span><br><span class="line">                        SessionConfig.getSessionUriParamName(</span><br><span class="line">                            request.getContext()) +</span><br><span class="line">                    &quot;=&quot; + request.getRequestedSessionId();</span><br><span class="line">            &#125;</span><br><span class="line">            if (query != null) &#123;</span><br><span class="line">                // This is not optimal, but as this is not very common, it</span><br><span class="line">                // shouldn&#x27;t matter</span><br><span class="line">                redirectPath = redirectPath + &quot;?&quot; + query;</span><br><span class="line">            &#125;</span><br><span class="line">            response.sendRedirect(redirectPath);</span><br><span class="line">            request.getContext().logAccess(request, response, 0, true);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Filter trace method</span><br><span class="line">        if (!connector.getAllowTrace()</span><br><span class="line">                &amp;&amp; req.method().equalsIgnoreCase(&quot;TRACE&quot;)) &#123;</span><br><span class="line">            Wrapper wrapper = request.getWrapper();</span><br><span class="line">            String header = null;</span><br><span class="line">            if (wrapper != null) &#123;</span><br><span class="line">                String[] methods = wrapper.getServletMethods();</span><br><span class="line">                if (methods != null) &#123;</span><br><span class="line">                    for (int i=0; i&lt;methods.length; i++) &#123;</span><br><span class="line">                        if (&quot;TRACE&quot;.equals(methods[i])) &#123;</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (header == null) &#123;</span><br><span class="line">                            header = methods[i];</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            header += &quot;, &quot; + methods[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.setStatus(405);</span><br><span class="line">            res.addHeader(&quot;Allow&quot;, header);</span><br><span class="line">            res.setMessage(&quot;TRACE method is not allowed&quot;);</span><br><span class="line">            request.getContext().logAccess(request, response, 0, true);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        doConnectorAuthenticationAuthorization(req, request);</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在 Service 内只有一个 Engine ，但可能有多个 Connector ，在 Engine 内部 Engine 和 Host ，Host 和 Context，Context 和 Wrapper 都是一对多的关系。但浏览器发出一次请求连接并不需要也不可能让部署在 Tomcat 中的所有 Web 应用的所有 Servlet 类都执行一遍，本文所说的 Map 机制就是为了 Connector 在接收到一次 Socket 连接时转化成请求后，能够找到 Engine 下具体哪个 Host、哪个 Context、哪个 Wrapper来执行这个请求。</p><p>StandardPipeline内部有三个成员变量basic（Valve）、container（Container）、first（Valve）</p><p>StandardPipeline</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void addValve(Valve valve) &#123;</span><br><span class="line"></span><br><span class="line">        // Validate that we can add this Valve</span><br><span class="line">        if (valve instanceof Contained)</span><br><span class="line">            ((Contained) valve).setContainer(this.container);</span><br><span class="line"></span><br><span class="line">        // Start the new component if necessary</span><br><span class="line">        if (getState().isAvailable()) &#123;</span><br><span class="line">            if (valve instanceof Lifecycle) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    ((Lifecycle) valve).start();</span><br><span class="line">                &#125; catch (LifecycleException e) &#123;</span><br><span class="line">                    log.error(&quot;StandardPipeline.addValve: start: &quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Add this Valve to the set associated with this Pipeline</span><br><span class="line">//每次给管道添加一个普通阀的时候如果管道内原来没有普通阀则将新添加的阀作为该管道的成员变量 first 的引用，如果管道内已有普通阀，则把新加的阀加到所有普通阀链条末端，并且将该阀的下一个阀的引用设置为管道的基础阀</span><br><span class="line">        if (first == null) &#123;</span><br><span class="line">            first = valve;</span><br><span class="line">            valve.setNext(basic);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Valve current = first;</span><br><span class="line">            while (current != null) &#123;</span><br><span class="line">                if (current.getNext() == basic) &#123;</span><br><span class="line">                    current.setNext(valve);</span><br><span class="line">                    valve.setNext(basic);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                current = current.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//如果管道中有普通阀则返回普通阀链条最开始的那个，否则就返回基础阀。</span><br><span class="line">    @Override</span><br><span class="line">    public Valve getFirst() &#123;</span><br><span class="line">        if (first != null) &#123;</span><br><span class="line">            return first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return basic;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Valve共分为两类，一类叫基础阀（通过 getBasic、setBasic 方法调用），一类是普通阀（通过 addValve、removeValve 调用）。管道都是包含在一个容器当中，所以 API 里还有 getContainer 和 setContainer 方法。一个管道一般有一个基础阀（通过 setBasic 添加），可以有 0 到多个普通阀（通过 addValve 添加）。</p><p>如果想加普通阀<code>&lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</code></p><p>所以上面的<code>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</code><br>就是StandardContextValve</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public final void invoke(Request request, Response response)</span><br><span class="line">        throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        // Disallow any direct access to resources under WEB-INF or META-INF</span><br><span class="line">        MessageBytes requestPathMB = request.getRequestPathMB();</span><br><span class="line">        if ((requestPathMB.startsWithIgnoreCase(&quot;/META-INF/&quot;, 0))</span><br><span class="line">                || (requestPathMB.equalsIgnoreCase(&quot;/META-INF&quot;))</span><br><span class="line">                || (requestPathMB.startsWithIgnoreCase(&quot;/WEB-INF/&quot;, 0))</span><br><span class="line">                || (requestPathMB.equalsIgnoreCase(&quot;/WEB-INF&quot;))) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Select the Wrapper to be used for this Request</span><br><span class="line">//StandardWrapper</span><br><span class="line">        Wrapper wrapper = request.getWrapper();</span><br><span class="line">        if (wrapper == null || wrapper.isUnavailable()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Acknowledge the request</span><br><span class="line">        try &#123;</span><br><span class="line">            response.sendAcknowledgement();</span><br><span class="line">        &#125; catch (IOException ioe) &#123;</span><br><span class="line">            container.getLogger().error(sm.getString(</span><br><span class="line">                    &quot;standardContextValve.acknowledgeException&quot;), ioe);</span><br><span class="line">            request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);</span><br><span class="line">            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (request.isAsyncSupported()) &#123;</span><br><span class="line">            request.setAsyncSupported(wrapper.getPipeline().isAsyncSupported());</span><br><span class="line">        &#125;</span><br><span class="line">//这里又链式调用了StandardWrapperValve的invoke</span><br><span class="line">        wrapper.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>StandardWrapperValve</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public final void invoke(Request request, Response response)</span><br><span class="line">        throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        // Initialize local variables we may need</span><br><span class="line">        boolean unavailable = false;</span><br><span class="line">        Throwable throwable = null;</span><br><span class="line">        // This should be a Request attribute...</span><br><span class="line">        long t1=System.currentTimeMillis();</span><br><span class="line">        requestCount.incrementAndGet();</span><br><span class="line">        StandardWrapper wrapper = (StandardWrapper) getContainer();</span><br><span class="line">        Servlet servlet = null;</span><br><span class="line">        Context context = (Context) wrapper.getParent();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">//分配一个servlet实例</span><br><span class="line">            if (!unavailable) &#123;</span><br><span class="line">                servlet = wrapper.allocate();</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        MessageBytes requestPathMB = request.getRequestPathMB();</span><br><span class="line">        DispatcherType dispatcherType = DispatcherType.REQUEST;</span><br><span class="line">        if (request.getDispatcherType()==DispatcherType.ASYNC) dispatcherType = DispatcherType.ASYNC;</span><br><span class="line">        request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,dispatcherType);</span><br><span class="line">        request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,</span><br><span class="line">                requestPathMB);</span><br><span class="line">        // Create the filter chain for this request    </span><br><span class="line">//ApplicationFilterChain filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line">//最后调用了servlet 的FilterChain，然后是各个过滤器的doFilter</span><br><span class="line">        ApplicationFilterChain filterChain =</span><br><span class="line">                ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">//dofilter &amp; servlet.service</span><br><span class="line">          filterChain.doFilter(request.getRequest(),</span><br><span class="line">                                    response.getResponse());</span><br><span class="line">...</span><br><span class="line">        // Release the filter chain (if any) for this request</span><br><span class="line">        if (filterChain != null) &#123;</span><br><span class="line">            filterChain.release();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//解除</span><br><span class="line">            if (servlet != null) &#123;</span><br><span class="line">                wrapper.deallocate(servlet);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        // 如果这个servlet永久不可用,卸载和释放这个实例</span><br><span class="line">        // unload it and release this instance</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ApplicationFilterFactory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static ApplicationFilterChain createFilterChain(ServletRequest request,</span><br><span class="line">            Wrapper wrapper, Servlet servlet) &#123;</span><br><span class="line">...</span><br><span class="line">        filterChain.setServlet(servlet);</span><br><span class="line">        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line">...</span><br><span class="line">        return filterChain;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ApplicationFilterChain</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response)</span><br><span class="line">        throws IOException, ServletException &#123;</span><br><span class="line">...</span><br><span class="line">internalDoFilter(req,res);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void internalDoFilter(ServletRequest request,</span><br><span class="line">                                  ServletResponse response)</span><br><span class="line">        throws IOException, ServletException &#123;</span><br><span class="line">...</span><br><span class="line">filter.doFilter(request, response, this);</span><br><span class="line">...</span><br><span class="line">            if ((request instanceof HttpServletRequest) &amp;&amp;</span><br><span class="line">                    (response instanceof HttpServletResponse) &amp;&amp;</span><br><span class="line">                    Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                final ServletRequest req = request;</span><br><span class="line">                final ServletResponse res = response;</span><br><span class="line">                Principal principal =</span><br><span class="line">                    ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line">                Object[] args = new Object[]&#123;req, res&#125;;</span><br><span class="line">                SecurityUtil.doAsPrivilege(&quot;service&quot;,</span><br><span class="line">                                           servlet,</span><br><span class="line">                                           classTypeUsedInService,</span><br><span class="line">                                           args,</span><br><span class="line">                                           principal);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                servlet.service(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显最后就调用到service了，后续大家应该很了解</p><p><img src="https://user-images.githubusercontent.com/7789698/37269633-5e197dc2-2606-11e8-8dbb-74a52180de09.png" alt="sequencediagram22"></p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 源码解析（四）--Lifecycle 机制和实现原理</title>
      <link href="/hexo/post/bf6044ee.html"/>
      <url>/hexo/post/bf6044ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lifecycle接口"><a href="#Lifecycle接口" class="headerlink" title="Lifecycle接口"></a>Lifecycle接口</h1> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Add a LifecycleEvent listener to this component.</span><br><span class="line">     *</span><br><span class="line">     * @param listener The listener to add</span><br><span class="line">     */</span><br><span class="line">    public void addLifecycleListener(LifecycleListener listener);//给该组将添加一个监听器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the life cycle listeners associated with this life cycle. If this</span><br><span class="line">     * component has no listeners registered, a zero-length array is returned.</span><br><span class="line">     */</span><br><span class="line">    public LifecycleListener[] findLifecycleListeners();//获取该组件所有已注册的监听器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Remove a LifecycleEvent listener from this component.</span><br><span class="line">     *</span><br><span class="line">     * @param listener The listener to remove</span><br><span class="line">     */</span><br><span class="line">    public void removeLifecycleListener(LifecycleListener listener);//删除该组件中的一个监听器</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LifecycleListener接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface LifecycleListener &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Acknowledge the occurrence of the specified event.</span><br><span class="line">     *</span><br><span class="line">     * @param event LifecycleEvent that has occurred</span><br><span class="line">     */</span><br><span class="line">    public void lifecycleEvent(LifecycleEvent event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LifecycleEvent接口（继承jdk 内置的 java.util.EventObject）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public final class LifecycleEvent extends EventObject &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // ----------------------------------------------------------- Constructors</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Construct a new LifecycleEvent with the specified parameters.</span><br><span class="line">     *</span><br><span class="line">     * @param lifecycle Component on which this event occurred</span><br><span class="line">     * @param type Event type (required)</span><br><span class="line">     * @param data Event data (if any)</span><br><span class="line">     */</span><br><span class="line">    public LifecycleEvent(Lifecycle lifecycle, String type, Object data) &#123;</span><br><span class="line"></span><br><span class="line">        super(lifecycle);</span><br><span class="line">        this.type = type;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // ----------------------------------------------------- Instance Variables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The event data associated with this event.</span><br><span class="line">     */</span><br><span class="line">    private final Object data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The event type this instance represents.</span><br><span class="line">     */</span><br><span class="line">    private final String type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // ------------------------------------------------------------- Properties</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Return the event data of this event.</span><br><span class="line">     */</span><br><span class="line">    public Object getData() &#123;</span><br><span class="line"></span><br><span class="line">        return (this.data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Return the Lifecycle on which this event occurred.</span><br><span class="line">     */</span><br><span class="line">    public Lifecycle getLifecycle() &#123;</span><br><span class="line"></span><br><span class="line">        return (Lifecycle) getSource();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Return the event type of this event.</span><br><span class="line">     */</span><br><span class="line">    public String getType() &#123;</span><br><span class="line"></span><br><span class="line">        return (this.type);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LifecycleSupport的fireLifecycleEvent，向注册到组件中的所有监听器发布这个新构造的事件对象。</p><p>在 LifecycleBase类里LifecycleSupport是这么初始化的：<code>private final LifecycleSupport lifecycle = new LifecycleSupport(this);</code>，就是把StandardServer(LifecycleBase)的实例作为Lifecycle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void fireLifecycleEvent(String type, Object data) &#123;</span><br><span class="line"></span><br><span class="line">    LifecycleEvent event = new LifecycleEvent(lifecycle, type, data);</span><br><span class="line">    LifecycleListener interested[] = listeners;</span><br><span class="line">    for (int i = 0; i &lt; interested.length; i++)</span><br><span class="line">        interested[i].lifecycleEvent(event);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>org.apache.catalina.startup.Catalina 类的 createStartDigester 方法有这么一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digester.addObjectCreate(&quot;Server/Listener&quot;,</span><br><span class="line">                         null, // MUST be specified in the element</span><br><span class="line">                         &quot;className&quot;);</span><br><span class="line">digester.addSetProperties(&quot;Server/Listener&quot;);</span><br><span class="line">digester.addSetNext(&quot;Server/Listener&quot;,</span><br><span class="line">                    &quot;addLifecycleListener&quot;,</span><br><span class="line">                    &quot;org.apache.catalina.LifecycleListener&quot;);</span><br></pre></td></tr></table></figure><p>LifecycleSupport</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    public void addLifecycleListener(LifecycleListener listener) &#123;</span><br><span class="line"></span><br><span class="line">      synchronized (listenersLock) &#123;</span><br><span class="line">          LifecycleListener results[] =</span><br><span class="line">            new LifecycleListener[listeners.length + 1];</span><br><span class="line">          for (int i = 0; i &lt; listeners.length; i++)</span><br><span class="line">              results[i] = listeners[i];</span><br><span class="line">          results[listeners.length] = listener;</span><br><span class="line">          listeners = results;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private LifecycleListener listeners[] = new LifecycleListener[0];  </span><br></pre></td></tr></table></figure><p>如果对设计模式比较熟悉的话会发现 Tomcat 的 Lifecycle 使用的是观察者模式：LifecycleListener 代表的是抽象观察者，它定义一个 lifecycleEvent 方法，而实现该接口的监听器是作为具体的观察者。Lifecycle  接口代表的是抽象主题，它定义了管理观察者的方法和它要所做的其它方法。而各组件代表的是具体主题，它实现了抽象主题的所有方法。通常会由具体主题保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知。Tomcat 对这种模式做了改进，增加了另外两个工具类：LifecycleSupport、LifecycleEvent ，它们作为辅助类扩展了观察者的功能。LifecycleEvent 中定义了事件类别，不同的事件在具体观察者中可区别处理，更加灵活。LifecycleSupport 类代理了所有具体主题对观察者的管理，将这个管理抽出来统一实现，以后如果修改只要修改 LifecycleSupport 类就可以了，不需要去修改所有具体主题，因为所有具体主题的对观察者的操作都被代理给 LifecycleSupport 类了。<br>事件的发布使用的是推模式，即每发布一个事件都会通知主题的所有具体观察者，由各观察者再来决定是否需要对该事件进行后续处理。</p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 源码解析（三）--各组件init start</title>
      <link href="/hexo/post/50d0f6b3.html"/>
      <url>/hexo/post/50d0f6b3.html</url>
      
        <content type="html"><![CDATA[<p>我们看到最早的解析，是解析xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">  &lt;!-- Security listener. Documentation at /docs/config/listeners.html</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.security.SecurityListener&quot; /&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;!--APR library loader. Documentation at /docs/apr.html --&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class="line">  &lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Global JNDI resources</span><br><span class="line">       Documentation at /docs/jndi-resources-howto.html</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;GlobalNamingResources&gt;</span><br><span class="line">    &lt;!-- Editable user database that can also be used by</span><br><span class="line">         UserDatabaseRealm to authenticate users</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class="line">              type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class="line">              description=&quot;User database that can be updated and saved&quot;</span><br><span class="line">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class="line">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class="line">  &lt;/GlobalNamingResources&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- A &quot;Service&quot; is a collection of one or more &quot;Connectors&quot; that share</span><br><span class="line">       a single &quot;Container&quot; Note:  A &quot;Service&quot; is not itself a &quot;Container&quot;,</span><br><span class="line">       so you may not define subcomponents such as &quot;Valves&quot; at this level.</span><br><span class="line">       Documentation at /docs/config/service.html</span><br><span class="line">   --&gt;</span><br><span class="line">  &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span><br><span class="line">        maxThreads=&quot;150&quot; minSpareThreads=&quot;4&quot;/&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- A &quot;Connector&quot; represents an endpoint by which requests are received</span><br><span class="line">         and responses are returned. Documentation at :</span><br><span class="line">         Java HTTP Connector: /docs/config/http.html (blocking &amp; non-blocking)</span><br><span class="line">         Java AJP  Connector: /docs/config/ajp.html</span><br><span class="line">         APR (HTTP/AJP) Connector: /docs/apr.html</span><br><span class="line">         Define a non-SSL HTTP/1.1 Connector on port 8080</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">    &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Connector executor=&quot;tomcatThreadPool&quot;</span><br><span class="line">               port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!-- Define a SSL HTTP/1.1 Connector on port 8443</span><br><span class="line">         This connector uses the JSSE configuration, when using APR, the</span><br><span class="line">         connector should be using the OpenSSL style configuration</span><br><span class="line">         described in the APR documentation --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Connector port=&quot;8443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;</span><br><span class="line">               maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">               clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class="line">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- An Engine represents the entry point (within Catalina) that processes</span><br><span class="line">         every request.  The Engine implementation for Tomcat stand alone</span><br><span class="line">         analyzes the HTTP headers included with the request, and passes them</span><br><span class="line">         on to the appropriate Host (virtual host).</span><br><span class="line">         Documentation at /docs/config/engine.html --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- You should set jvmRoute to support load-balancing via AJP ie :</span><br><span class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;jvm1&quot;&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!--For clustering, please take a look at documentation at:</span><br><span class="line">          /docs/cluster-howto.html  (simple how to)</span><br><span class="line">          /docs/config/cluster.html (reference documentation) --&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">      &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</span><br><span class="line">      --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span><br><span class="line">           via a brute-force attack --&gt;</span><br><span class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class="line">        &lt;!-- This Realm uses the UserDatabase configured in the global JNDI</span><br><span class="line">             resources under the key &quot;UserDatabase&quot;.  Any edits</span><br><span class="line">             that are performed against this UserDatabase are immediately</span><br><span class="line">             available for use by the Realm.  --&gt;</span><br><span class="line">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class="line">               resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class="line">      &lt;/Realm&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Access log processes all example.</span><br><span class="line">             Documentation at: /docs/config/valve.html</span><br><span class="line">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line">    &lt;/Engine&gt;</span><br><span class="line">  &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><h1 id="StandardServer"><a href="#StandardServer" class="headerlink" title="StandardServer"></a>StandardServer</h1><p><img src="https://user-images.githubusercontent.com/7789698/37250854-7eee792e-2540-11e8-908d-9a3ed3205c72.png" alt="image"></p><h2 id="StandardServer-LifecycleBase-的init"><a href="#StandardServer-LifecycleBase-的init" class="headerlink" title="StandardServer(LifecycleBase)的init"></a>StandardServer(LifecycleBase)的init</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public final synchronized void init() throws LifecycleException &#123;</span><br><span class="line">        if (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">            invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">        &#125;</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZING, null, false);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            initInternal();</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">            throw new LifecycleException(</span><br><span class="line">                    sm.getString(&quot;lifecycleBase.initFail&quot;,toString()), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZED, null, false);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>initInternal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void initInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        super.initInternal();</span><br><span class="line"></span><br><span class="line">        // Register global String cache</span><br><span class="line">        // Note although the cache is global, if there are multiple Servers</span><br><span class="line">        // present in the JVM (may happen when embedding) then the same cache</span><br><span class="line">        // will be registered under multiple names</span><br><span class="line">        onameStringCache = register(new StringCache(), &quot;type=StringCache&quot;);</span><br><span class="line"></span><br><span class="line">        // Register the MBeanFactory</span><br><span class="line">        MBeanFactory factory = new MBeanFactory();</span><br><span class="line">        factory.setContainer(this);</span><br><span class="line">        onameMBeanFactory = register(factory, &quot;type=MBeanFactory&quot;);</span><br><span class="line"></span><br><span class="line">        // Register the naming resources</span><br><span class="line">        globalNamingResources.init();</span><br><span class="line"></span><br><span class="line">        // Populate the extension validator with JARs from common and shared</span><br><span class="line">        // class loaders</span><br><span class="line">        if (getCatalina() != null) &#123;</span><br><span class="line">            ClassLoader cl = getCatalina().getParentClassLoader();</span><br><span class="line">            // Walk the class loader hierarchy. Stop at the system class loader.</span><br><span class="line">            // This will add the shared (if present) and common class loaders</span><br><span class="line">            while (cl != null &amp;&amp; cl != ClassLoader.getSystemClassLoader()) &#123;</span><br><span class="line">                if (cl instanceof URLClassLoader) &#123;</span><br><span class="line">                    URL[] urls = ((URLClassLoader) cl).getURLs();</span><br><span class="line">                    for (URL url : urls) &#123;</span><br><span class="line">                        if (url.getProtocol().equals(&quot;file&quot;)) &#123;</span><br><span class="line">                            try &#123;</span><br><span class="line">                                File f = new File (url.toURI());</span><br><span class="line">                                if (f.isFile() &amp;&amp;</span><br><span class="line">                                        f.getName().endsWith(&quot;.jar&quot;)) &#123;</span><br><span class="line">                                    ExtensionValidator.addSystemResource(f);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; catch (URISyntaxException e) &#123;</span><br><span class="line">                                // Ignore</span><br><span class="line">                            &#125; catch (IOException e) &#123;</span><br><span class="line">                                // Ignore</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cl = cl.getParent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 初始化每个services</span><br><span class="line">        for (int i = 0; i &lt; services.length; i++) &#123;</span><br><span class="line">            services[i].init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="StandardServer-LifecycleBase-的setStateInternal，fireLifecycleEvent是LifecycleSupport的fireLifecycleEvent"><a href="#StandardServer-LifecycleBase-的setStateInternal，fireLifecycleEvent是LifecycleSupport的fireLifecycleEvent" class="headerlink" title="StandardServer(LifecycleBase)的setStateInternal，fireLifecycleEvent是LifecycleSupport的fireLifecycleEvent"></a>StandardServer(LifecycleBase)的setStateInternal，fireLifecycleEvent是LifecycleSupport的fireLifecycleEvent</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">private synchronized void setStateInternal(LifecycleState state,</span><br><span class="line">            Object data, boolean check) throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(&quot;lifecycleBase.setState&quot;, this, state));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (check) &#123;</span><br><span class="line">            // Must have been triggered by one of the abstract methods (assume</span><br><span class="line">            // code in this class is correct)</span><br><span class="line">            // null is never a valid state</span><br><span class="line">            if (state == null) &#123;</span><br><span class="line">                invalidTransition(&quot;null&quot;);</span><br><span class="line">                // Unreachable code - here to stop eclipse complaining about</span><br><span class="line">                // a possible NPE further down the method</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Any method can transition to failed</span><br><span class="line">            // startInternal() permits STARTING_PREP to STARTING</span><br><span class="line">            // stopInternal() permits STOPPING_PREP to STOPPING and FAILED to</span><br><span class="line">            // STOPPING</span><br><span class="line">            if (!(state == LifecycleState.FAILED ||</span><br><span class="line">                    (this.state == LifecycleState.STARTING_PREP &amp;&amp;</span><br><span class="line">                            state == LifecycleState.STARTING) ||</span><br><span class="line">                    (this.state == LifecycleState.STOPPING_PREP &amp;&amp;</span><br><span class="line">                            state == LifecycleState.STOPPING) ||</span><br><span class="line">                    (this.state == LifecycleState.FAILED &amp;&amp;</span><br><span class="line">                            state == LifecycleState.STOPPING))) &#123;</span><br><span class="line">                // No other transition permitted</span><br><span class="line">                invalidTransition(state.name());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//将入参 LifecycleState 实例赋值给本类中的实例变量保存起来</span><br><span class="line">        this.state = state;</span><br><span class="line">        String lifecycleEvent = state.getLifecycleEvent();</span><br><span class="line">        if (lifecycleEvent != null) &#123;</span><br><span class="line">//发布事件</span><br><span class="line">            fireLifecycleEvent(lifecycleEvent, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="StandardServer-LifecycleBase-的start"><a href="#StandardServer-LifecycleBase-的start" class="headerlink" title="StandardServer(LifecycleBase)的start"></a>StandardServer(LifecycleBase)的start</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public final synchronized void start() throws LifecycleException &#123;</span><br><span class="line">//如果已经调用过start，返回</span><br><span class="line">        if (LifecycleState.STARTING_PREP.equals(state) ||</span><br><span class="line">                LifecycleState.STARTING.equals(state) ||</span><br><span class="line">                LifecycleState.STARTED.equals(state)) &#123;</span><br><span class="line"></span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                Exception e = new LifecycleException();</span><br><span class="line">                log.debug(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;,</span><br><span class="line">                        toString()), e);</span><br><span class="line">            &#125; else if (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;,</span><br><span class="line">                        toString()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">//调用init</span><br><span class="line">        if (state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125; else if (state.equals(LifecycleState.FAILED))&#123;</span><br><span class="line">//stop</span><br><span class="line">            stop();</span><br><span class="line">        &#125; else if (!state.equals(LifecycleState.INITIALIZED) &amp;&amp;</span><br><span class="line">                !state.equals(LifecycleState.STOPPED)) &#123;</span><br><span class="line">            invalidTransition(Lifecycle.BEFORE_START_EVENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setStateInternal(LifecycleState.STARTING_PREP, null, false);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">//重要</span><br><span class="line">            startInternal();</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">            throw new LifecycleException(</span><br><span class="line">                    sm.getString(&quot;lifecycleBase.startFail&quot;,toString()), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (state.equals(LifecycleState.FAILED) ||</span><br><span class="line">                state.equals(LifecycleState.MUST_STOP)) &#123;</span><br><span class="line">            stop();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Shouldn&#x27;t be necessary but acts as a check that sub-classes are</span><br><span class="line">            // doing what they are supposed to.</span><br><span class="line">            if (!state.equals(LifecycleState.STARTING)) &#123;</span><br><span class="line">                invalidTransition(Lifecycle.AFTER_START_EVENT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setStateInternal(LifecycleState.STARTED, null, false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>startInternal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">       fireLifecycleEvent(CONFIGURE_START_EVENT, null);</span><br><span class="line">       setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">       globalNamingResources.start();</span><br><span class="line"></span><br><span class="line">       // Start所有service</span><br><span class="line">       synchronized (servicesLock) &#123;</span><br><span class="line">           for (int i = 0; i &lt; services.length; i++) &#123;</span><br><span class="line">               services[i].start();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="StandardService"><a href="#StandardService" class="headerlink" title="StandardService"></a>StandardService</h1> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void initInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        super.initInternal();</span><br><span class="line"></span><br><span class="line">        if (container != null) &#123;</span><br><span class="line">            container.init();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Initialize any Executors</span><br><span class="line">        for (Executor executor : findExecutors()) &#123;</span><br><span class="line">            if (executor instanceof JmxEnabled) &#123;</span><br><span class="line">                ((JmxEnabled) executor).setDomain(getDomain());</span><br><span class="line">            &#125;</span><br><span class="line">            executor.init();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Initialize mapper listener</span><br><span class="line">        mapperListener.init();</span><br><span class="line"></span><br><span class="line">        // Initialize our defined Connectors</span><br><span class="line">        synchronized (connectorsLock) &#123;</span><br><span class="line">            for (Connector connector : connectors) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connector.init();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    String message = sm.getString(</span><br><span class="line">                            &quot;standardService.connector.initFailed&quot;, connector);</span><br><span class="line">                    log.error(message, e);</span><br><span class="line"></span><br><span class="line">                    if (Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;))</span><br><span class="line">                        throw new LifecycleException(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        //...</span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        // 开启StandardEngine</span><br><span class="line">        if (container != null) &#123;</span><br><span class="line">            synchronized (container) &#123;</span><br><span class="line">                container.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        synchronized (executors) &#123;</span><br><span class="line">            for (Executor executor: executors) &#123;</span><br><span class="line">                executor.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mapperListener.start();</span><br><span class="line"></span><br><span class="line">        // 开启Connector</span><br><span class="line">        synchronized (connectorsLock) &#123;</span><br><span class="line">            for (Connector connector: connectors) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    // If it has already failed, don&#x27;t try and start it</span><br><span class="line">                    if (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                        connector.start();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    log.error(sm.getString(</span><br><span class="line">                            &quot;standardService.connector.startFailed&quot;,</span><br><span class="line">                            connector), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="StandardEngine"><a href="#StandardEngine" class="headerlink" title="StandardEngine"></a>StandardEngine</h1><p>initInternal、startInternal是直接调用父类initInternal、startInternal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        // Start our subordinate components, if any</span><br><span class="line">        logger = null;</span><br><span class="line">        getLogger();</span><br><span class="line">        Cluster cluster = getClusterInternal();</span><br><span class="line">        if ((cluster != null) &amp;&amp; (cluster instanceof Lifecycle))</span><br><span class="line">            ((Lifecycle) cluster).start();</span><br><span class="line">        Realm realm = getRealmInternal();</span><br><span class="line">        if ((realm != null) &amp;&amp; (realm instanceof Lifecycle))</span><br><span class="line">            ((Lifecycle) realm).start();</span><br><span class="line"></span><br><span class="line">        // Start our child containers, if any</span><br><span class="line">        Container children[] = findChildren();</span><br><span class="line">        List&lt;Future&lt;Void&gt;&gt; results = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; children.length; i++) &#123;</span><br><span class="line">//StartChild实现了Callable ，call里面其实就是Container#start</span><br><span class="line">            results.add(startStopExecutor.submit(new StartChild(children[i])));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean fail = false;</span><br><span class="line">        for (Future&lt;Void&gt; result : results) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                result.get();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;containerBase.threadedStartFailed&quot;), e);</span><br><span class="line">                fail = true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if (fail) &#123;</span><br><span class="line">            throw new LifecycleException(</span><br><span class="line">                    sm.getString(&quot;containerBase.threadedStartFailed&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Start the Valves in our pipeline (including the basic), if any</span><br><span class="line">        if (pipeline instanceof Lifecycle)</span><br><span class="line">            ((Lifecycle) pipeline).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        // Start our thread</span><br><span class="line">        threadStart();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="StandardHost"><a href="#StandardHost" class="headerlink" title="StandardHost"></a>StandardHost</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> @Override</span><br><span class="line">    protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line">        // Set error report valve</span><br><span class="line">        String errorValve = getErrorReportValveClass();</span><br><span class="line">        if ((errorValve != null) &amp;&amp; (!errorValve.equals(&quot;&quot;))) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                boolean found = false;</span><br><span class="line">                Valve[] valves = getPipeline().getValves();</span><br><span class="line">                for (Valve valve : valves) &#123;</span><br><span class="line">                    if (errorValve.equals(valve.getClass().getName())) &#123;</span><br><span class="line">                        found = true;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(!found) &#123;</span><br><span class="line">                    Valve valve =</span><br><span class="line">                        (Valve) Class.forName(errorValve).getConstructor().newInstance();</span><br><span class="line">                    getPipeline().addValve(valve);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">//...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        super.startInternal();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Connector</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        // Validate settings before starting</span><br><span class="line">        if (getPort() &lt; 0) &#123;</span><br><span class="line">            throw new LifecycleException(sm.getString(</span><br><span class="line">                    &quot;coyoteConnector.invalidPort&quot;, Integer.valueOf(getPort())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">//其实就是Http11AprProtocol见后文</span><br><span class="line">            protocolHandler.start();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new LifecycleException(</span><br><span class="line">                    sm.getString(&quot;coyoteConnector.protocolHandlerStartFailed&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>initInternal<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void initInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        super.initInternal();</span><br><span class="line"></span><br><span class="line">        // Initialize adapter，后面处理service的时候用的就是这个</span><br><span class="line">        adapter = new CoyoteAdapter(this);</span><br><span class="line">        protocolHandler.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">        // Make sure parseBodyMethodsSet has a default</span><br><span class="line">        if (null == parseBodyMethodsSet) &#123;</span><br><span class="line">            setParseBodyMethods(getParseBodyMethods());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (protocolHandler.isAprRequired() &amp;&amp; !AprLifecycleListener.isAprAvailable()) &#123;</span><br><span class="line">            throw new LifecycleException(sm.getString(&quot;coyoteConnector.protocolHandlerNoApr&quot;,</span><br><span class="line">                    getProtocolHandlerClassName()));</span><br><span class="line">        &#125;</span><br><span class="line">        if (AprLifecycleListener.isAprAvailable() &amp;&amp; AprLifecycleListener.getUseOpenSSL() &amp;&amp;</span><br><span class="line">                protocolHandler instanceof AbstractHttp11JsseProtocol) &#123;</span><br><span class="line">            AbstractHttp11JsseProtocol&lt;?&gt; jsseProtocolHandler =</span><br><span class="line">                    (AbstractHttp11JsseProtocol&lt;?&gt;) protocolHandler;</span><br><span class="line">            if (jsseProtocolHandler.isSSLEnabled() &amp;&amp;</span><br><span class="line">                    jsseProtocolHandler.getSslImplementationName() == null) &#123;</span><br><span class="line">                // OpenSSL is compatible with the JSSE configuration, so use it if APR is available</span><br><span class="line">                jsseProtocolHandler.setSslImplementationName(OpenSSLImplementation.class.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            protocolHandler.init();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new LifecycleException(</span><br><span class="line">                    sm.getString(&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-images.githubusercontent.com/7789698/37251128-77badb12-2544-11e8-906d-92071230aac8.png" alt="image"></p><p>参考：<a href="https://juejin.im/post/5a6d6f6751882573520da54d">https://juejin.im/post/5a6d6f6751882573520da54d</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 源码解析（二）--Bootstrap.jar</title>
      <link href="/hexo/post/143b4ffc.html"/>
      <url>/hexo/post/143b4ffc.html</url>
      
        <content type="html"><![CDATA[<p>之前我们看到其实启动脚本就是使用Bootstrap 的main启动的</p><h1 id="解析Bootstrap"><a href="#解析Bootstrap" class="headerlink" title="解析Bootstrap"></a>解析Bootstrap</h1><p>Bootstrap 的main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line"></span><br><span class="line">        if (daemon == null) &#123;</span><br><span class="line">            // Don&#x27;t set daemon until init() has completed</span><br><span class="line">            Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">            try &#123;</span><br><span class="line">                bootstrap.init();</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                handleThrowable(t);</span><br><span class="line">                t.printStackTrace();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            daemon = bootstrap;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // When running as a service the call to stop will be on a new</span><br><span class="line">            // thread so make sure the correct class loader is used to prevent</span><br><span class="line">            // a range of class not found exceptions.</span><br><span class="line">            Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            String command = &quot;start&quot;;</span><br><span class="line">            if (args.length &gt; 0) &#123;</span><br><span class="line">                command = args[args.length - 1];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (command.equals(&quot;startd&quot;)) &#123;</span><br><span class="line">                args[args.length - 1] = &quot;start&quot;;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                daemon.start();</span><br><span class="line">            &#125; else if (command.equals(&quot;stopd&quot;)) &#123;</span><br><span class="line">                args[args.length - 1] = &quot;stop&quot;;</span><br><span class="line">                daemon.stop();</span><br><span class="line">            &#125; else if (command.equals(&quot;start&quot;)) &#123;</span><br><span class="line">                daemon.setAwait(true);</span><br><span class="line">//调用load ,最后调用Catalina#load</span><br><span class="line">                daemon.load(args);</span><br><span class="line">//调用start</span><br><span class="line">                daemon.start();</span><br><span class="line">            &#125; else if (command.equals(&quot;stop&quot;)) &#123;</span><br><span class="line">                daemon.stopServer(args);</span><br><span class="line">            &#125; else if (command.equals(&quot;configtest&quot;)) &#123;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                if (null==daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(1);</span><br><span class="line">                &#125;</span><br><span class="line">                System.exit(0);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.warn(&quot;Bootstrap: command \&quot;&quot; + command + &quot;\&quot; does not exist.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            // Unwrap the Exception for clearer error reporting</span><br><span class="line">            if (t instanceof InvocationTargetException &amp;&amp;</span><br><span class="line">                    t.getCause() != null) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>init</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public void init() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        initClassLoaders();</span><br><span class="line"></span><br><span class="line">//设置目前线程的类装载器catalinaLoader</span><br><span class="line">        Thread.currentThread().setContextClassLoader(catalinaLoader);</span><br><span class="line"></span><br><span class="line">        SecurityClassLoad.securityClassLoad(catalinaLoader);</span><br><span class="line"></span><br><span class="line">        // 加载类Catalina并实例化最后赋值给catalinaDaemon</span><br><span class="line">        if (log.isDebugEnabled())</span><br><span class="line">            log.debug(&quot;Loading startup class&quot;);</span><br><span class="line">        Class&lt;?&gt; startupClass =</span><br><span class="line">            catalinaLoader.loadClass</span><br><span class="line">            (&quot;org.apache.catalina.startup.Catalina&quot;);</span><br><span class="line">        Object startupInstance = startupClass.newInstance();</span><br><span class="line"></span><br><span class="line">        // 以 sharedLoader 作为入参通过反射调用该对象的 setParentClassLoader 方法。</span><br><span class="line"> //也就是sharedLoader作为父ClassLoader</span><br><span class="line">        if (log.isDebugEnabled())</span><br><span class="line">            log.debug(&quot;Setting startup class properties&quot;);</span><br><span class="line">        String methodName = &quot;setParentClassLoader&quot;;</span><br><span class="line">        Class&lt;?&gt; paramTypes[] = new Class[1];</span><br><span class="line">        paramTypes[0] = Class.forName(&quot;java.lang.ClassLoader&quot;);</span><br><span class="line">        Object paramValues[] = new Object[1];</span><br><span class="line">        paramValues[0] = sharedLoader;</span><br><span class="line">        Method method =</span><br><span class="line">            startupInstance.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">        method.invoke(startupInstance, paramValues);</span><br><span class="line"></span><br><span class="line">        catalinaDaemon = startupInstance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initClassLoaders() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">//catalina.properties 的common.loader（&quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;）  </span><br><span class="line">//创建commonLoader类加载器</span><br><span class="line">            commonLoader = createClassLoader(&quot;common&quot;, null);</span><br><span class="line">            if( commonLoader == null ) &#123;</span><br><span class="line">                // no config file, default to this loader - we might be in a &#x27;single&#x27; env.</span><br><span class="line">                commonLoader=this.getClass().getClassLoader();</span><br><span class="line">            &#125;</span><br><span class="line">//server.loader （搜索路径空）</span><br><span class="line">//创建catalinaLoader类加载器 </span><br><span class="line">            catalinaLoader = createClassLoader(&quot;server&quot;, commonLoader);</span><br><span class="line">//shared.loader （搜索路径空）</span><br><span class="line">//创建sharedLoader类加载器</span><br><span class="line">            sharedLoader = createClassLoader(&quot;shared&quot;, commonLoader);</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            log.error(&quot;Class loader creation threw exception&quot;, t);</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>start</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    public void start()</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">        if( catalinaDaemon==null ) init();</span><br><span class="line"></span><br><span class="line">//通过反射调用执行Catalina #start</span><br><span class="line">        Method method = catalinaDaemon.getClass().getMethod(&quot;start&quot;, (Class [] )null);</span><br><span class="line">        method.invoke(catalinaDaemon, (Object [])null);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="解析Catalina"><a href="#解析Catalina" class="headerlink" title="解析Catalina"></a>解析Catalina</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">public void load() &#123;</span><br><span class="line"></span><br><span class="line">        long t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        initDirs();</span><br><span class="line"></span><br><span class="line">        // Before digester - it may be needed</span><br><span class="line"></span><br><span class="line">        initNaming();</span><br><span class="line"></span><br><span class="line">        // 创建Digester</span><br><span class="line">        Digester digester = createStartDigester();</span><br><span class="line"></span><br><span class="line">        InputSource inputSource = null;</span><br><span class="line">        InputStream inputStream = null;</span><br><span class="line">        File file = null;</span><br><span class="line">        try &#123;</span><br><span class="line">//读取CatalinaBase/conf/server.xml</span><br><span class="line">            file = configFile();</span><br><span class="line">            inputStream = new FileInputStream(file);</span><br><span class="line">            inputSource = new InputSource(file.toURI().toURL().toString());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(sm.getString(&quot;catalina.configFail&quot;, file), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (inputStream == null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">//读conf/server.xml</span><br><span class="line">                inputStream = getClass().getClassLoader()</span><br><span class="line">                    .getResourceAsStream(getConfigFile());</span><br><span class="line">                inputSource = new InputSource</span><br><span class="line">                    (getClass().getClassLoader()</span><br><span class="line">                     .getResource(getConfigFile()).toString());</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;catalina.configFail&quot;,</span><br><span class="line">                            getConfigFile()), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // This should be included in catalina.jar</span><br><span class="line">        // Alternative: don&#x27;t bother with xml, just create it manually.</span><br><span class="line">        if( inputStream==null ) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                inputStream = getClass().getClassLoader()</span><br><span class="line">                        .getResourceAsStream(&quot;server-embed.xml&quot;);</span><br><span class="line">                inputSource = new InputSource</span><br><span class="line">                (getClass().getClassLoader()</span><br><span class="line">                        .getResource(&quot;server-embed.xml&quot;).toString());</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;catalina.configFail&quot;,</span><br><span class="line">                            &quot;server-embed.xml&quot;), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (inputStream == null || inputSource == null) &#123;</span><br><span class="line">            if  (file == null) &#123;</span><br><span class="line">                log.warn(sm.getString(&quot;catalina.configFail&quot;,</span><br><span class="line">                        getConfigFile() + &quot;] or [server-embed.xml]&quot;));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.warn(sm.getString(&quot;catalina.configFail&quot;,</span><br><span class="line">                        file.getAbsolutePath()));</span><br><span class="line">                if (file.exists() &amp;&amp; !file.canRead()) &#123;</span><br><span class="line">                    log.warn(&quot;Permissions incorrect, read permission is not allowed on the file.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            inputSource.setByteStream(inputStream);</span><br><span class="line">            digester.push(this);</span><br><span class="line">            digester.parse(inputSource);</span><br><span class="line">        &#125; catch (SAXParseException spe) &#123;</span><br><span class="line">            log.warn(&quot;Catalina.start using &quot; + getConfigFile() + &quot;: &quot; +</span><br><span class="line">                    spe.getMessage());</span><br><span class="line">            return;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(&quot;Catalina.start using &quot; + getConfigFile() + &quot;: &quot; , e);</span><br><span class="line">            return;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//Server 设置Catalina为本实例,设置CatalinaHome、CatalinaBase 初始化</span><br><span class="line">        getServer().setCatalina(this);</span><br><span class="line">        getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</span><br><span class="line">        getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</span><br><span class="line"></span><br><span class="line">        // Stream redirection</span><br><span class="line">        initStreams();</span><br><span class="line"></span><br><span class="line">        // Start the new server</span><br><span class="line">        try &#123;</span><br><span class="line">            getServer().init();</span><br><span class="line">        &#125; catch (LifecycleException e) &#123;</span><br><span class="line">            if (Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;)) &#123;</span><br><span class="line">                throw new java.lang.Error(e);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.error(&quot;Catalina.start&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long t2 = System.nanoTime();</span><br><span class="line">        if(log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中Digester是很重要的东西，重点在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//创建Digester</span><br><span class="line">Digester digester = createStartDigester();  </span><br><span class="line">//读取conf/server.xml，放入流</span><br><span class="line">inputSource.setByteStream(inputStream);  </span><br><span class="line">//吧当前对象压入</span><br><span class="line">digester.push(this);  </span><br><span class="line">//解析xml</span><br><span class="line">digester.parse(inputSource);  </span><br><span class="line">getServer().setCatalina(this);  </span><br><span class="line">//调用 Server 接口对象的 init 方法。其实就是StandardServer的init(内部initInternal)</span><br><span class="line">getServer().init();  </span><br></pre></td></tr></table></figure><p>这样经过对 xml 文件的解析将会产生 org.apache.catalina.core.StandardServer、org.apache.catalina.core.StandardService、org.apache.catalina.connector.Connector、org.apache.catalina.core.StandardEngine、org.apache.catalina.core.StandardHost、org.apache.catalina.core.StandardContext 等等</p><p>Catalina的start</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line"></span><br><span class="line">        if (getServer() == null) &#123;</span><br><span class="line">            load();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (getServer() == null) &#123;</span><br><span class="line">            log.fatal(&quot;Cannot start server. Server instance is not configured.&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        // 调用Server的start</span><br><span class="line">        try &#123;</span><br><span class="line">            getServer().start();</span><br><span class="line">        &#125; catch (LifecycleException e) &#123;</span><br><span class="line">            log.fatal(sm.getString(&quot;catalina.serverStartFail&quot;), e);</span><br><span class="line">            try &#123;</span><br><span class="line">//destroy</span><br><span class="line">                getServer().destroy();</span><br><span class="line">            &#125; catch (LifecycleException e1) &#123;</span><br><span class="line">                log.debug(&quot;destroy() failed for failed Server &quot;, e1);</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long t2 = System.nanoTime();</span><br><span class="line">        if(log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(&quot;Server startup in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 注册 shutdown hook</span><br><span class="line">        if (useShutdownHook) &#123;</span><br><span class="line">            if (shutdownHook == null) &#123;</span><br><span class="line">                shutdownHook = new CatalinaShutdownHook();</span><br><span class="line">            &#125;</span><br><span class="line">            Runtime.getRuntime().addShutdownHook(shutdownHook);</span><br><span class="line"></span><br><span class="line">            // If JULI is being used, disable JULI&#x27;s shutdown hook since</span><br><span class="line">            // shutdown hooks run in parallel and log messages may be lost</span><br><span class="line">            // if JULI&#x27;s hook completes before the CatalinaShutdownHook()</span><br><span class="line">            LogManager logManager = LogManager.getLogManager();</span><br><span class="line">            if (logManager instanceof ClassLoaderLogManager) &#123;</span><br><span class="line">                ((ClassLoaderLogManager) logManager).setUseShutdownHook(</span><br><span class="line">                        false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (await) &#123;</span><br><span class="line">            await();</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 源码解析（一）--脚本</title>
      <link href="/hexo/post/f42d2c92.html"/>
      <url>/hexo/post/f42d2c92.html</url>
      
        <content type="html"><![CDATA[<p>我们来看下startup.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Better OS/400 detection: see Bugzilla 31132</span></span><br><span class="line">os400=false</span><br><span class="line">case &quot;`uname`&quot; in</span><br><span class="line">OS400*) os400=true;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$0</span> 表示Shell本身的文件名</span></span><br><span class="line">PRG=&quot;$0&quot;</span><br><span class="line"></span><br><span class="line">while [ -h &quot;$PRG&quot; ] ; do</span><br><span class="line"><span class="meta">#</span><span class="bash">取到软连接的真实文件或真实目录</span></span><br><span class="line">  ls=`ls -ld &quot;$PRG&quot;`</span><br><span class="line">  link=`expr &quot;$ls&quot; : &#x27;.*-&gt; \(.*\)$&#x27;`</span><br><span class="line">  if expr &quot;$link&quot; : &#x27;/.*&#x27; &gt; /dev/null; then</span><br><span class="line">    PRG=&quot;$link&quot;</span><br><span class="line">  else</span><br><span class="line">    PRG=`dirname &quot;$PRG&quot;`/&quot;$link&quot;</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">获取脚本文件所在的绝对路径</span></span><br><span class="line">PRGDIR=`dirname &quot;$PRG&quot;`</span><br><span class="line">EXECUTABLE=catalina.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Check that target executable exists</span></span><br><span class="line">if $os400; then</span><br><span class="line"><span class="meta">  #</span><span class="bash"> -x will Only work on the os400 <span class="keyword">if</span> the files are:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 1. owned by the user</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 2. owned by the PRIMARY group of the user</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> this will not work <span class="keyword">if</span> the user belongs <span class="keyword">in</span> secondary groups</span></span><br><span class="line">  eval</span><br><span class="line">else</span><br><span class="line">  if [ ! -x &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; ]; then</span><br><span class="line">    echo &quot;Cannot find $PRGDIR/$EXECUTABLE&quot;</span><br><span class="line">    echo &quot;The file is absent or does not have execute permission&quot;</span><br><span class="line">    echo &quot;This file is needed to run this program&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$@</span> 所有参数列表</span></span><br><span class="line">exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以其实就是执行<code> catalina.sh start $@</code></p><p>catalina.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># OS specific support.  $var _must_ be set to either true or false.</span><br><span class="line">cygwin=false</span><br><span class="line">darwin=false</span><br><span class="line">os400=false</span><br><span class="line">case &quot;`uname`&quot; in</span><br><span class="line">CYGWIN*) cygwin=true;;</span><br><span class="line">Darwin*) darwin=true;;</span><br><span class="line">OS400*) os400=true;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"># resolve links - $0 may be a softlink</span><br><span class="line">PRG=&quot;$0&quot;</span><br><span class="line"></span><br><span class="line">while [ -h &quot;$PRG&quot; ]; do</span><br><span class="line">  ls=`ls -ld &quot;$PRG&quot;`</span><br><span class="line">  link=`expr &quot;$ls&quot; : &#x27;.*-&gt; \(.*\)$&#x27;`</span><br><span class="line">  if expr &quot;$link&quot; : &#x27;/.*&#x27; &gt; /dev/null; then</span><br><span class="line">    PRG=&quot;$link&quot;</span><br><span class="line">  else</span><br><span class="line">    PRG=`dirname &quot;$PRG&quot;`/&quot;$link&quot;</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># Get standard environment variables</span><br><span class="line">PRGDIR=`dirname &quot;$PRG&quot;`</span><br><span class="line"></span><br><span class="line"># -z CATALINA_HOME长度为0为真 ，取脚本所在目录上层作为CATALINA_HOME</span><br><span class="line">[ -z &quot;$CATALINA_HOME&quot; ] &amp;&amp; CATALINA_HOME=`cd &quot;$PRGDIR/..&quot; &gt;/dev/null; pwd`</span><br><span class="line"></span><br><span class="line"># CATALINA_BASE没设置 CATALINA_BASE就设为CATALINA_HOME</span><br><span class="line">[ -z &quot;$CATALINA_BASE&quot; ] &amp;&amp; CATALINA_BASE=&quot;$CATALINA_HOME&quot;</span><br><span class="line"></span><br><span class="line"># 校验 确保中间没有“:”</span><br><span class="line">case $CATALINA_HOME in</span><br><span class="line">  *:*) echo &quot;Using CATALINA_HOME:   $CATALINA_HOME&quot;;</span><br><span class="line">       echo &quot;Unable to start as CATALINA_HOME contains a colon (:) character&quot;;</span><br><span class="line">       exit 1;</span><br><span class="line">esac</span><br><span class="line">case $CATALINA_BASE in</span><br><span class="line">  *:*) echo &quot;Using CATALINA_BASE:   $CATALINA_BASE&quot;;</span><br><span class="line">       echo &quot;Unable to start as CATALINA_BASE contains a colon (:) character&quot;;</span><br><span class="line">       exit 1;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"># Ensure that any user defined CLASSPATH variables are not used on startup</span><br><span class="line">CLASSPATH=</span><br><span class="line"></span><br><span class="line">#-r 存在文件  setenv.sh则执行</span><br><span class="line">if [ -r &quot;$CATALINA_BASE/bin/setenv.sh&quot; ]; then</span><br><span class="line">  . &quot;$CATALINA_BASE/bin/setenv.sh&quot;</span><br><span class="line">elif [ -r &quot;$CATALINA_HOME/bin/setenv.sh&quot; ]; then</span><br><span class="line">  . &quot;$CATALINA_HOME/bin/setenv.sh&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Cygwin 下，存在变量则用cygpath</span><br><span class="line">if $cygwin; then</span><br><span class="line">  [ -n &quot;$JAVA_HOME&quot; ] &amp;&amp; JAVA_HOME=`cygpath --unix &quot;$JAVA_HOME&quot;`</span><br><span class="line">  [ -n &quot;$JRE_HOME&quot; ] &amp;&amp; JRE_HOME=`cygpath --unix &quot;$JRE_HOME&quot;`</span><br><span class="line">  [ -n &quot;$CATALINA_HOME&quot; ] &amp;&amp; CATALINA_HOME=`cygpath --unix &quot;$CATALINA_HOME&quot;`</span><br><span class="line">  [ -n &quot;$CATALINA_BASE&quot; ] &amp;&amp; CATALINA_BASE=`cygpath --unix &quot;$CATALINA_BASE&quot;`</span><br><span class="line">  [ -n &quot;$CLASSPATH&quot; ] &amp;&amp; CLASSPATH=`cygpath --path --unix &quot;$CLASSPATH&quot;`</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># For OS400</span><br><span class="line">if $os400; then</span><br><span class="line">  # Set job priority to standard for interactive (interactive - 6) by using</span><br><span class="line">  # the interactive priority - 6, the helper threads that respond to requests</span><br><span class="line">  # will be running at the same priority as interactive jobs.</span><br><span class="line">  COMMAND=&#x27;chgjob job(&#x27;$JOBNAME&#x27;) runpty(6)&#x27;</span><br><span class="line">  system $COMMAND</span><br><span class="line"></span><br><span class="line">  # Enable multi threading</span><br><span class="line">  export QIBM_MULTI_THREADED=Y</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># setclasspath.sh 见下面</span><br><span class="line">if $os400; then</span><br><span class="line">  # -r will Only work on the os400 if the files are:</span><br><span class="line">  # 1. owned by the user</span><br><span class="line">  # 2. owned by the PRIMARY group of the user</span><br><span class="line">  # this will not work if the user belongs in secondary groups</span><br><span class="line">  . &quot;$CATALINA_HOME&quot;/bin/setclasspath.sh</span><br><span class="line">else</span><br><span class="line">  if [ -r &quot;$CATALINA_HOME&quot;/bin/setclasspath.sh ]; then</span><br><span class="line">    . &quot;$CATALINA_HOME&quot;/bin/setclasspath.sh</span><br><span class="line">  else</span><br><span class="line">    echo &quot;Cannot find $CATALINA_HOME/bin/setclasspath.sh&quot;</span><br><span class="line">    echo &quot;This file is needed to run this program&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 添加bootstrap.jar（作用看后续，主要是org.apache.catalina.startup.Bootstrap）到 CLASSPATH</span><br><span class="line">if [ ! -z &quot;$CLASSPATH&quot; ] ; then</span><br><span class="line">  CLASSPATH=&quot;$CLASSPATH&quot;:</span><br><span class="line">fi</span><br><span class="line">CLASSPATH=&quot;$CLASSPATH&quot;&quot;$CATALINA_HOME&quot;/bin/bootstrap.jar</span><br><span class="line"></span><br><span class="line">#设置CATALINA_OUT（日志）</span><br><span class="line">if [ -z &quot;$CATALINA_OUT&quot; ] ; then</span><br><span class="line">  CATALINA_OUT=&quot;$CATALINA_BASE&quot;/logs/catalina.out</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#设置CATALINA_TMPDIR（temp文件）</span><br><span class="line">if [ -z &quot;$CATALINA_TMPDIR&quot; ] ; then</span><br><span class="line">  # Define the java.io.tmpdir to use for Catalina</span><br><span class="line">  CATALINA_TMPDIR=&quot;$CATALINA_BASE&quot;/temp</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 添加 tomcat-juli.jar 到 classpath</span><br><span class="line">if [ -r &quot;$CATALINA_BASE/bin/tomcat-juli.jar&quot; ] ; then</span><br><span class="line">  CLASSPATH=$CLASSPATH:$CATALINA_BASE/bin/tomcat-juli.jar</span><br><span class="line">else</span><br><span class="line">  CLASSPATH=$CLASSPATH:$CATALINA_HOME/bin/tomcat-juli.jar</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Bugzilla 37848: When no TTY is available, don&#x27;t output to console</span><br><span class="line">have_tty=0</span><br><span class="line">if [ &quot;`tty`&quot; != &quot;not a tty&quot; ]; then</span><br><span class="line">    have_tty=1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># For Cygwin, switch paths to Windows format before running java</span><br><span class="line">if $cygwin; then</span><br><span class="line">  JAVA_HOME=`cygpath --absolute --windows &quot;$JAVA_HOME&quot;`</span><br><span class="line">  JRE_HOME=`cygpath --absolute --windows &quot;$JRE_HOME&quot;`</span><br><span class="line">  CATALINA_HOME=`cygpath --absolute --windows &quot;$CATALINA_HOME&quot;`</span><br><span class="line">  CATALINA_BASE=`cygpath --absolute --windows &quot;$CATALINA_BASE&quot;`</span><br><span class="line">  CATALINA_TMPDIR=`cygpath --absolute --windows &quot;$CATALINA_TMPDIR&quot;`</span><br><span class="line">  CLASSPATH=`cygpath --path --windows &quot;$CLASSPATH&quot;`</span><br><span class="line">  JAVA_ENDORSED_DIRS=`cygpath --path --windows &quot;$JAVA_ENDORSED_DIRS&quot;`</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Set juli LogManager config file if it is present and an override has not been issued</span><br><span class="line">if [ -z &quot;$LOGGING_CONFIG&quot; ]; then</span><br><span class="line">  if [ -r &quot;$CATALINA_BASE&quot;/conf/logging.properties ]; then</span><br><span class="line">    LOGGING_CONFIG=&quot;-Djava.util.logging.config.file=$CATALINA_BASE/conf/logging.properties&quot;</span><br><span class="line">  else</span><br><span class="line">    # Bugzilla 45585</span><br><span class="line">    LOGGING_CONFIG=&quot;-Dnop&quot;</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$LOGGING_MANAGER&quot; ]; then</span><br><span class="line">  LOGGING_MANAGER=&quot;-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to make the umask available when using the</span><br><span class="line"># org.apache.catalina.security.SecurityListener</span><br><span class="line">#JAVA_OPTS=&quot;$JAVA_OPTS -Dorg.apache.catalina.security.SecurityListener.UMASK=`umask`&quot;</span><br><span class="line"></span><br><span class="line"># ----- Execute The Requested Command -----------------------------------------</span><br><span class="line"></span><br><span class="line"># Bugzilla 37848: only output this if we have a TTY</span><br><span class="line">if [ $have_tty -eq 1 ]; then</span><br><span class="line">  echo &quot;Using CATALINA_BASE:   $CATALINA_BASE&quot;</span><br><span class="line">  echo &quot;Using CATALINA_HOME:   $CATALINA_HOME&quot;</span><br><span class="line">  echo &quot;Using CATALINA_TMPDIR: $CATALINA_TMPDIR&quot;</span><br><span class="line">  if [ &quot;$1&quot; = &quot;debug&quot; ] ; then</span><br><span class="line">    echo &quot;Using JAVA_HOME:       $JAVA_HOME&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;Using JRE_HOME:        $JRE_HOME&quot;</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;Using CLASSPATH:       $CLASSPATH&quot;</span><br><span class="line">  if [ ! -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">    echo &quot;Using CATALINA_PID:    $CATALINA_PID&quot;</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; = &quot;jpda&quot; ] ; then</span><br><span class="line">  if [ -z &quot;$JPDA_TRANSPORT&quot; ]; then</span><br><span class="line">    JPDA_TRANSPORT=&quot;dt_socket&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [ -z &quot;$JPDA_ADDRESS&quot; ]; then</span><br><span class="line">    JPDA_ADDRESS=&quot;localhost:8000&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [ -z &quot;$JPDA_SUSPEND&quot; ]; then</span><br><span class="line">    JPDA_SUSPEND=&quot;n&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [ -z &quot;$JPDA_OPTS&quot; ]; then</span><br><span class="line">    JPDA_OPTS=&quot;-agentlib:jdwp=transport=$JPDA_TRANSPORT,address=$JPDA_ADDRESS,server=y,suspend=$JPDA_SUSPEND&quot;</span><br><span class="line">  fi</span><br><span class="line">  CATALINA_OPTS=&quot;$CATALINA_OPTS $JPDA_OPTS&quot;</span><br><span class="line">#shift 向左移动一个参数</span><br><span class="line">  shift</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; = &quot;debug&quot; ] ; then</span><br><span class="line">  if $os400; then</span><br><span class="line">    echo &quot;Debug command not available on OS400&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  else</span><br><span class="line">    shift</span><br><span class="line">    if [ &quot;$1&quot; = &quot;-security&quot; ] ; then</span><br><span class="line">      if [ $have_tty -eq 1 ]; then</span><br><span class="line">        echo &quot;Using Security Manager&quot;</span><br><span class="line">      fi</span><br><span class="line">      shift</span><br><span class="line">      exec &quot;$_RUNJDB&quot; &quot;$LOGGING_CONFIG&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</span><br><span class="line">        -Djava.endorsed.dirs=&quot;$JAVA_ENDORSED_DIRS&quot; -classpath &quot;$CLASSPATH&quot; \</span><br><span class="line">        -sourcepath &quot;$CATALINA_HOME&quot;/../../java \</span><br><span class="line">        -Djava.security.manager \</span><br><span class="line">        -Djava.security.policy==&quot;$CATALINA_BASE&quot;/conf/catalina.policy \</span><br><span class="line">        -Dcatalina.base=&quot;$CATALINA_BASE&quot; \</span><br><span class="line">        -Dcatalina.home=&quot;$CATALINA_HOME&quot; \</span><br><span class="line">        -Djava.io.tmpdir=&quot;$CATALINA_TMPDIR&quot; \</span><br><span class="line">        org.apache.catalina.startup.Bootstrap &quot;$@&quot; start</span><br><span class="line">    else</span><br><span class="line">      exec &quot;$_RUNJDB&quot; &quot;$LOGGING_CONFIG&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</span><br><span class="line">        -Djava.endorsed.dirs=&quot;$JAVA_ENDORSED_DIRS&quot; -classpath &quot;$CLASSPATH&quot; \</span><br><span class="line">        -sourcepath &quot;$CATALINA_HOME&quot;/../../java \</span><br><span class="line">        -Dcatalina.base=&quot;$CATALINA_BASE&quot; \</span><br><span class="line">        -Dcatalina.home=&quot;$CATALINA_HOME&quot; \</span><br><span class="line">        -Djava.io.tmpdir=&quot;$CATALINA_TMPDIR&quot; \</span><br><span class="line">        org.apache.catalina.startup.Bootstrap &quot;$@&quot; start</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">elif [ &quot;$1&quot; = &quot;run&quot; ]; then</span><br><span class="line"></span><br><span class="line">  shift</span><br><span class="line">  if [ &quot;$1&quot; = &quot;-security&quot; ] ; then</span><br><span class="line">    if [ $have_tty -eq 1 ]; then</span><br><span class="line">      echo &quot;Using Security Manager&quot;</span><br><span class="line">    fi</span><br><span class="line">    shift</span><br><span class="line">    eval exec &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</span><br><span class="line">      -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Djava.security.manager \</span><br><span class="line">      -Djava.security.policy==&quot;\&quot;$CATALINA_BASE/conf/catalina.policy\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start</span><br><span class="line">  else</span><br><span class="line">    eval exec &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</span><br><span class="line">      -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">#start</span><br><span class="line">elif [ &quot;$1&quot; = &quot;start&quot; ] ; then</span><br><span class="line"></span><br><span class="line">#启动前如果pid存在，kill掉</span><br><span class="line">  if [ ! -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">    if [ -f &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">      if [ -s &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">        echo &quot;Existing PID file found during start.&quot;</span><br><span class="line">        if [ -r &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">          PID=`cat &quot;$CATALINA_PID&quot;`</span><br><span class="line">          ps -p $PID &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">          if [ $? -eq 0 ] ; then</span><br><span class="line">            echo &quot;Tomcat appears to still be running with PID $PID. Start aborted.&quot;</span><br><span class="line">            exit 1</span><br><span class="line">          else</span><br><span class="line">            echo &quot;Removing/clearing stale PID file.&quot;</span><br><span class="line">            rm -f &quot;$CATALINA_PID&quot; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">            if [ $? != 0 ]; then</span><br><span class="line">              if [ -w &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">                cat /dev/null &gt; &quot;$CATALINA_PID&quot;</span><br><span class="line">              else</span><br><span class="line">                echo &quot;Unable to remove or clear stale PID file. Start aborted.&quot;</span><br><span class="line">                exit 1</span><br><span class="line">              fi</span><br><span class="line">            fi</span><br><span class="line">          fi</span><br><span class="line">        else</span><br><span class="line">          echo &quot;Unable to read PID file. Start aborted.&quot;</span><br><span class="line">          exit 1</span><br><span class="line">        fi</span><br><span class="line">      else</span><br><span class="line">        rm -f &quot;$CATALINA_PID&quot; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [ $? != 0 ]; then</span><br><span class="line">          if [ ! -w &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">            echo &quot;Unable to remove or write to empty PID file. Start aborted.&quot;</span><br><span class="line">            exit 1</span><br><span class="line">          fi</span><br><span class="line">        fi</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  shift</span><br><span class="line">  touch &quot;$CATALINA_OUT&quot;</span><br><span class="line">  if [ &quot;$1&quot; = &quot;-security&quot; ] ; then</span><br><span class="line">    if [ $have_tty -eq 1 ]; then</span><br><span class="line">      echo &quot;Using Security Manager&quot;</span><br><span class="line">    fi</span><br><span class="line">    shift</span><br><span class="line">    eval &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</span><br><span class="line">      -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Djava.security.manager \</span><br><span class="line">      -Djava.security.policy==&quot;\&quot;$CATALINA_BASE/conf/catalina.policy\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br><span class="line"></span><br><span class="line">  else</span><br><span class="line"># 启动最关键的地方</span><br><span class="line">    eval &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</span><br><span class="line">      -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br><span class="line"></span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ ! -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">    echo $! &gt; &quot;$CATALINA_PID&quot;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  echo &quot;Tomcat started.&quot;</span><br><span class="line"></span><br><span class="line">elif [ &quot;$1&quot; = &quot;stop&quot; ] ; then</span><br><span class="line"></span><br><span class="line">  shift</span><br><span class="line"></span><br><span class="line">  SLEEP=5</span><br><span class="line">  if [ ! -z &quot;$1&quot; ]; then</span><br><span class="line">    echo $1 | grep &quot;[^0-9]&quot; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [ $? -gt 0 ]; then</span><br><span class="line">      SLEEP=$1</span><br><span class="line">      shift</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  FORCE=0</span><br><span class="line">  if [ &quot;$1&quot; = &quot;-force&quot; ]; then</span><br><span class="line">    shift</span><br><span class="line">    FORCE=1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ ! -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">    if [ -f &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">      if [ -s &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">        kill -0 `cat &quot;$CATALINA_PID&quot;` &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [ $? -gt 0 ]; then</span><br><span class="line">          echo &quot;PID file found but no matching process was found. Stop aborted.&quot;</span><br><span class="line">          exit 1</span><br><span class="line">        fi</span><br><span class="line">      else</span><br><span class="line">        echo &quot;PID file is empty and has been ignored.&quot;</span><br><span class="line">      fi</span><br><span class="line">    else</span><br><span class="line">      echo &quot;\$CATALINA_PID was set but the specified file does not exist. Is Tomcat running? Stop aborted.&quot;</span><br><span class="line">      exit 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  eval &quot;\&quot;$_RUNJAVA\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS \</span><br><span class="line">    -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">    -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">    -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">    -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">    org.apache.catalina.startup.Bootstrap &quot;$@&quot; stop</span><br><span class="line"></span><br><span class="line">  # stop failed. Shutdown port disabled? Try a normal kill.</span><br><span class="line">  if [ $? != 0 ]; then</span><br><span class="line">    if [ ! -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">      echo &quot;The stop command failed. Attempting to signal the process to stop through OS signal.&quot;</span><br><span class="line">      kill -15 `cat &quot;$CATALINA_PID&quot;` &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ ! -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">    if [ -f &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">      while [ $SLEEP -ge 0 ]; do</span><br><span class="line">        kill -0 `cat &quot;$CATALINA_PID&quot;` &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [ $? -gt 0 ]; then</span><br><span class="line">          rm -f &quot;$CATALINA_PID&quot; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">          if [ $? != 0 ]; then</span><br><span class="line">            if [ -w &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">              cat /dev/null &gt; &quot;$CATALINA_PID&quot;</span><br><span class="line">              # If Tomcat has stopped don&#x27;t try and force a stop with an empty PID file</span><br><span class="line">              FORCE=0</span><br><span class="line">            else</span><br><span class="line">              echo &quot;The PID file could not be removed or cleared.&quot;</span><br><span class="line">            fi</span><br><span class="line">          fi</span><br><span class="line">          echo &quot;Tomcat stopped.&quot;</span><br><span class="line">          break</span><br><span class="line">        fi</span><br><span class="line">        if [ $SLEEP -gt 0 ]; then</span><br><span class="line">          sleep 1</span><br><span class="line">        fi</span><br><span class="line">        if [ $SLEEP -eq 0 ]; then</span><br><span class="line">          if [ $FORCE -eq 0 ]; then</span><br><span class="line">            echo &quot;Tomcat did not stop in time. PID file was not removed. To aid diagnostics a thread dump has been written to standard out.&quot;</span><br><span class="line">            kill -3 `cat &quot;$CATALINA_PID&quot;`</span><br><span class="line">          fi</span><br><span class="line">        fi</span><br><span class="line">        SLEEP=`expr $SLEEP - 1 `</span><br><span class="line">      done</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  KILL_SLEEP_INTERVAL=5</span><br><span class="line">  if [ $FORCE -eq 1 ]; then</span><br><span class="line">    if [ -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">      echo &quot;Kill failed: \$CATALINA_PID not set&quot;</span><br><span class="line">    else</span><br><span class="line">      if [ -f &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">        PID=`cat &quot;$CATALINA_PID&quot;`</span><br><span class="line">        echo &quot;Killing Tomcat with the PID: $PID&quot;</span><br><span class="line">        kill -9 $PID</span><br><span class="line">        while [ $KILL_SLEEP_INTERVAL -ge 0 ]; do</span><br><span class="line">            kill -0 `cat &quot;$CATALINA_PID&quot;` &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">            if [ $? -gt 0 ]; then</span><br><span class="line">                rm -f &quot;$CATALINA_PID&quot; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">                if [ $? != 0 ]; then</span><br><span class="line">                    if [ -w &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">                        cat /dev/null &gt; &quot;$CATALINA_PID&quot;</span><br><span class="line">                    else</span><br><span class="line">                        echo &quot;The PID file could not be removed.&quot;</span><br><span class="line">                    fi</span><br><span class="line">                fi</span><br><span class="line">                # Set this to zero else a warning will be issued about the process still running</span><br><span class="line">                KILL_SLEEP_INTERVAL=0</span><br><span class="line">                echo &quot;The Tomcat process has been killed.&quot;</span><br><span class="line">                break</span><br><span class="line">            fi</span><br><span class="line">            if [ $KILL_SLEEP_INTERVAL -gt 0 ]; then</span><br><span class="line">                sleep 1</span><br><span class="line">            fi</span><br><span class="line">            KILL_SLEEP_INTERVAL=`expr $KILL_SLEEP_INTERVAL - 1 `</span><br><span class="line">        done</span><br><span class="line">        if [ $KILL_SLEEP_INTERVAL -gt 0 ]; then</span><br><span class="line">            echo &quot;Tomcat has not been killed completely yet. The process might be waiting on some system call or might be UNINTERRUPTIBLE.&quot;</span><br><span class="line">        fi</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">elif [ &quot;$1&quot; = &quot;configtest&quot; ] ; then</span><br><span class="line"></span><br><span class="line">    eval &quot;\&quot;$_RUNJAVA\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS \</span><br><span class="line">      -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap configtest</span><br><span class="line">    result=$?</span><br><span class="line">    if [ $result -ne 0 ]; then</span><br><span class="line">        echo &quot;Configuration error detected!&quot;</span><br><span class="line">    fi</span><br><span class="line">    exit $result</span><br><span class="line"></span><br><span class="line">elif [ &quot;$1&quot; = &quot;version&quot; ] ; then</span><br><span class="line"></span><br><span class="line">    &quot;$_RUNJAVA&quot;   \</span><br><span class="line">      -classpath &quot;$CATALINA_HOME/lib/catalina.jar&quot; \</span><br><span class="line">      org.apache.catalina.util.ServerInfo</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">  echo &quot;Usage: catalina.sh ( commands ... )&quot;</span><br><span class="line">  echo &quot;commands:&quot;</span><br><span class="line">  if $os400; then</span><br><span class="line">    echo &quot;  debug             Start Catalina in a debugger (not available on OS400)&quot;</span><br><span class="line">    echo &quot;  debug -security   Debug Catalina with a security manager (not available on OS400)&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;  debug             Start Catalina in a debugger&quot;</span><br><span class="line">    echo &quot;  debug -security   Debug Catalina with a security manager&quot;</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;  jpda start        Start Catalina under JPDA debugger&quot;</span><br><span class="line">  echo &quot;  run               Start Catalina in the current window&quot;</span><br><span class="line">  echo &quot;  run -security     Start in the current window with security manager&quot;</span><br><span class="line">  echo &quot;  start             Start Catalina in a separate window&quot;</span><br><span class="line">  echo &quot;  start -security   Start in a separate window with security manager&quot;</span><br><span class="line">  echo &quot;  stop              Stop Catalina, waiting up to 5 seconds for the process to end&quot;</span><br><span class="line">  echo &quot;  stop n            Stop Catalina, waiting up to n seconds for the process to end&quot;</span><br><span class="line">  echo &quot;  stop -force       Stop Catalina, wait up to 5 seconds and then use kill -KILL if still running&quot;</span><br><span class="line">  echo &quot;  stop n -force     Stop Catalina, wait up to n seconds and then use kill -KILL if still running&quot;</span><br><span class="line">  echo &quot;  configtest        Run a basic syntax check on server.xml - check exit code for result&quot;</span><br><span class="line">  echo &quot;  version           What version of tomcat are you running?&quot;</span><br><span class="line">  echo &quot;Note: Waiting for the process to end and use of the -force option require that \$CATALINA_PID is defined&quot;</span><br><span class="line">  exit 1</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> setclasspath.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># Make sure prerequisite environment variables are set</span><br><span class="line">if [ -z &quot;$JAVA_HOME&quot; -a -z &quot;$JRE_HOME&quot; ]; then</span><br><span class="line">  if $darwin; then</span><br><span class="line">    # Bugzilla 54390</span><br><span class="line">    if [ -x &#x27;/usr/libexec/java_home&#x27; ] ; then</span><br><span class="line">      export JAVA_HOME=`/usr/libexec/java_home`</span><br><span class="line">    # Bugzilla 37284 (reviewed).</span><br><span class="line">    elif [ -d &quot;/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&quot; ]; then</span><br><span class="line">      export JAVA_HOME=&quot;/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&quot;</span><br><span class="line">    fi</span><br><span class="line">  else</span><br><span class="line">    JAVA_PATH=`which java 2&gt;/dev/null`</span><br><span class="line">    if [ &quot;x$JAVA_PATH&quot; != &quot;x&quot; ]; then</span><br><span class="line">      JAVA_PATH=`dirname $JAVA_PATH 2&gt;/dev/null`</span><br><span class="line">      JRE_HOME=`dirname $JAVA_PATH 2&gt;/dev/null`</span><br><span class="line">    fi</span><br><span class="line">    if [ &quot;x$JRE_HOME&quot; = &quot;x&quot; ]; then</span><br><span class="line">      # XXX: Should we try other locations?</span><br><span class="line">      if [ -x /usr/bin/java ]; then</span><br><span class="line">        JRE_HOME=/usr</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  if [ -z &quot;$JAVA_HOME&quot; -a -z &quot;$JRE_HOME&quot; ]; then</span><br><span class="line">    echo &quot;Neither the JAVA_HOME nor the JRE_HOME environment variable is defined&quot;</span><br><span class="line">    echo &quot;At least one of these environment variable is needed to run this program&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line">if [ -z &quot;$JAVA_HOME&quot; -a &quot;$1&quot; = &quot;debug&quot; ]; then</span><br><span class="line">  echo &quot;JAVA_HOME should point to a JDK in order to run in debug mode.&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line">if [ -z &quot;$JRE_HOME&quot; ]; then</span><br><span class="line">  JRE_HOME=&quot;$JAVA_HOME&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># If we&#x27;re running under jdb, we need a full jdk.</span><br><span class="line">if [ &quot;$1&quot; = &quot;debug&quot; ] ; then</span><br><span class="line">  if [ &quot;$os400&quot; = &quot;true&quot; ]; then</span><br><span class="line">    if [ ! -x &quot;$JAVA_HOME&quot;/bin/java -o ! -x &quot;$JAVA_HOME&quot;/bin/javac ]; then</span><br><span class="line">      echo &quot;The JAVA_HOME environment variable is not defined correctly&quot;</span><br><span class="line">      echo &quot;This environment variable is needed to run this program&quot;</span><br><span class="line">      echo &quot;NB: JAVA_HOME should point to a JDK not a JRE&quot;</span><br><span class="line">      exit 1</span><br><span class="line">    fi</span><br><span class="line">  else</span><br><span class="line">    if [ ! -x &quot;$JAVA_HOME&quot;/bin/java -o ! -x &quot;$JAVA_HOME&quot;/bin/jdb -o ! -x &quot;$JAVA_HOME&quot;/bin/javac ]; then</span><br><span class="line">      echo &quot;The JAVA_HOME environment variable is not defined correctly&quot;</span><br><span class="line">      echo &quot;This environment variable is needed to run this program&quot;</span><br><span class="line">      echo &quot;NB: JAVA_HOME should point to a JDK not a JRE&quot;</span><br><span class="line">      exit 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Don&#x27;t override the endorsed dir if the user has set it previously</span><br><span class="line">if [ -z &quot;$JAVA_ENDORSED_DIRS&quot; ]; then</span><br><span class="line">  # Set the default -Djava.endorsed.dirs argument</span><br><span class="line">  JAVA_ENDORSED_DIRS=&quot;$CATALINA_HOME&quot;/endorsed</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 设置_RUNJAVA</span><br><span class="line">_RUNJAVA=&quot;$JRE_HOME&quot;/bin/java</span><br><span class="line">if [ &quot;$os400&quot; != &quot;true&quot; ]; then</span><br><span class="line">  _RUNJDB=&quot;$JAVA_HOME&quot;/bin/jdb</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>start最关键的地方<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</span><br><span class="line">    -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">    -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">    -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">    -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">    org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">    &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br></pre></td></tr></table></figure></p><p>stop最关键的地方<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;\&quot;$_RUNJAVA\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS \</span><br><span class="line">    -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">    -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">    -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">    -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">    org.apache.catalina.startup.Bootstrap &quot;$@&quot; stop</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP 源码解析</title>
      <link href="/hexo/post/79fd2ad8.html"/>
      <url>/hexo/post/79fd2ad8.html</url>
      
        <content type="html"><![CDATA[<p>首先通过继承BeanDefinitionParser的触发过程看<a href="http://www1350.github.io/#post/84">http://www1350.github.io/#post/84</a></p><p><img src="https://user-images.githubusercontent.com/7789698/37197018-fc2e50b4-23b3-11e8-90bb-3d4ff69603ce.png" alt="sequencediagram11"></p><p>通过继承NamespaceHandlerSupport来注册，最核心的类就是AnnotationAwareAspectJAutoProxyCreator</p><img width="1074" alt="sssxx2 2x" src="https://user-images.githubusercontent.com/7789698/37197055-1d5bbd44-23b4-11e8-9784-cd943486df30.png"><span id="more"></span><p>既然AnnotationAwareAspectJAutoProxyCreator被注册了，而且实现了BeanPostProcessor（每个bean实例化都会过），我们先来看下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line"><span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (beanName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取所有Advisor（增强类）</span></span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line"><span class="comment">//创建代理</span></span><br><span class="line">Object proxy = createProxy(</span><br><span class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line"><span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource targetSource) &#123;</span><br><span class="line">List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line"><span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到合适的Advisor</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findEligibleAdvisors</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line"><span class="comment">//所有Advisor</span></span><br><span class="line">List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line"><span class="comment">//匹配得上的</span></span><br><span class="line">List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">extendAdvisors(eligibleAdvisors);</span><br><span class="line"><span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findAdvisorsThatCanApply</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ProxyCreationContext.setCurrentProxiedBeanName(beanName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">ProxyCreationContext.setCurrentProxiedBeanName(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是比较重要的createProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.创建代理工厂ProxyFactory，并copy</span></span><br><span class="line">ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line"><span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2,构建Advisor并加入代理工厂</span></span><br><span class="line">Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line"><span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">proxyFactory.addAdvisor(advisor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.设置代理工厂的代理目标为当前bean</span></span><br><span class="line">proxyFactory.setTargetSource(targetSource);</span><br><span class="line"><span class="comment">//4.这里可以做一些自定义，默认没有任何处理</span></span><br><span class="line">customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line"><span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">proxyFactory.setPreFiltered(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取代理类</span></span><br><span class="line"><span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取AopProxy，JdkDynamicAopProxy或者ObjenesisCglibAopProxy 也就是jdk代理或者cglib</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">activate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JdkDynamicAopProxy jdk动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Creating JDK dynamic proxy: target source is &quot;</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised, <span class="keyword">true</span>);</span><br><span class="line">findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">MethodInvocation invocation;</span><br><span class="line">Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//获取目标对象</span></span><br><span class="line">TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;</span><br><span class="line">Class&lt;?&gt; targetClass = <span class="keyword">null</span>;</span><br><span class="line">Object target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line"><span class="comment">// The target does not implement the equals(Object) method itself.</span></span><br><span class="line"><span class="keyword">return</span> equals(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line"><span class="comment">// The target does not implement the hashCode() method itself.</span></span><br><span class="line"><span class="keyword">return</span> hashCode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy.class) &#123;</span><br><span class="line"><span class="comment">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span><br><span class="line"><span class="keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="keyword">this</span>.advised);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line"><span class="comment">// Service invocations on ProxyConfig with the proxy config...</span></span><br><span class="line"><span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object retVal;</span><br><span class="line">                        <span class="comment">//设置代理对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line"><span class="comment">// Make invocation available if necessary.</span></span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// May be null. Get as late as possible to minimize the time we &quot;own&quot; the target,</span></span><br><span class="line"><span class="comment">// in case it comes from a pool.</span></span><br><span class="line">                        <span class="comment">//目标类</span></span><br><span class="line">target = targetSource.getTarget();</span><br><span class="line"><span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">targetClass = target.getClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the interception chain for this method.</span></span><br><span class="line"><span class="comment">//获取通知链</span></span><br><span class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check whether we have any advice. If we don&#x27;t, we can fallback on direct</span></span><br><span class="line"><span class="comment">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></span><br><span class="line"><span class="comment">//判断是否存在通知链，并执行对应方法，获取返回值</span></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></span><br><span class="line"><span class="comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span><br><span class="line"><span class="comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span><br><span class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// We need to create a method invocation...</span></span><br><span class="line"><span class="comment">//根据获取的通知、目标对象等创建ReflectiveMethodInvocation  </span></span><br><span class="line">invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line"><span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line"><span class="comment">//沿着获取的通知链，递归调用所有配置的AOP通知  </span></span><br><span class="line">retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Massage return value if necessary.</span></span><br><span class="line"><span class="comment">//对返回值进行处理</span></span><br><span class="line">Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line"><span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</span><br><span class="line">!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line"><span class="comment">// Special case: it returned &quot;this&quot; and the return type of the method</span></span><br><span class="line"><span class="comment">// is type-compatible. Note that we can&#x27;t help if the target sets</span></span><br><span class="line"><span class="comment">// a reference to itself in another returned object.</span></span><br><span class="line">retVal = proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</span><br><span class="line"><span class="string">&quot;Null return value from advice does not match primitive return type for: &quot;</span> + method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line"><span class="comment">// Must have come from TargetSource.</span></span><br><span class="line">targetSource.releaseTarget(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line"><span class="comment">// Restore old proxy.</span></span><br><span class="line">AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ObjenesisCglibAopProxy cglib代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Creating CGLIB proxy: target source is &quot;</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; rootClass = <span class="keyword">this</span>.advised.getTargetClass();</span><br><span class="line">Assert.state(rootClass != <span class="keyword">null</span>, <span class="string">&quot;Target class must be available for creating a CGLIB proxy&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; proxySuperClass = rootClass;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isCglibProxyClass(rootClass)) &#123;</span><br><span class="line">proxySuperClass = rootClass.getSuperclass();</span><br><span class="line">Class&lt;?&gt;[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; additionalInterface : additionalInterfaces) &#123;</span><br><span class="line"><span class="keyword">this</span>.advised.addInterface(additionalInterface);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate the class, writing log messages as necessary.</span></span><br><span class="line">validateClassIfNecessary(proxySuperClass, classLoader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure CGLIB Enhancer...</span></span><br><span class="line">Enhancer enhancer = createEnhancer();</span><br><span class="line"><span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">enhancer.setClassLoader(classLoader);</span><br><span class="line"><span class="keyword">if</span> (classLoader <span class="keyword">instanceof</span> SmartClassLoader &amp;&amp;</span><br><span class="line">((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class="line">enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">enhancer.setSuperclass(proxySuperClass);</span><br><span class="line">enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised));</span><br><span class="line">enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">enhancer.setStrategy(<span class="keyword">new</span> ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));</span><br><span class="line"><span class="comment">//获取callback</span></span><br><span class="line">Callback[] callbacks = getCallbacks(rootClass);</span><br><span class="line">Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[callbacks.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; types.length; x++) &#123;</span><br><span class="line">types[x] = callbacks[x].getClass();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span></span><br><span class="line"><span class="comment">//设置CallbackFilter（允许你在方法级别设置回调）</span></span><br><span class="line">enhancer.setCallbackFilter(<span class="keyword">new</span> ProxyCallbackFilter(</span><br><span class="line"><span class="keyword">this</span>.advised.getConfigurationOnlyCopy(), <span class="keyword">this</span>.fixedInterceptorMap, <span class="keyword">this</span>.fixedInterceptorOffset));</span><br><span class="line">enhancer.setCallbackTypes(types);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate the proxy class and create a proxy instance.</span></span><br><span class="line"><span class="comment">//生成代理类</span></span><br><span class="line"><span class="keyword">return</span> createProxyClassAndInstance(enhancer, callbacks);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (CodeGenerationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">&quot;Could not generate CGLIB subclass of class [&quot;</span> +</span><br><span class="line"><span class="keyword">this</span>.advised.getTargetClass() + <span class="string">&quot;]: &quot;</span> +</span><br><span class="line"><span class="string">&quot;Common causes of this problem include using a final class or a non-visible class&quot;</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">&quot;Could not generate CGLIB subclass of class [&quot;</span> +</span><br><span class="line"><span class="keyword">this</span>.advised.getTargetClass() + <span class="string">&quot;]: &quot;</span> +</span><br><span class="line"><span class="string">&quot;Common causes of this problem include using a final class or a non-visible class&quot;</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">// TargetSource.getTarget() failed</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">&quot;Unexpected AOP exception&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxyClassAndInstance</span><span class="params">(Enhancer enhancer, Callback[] callbacks)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; proxyClass = enhancer.createClass();</span><br><span class="line">Object proxyInstance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (objenesis.isWorthTrying()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//创建代理实例</span></span><br><span class="line">proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Unable to instantiate proxy using Objenesis, &quot;</span> +</span><br><span class="line"><span class="string">&quot;falling back to regular proxy construction&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (proxyInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Regular instantiation via default constructor...</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">proxyInstance = (<span class="keyword">this</span>.constructorArgs != <span class="keyword">null</span> ?</span><br><span class="line">proxyClass.getConstructor(<span class="keyword">this</span>.constructorArgTypes).newInstance(<span class="keyword">this</span>.constructorArgs) :</span><br><span class="line">proxyClass.newInstance());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">&quot;Unable to instantiate proxy using Objenesis, &quot;</span> +</span><br><span class="line"><span class="string">&quot;and regular proxy instantiation via default constructor fails as well&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((Factory) proxyInstance).setCallbacks(callbacks);</span><br><span class="line"><span class="keyword">return</span> proxyInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis/Mybatis-Spring源码</title>
      <link href="/hexo/post/4df53b51.html"/>
      <url>/hexo/post/4df53b51.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-SqlSessionTemplate解析"><a href="#1-SqlSessionTemplate解析" class="headerlink" title="1.SqlSessionTemplate解析"></a>1.SqlSessionTemplate解析</h1><p>我们要使用的时候通常</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(sqlSessionFactory, sqlSessionFactory.getConfiguration().getDefaultExecutorType());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(sqlSessionFactory, executorType,</span><br><span class="line">        <span class="keyword">new</span> MyBatisExceptionTranslator(</span><br><span class="line">            sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), <span class="keyword">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span></span></span><br><span class="line"><span class="params"><span class="function">      PersistenceExceptionTranslator exceptionTranslator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    notNull(sqlSessionFactory, <span class="string">&quot;Property &#x27;sqlSessionFactory&#x27; is required&quot;</span>);</span><br><span class="line">    notNull(executorType, <span class="string">&quot;Property &#x27;executorType&#x27; is required&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    <span class="keyword">this</span>.executorType = executorType;</span><br><span class="line">    <span class="keyword">this</span>.exceptionTranslator = exceptionTranslator;</span><br><span class="line">    <span class="comment">//动态代理</span></span><br><span class="line">    <span class="keyword">this</span>.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class="line">        SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">        <span class="keyword">new</span> Class[] &#123; SqlSession.class &#125;,</span><br><span class="line">        <span class="keyword">new</span> SqlSessionInterceptor());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们可以注意到这里是使用代理模式，SqlSessionInterceptor实现了InvocationHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//获取SqlSession</span></span><br><span class="line">      SqlSession sqlSession = getSqlSession(</span><br><span class="line">          SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory,</span><br><span class="line">          SqlSessionTemplate.<span class="keyword">this</span>.executorType,</span><br><span class="line">          SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        Object result = method.invoke(sqlSession, args);</span><br><span class="line"><span class="comment">//如果不被spring托管则强制commit</span></span><br><span class="line">        <span class="keyword">if</span> (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory)) &#123;</span><br><span class="line">          <span class="comment">// force commit even on non-dirty sessions because some databases require</span></span><br><span class="line">          <span class="comment">// a commit/rollback before calling close()</span></span><br><span class="line">          sqlSession.commit(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        Throwable unwrapped = unwrapThrowable(t);</span><br><span class="line">        <span class="keyword">if</span> (SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator != <span class="keyword">null</span> &amp;&amp; unwrapped <span class="keyword">instanceof</span> PersistenceException) &#123;</span><br><span class="line">          <span class="comment">// release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span></span><br><span class="line">          closeSqlSession(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">          sqlSession = <span class="keyword">null</span>;</span><br><span class="line">          Throwable translated = SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class="line">          <span class="keyword">if</span> (translated != <span class="keyword">null</span>) &#123;</span><br><span class="line">            unwrapped = translated;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> unwrapped;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果SqlSession是被spring托管则调用SqlSessionHolder#released()释放（其实是通过减小计数器实现的）</span></span><br><span class="line">          closeSqlSession(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);</span><br><span class="line">    notNull(executorType, NO_EXECUTOR_TYPE_SPECIFIED);</span><br><span class="line"><span class="comment">//根据SqlSessionFactory获取当前线程名为”Transactional resources“的ThreadLocal里面map对应key的 SqlSessionHolder</span></span><br><span class="line">    SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);</span><br><span class="line"><span class="comment">//SqlSessionHolder拿出SqlSession</span></span><br><span class="line">    SqlSession session = sessionHolder(executorType, holder);</span><br><span class="line">    <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SqlSessionHolder里面没有SqlSession则新建一个绑定到线程</span></span><br><span class="line">    LOGGER.debug(() -&gt; <span class="string">&quot;Creating a new SqlSession&quot;</span>);</span><br><span class="line">    session = sessionFactory.openSession(executorType);</span><br><span class="line"></span><br><span class="line">    registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="2-DefaultSqlSession不是线程安全的"><a href="#2-DefaultSqlSession不是线程安全的" class="headerlink" title="2. DefaultSqlSession不是线程安全的"></a>2. DefaultSqlSession不是线程安全的</h1><p><img src="https://user-images.githubusercontent.com/7789698/37070603-3096351e-21f3-11e8-8950-b8c559cbbc0d.png" alt="image"></p><p>SqlSessionManager如何保证线程安全？</p><p>他的构造方法是私有的，只能通过newInstance构造<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SqlSessionManager</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">   <span class="keyword">this</span>.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(</span><br><span class="line">       SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">       <span class="keyword">new</span> Class[]&#123;SqlSession.class&#125;,</span><br><span class="line">       <span class="keyword">new</span> SqlSessionInterceptor());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这里又用了代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlSessionInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Prevent Synthetic Access</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//注意这里。线程安全通过ThreadLocal实现</span></span><br><span class="line">      <span class="keyword">final</span> SqlSession sqlSession = SqlSessionManager.<span class="keyword">this</span>.localSqlSession.get();</span><br><span class="line">      <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> method.invoke(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSession autoSqlSession = openSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">final</span> Object result = method.invoke(autoSqlSession, args);</span><br><span class="line">          autoSqlSession.commit();</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          autoSqlSession.rollback();</span><br><span class="line">          <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          autoSqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="3-DefaultSqlSessionFactory-解析"><a href="#3-DefaultSqlSessionFactory-解析" class="headerlink" title="3.DefaultSqlSessionFactory 解析"></a>3.DefaultSqlSessionFactory 解析</h1><p>一般我们这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;mybatisSqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;mapperLocations&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;classpath*:sqlmap/**/*.xml&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到SqlSessionFactoryBean的构建，另外通过解析configLocation配置的xml获取Configuration配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  @Override</span><br><span class="line">  public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    notNull(dataSource, &quot;Property &#x27;dataSource&#x27; is required&quot;);</span><br><span class="line">    notNull(sqlSessionFactoryBuilder, &quot;Property &#x27;sqlSessionFactoryBuilder&#x27; is required&quot;);</span><br><span class="line">    state((configuration == null &amp;&amp; configLocation == null) || !(configuration != null &amp;&amp; configLocation != null),</span><br><span class="line">              &quot;Property &#x27;configuration&#x27; and &#x27;configLocation&#x27; can not specified with together&quot;);</span><br><span class="line"></span><br><span class="line">//使用this.sqlSessionFactoryBuilder.build(configuration);</span><br><span class="line">    this.sqlSessionFactory = buildSqlSessionFactory();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> public SqlSessionFactory build(Configuration config) &#123;</span><br><span class="line">    return new DefaultSqlSessionFactory(config);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>所以我们来分析下DefaultSqlSessionFactory</p><p>我们知道SqlSessionTemplate是通过DefaultSqlSessionFactory的openSession获取SqlSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">      <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line"><span class="comment">//通过策略模式获取Executor</span></span><br><span class="line">      <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Configuration的defaultExecutorType配置，我们回顾下：1.SIMPLE是普通的执行器2.REUSE执行器会重用预处理语句3.BATCH会重用预处理并执行批量更新，我们来看下是如何实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">    Executor executor;</span><br><span class="line">    <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">    &#125;</span><br><span class="line">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ExecutorType</span> </span>&#123;</span><br><span class="line">  SIMPLE, REUSE, BATCH</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下SqlSessionTemplate在执行update的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.update(statement, parameter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DefaultSqlSession</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      dirty = <span class="keyword">true</span>;</span><br><span class="line">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">      <span class="keyword">return</span> executor.update(ms, wrapCollection(parameter));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error updating database.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Configuration</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">getMappedStatement</span><span class="params">(String id, <span class="keyword">boolean</span> validateIncompleteStatements)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (validateIncompleteStatements) &#123;</span><br><span class="line">      buildAllStatements();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mappedStatements.get(id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>先看下BATCH，对应BatchExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">&quot;executing an update&quot;</span>).object(ms.getId());</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clearLocalCache();</span><br><span class="line">    <span class="keyword">return</span> doUpdate(ms, parameter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doUpdate</span><span class="params">(MappedStatement ms, Object parameterObject)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Configuration configuration = ms.getConfiguration();</span><br><span class="line"><span class="comment">//获得StatementHandler  </span></span><br><span class="line">    <span class="keyword">final</span> StatementHandler handler = configuration.newStatementHandler(<span class="keyword">this</span>, ms, parameterObject, RowBounds.DEFAULT, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> BoundSql boundSql = handler.getBoundSql();</span><br><span class="line"><span class="comment">//获得Sql语句  </span></span><br><span class="line">    <span class="keyword">final</span> String sql = boundSql.getSql();</span><br><span class="line">    <span class="keyword">final</span> Statement stmt;</span><br><span class="line">    <span class="keyword">if</span> (sql.equals(currentSql) &amp;&amp; ms.equals(currentStatement)) &#123;</span><br><span class="line"><span class="comment">//拿到最后一个</span></span><br><span class="line">      <span class="keyword">int</span> last = statementList.size() - <span class="number">1</span>;</span><br><span class="line">      stmt = statementList.get(last);</span><br><span class="line">      applyTransactionTimeout(stmt);</span><br><span class="line">     handler.parameterize(stmt);<span class="comment">//fix Issues 322</span></span><br><span class="line">      BatchResult batchResult = batchResultList.get(last);</span><br><span class="line">      batchResult.addParameterObject(parameterObject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Connection connection = getConnection(ms.getStatementLog());</span><br><span class="line">      stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">      handler.parameterize(stmt);    <span class="comment">//fix Issues 322</span></span><br><span class="line">      currentSql = sql;</span><br><span class="line">      currentStatement = ms;</span><br><span class="line">      statementList.add(stmt);</span><br><span class="line">      batchResultList.add(<span class="keyword">new</span> BatchResult(ms, sql, parameterObject));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 使用batch</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">  <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">  public void batch(Statement statement) throws SQLException &#123;</span></span><br><span class="line"><span class="comment">    PreparedStatement ps = (PreparedStatement) statement;</span></span><br><span class="line"><span class="comment">    ps.addBatch();</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    handler.batch(stmt);</span><br><span class="line">    <span class="keyword">return</span> BATCH_UPDATE_RETURN_VALUE;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>为什么这么写呢。我们回顾下jdbc的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//获取连接</span><br><span class="line">Connection    connection =getConnection();</span><br><span class="line">//不自动 Commit</span><br><span class="line">connection.setAutoCommit(false);   </span><br><span class="line"></span><br><span class="line">//预编译</span><br><span class="line">PreparedStatement statement = connection.prepareStatement(&quot;INSERT INTO TABLEX VALUES(?, ?)&quot;);   </span><br><span class="line"></span><br><span class="line">//记录1</span><br><span class="line">statement.setInt(1, 1); </span><br><span class="line">statement.setString(2, &quot;Cujo&quot;); </span><br><span class="line">statement.addBatch();   </span><br><span class="line">//记录2</span><br><span class="line">statement.setInt(1, 2); </span><br><span class="line">statement.setString(2, &quot;Fred&quot;); </span><br><span class="line">statement.addBatch(); </span><br><span class="line">//记录3</span><br><span class="line">statement.setInt(1, 3); </span><br><span class="line">statement.setString(2, &quot;Mark&quot;); </span><br><span class="line">statement.addBatch();   </span><br><span class="line"></span><br><span class="line">//execu</span><br><span class="line">int [] counts = statement.executeBatch();   </span><br><span class="line"></span><br><span class="line">//commit</span><br><span class="line">connection.commit();</span><br></pre></td></tr></table></figure><p>其中里面事务部分是托管给spring代理的</p><h1 id="4-MapperFactoryBean-解析"><a href="#4-MapperFactoryBean-解析" class="headerlink" title="4.MapperFactoryBean 解析"></a>4.MapperFactoryBean 解析</h1><p>我们通常会这么使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;basePackage&quot; value=&quot;org.mybatis.spring.sample.mapper&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;baseMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot; abstract=&quot;true&quot; lazy-init=&quot;true&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;bean id=&quot;oneMapper&quot; parent=&quot;baseMapper&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;mapperInterface&quot; value=&quot;my.package.MyMapperInterface&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;bean id=&quot;anotherMapper&quot; parent=&quot;baseMapper&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;mapperInterface&quot; value=&quot;my.package.MyAnotherMapperInterface&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>MapperFactoryBean,作用就是把接口进行代理切入</p><p><img src="https://user-images.githubusercontent.com/7789698/37142889-61cbc430-22f4-11e8-9fa0-6c80f3d90267.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public abstract class DaoSupport implements InitializingBean &#123;</span><br><span class="line">@Override</span><br><span class="line">public final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException &#123;</span><br><span class="line">checkDaoConfig();</span><br><span class="line"></span><br><span class="line">// Let concrete implementations initialize themselves.</span><br><span class="line">try &#123;</span><br><span class="line">initDao();</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">throw new BeanInitializationException(&quot;Initialization of DAO failed&quot;, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected abstract void checkDaoConfig() throws IllegalArgumentException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里把所有相关的都扫描进去了</span><br><span class="line"> @Override</span><br><span class="line">  protected void checkDaoConfig() &#123;</span><br><span class="line">    super.checkDaoConfig();</span><br><span class="line"></span><br><span class="line">    notNull(this.mapperInterface, &quot;Property &#x27;mapperInterface&#x27; is required&quot;);</span><br><span class="line"></span><br><span class="line">    Configuration configuration = getSqlSession().getConfiguration();</span><br><span class="line">    if (this.addToConfig &amp;&amp; !configuration.hasMapper(this.mapperInterface)) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        configuration.addMapper(this.mapperInterface);</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(&quot;Error while adding the mapper &#x27;&quot; + this.mapperInterface + &quot;&#x27; to configuration.&quot;, e);</span><br><span class="line">        throw new IllegalArgumentException(e);</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">        ErrorContext.instance().reset();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  @Override</span><br><span class="line">  public T getObject() throws Exception &#123;</span><br><span class="line">    return getSqlSession().getMapper(this.mapperInterface);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//SqlSessionTemplate</span><br><span class="line">  @Override</span><br><span class="line">  public &lt;T&gt; T getMapper(Class&lt;T&gt; type) &#123;</span><br><span class="line">    return getConfiguration().getMapper(type, this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) &#123;</span><br><span class="line">    return mapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//MapperRegistry 这里又是代理</span><br><span class="line">  public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) &#123;</span><br><span class="line">    final MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">    if (mapperProxyFactory == null) &#123;</span><br><span class="line">      throw new BindingException(&quot;Type &quot; + type + &quot; is not known to the MapperRegistry.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">      return mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      throw new BindingException(&quot;Error getting mapper instance. Cause: &quot; + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">public class MapperProxyFactory&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">  private final Class&lt;T&gt; mapperInterface;</span><br><span class="line">  private final Map&lt;Method, MapperMethod&gt; methodCache = new ConcurrentHashMap&lt;Method, MapperMethod&gt;();</span><br><span class="line"></span><br><span class="line">  public MapperProxyFactory(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class="line">    this.mapperInterface = mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public Class&lt;T&gt; getMapperInterface() &#123;</span><br><span class="line">    return mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public Map&lt;Method, MapperMethod&gt; getMethodCache() &#123;</span><br><span class="line">    return methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">  protected T newInstance(MapperProxy&lt;T&gt; mapperProxy) &#123;</span><br><span class="line">    return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public T newInstance(SqlSession sqlSession) &#123;</span><br><span class="line">    final MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    return newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MapperProxy&lt;T&gt; implements InvocationHandler, Serializable &#123;</span><br><span class="line"></span><br><span class="line">  private static final long serialVersionUID = -6424540398559729838L;</span><br><span class="line">  private final SqlSession sqlSession;</span><br><span class="line">  private final Class&lt;T&gt; mapperInterface;</span><br><span class="line">  private final Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class="line"></span><br><span class="line">  public MapperProxy(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache) &#123;</span><br><span class="line">    this.sqlSession = sqlSession;</span><br><span class="line">    this.mapperInterface = mapperInterface;</span><br><span class="line">    this.methodCache = methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      if (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">        return method.invoke(this, args);</span><br><span class="line">      &#125; else if (isDefaultMethod(method)) &#123;</span><br><span class="line">        return invokeDefaultMethod(proxy, method, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">      throw ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">    final MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    return mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private MapperMethod cachedMapperMethod(Method method) &#123;</span><br><span class="line">    MapperMethod mapperMethod = methodCache.get(method);</span><br><span class="line">    if (mapperMethod == null) &#123;</span><br><span class="line">      mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class="line">      methodCache.put(method, mapperMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    return mapperMethod;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @UsesJava7</span><br><span class="line">  private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)</span><br><span class="line">      throws Throwable &#123;</span><br><span class="line">    final Constructor&lt;MethodHandles.Lookup&gt; constructor = MethodHandles.Lookup.class</span><br><span class="line">        .getDeclaredConstructor(Class.class, int.class);</span><br><span class="line">    if (!constructor.isAccessible()) &#123;</span><br><span class="line">      constructor.setAccessible(true);</span><br><span class="line">    &#125;</span><br><span class="line">    final Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class="line">    return constructor</span><br><span class="line">        .newInstance(declaringClass,</span><br><span class="line">            MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED</span><br><span class="line">                | MethodHandles.Lookup.PACKAGE | MethodHandles.Lookup.PUBLIC)</span><br><span class="line">        .unreflectSpecial(method, declaringClass).bindTo(proxy).invokeWithArguments(args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * Backport of java.lang.reflect.Method#isDefault()</span><br><span class="line">   */</span><br><span class="line">  private boolean isDefaultMethod(Method method) &#123;</span><br><span class="line">    return ((method.getModifiers()</span><br><span class="line">        &amp; (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)</span><br><span class="line">        &amp;&amp; method.getDeclaringClass().isInterface();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后我们知道方法都通过MapperMethod 了</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public Object execute(SqlSession sqlSession, Object[] args) &#123;</span><br><span class="line">    Object result;</span><br><span class="line">    switch (command.getType()) &#123;</span><br><span class="line">      case INSERT: &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">      case UPDATE: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">      case DELETE: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">      case SELECT:</span><br><span class="line">        if (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">          executeWithResultHandler(sqlSession, args);</span><br><span class="line">          result = null;</span><br><span class="line">        &#125; else if (method.returnsMany()) &#123;</span><br><span class="line">          result = executeForMany(sqlSession, args);</span><br><span class="line">        &#125; else if (method.returnsMap()) &#123;</span><br><span class="line">          result = executeForMap(sqlSession, args);</span><br><span class="line">        &#125; else if (method.returnsCursor()) &#123;</span><br><span class="line">          result = executeForCursor(sqlSession, args);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">          result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">      case FLUSH:</span><br><span class="line">        result = sqlSession.flushStatements();</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        throw new BindingException(&quot;Unknown execution method for: &quot; + command.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    if (result == null &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">      throw new BindingException(&quot;Mapper method &#x27;&quot; + command.getName() </span><br><span class="line">          + &quot; attempted to return null from a method with a primitive return type (&quot; + method.getReturnType() + &quot;).&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>整个过程如下<br><img src="https://user-images.githubusercontent.com/7789698/37137307-2fa46a5c-22e0-11e8-8e11-c75de5b3503c.png" alt="sequencediagram1"></p><h1 id="5-插件源码解析"><a href="#5-插件源码解析" class="headerlink" title="5.插件源码解析"></a>5.插件源码解析</h1><p>让我们回顾下<a href="http://www1350.github.io/#post/88">http://www1350.github.io/#post/88</a> 的插件写法</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.xxx.DynamicPlugin&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编程api方式加入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlugins</span><span class="params">(Interceptor[] plugins)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.plugins = plugins;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isEmpty(<span class="keyword">this</span>.plugins)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Interceptor plugin : <span class="keyword">this</span>.plugins) &#123;</span><br><span class="line">        configuration.addInterceptor(plugin);</span><br><span class="line">        LOGGER.debug(() -&gt; <span class="string">&quot;Registered plugin: &#x27;&quot;</span> + plugin + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//XML</span></span><br><span class="line"></span><br><span class="line">pluginElement(root.evalNode(<span class="string">&quot;plugins&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pluginElement</span><span class="params">(XNode parent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (XNode child : parent.getChildren()) &#123;</span><br><span class="line">        String interceptor = child.getStringAttribute(<span class="string">&quot;interceptor&quot;</span>);</span><br><span class="line">        Properties properties = child.getChildrenAsProperties();</span><br><span class="line">        Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).newInstance();</span><br><span class="line">        interceptorInstance.setProperties(properties);</span><br><span class="line">        configuration.addInterceptor(interceptorInstance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptor</span><span class="params">(Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">    interceptorChain.addInterceptor(interceptor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>//责任链模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">plugin</span><span class="params">(Object target)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;Interceptor&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用每个实现Interceptor接口的plugin方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">pluginAll</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Interceptor interceptor : interceptors) &#123;</span><br><span class="line">      target = interceptor.plugin(target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptor</span><span class="params">(Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">    interceptors.add(interceptor);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Interceptor&gt; <span class="title">getInterceptors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableList(interceptors);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Method method;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object[] args;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Invocation</span><span class="params">(Object target, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">    <span class="keyword">this</span>.method = method;</span><br><span class="line">    <span class="keyword">this</span>.args = args;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> method;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object[] getArgs() &#123;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plugin</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Interceptor interceptor;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Plugin</span><span class="params">(Object target, Interceptor interceptor, Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">    <span class="keyword">this</span>.interceptor = interceptor;</span><br><span class="line">    <span class="keyword">this</span>.signatureMap = signatureMap;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个使用Plugin.wrap 的时候将会代理那个类，然后将会调用interceptor的intercept方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">wrap</span><span class="params">(Object target, Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">    Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = getSignatureMap(interceptor);</span><br><span class="line">    Class&lt;?&gt; type = target.getClass();</span><br><span class="line">    Class&lt;?&gt;[] interfaces = getAllInterfaces(type, signatureMap);</span><br><span class="line">    <span class="keyword">if</span> (interfaces.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">          type.getClassLoader(),</span><br><span class="line">          interfaces,</span><br><span class="line">          <span class="keyword">new</span> Plugin(target, interceptor, signatureMap));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Set&lt;Method&gt; methods = signatureMap.get(method.getDeclaringClass());</span><br><span class="line"><span class="comment">//被Signature设置的调用的时候才调用intercept，否则调用原方法</span></span><br><span class="line">      <span class="keyword">if</span> (methods != <span class="keyword">null</span> &amp;&amp; methods.contains(method)) &#123;</span><br><span class="line">        <span class="keyword">return</span> interceptor.intercept(<span class="keyword">new</span> Invocation(target, method, args));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; getSignatureMap(Interceptor interceptor) &#123;</span><br><span class="line">    Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);</span><br><span class="line">    <span class="comment">// issue #251</span></span><br><span class="line">    <span class="keyword">if</span> (interceptsAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> PluginException(<span class="string">&quot;No @Intercepts annotation was found in interceptor &quot;</span> + interceptor.getClass().getName());      </span><br><span class="line">    &#125;</span><br><span class="line">    Signature[] sigs = interceptsAnnotation.value();</span><br><span class="line">    Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Signature sig : sigs) &#123;</span><br><span class="line">      Set&lt;Method&gt; methods = signatureMap.get(sig.type());</span><br><span class="line">      <span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">        methods = <span class="keyword">new</span> HashSet&lt;Method&gt;();</span><br><span class="line">        signatureMap.put(sig.type(), methods);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Method method = sig.type().getMethod(sig.method(), sig.args());</span><br><span class="line">        methods.add(method);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PluginException(<span class="string">&quot;Could not find method on &quot;</span> + sig.type() + <span class="string">&quot; named &quot;</span> + sig.method() + <span class="string">&quot;. Cause: &quot;</span> + e, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> signatureMap;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt;[] getAllInterfaces(Class&lt;?&gt; type, Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap) &#123;</span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; interfaces = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (type != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Class&lt;?&gt; c : type.getInterfaces()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (signatureMap.containsKey(c)) &#123;</span><br><span class="line">          interfaces.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      type = type.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> interfaces.toArray(<span class="keyword">new</span> Class&lt;?&gt;[interfaces.size()]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们知道，入口都在pluginAll，我们看下哪里调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ParameterHandler <span class="title">newParameterHandler</span><span class="params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">  ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class="line">  parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);</span><br><span class="line">  <span class="keyword">return</span> parameterHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultSetHandler <span class="title">newResultSetHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">    ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">  ResultSetHandler resultSetHandler = <span class="keyword">new</span> DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class="line">  resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br><span class="line">  <span class="keyword">return</span> resultSetHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementHandler <span class="title">newStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">  StatementHandler statementHandler = <span class="keyword">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class="line">  statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br><span class="line">  <span class="keyword">return</span> statementHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而newStatementHandler等方法则用在执行器上，所以一路就通了。<br>SimpleExecutor</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     Configuration configuration = ms.getConfiguration();</span><br><span class="line">     StatementHandler handler = configuration.newStatementHandler(<span class="keyword">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">     stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">     <span class="keyword">return</span> handler.update(stmt);</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     closeStatement(stmt);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>插件后源码如下：<br><img src="https://user-images.githubusercontent.com/7789698/37139479-f5768abe-22e8-11e8-8699-4780172792e0.png" alt="sequencediagram2"></p><h1 id="6-缓存"><a href="#6-缓存" class="headerlink" title="6.缓存"></a>6.缓存</h1><p>先看下缓存Cache 类接口</p><img width="308" alt="wx20180308-180432 2x" src="https://user-images.githubusercontent.com/7789698/37145262-6582304e-22fb-11e8-8eb5-b10e65e3d4f8.png"><p>实现类：</p><p><img src="https://user-images.githubusercontent.com/7789698/37145891-206dad60-22fd-11e8-9dfa-9e2dac5f831b.png" alt="image"></p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>我们知道每个sqlSession都有自己的BaseExecutor，每个BaseExecutor都有自己的Local Cache。所以一级缓存是基于sqlSession级别的</p><p>一级缓存的配置，共有两个选项，SESSION或者STATEMENT，默认是SESSION级别。</p><p><code>&lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BaseExecutor 的query 构建CacheKey</span></span><br><span class="line">CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以认为key是Statement Id + Offset + Limmit + Sql + Params</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CacheKey cacheKey = <span class="keyword">new</span> CacheKey();</span><br><span class="line">    cacheKey.update(ms.getId());</span><br><span class="line">    cacheKey.update(rowBounds.getOffset());</span><br><span class="line">    cacheKey.update(rowBounds.getLimit());</span><br><span class="line">    cacheKey.update(boundSql.getSql());</span><br><span class="line">    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">    TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();</span><br><span class="line">    <span class="comment">// mimic DefaultParameterHandler logic</span></span><br><span class="line">    <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">      <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        String propertyName = parameterMapping.getProperty();</span><br><span class="line">        <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">          value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">          value = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">          value = parameterObject;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">          value = metaObject.getValue(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line">        cacheKey.update(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (configuration.getEnvironment() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// issue #176</span></span><br><span class="line">      cacheKey.update(configuration.getEnvironment().getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cacheKey;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CacheKey </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> baseHashCode = object == <span class="keyword">null</span> ? <span class="number">1</span> : ArrayUtil.hashCode(object); </span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    checksum += baseHashCode;</span><br><span class="line">    baseHashCode *= count;</span><br><span class="line"></span><br><span class="line">    hashcode = multiplier * hashcode + baseHashCode;</span><br><span class="line"></span><br><span class="line">    updateList.add(object);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>查询的时候先生成cacheKey，然后使用CacheKey先去缓存查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">  @Override</span><br><span class="line">  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;</span><br><span class="line">...</span><br><span class="line">    if (queryStack == 0 &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">      clearLocalCache();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    try &#123;</span><br><span class="line">      queryStack++;</span><br><span class="line">//这里获取</span><br><span class="line">      list = resultHandler == null ? (List&lt;E&gt;) localCache.getObject(key) : null;</span><br><span class="line">      if (list != null) &#123;</span><br><span class="line">        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">//从数据库取，同时写入localCache</span><br><span class="line">        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      queryStack--;</span><br><span class="line">    &#125;</span><br><span class="line">    if (queryStack == 0) &#123;</span><br><span class="line">      for (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">        deferredLoad.load();</span><br><span class="line">      &#125;</span><br><span class="line">      // issue #601</span><br><span class="line">      deferredLoads.clear();</span><br><span class="line">      if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">        // issue #482</span><br><span class="line">        clearLocalCache();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void handleLocallyCachedOutputParameters(MappedStatement ms, CacheKey key, Object parameter, BoundSql boundSql) &#123;</span><br><span class="line">    if (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">      final Object cachedParameter = localOutputParameterCache.getObject(key);</span><br><span class="line">      if (cachedParameter != null &amp;&amp; parameter != null) &#123;</span><br><span class="line">        final MetaObject metaCachedParameter = configuration.newMetaObject(cachedParameter);</span><br><span class="line">        final MetaObject metaParameter = configuration.newMetaObject(parameter);</span><br><span class="line">        for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) &#123;</span><br><span class="line">          if (parameterMapping.getMode() != ParameterMode.IN) &#123;</span><br><span class="line">            final String parameterName = parameterMapping.getProperty();</span><br><span class="line">            final Object cachedValue = metaCachedParameter.getValue(parameterName);</span><br><span class="line">            metaParameter.setValue(parameterName, cachedValue);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private &lt;E&gt; List&lt;E&gt; queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">    try &#123;</span><br><span class="line">      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      localCache.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line">    localCache.putObject(key, list);</span><br><span class="line">    if (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">      localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们看到BaseExecutor类里有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">  protected ConcurrentLinkedQueue&lt;DeferredLoad&gt; deferredLoads;</span><br><span class="line"></span><br><span class="line">private static class DeferredLoad &#123;</span><br><span class="line"></span><br><span class="line">    private final MetaObject resultObject;</span><br><span class="line">    private final String property;</span><br><span class="line">    private final Class&lt;?&gt; targetType;</span><br><span class="line">    private final CacheKey key;</span><br><span class="line">    private final PerpetualCache localCache;</span><br><span class="line">    private final ObjectFactory objectFactory;</span><br><span class="line">    private final ResultExtractor resultExtractor;</span><br><span class="line"></span><br><span class="line">    // issue #781</span><br><span class="line">    public DeferredLoad(MetaObject resultObject,</span><br><span class="line">                        String property,</span><br><span class="line">                        CacheKey key,</span><br><span class="line">                        PerpetualCache localCache,</span><br><span class="line">                        Configuration configuration,</span><br><span class="line">                        Class&lt;?&gt; targetType) &#123;</span><br><span class="line">      this.resultObject = resultObject;</span><br><span class="line">      this.property = property;</span><br><span class="line">      this.key = key;</span><br><span class="line">      this.localCache = localCache;</span><br><span class="line">      this.objectFactory = configuration.getObjectFactory();</span><br><span class="line">      this.resultExtractor = new ResultExtractor(configuration, objectFactory);</span><br><span class="line">      this.targetType = targetType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean canLoad() &#123;</span><br><span class="line">      return localCache.getObject(key) != null &amp;&amp; localCache.getObject(key) != EXECUTION_PLACEHOLDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void load() &#123;</span><br><span class="line">      @SuppressWarnings( &quot;unchecked&quot; )</span><br><span class="line">      // we suppose we get back a List</span><br><span class="line">      List&lt;Object&gt; list = (List&lt;Object&gt;) localCache.getObject(key);</span><br><span class="line">      Object value = resultExtractor.extractObjectFromList(list, targetType);</span><br><span class="line">      resultObject.setValue(property, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://tech.meituan.com/mybatis_cache.html">https://tech.meituan.com/mybatis_cache.html</a></p><h1 id="7-结果集处理器ResultSetHandler"><a href="#7-结果集处理器ResultSetHandler" class="headerlink" title="7.结果集处理器ResultSetHandler"></a>7.结果集处理器ResultSetHandler</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span><br><span class="line">    ResultHandler resultHandler, BoundSql boundSql) &#123;</span><br><span class="line">  ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class="line">  resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br><span class="line">  return resultSetHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一般是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler) throws SQLException &#123;</span><br><span class="line">  String sql = boundSql.getSql();</span><br><span class="line">  statement.execute(sql);</span><br><span class="line">  return resultSetHandler.&lt;E&gt;handleResultSets(statement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  public List&lt;Object&gt; handleResultSets(Statement stmt) throws SQLException &#123;</span><br><span class="line">    ErrorContext.instance().activity(&quot;handling results&quot;).object(mappedStatement.getId());</span><br><span class="line"></span><br><span class="line">    final List&lt;Object&gt; multipleResults = new ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">    int resultSetCount = 0;</span><br><span class="line">//ResultSet rs = stmt.getResultSet(); 然后转化为new ResultSetWrapper(rs, configuration)</span><br><span class="line">    ResultSetWrapper rsw = getFirstResultSet(stmt);</span><br><span class="line">//配置文件中读取ResultMap</span><br><span class="line">    List&lt;ResultMap&gt; resultMaps = mappedStatement.getResultMaps();</span><br><span class="line">    int resultMapCount = resultMaps.size();</span><br><span class="line">    validateResultMapsCount(rsw, resultMapCount);</span><br><span class="line">    while (rsw != null &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class="line">      ResultMap resultMap = resultMaps.get(resultSetCount);</span><br><span class="line">//通过TypeHandler找到对应映射器，映射后放入multipleResults</span><br><span class="line">      handleResultSet(rsw, resultMap, multipleResults, null);</span><br><span class="line">      rsw = getNextResultSet(stmt);</span><br><span class="line">      cleanUpAfterHandlingResultSet();</span><br><span class="line">      resultSetCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] resultSets = mappedStatement.getResultSets();</span><br><span class="line">    if (resultSets != null) &#123;</span><br><span class="line">      while (rsw != null &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class="line">        ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class="line">        if (parentMapping != null) &#123;</span><br><span class="line">          String nestedResultMapId = parentMapping.getNestedResultMapId();</span><br><span class="line">          ResultMap resultMap = configuration.getResultMap(nestedResultMapId);</span><br><span class="line">          handleResultSet(rsw, resultMap, null, parentMapping);</span><br><span class="line">        &#125;</span><br><span class="line">        rsw = getNextResultSet(stmt);</span><br><span class="line">        cleanUpAfterHandlingResultSet();</span><br><span class="line">        resultSetCount++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//如果只有一个映射，返回第一个  </span><br><span class="line">    return collapseSingleResultList(multipleResults);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字节码操纵</title>
      <link href="/hexo/post/bab06bbc.html"/>
      <url>/hexo/post/bab06bbc.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是字节码？"><a href="#什么是字节码？" class="headerlink" title="什么是字节码？"></a>什么是字节码？</h1><ul><li><p>机器码 机器码(machine code)是CPU可直接解读的指令。机器码与硬件等有关，不同的CPU架构支持的硬件码也不相同。</p></li><li><p>字节码 字节码（bytecode）是一种包含执行程序、由一序列 op 代码/数据对 组成的二进制文件。字节码是一种中间码，它比机器码更抽象，需要直译器转译后才能成为机器码的中间代码。通常情况下它是已经经过编译，但与特定机器码无关。字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。 字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。 而在Java里，通过类加载器把字节码读入加载并转换成 java.lang.Class类的一个实例。</p></li></ul><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><p>一个编译后的类文件包含下面的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4            magic;</span><br><span class="line">    u2            minor_version;</span><br><span class="line">    u2            major_version;</span><br><span class="line">    u2            constant_pool_count;</span><br><span class="line">    cp_info        contant_pool[constant_pool_count – 1];</span><br><span class="line">    u2            access_flags;</span><br><span class="line">    u2            this_class;</span><br><span class="line">    u2            super_class;</span><br><span class="line">    u2            interfaces_count;</span><br><span class="line">    u2            interfaces[interfaces_count];</span><br><span class="line">    u2            fields_count;</span><br><span class="line">    field_info        fields[fields_count];</span><br><span class="line">    u2            methods_count;</span><br><span class="line">    method_info        methods[methods_count];</span><br><span class="line">    u2            attributes_count;</span><br><span class="line">    attribute_info    attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>magic, minor_version, major_version</td><td>类文件的版本信息和用于编译这个类的 JDK 版本。</td></tr><tr><td>constant_pool</td><td>类似于符号表，尽管它包含更多数据。下面有更多的详细描述。</td></tr><tr><td>access_flags</td><td>提供这个类的描述符列表。</td></tr><tr><td>this_class</td><td>提供这个类全名的常量池(constant_pool)索引，比如org/jamesdbloom/foo/Bar。</td></tr><tr><td>super_class</td><td>提供这个类的父类符号引用的常量池索引。</td></tr><tr><td>interfaces</td><td>指向常量池的索引数组，提供那些被实现的接口的符号引用。</td></tr><tr><td>fields</td><td>提供每个字段完整描述的常量池索引数组。</td></tr><tr><td>methods</td><td>指向constant_pool的索引数组，用于表示每个方法签名的完整描述。如果这个方法不是抽象方法也不是 native 方法，那么就会显示这个函数的字节码。</td></tr><tr><td>attributes</td><td>不同值的数组，表示这个类的附加信息，包括 RetentionPolicy.CLASS 和 RetentionPolicy.RUNTIME 注解。</td></tr></tbody></table><p>举个简单的例子（例1.1）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public class com.souche.rick.HelloWorld</span><br><span class="line">  minor version: 0/*Java 类文件的版本信息*/</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:/*该项存放了类中各种文字字符串、类名、方法名和接口名称、final 变量以及对外部类的引用信息等常量。虚拟机必须为每一个被装载的类维护一个常量池，常量池中存储了相应类型所用到的所有类型、字段和方法的符号引用。*/</span><br><span class="line">   #1 = Methodref          #6.#20         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #21.#22        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = String             #23            // Hello World!</span><br><span class="line">   #4 = Methodref          #24.#25        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #5 = Class              #26            // com/souche/rick/HelloWorld</span><br><span class="line">   #6 = Class              #27            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable/*为调试器提供源码中的每一行对应的字节码信息*/</span><br><span class="line">  #11 = Utf8               LocalVariableTable /*列出了所有栈帧中的局部变量。这里唯一的局部变量就是 this。*/</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               Lcom/souche/rick/HelloWorld;</span><br><span class="line">  #14 = Utf8               main</span><br><span class="line">  #15 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #16 = Utf8               args</span><br><span class="line">  #17 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #18 = Utf8               SourceFile</span><br><span class="line">  #19 = Utf8               HelloWorld.java</span><br><span class="line">  #20 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #21 = Class              #28            // java/lang/System</span><br><span class="line">  #22 = NameAndType        #29:#30        // out:Ljava/io/PrintStream;</span><br><span class="line">  #23 = Utf8               Hello World!</span><br><span class="line">  #24 = Class              #31            // java/io/PrintStream</span><br><span class="line">  #25 = NameAndType        #32:#33        // println:(Ljava/lang/String;)V</span><br><span class="line">  #26 = Utf8               com/souche/rick/HelloWorld</span><br><span class="line">  #27 = Utf8               java/lang/Object</span><br><span class="line">  #28 = Utf8               java/lang/System</span><br><span class="line">  #29 = Utf8               out</span><br><span class="line">  #30 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #31 = Utf8               java/io/PrintStream</span><br><span class="line">  #32 = Utf8               println</span><br><span class="line">  #33 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  public com.souche.rick.HelloWorld();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 7: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Lcom/souche/rick/HelloWorld;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream; /*获取指定类的静态域，并将其值压入栈顶*/</span><br><span class="line">         3: ldc           #3                  // String Hello World! /*将&quot;Hello World!&quot;从常量池中推送至栈顶*/</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V /*调用实例方法println*/</span><br><span class="line">         8: return /*从当前方法返回void*/</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 9: 0</span><br><span class="line">        line 10: 8</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       9     0  args   [Ljava/lang/String;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：编译的时候选用-g参数，否则LineNumberTable参数默认是不显示的，maven编译的时候默认是使用-g参数所以不用担心</p><p>描述符标识字符含义</p><table><thead><tr><th>标识字符</th><th>含义</th><th>标识字符</th><th>含义</th></tr></thead><tbody><tr><td>B</td><td>基本类型byte</td><td>J</td><td>基本类型long</td></tr><tr><td>C</td><td>基本类型char</td><td>S</td><td>基本类型short</td></tr><tr><td>D</td><td>基本类型double</td><td>Z</td><td>基本类型boolean</td></tr><tr><td>F</td><td>基本类型float</td><td>V</td><td>特殊类型void</td></tr><tr><td>I</td><td>基本类型int</td><td>L</td><td>对象类型，如Ljava/lang/Object</td></tr></tbody></table><p>对于数组类型，每一唯独使用一个前置的“[”字符描述，如一个定义为“java.lang.String[][]”类型的二维数组，将被记录为“[[Ljava/lang/String”。</p><p>当描述符描述方法时，按照先参数列表后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号“()”之内。如int getResult()方法的描述符为“()I”。</p><table><thead><tr><th>Method declaration in source file</th><th>Method descriptor</th></tr></thead><tbody><tr><td>void m(int i, float f)</td><td>(IF)V</td></tr><tr><td>int m(Object o)</td><td>(Ljava/lang/Object;)I</td></tr><tr><td>int[] m(int i, String s)</td><td>(ILjava/lang/String;)[I</td></tr><tr><td>Object m(int[] i)</td><td>([I)Ljava/lang/Object;</td></tr></tbody></table><p>关于助记符<a href="https://www.cnblogs.com/anbylau2130/p/6078427.html">https://www.cnblogs.com/anbylau2130/p/6078427.html</a></p><p>简单了解了一些基本概念以后，我们正式进入主题：字节码操纵</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol><li> 用一些字节码操纵框架修改字节码</li><li> 自定义ClassLoader来加载修改后的字节码</li></ol><p>其实还有另外一种形式，就是直接换掉原来的字节码。一种是在JVM加载用户的Class时，拦截，返回修改后的字节码。另外一种在运行时，使用Instrumentation.redefineClasses方法来替换掉原来的字节码，和这个类相关的实例立即生效。不过这种形式需要采用agent形式启动。有兴趣的同学可以自行搜索下相关内容。</p><h1 id="操纵字节码的场景"><a href="#操纵字节码的场景" class="headerlink" title="操纵字节码的场景"></a>操纵字节码的场景</h1><p>操纵字节码可以在字节码被载入类加载器之前修改字节码二进制文件，从而做到一些技术上难以实现的功能，如：AOP增强、性能分析、调试跟踪、日志记录、bug定位、混淆代码，甚至连Scala、Groovy和Grails等JVM语言都用到大量的操纵字节码技术。</p><h1 id="字节码操纵框架"><a href="#字节码操纵框架" class="headerlink" title="字节码操纵框架"></a>字节码操纵框架</h1><ul><li><a href="http://asm.ow2.org/">ASM</a></li><li><a href="http://jboss-javassist.github.io/javassist/">javassist</a></li><li><a href="http://www.eclipse.org/aspectj/">aspectj</a></li><li><a href="http://cglib.sourceforge.net/">CGLIB</a></li><li><a href="http://commons.apache.org/proper/commons-bcel/">BCEL</a></li><li><a href="http://bytebuddy.net/#/">bytebuddy</a><br>…</li></ul><h2 id="ASM使用"><a href="#ASM使用" class="headerlink" title="ASM使用"></a>ASM使用</h2><p>ASM主要通过树这种数据结构来表示复杂的字节码结构，通过Visitor设计模式来实现(详细见<a href="http://download.forge.objectweb.org/asm/asm4-guide.pdf">手册</a>)<br><img src="https://user-images.githubusercontent.com/7789698/34321023-551223f4-e840-11e7-927c-0bebfd0ab7d9.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/34321032-850f2368-e840-11e7-8911-5bb921dc8f38.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/34321085-81d334ae-e841-11e7-99cb-22a2c2577a8e.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/34321268-c2f28d8c-e845-11e7-8e14-ee5f21d50b8b.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/34321269-c9c6c8ee-e845-11e7-9e49-86636a5a21e6.png" alt="image"></p><ol><li>生成一个类<br>上面的例1.1代码可以用ASM生成：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.souche.rick.asm;</span><br><span class="line"></span><br><span class="line">import org.objectweb.asm.ClassWriter;</span><br><span class="line">import org.objectweb.asm.Label;</span><br><span class="line">import org.objectweb.asm.MethodVisitor;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import static org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        byte[] bytes = builder();</span><br><span class="line">        File file=new File(&quot;com&quot;+File.separator+&quot;souche&quot;+File.separator+&quot;rick&quot;, &quot;HelloWorld.class&quot;);</span><br><span class="line">        file.getParentFile().mkdirs();</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(file);</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] builder()&#123;</span><br><span class="line">        ClassWriter cw = new ClassWriter(0);</span><br><span class="line">        cw.visit(V1_8, ACC_PUBLIC  + ACC_SUPER,</span><br><span class="line">                &quot;com/souche/rick/HelloWorld&quot;, null, &quot;java/lang/Object&quot;,</span><br><span class="line">                null);</span><br><span class="line">        MethodVisitor classInitMv = cw.visitMethod(ACC_PUBLIC, &quot;&lt;init&gt;&quot;, &quot;()V&quot;, null, null);</span><br><span class="line">        classInitMv.visitCode();</span><br><span class="line">        Label l0 = new Label();</span><br><span class="line">        classInitMv.visitLabel(l0);</span><br><span class="line">        classInitMv.visitLineNumber(9, l0);</span><br><span class="line">        classInitMv.visitVarInsn(ALOAD,0);</span><br><span class="line">        classInitMv.visitMethodInsn(INVOKESPECIAL, &quot;java/lang/Object&quot;, &quot;&lt;init&gt;&quot;, &quot;()V&quot;, false);</span><br><span class="line">        classInitMv.visitInsn(RETURN);</span><br><span class="line">        Label l1 = new Label();</span><br><span class="line">        classInitMv.visitLabel(l1);</span><br><span class="line">        classInitMv.visitLocalVariable(&quot;this&quot;, &quot;Lcom/souche/rick/HelloWorld;&quot;, null, l0, l1, 0);</span><br><span class="line">        classInitMv.visitMaxs(1, 1);</span><br><span class="line">        classInitMv.visitEnd();</span><br><span class="line"></span><br><span class="line">        MethodVisitor mainMv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, &quot;main&quot;,</span><br><span class="line">                &quot;([Ljava/lang/String;)V&quot;, null, null);</span><br><span class="line">        mainMv.visitCode();</span><br><span class="line">        Label l2 = new Label();</span><br><span class="line">        mainMv.visitLabel(l2);</span><br><span class="line">        mainMv.visitLineNumber(13, l2);</span><br><span class="line">        mainMv.visitFieldInsn(GETSTATIC, &quot;java/lang/System&quot;, &quot;out&quot;,</span><br><span class="line">                &quot;Ljava/io/PrintStream;&quot;);</span><br><span class="line">        mainMv.visitLdcInsn(&quot;Hello World!&quot;);</span><br><span class="line"></span><br><span class="line">        mainMv.visitMethodInsn(INVOKEVIRTUAL, &quot;java/io/PrintStream&quot;, &quot;println&quot;, &quot;(Ljava/lang/String;)V&quot;, false);</span><br><span class="line">        Label l3 = new Label();</span><br><span class="line">        mainMv.visitLabel(l3);</span><br><span class="line">        mainMv.visitLineNumber(15,l3);</span><br><span class="line">        mainMv.visitInsn(RETURN);</span><br><span class="line">        mainMv.visitLocalVariable(&quot;args&quot;, &quot;[Ljava/lang/String;&quot;, null, l2, l3, 0);</span><br><span class="line">        mainMv.visitMaxs(2, 1);</span><br><span class="line">        mainMv.visitEnd();</span><br><span class="line">        cw.visitEnd();</span><br><span class="line">        byte[] b = cw.toByteArray();</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://user-images.githubusercontent.com/7789698/34320105-7694ad8a-e82c-11e7-9ba1-f2b84bcb5f20.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/34320113-ac22dcd8-e82c-11e7-8d9a-9435630696eb.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">public class com.souche.rick.HelloWorld</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Utf8               com/souche/rick/HelloWorld</span><br><span class="line">   #2 = Class              #1             // com/souche/rick/HelloWorld</span><br><span class="line">   #3 = Utf8               java/lang/Object</span><br><span class="line">   #4 = Class              #3             // java/lang/Object</span><br><span class="line">   #5 = Utf8               &lt;init&gt;</span><br><span class="line">   #6 = Utf8               ()V</span><br><span class="line">   #7 = NameAndType        #5:#6          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #8 = Methodref          #4.#7          // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #9 = Utf8               this</span><br><span class="line">  #10 = Utf8               Lcom/souche/rick/HelloWorld;</span><br><span class="line">  #11 = Utf8               main</span><br><span class="line">  #12 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #13 = Utf8               java/lang/System</span><br><span class="line">  #14 = Class              #13            // java/lang/System</span><br><span class="line">  #15 = Utf8               out</span><br><span class="line">  #16 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #17 = NameAndType        #15:#16        // out:Ljava/io/PrintStream;</span><br><span class="line">  #18 = Fieldref           #14.#17        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">  #19 = Utf8               Hello World!</span><br><span class="line">  #20 = String             #19            // Hello World!</span><br><span class="line">  #21 = Utf8               java/io/PrintStream</span><br><span class="line">  #22 = Class              #21            // java/io/PrintStream</span><br><span class="line">  #23 = Utf8               println</span><br><span class="line">  #24 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">  #25 = NameAndType        #23:#24        // println:(Ljava/lang/String;)V</span><br><span class="line">  #26 = Methodref          #22.#25        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">  #27 = Utf8               args</span><br><span class="line">  #28 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #29 = Utf8               Code</span><br><span class="line">  #30 = Utf8               LocalVariableTable</span><br><span class="line">  #31 = Utf8               LineNumberTable</span><br><span class="line">&#123;</span><br><span class="line">  public com.souche.rick.HelloWorld();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #8                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Lcom/souche/rick/HelloWorld;</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 9: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #18                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #20                 // String Hello World!</span><br><span class="line">         5: invokevirtual #26                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         8: return</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       8     0  args   [Ljava/lang/String;</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 13: 0</span><br><span class="line">        line 15: 8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>解析一个类<br>接下来是官方的一个例子，用来打印出这个类</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class ClassPrinter extends ClassVisitor &#123;</span><br><span class="line">    public ClassPrinter() &#123;</span><br><span class="line">        super(ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void visit(int version, int access, String name,</span><br><span class="line">                      String signature, String superName, String[] interfaces) &#123;</span><br><span class="line">        System.out.println(name + &quot; extends &quot; + superName + &quot; &#123;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void visitSource(String source, String debug) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void visitOuterClass(String owner, String name, String desc) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public AnnotationVisitor visitAnnotation(String desc,</span><br><span class="line">                                             boolean visible) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void visitAttribute(Attribute attr) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void visitInnerClass(String name, String outerName,</span><br><span class="line">                                String innerName, int access) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public FieldVisitor visitField(int access, String name, String desc,</span><br><span class="line">                                   String signature, Object value) &#123;</span><br><span class="line">        System.out.println(&quot; &quot; + desc + &quot; &quot; + name);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public MethodVisitor visitMethod(int access, String name,</span><br><span class="line">                                     String desc, String signature, String[] exceptions) &#123;</span><br><span class="line">        System.out.println(&quot; &quot; + name + desc);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void visitEnd() &#123;</span><br><span class="line">        System.out.println(&quot;&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ClassPrinter cp = new ClassPrinter();</span><br><span class="line">        ClassReader cr = new ClassReader(&quot;java.lang.Runnable&quot;);</span><br><span class="line">        cr.accept(cp, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/34321112-862b8820-e842-11e7-82cb-bc846dac0b3a.png" alt="image"></p><p>3.转化一个类</p><p>spring里面有一个类叫<code>LocalVariableTableParameterNameDiscoverer</code>，它可以用来获取参数名列表，其实内部就是使用了ASM，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private static class ParameterNameDiscoveringVisitor extends ClassVisitor &#123;</span><br><span class="line"></span><br><span class="line">private static final String STATIC_CLASS_INIT = &quot;&lt;clinit&gt;&quot;;/*实例初始化方法（init）。类实例化（clinit）*/</span><br><span class="line"></span><br><span class="line">private final Class&lt;?&gt; clazz;</span><br><span class="line"></span><br><span class="line">private final Map&lt;Member, String[]&gt; memberMap;</span><br><span class="line"></span><br><span class="line">public ParameterNameDiscoveringVisitor(Class&lt;?&gt; clazz, Map&lt;Member, String[]&gt; memberMap) &#123;</span><br><span class="line">super(SpringAsmInfo.ASM_VERSION);</span><br><span class="line">this.clazz = clazz;</span><br><span class="line">this.memberMap = memberMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) &#123;</span><br><span class="line">// 排除 synthetic + bridged &amp;&amp; 静态类实例化</span><br><span class="line">if (!isSyntheticOrBridged(access) &amp;&amp; !STATIC_CLASS_INIT.equals(name)) &#123;</span><br><span class="line">//desc 指的是Method descriptors（方法描述符）</span><br><span class="line">return new LocalVariableTableVisitor(clazz, memberMap, name, desc, isStatic(access));</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"> /* ACC_SYNTHETIC说明这个方法是由编译器生成，并且不会在源代码中出现。ACC_BRIDGE说明是编译生成的桥接方法*/</span><br><span class="line">private static boolean isSyntheticOrBridged(int access) &#123;</span><br><span class="line">return (((access &amp; Opcodes.ACC_SYNTHETIC) | (access &amp; Opcodes.ACC_BRIDGE)) &gt; 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean isStatic(int access) &#123;</span><br><span class="line">return ((access &amp; Opcodes.ACC_STATIC) &gt; 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">private static class LocalVariableTableVisitor extends MethodVisitor &#123;</span><br><span class="line"></span><br><span class="line">private static final String CONSTRUCTOR = &quot;&lt;init&gt;&quot;;</span><br><span class="line"></span><br><span class="line">private final Class&lt;?&gt; clazz;</span><br><span class="line"></span><br><span class="line">private final Map&lt;Member, String[]&gt; memberMap;</span><br><span class="line"></span><br><span class="line">private final String name;</span><br><span class="line"></span><br><span class="line">private final Type[] args;</span><br><span class="line"></span><br><span class="line">private final String[] parameterNames;</span><br><span class="line"></span><br><span class="line">private final boolean isStatic;</span><br><span class="line"></span><br><span class="line">private boolean hasLvtInfo = false;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * The nth entry contains the slot index of the LVT table entry holding the</span><br><span class="line"> * argument name for the nth parameter.</span><br><span class="line"> */</span><br><span class="line">private final int[] lvtSlotIndex;</span><br><span class="line"></span><br><span class="line">public LocalVariableTableVisitor(Class&lt;?&gt; clazz, Map&lt;Member, String[]&gt; map, String name, String desc, boolean isStatic) &#123;</span><br><span class="line">super(SpringAsmInfo.ASM_VERSION);</span><br><span class="line">this.clazz = clazz;</span><br><span class="line">this.memberMap = map;</span><br><span class="line">this.name = name;</span><br><span class="line">//方法描述符转化为参数</span><br><span class="line">this.args = Type.getArgumentTypes(desc);</span><br><span class="line">this.parameterNames = new String[this.args.length];</span><br><span class="line">this.isStatic = isStatic;</span><br><span class="line">this.lvtSlotIndex = computeLvtSlotIndices(isStatic, this.args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void visitLocalVariable(String name, String description, String signature, Label start, Label end, int index) &#123;</span><br><span class="line">this.hasLvtInfo = true;</span><br><span class="line">for (int i = 0; i &lt; this.lvtSlotIndex.length; i++) &#123;</span><br><span class="line">if (this.lvtSlotIndex[i] == index) &#123;</span><br><span class="line">this.parameterNames[i] = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void visitEnd() &#123;</span><br><span class="line">if (this.hasLvtInfo || (this.isStatic &amp;&amp; this.parameterNames.length == 0)) &#123;</span><br><span class="line">//存储下来</span><br><span class="line">this.memberMap.put(resolveMember(), this.parameterNames);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Member resolveMember() &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static int[] computeLvtSlotIndices(boolean isStatic, Type[] paramTypes) &#123;</span><br><span class="line">int[] lvtIndex = new int[paramTypes.length];</span><br><span class="line">//实例方法，前面第0个位置还有个this</span><br><span class="line">int nextIndex = (isStatic ? 0 : 1);</span><br><span class="line">for (int i = 0; i &lt; paramTypes.length; i++) &#123;</span><br><span class="line">lvtIndex[i] = nextIndex;</span><br><span class="line">//如果是long和double需要2个连续的局部变量表来保存</span><br><span class="line">if (isWideType(paramTypes[i])) &#123;</span><br><span class="line">nextIndex += 2;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">nextIndex++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return lvtIndex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：一个局部变量表的占用了32位的存储空间（一个存储单位称之为slot，槽），所以可以存储一个boolean、byte、char、short、float、int、refrence和returnAdress数据，long和double需要2个连续的局部变量表来保存，通过较小位置的索引来获取。如果被调用的是实例方法，那么第0个位置存储“this”关键字代表当前实例对象的引用。</p><p>里面重点关注visitLocalVariable方法，其他的忽略，是不是就觉得简单多了？</p><h2 id="Javassist使用"><a href="#Javassist使用" class="headerlink" title="Javassist使用"></a>Javassist使用</h2><p>Javassist和其他的类似库不同的是，Javassist并不要求开发者对字节码方面具有多么深入的了解，同样的，它也允许开发者忽略被修改的类本身的细节和结构。相对其他如ASM显得更为简单，当然性能也较之更低下。</p><ul><li>ClassPool  跟踪和控制所操作的类，支持JVM 搜索路径中装载的、自定义路径、字节数组、流中装载二进制类、从头开始创建新类</li><li>CtClass  装载到类池中的类</li><li>CtField 字段</li><li>CtMethod 方法</li><li>CtConstructor 构造函数</li></ul><h3 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h3><ol><li><code>ClassPool.getDefault()</code>   只是搜索JVM的同路径下的class</li><li><code>new ClassPool(true)</code>  当ClassPool没被引用的时候，JVM的垃圾收集会收集该类</li><li>如果系统使用多个类装载器，getDefault()只能搜索当前jvm的路径，可能加载不到对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassPool#insertClassPath(ClassPath)</span><br><span class="line">  ClassPool#appendClassPath(ClassPath)</span><br><span class="line">  ClassPool#removeClassPath(ClassPath)</span><br></pre></td></tr></table></figure><img src="https://user-images.githubusercontent.com/7789698/34321619-559a67e2-e84e-11e7-87ca-0c744f9d2f50.png" alt="image"></li><li> <code>CtClass ct  = mPool.get(name)</code> 通过类池获取类  <code>CtClass ct  = mPool.makeClass(mClassName)</code>创建一个类</li></ol><h3 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h3><ol><li>getName获取类名 、getSimpleName获取简要类名、getSuperclass获取父类、getInterfaces获取接口、cc.getMethods获取方法</li><li><code>CtMethod m = cc.getDeclaredMethod(&quot;say&quot;)</code> 获取方法 </li><li><code>Class c = cc.toClass()</code> 转化为Class  <code>byte[] b = cc.toBytecode()</code> 转化为字节码二进制</li></ol><p>还是那个例子，不过Javassist是不是简单多了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, CannotCompileException &#123;</span><br><span class="line">        byte[] bytes = builder();</span><br><span class="line">        File file=new File(&quot;com&quot;+File.separator+&quot;souche&quot;+File.separator+&quot;rick&quot;, &quot;HelloWorld.class&quot;);</span><br><span class="line">        file.getParentFile().mkdirs();</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(file);</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] builder() throws IOException, CannotCompileException &#123;</span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        CtClass ctClass = classPool.makeClass(&quot;com.souche.rick.HelloWorld&quot;);</span><br><span class="line">        CtMethod ctMethod =  CtNewMethod.make(</span><br><span class="line">                &quot;public static void main(String[] args) &#123; System.out.println(\&quot;Hello World!\&quot;); &#125;&quot;,</span><br><span class="line">                ctClass);</span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line">        return ctClass.toBytecode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>$0, $1, $2, …</td><td>$0为this ，其他为参数</td></tr><tr><td>$args</td><td>数组参数Object[]</td></tr><tr><td>$$</td><td>所有参数m($$) 相当于m($1,$2,…) （除了this）</td></tr><tr><td>$cflow(…)</td><td>cflow 变量</td></tr><tr><td>$r</td><td>结果类型</td></tr><tr><td>$w</td><td>包装类型</td></tr><tr><td>$_</td><td>结果值</td></tr><tr><td>$sig</td><td>java.lang.Class数组对象，用来表示每个参数的类型</td></tr><tr><td>$type</td><td>java.lang.Class 对象表示结果类型</td></tr><tr><td>$class</td><td>A java.lang.Class 表示现在这个类的类型</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    int x, y;</span><br><span class="line">    void move(int dx, int dy) &#123; x += dx; y += dy; &#125;</span><br><span class="line">&#125;</span><br><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(&quot;Point&quot;);</span><br><span class="line">CtMethod m = cc.getDeclaredMethod(&quot;move&quot;);</span><br><span class="line">m.insertBefore(&quot;&#123; System.out.println($1); System.out.println($2); &#125;&quot;);</span><br><span class="line">cc.writeFile();</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    int x, y;</span><br><span class="line">    void move(int dx, int dy) &#123;</span><br><span class="line">        &#123; System.out.println(dx); System.out.println(dy); &#125;</span><br><span class="line">        x += dx; y += dy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dubbo的ReferenceBean(dubbo调用方)里面创建代理就运用了Javassist技术来获取接口生成代理类:</p><p><img src="https://user-images.githubusercontent.com/7789698/34324263-2ae91d14-e8a7-11e7-8289-6db88d0047ac.jpg" alt="ttd"><br>只看部分关键代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">ClassGenerator ccp = null, ccm = null;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">ccp = ClassGenerator.newInstance(cl);/*通过传入ClassLoader来使用ClassPool获取封装的ClassGenerator（里面封装了Javassist操作的几个对象）*/</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; worked = new HashSet&lt;String&gt;();</span><br><span class="line">List&lt;Method&gt; methods = new ArrayList&lt;Method&gt;();</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;ics.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">if( !Modifier.isPublic(ics[i].getModifiers()) )</span><br><span class="line">&#123;</span><br><span class="line">String npkg = ics[i].getPackage().getName();</span><br><span class="line">if( pkg == null )</span><br><span class="line">&#123;</span><br><span class="line">pkg = npkg;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if( !pkg.equals(npkg)  )</span><br><span class="line">throw new IllegalArgumentException(&quot;non-public interfaces from different packages&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ccp.addInterface(ics[i]);</span><br><span class="line"></span><br><span class="line">for( Method method : ics[i].getMethods() )</span><br><span class="line">&#123;</span><br><span class="line">String desc = ReflectUtils.getDesc(method);</span><br><span class="line">if( worked.contains(desc) )</span><br><span class="line">continue;</span><br><span class="line">worked.add(desc);</span><br><span class="line"></span><br><span class="line">int ix = methods.size();</span><br><span class="line">Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">StringBuilder code = new StringBuilder(&quot;Object[] args = new Object[&quot;).append(pts.length).append(&quot;];&quot;);</span><br><span class="line">for(int j=0;j&lt;pts.length;j++)</span><br><span class="line">code.append(&quot; args[&quot;).append(j).append(&quot;] = ($w)$&quot;).append(j+1).append(&quot;;&quot;);</span><br><span class="line">code.append(&quot; Object ret = handler.invoke(this, methods[&quot; + ix + &quot;], args);&quot;);</span><br><span class="line">if( !Void.TYPE.equals(rt) )</span><br><span class="line">code.append(&quot; return &quot;).append(asArgument(rt, &quot;ret&quot;)).append(&quot;;&quot;);</span><br><span class="line"></span><br><span class="line">methods.add(method);</span><br><span class="line">ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if( pkg == null )</span><br><span class="line">pkg = PACKAGE_NAME;</span><br><span class="line"></span><br><span class="line">// create ProxyInstance class.</span><br><span class="line">String pcn = pkg + &quot;.proxy&quot; + id;/*类名为  pkg + &quot;.proxy&quot; +id = 包名 + “.poxy” +自增数值*/</span><br><span class="line">ccp.setClassName(pcn);</span><br><span class="line">ccp.addField(&quot;public static java.lang.reflect.Method[] methods;&quot;);</span><br><span class="line">ccp.addField(&quot;private &quot; + InvocationHandler.class.getName() + &quot; handler;&quot;);</span><br><span class="line">ccp.addConstructor(Modifier.PUBLIC, new Class&lt;?&gt;[]&#123; InvocationHandler.class &#125;, new Class&lt;?&gt;[0], &quot;handler=$1;&quot;);</span><br><span class="line">            ccp.addDefaultConstructor();</span><br><span class="line">Class&lt;?&gt; clazz = ccp.toClass();</span><br><span class="line">clazz.getField(&quot;methods&quot;).set(null, methods.toArray(new Method[0]));</span><br><span class="line"></span><br><span class="line">// create Proxy class.</span><br><span class="line">String fcn = Proxy.class.getName() + id;/*对象名“Proxy”+id*/</span><br><span class="line">ccm = ClassGenerator.newInstance(cl);</span><br><span class="line">ccm.setClassName(fcn);</span><br><span class="line">ccm.addDefaultConstructor();/*设置默认构造方法*/</span><br><span class="line">ccm.setSuperClass(Proxy.class);/*继承于Proxy*/</span><br><span class="line">/*添加方法public Object newInstance(InvocationHandler h)&#123; return new &quot; + 包名 + “.poxy” +自增数值 + &quot;($1);&#125;*/</span><br><span class="line">ccm.addMethod(&quot;public Object newInstance(&quot; + InvocationHandler.class.getName() + &quot; h)&#123; return new &quot; + pcn + &quot;($1); &#125;&quot;);</span><br><span class="line">Class&lt;?&gt; pc = ccm.toClass();</span><br><span class="line">proxy = (Proxy)pc.newInstance();</span><br></pre></td></tr></table></figure><p>如果有一个接口,被dubbo:reference引用，假设包名是com.souche.rick</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface AuthService &#123;</span><br><span class="line">    User register(UserRegisterParam userToAdd);</span><br><span class="line">    String login(String username, String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.委托类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class com.souche.rick.proxy1 implements AuthService&#123;</span><br><span class="line">/*这里的methods通过反射依次被放入register、login*/</span><br><span class="line">      public static java.lang.reflect.Method[] methods ;</span><br><span class="line"></span><br><span class="line">      private InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">      public com.souche.rick.proxy1(InvocationHandler handler)&#123;</span><br><span class="line">         this.handler = handler;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public User register(UserRegisterParam userToAdd)&#123;</span><br><span class="line">         Object[] args = new Object[1];</span><br><span class="line">         args[0] = (UserRegisterParam)userToAdd;</span><br><span class="line">         Object ret = handler.invoke(this, methods[0], args);</span><br><span class="line">         return (User)ret;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public  String login(String username, String password)&#123;</span><br><span class="line">         Object[] args = new Object[2];</span><br><span class="line">         args[0] = (String)username;</span><br><span class="line">         args[0] = (String)password;</span><br><span class="line">         Object ret = handler.invoke(this, methods[1], args);</span><br><span class="line">         return (String)ret;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>生成一个继承于Proxy的代理子类，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Proxy + id extends Proxy&#123;</span><br><span class="line">public Object newInstance(InvocationHandler h)&#123; </span><br><span class="line">               return new  com.souche.rick.proxy1(h);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还有非常多的工具使用了字节码操纵技术，比如fastjson(ASM)、hibernate(cglib、javaassist)、zorka(ASM)、Btrace(ASM)</p><p>参考：<br><a href="https://www.cnblogs.com/qiumingcheng/p/5400265.html">https://www.cnblogs.com/qiumingcheng/p/5400265.html</a></p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html">https://www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html</a></p><p><a href="http://www.importnew.com/17770.html">http://www.importnew.com/17770.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 字节码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java跟踪利器</title>
      <link href="/hexo/post/430fe23c.html"/>
      <url>/hexo/post/430fe23c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java跟踪利器—BTrace"><a href="#Java跟踪利器—BTrace" class="headerlink" title="Java跟踪利器—BTrace"></a>Java跟踪利器—BTrace</h1><p>地址：<a href="https://github.com/btraceio/btrace">https://github.com/btraceio/btrace</a></p><blockquote><p>BTrace 是基于动态字节码修改技术(Hotswap)来实现运行时 java 程序的跟踪和替换。大体的原理可以用下面的公式描述：Client(Java compile api + attach api) + Agent（脚本解析引擎 + ASM + JDK6 Instumentation） + Socket其实 BTrace 就是使用了 java attach api 附加 agent.jar ，然后使用脚本解析引擎+asm来重写指定类的字节码，再使用 instrument 实现对原有类的替换。</p></blockquote><h1 id="Btrace可以做什么？"><a href="#Btrace可以做什么？" class="headerlink" title="Btrace可以做什么？"></a>Btrace可以做什么？</h1><ol><li>接口性能变慢，分析每个方法的耗时情况；</li><li>当在Map中插入大量数据，分析其扩容情况；</li><li>分析哪个方法调用了System.gc()，调用栈如何；</li><li>执行某个方法抛出异常时，分析运行时参数；</li><li>….</li></ol><h2 id="BTrace重要概念与局限性"><a href="#BTrace重要概念与局限性" class="headerlink" title="BTrace重要概念与局限性"></a>BTrace重要概念与局限性</h2><p>虽然BTrace很强大,但Btrace脚本就是一个普通的用@Btrace注解的Java类,其中包含一个或多个public static void修饰的方法,为了保证对目标程序不造成影响,Btrace脚本对其可以执行的动作做了很多限制</p><ol><li>不能创建对象</li><li>不能抛出或者捕获异常</li><li>不能用synchronized关键字</li><li>不能对目标程序中的instace或者static变量</li><li>不能调用目标程序的instance或者static方法</li><li>脚本的field、method都必须是static的</li><li>脚本不能包括outer,inner,nested class</li><li>脚本中不能有循环,不能继承任何类,任何接口与assert语句</li></ol><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><a href="https://github.com/btraceio/btrace/releases/tag/v1.3.10.1">https://github.com/btraceio/btrace/releases/tag/v1.3.10.1</a> 下载到包解压</p><h2 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/wenwei/jdk1.8.0_111</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line">export BTRACE_HOME=/home/wenwei/btrace</span><br><span class="line">export PATH=$PATH:$BTRACE_HOME/bin</span><br></pre></td></tr></table></figure><h2 id="3-预编译："><a href="#3-预编译：" class="headerlink" title="3.预编译："></a>3.预编译：</h2><p>执行之前可以用预编译命令检查脚本的正确性，预编译命令为 btracec，它是一个 javac-like 命令</p><p><code>btracec JStack.java</code></p><h2 id="4-使用BTrace"><a href="#4-使用BTrace" class="headerlink" title="4.使用BTrace"></a>4.使用BTrace</h2><p>1.<br><code> btrace [-I &lt;include-path&gt;] [-p &lt;port&gt;] [-cp &lt;classpath&gt;] &lt;pid&gt; &lt;btrace-script&gt; [&lt;args&gt;]</code></p><ul><li>-I:没有这个表明跳过预编译</li><li>include-path:指定用来编译脚本的头文件路径(关于预编译可参考例子ThreadBean.java)</li><li>port:btrace agent端口,默认是2020</li><li>classpath:编译所需类路径,一般是指btrace-client.jar等类所在路径</li><li>pid:java进程id</li><li>btrace-script:btrace脚本可以是.java文件,也可以是.class文件</li><li>args:传递给btrace脚本的参数, 在脚本中可以通过$(), $length()来获取这些参数(定义在BTraceUtils中)</li></ul><p>例如：<br><code>btrace -cp lib/servlet-api.jar -p 2021 53523 JStack.java</code></p><p>2.<br><code>java -javaagent:btrace-agent.jar=[&lt;agent-arg&gt;[,&lt;agent-arg&gt;]*]? &lt;launch-args&gt;</code></p><p>参数：</p><ul><li>noServer - don’t start the socket server</li><li>bootClassPath - boot classpath to be used</li><li>systemClassPath - system classpath to be used</li><li>debug - turns on verbose debug messages (true/false)</li><li>unsafe - do not check for btrace restrictions violations (true/false)</li><li>dumpClasses - dump the transformed bytecode to files (true/false)</li><li>dumpDir - specifies the folder where the transformed classes will be dumped to</li><li>stdout - redirect the btrace output to stdout instead of writing it to an arbitrary file (true/false)</li><li>probeDescPath - the path to search for probe descriptor XMLs</li><li>startupRetransform - enable retransform of all the loaded classes at attach (true/false)</li><li>scriptdir - the path to a directory containing scripts to be run at the agent startup</li><li>scriptOutputFile - the path to a file the btrace agent will store its output</li><li>script - colon separated list of tracing scripts to be run at the agent startup</li></ul><h2 id="5-脚本"><a href="#5-脚本" class="headerlink" title="5.脚本"></a>5.脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.sun.btrace.samples;</span><br><span class="line"></span><br><span class="line">import com.sun.btrace.annotations.*;</span><br><span class="line">import static com.sun.btrace.BTraceUtils.Sys.*;</span><br><span class="line">import static com.sun.btrace.BTraceUtils.Threads.*;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * A simple sample prints stack traces and exits. This</span><br><span class="line"> * BTrace program mimics the jstack command line tool in JDK.</span><br><span class="line"> */</span><br><span class="line">@BTrace</span><br><span class="line">public class JStack &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        deadlocks(false);</span><br><span class="line">        jstackAll();</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-参数说明"><a href="#6-参数说明" class="headerlink" title="6.参数说明"></a>6.参数说明</h2><ul><li>@OnMethod:指定使用当前注解的方法应该在什么情况下触发,claszz属性指定要匹配的类的全限定类名,可以用正则表达式:/类名的Pattern/匹配,用”+类名”匹配所有子类,用”@某某注解”匹配用该注解注解过的类method属性指定要匹配的方法名称,可以用正则表达式:/方法名称的Pattern/匹配type属性:void(java.lang.String)可以用于匹配:public void funcName(String param) throws Exception,location属性用@Location来表明,匹配了clazz,method情况,在方法执行的何时去执行脚本(前,后,异常,行,某个方法调用)</li><li>@OnTimer:指定一个定时任务</li><li>@OnExit:当脚本运行Sys.exit(code)时触发</li><li>@OnError:当脚本运行抛出异常时触发</li><li>@OnEvent:脚本运行时Ctrl+C可以发送事件</li><li>@OnLowMemory:让你指定一个阀值,内存低于阀值触发</li><li>@OnProbe:可以用一个xml文件来描述你想在什么时候触发该方法</li></ul><ul><li>@Self:目标对象本身</li><li>@Retrun:目标程序方法返回值(Kind.RETURN)</li><li>@ProbeClassName:目标类名</li><li>@ProbeMethodName:目标方法名</li><li>@targetInstance:@Location指定的clazz,method的目标(Kind.CALL)</li><li>@targetMethodOrField:@Location指定的clazz,method的目标的方法或字段(Kind.CALL)</li><li>@Duration:目标方法执行时间,单位是纳秒,需要与 Kind.RETURN 或者 Kind.ERROR 一起使用</li></ul><h3 id="正则表达式定位"><a href="#正则表达式定位" class="headerlink" title="正则表达式定位"></a>正则表达式定位</h3><p>可以用表达式，批量定义需要监控的类与方法。正则表达式需要写在两个 “/“ 中间。</p><p>下例监控javax.swing下的所有类的所有方法….可能会非常慢，建议范围还是窄些。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnMethod(clazz=&quot;/javax\\.swing\\..*/&quot;, method=&quot;/.*/&quot;)</span><br><span class="line">public static void swingMethods( @ProbeClassName String probeClass, @ProbeMethodName String probeMethod) &#123;</span><br><span class="line">   print(&quot;entered &quot; + probeClass + &quot;.&quot;  + probeMethod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过在拦截函数的定义里注入@ProbeClassName String probeClass, @ProbeMethodName String probeMethod 参数，告诉脚本实际匹配到的类和方法名。</p><p>另一个例子，监控Statement的executeUpdate(), executeQuery() 和 executeBatch() 三个方法，见JdbcQueries.java</p><h3 id="按接口，父类，Annotation定位"><a href="#按接口，父类，Annotation定位" class="headerlink" title="按接口，父类，Annotation定位"></a>按接口，父类，Annotation定位</h3><p>比如我想匹配所有的Filter类，在接口或基类的名称前面，加个+ 就行<br><code>@OnMethod(clazz=&quot;+com.vip.demo.Filter&quot;, method=&quot;doFilter&quot;)</code></p><p>也可以按类或方法上的annotaiton匹配，前面加上@就行<br><code>@OnMethod(clazz=&quot;@javax.jws.WebService&quot;, method=&quot;@javax.jws.WebMethod&quot;)</code></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p>构造函数的名字是 <init><br><code>@OnMethod(clazz=&quot;java.net.ServerSocket&quot;, method=&quot;&lt;init&gt;&quot;)</code></p></li><li><p>静态内部类的写法，是在类与内部类之间加上”$”<br><code>@OnMethod(clazz=&quot;com.vip.MyServer$MyInnerClass&quot;, method=&quot;hello&quot;)</code></p></li><li><p>如果有多个同名的函数，想区分开来，可以在拦截函数上定义不同的参数列表（见4.1）。</p></li></ol><h3 id="拦截时机"><a href="#拦截时机" class="headerlink" title="拦截时机"></a>拦截时机</h3><p>可以为同一个函数的不同的Location，分别定义多个拦截函数。</p><h3 id="Kind-Entry与Kind-Return"><a href="#Kind-Entry与Kind-Return" class="headerlink" title="Kind.Entry与Kind.Return"></a>Kind.Entry与Kind.Return</h3><p><code>@OnMethod( clazz=&quot;java.net.ServerSocket&quot;, method=&quot;bind&quot; )</code><br>不写Location，默认就是刚进入函数的时候(Kind.ENTRY)。</p><p>但如果你想获得函数的返回结果或执行时间，则必须把切入点定在返回(Kind.RETURN)时。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OnMethod(clazz = &quot;java.net.ServerSocket&quot;, method = &quot;getLocalPort&quot;, location = @Location(Kind.RETURN))</span><br><span class="line"></span><br><span class="line">public static void onGetPort(@Return int port, @Duration long duration)</span><br></pre></td></tr></table></figure><p>duration的单位是纳秒，要除以 1,000,000 才是毫秒。</p><h3 id="Kind-Error-Kind-Throw和-Kind-Catch"><a href="#Kind-Error-Kind-Throw和-Kind-Catch" class="headerlink" title="Kind.Error, Kind.Throw和 Kind.Catch"></a>Kind.Error, Kind.Throw和 Kind.Catch</h3><p>异常抛出(Throw)，异常被捕获(Catch)，异常没被捕获被抛出函数之外(Error)，主要用于对某些异常情况的跟踪。</p><p>在拦截函数的参数定义里注入一个Throwable的参数，代表异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnMethod(clazz = &quot;java.net.ServerSocket&quot;, method = &quot;bind&quot;, location = @Location(Kind.ERROR))</span><br><span class="line"></span><br><span class="line">public static void onBind(Throwable exception, @Duration long duration)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Kind-Call与Kind-Line"><a href="#Kind-Call与Kind-Line" class="headerlink" title="Kind.Call与Kind.Line"></a>Kind.Call与Kind.Line</h3><p>下例定义监控bind()函数里调用的所有其他函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@OnMethod(clazz = &quot;java.net.ServerSocket&quot;, method = &quot;bind&quot;, location = @Location(value = Kind.CALL, clazz = &quot;/.*/&quot;, method = &quot;/.*/&quot;, where = Where.AFTER))</span><br><span class="line"></span><br><span class="line">public static void onBind(@Self Object self, @TargetInstance Object instance, @TargetMethodOrField String method, @Duration long duration)</span><br></pre></td></tr></table></figure><p>所调用的类及方法名所注入到@TargetInstance与 @TargetMethodOrField中。</p><p>​静态函数中，instance的值为空。如果想获得执行时间，必须把Where定义成AFTER。<br>如果想获得执行时间，必须 把Where定义成AFTER。</p><p>注意这里，一定不要像下面这样大范围的匹配，否则这性能是神仙也没法救了：</p><p><code>@OnMethod(clazz = &quot;/javax\\.swing\\..*/&quot;, method = &quot;/.*/&quot;, location = @Location(value = Kind.CALL, clazz = &quot;/.*/&quot;, method = &quot;/.*/&quot;)) </code><br>下例监控代码是否到达了Socket类的第363行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnMethod(clazz = &quot;java.net.ServerSocket&quot;, location = @Location(value = Kind.LINE, line = 363))</span><br><span class="line">public static void onBind4() &#123;</span><br><span class="line">   println(&quot;socket bind reach line:363&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>line还可以为-1，然后每行都会打印出来，加参数int line 获得的当前行数。此时会显示函数里完整的执行路径，但肯定又非常慢。</p><h3 id="打印this，参数-与-返回值"><a href="#打印this，参数-与-返回值" class="headerlink" title="打印this，参数 与 返回值"></a>打印this，参数 与 返回值</h3><h3 id="定义注入"><a href="#定义注入" class="headerlink" title="定义注入"></a>定义注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.btrace.AnyType;</span><br><span class="line">@OnMethod(clazz = &quot;java.io.File&quot;, method = &quot;createTempFile&quot;, location = @Location(value = Kind.RETURN))</span><br><span class="line">public static void o(@Self Object self, String prefix, String suffix, @Return AnyType result)</span><br></pre></td></tr></table></figure><p>如果想打印它们，首先按顺序定义用@Self 注释的this， 完整的参数列表，以及用@Return 注释的返回值。</p><p>需要打印哪个就定义哪个，不需要的就不要定义。但定义一定要按顺序，比如参数列表不能跑到返回值的后面。</p><p>Self：<br>如果是静态函数， self为空。</p><p>前面提到，如果上述使用了非JDK的类，命令行里要指定classpath。不过，如前所述，因为BTrace里不允许调用类的方法，所以定义具体类很多时候也没意思，所以self定义为Object就够了。</p><p>参数：<br>参数数列表要么不要定义，要定义就要定义完整，否则BTrace无法处理不同参数的同名函数。</p><p>如果有些参数你实在不想引入非JDK类，又不会造成同名函数不可区分，可以用AnyType来定义（不能用Object）。</p><p>如果拦截点用正则表达式中匹配了多个函数，函数之间的参数个数不一样，你又还是想把参数打印出来时，可以用AnyType[] args来定义。</p><p>但不知道是不是当前版本的bug，AnyType[] args 不能和 location＝Kind.RETURN 同用，否则会进入一种奇怪的静默状态，只要有一个函数定义错了，整个Btrace就什么都打印不出来。</p><p>结果：<br>同理，结果也可以用AnyType来定义，特别是用正则表达式匹配多个函数的时候，连void都可以表示。</p><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>再次强调，为了保证性能不受影响，Btrace不允许调用任何实例方法。<br>比如不能调用getter方法（怕在getter里有复杂的计算），只会通过直接反射来读取属性名。<br>又比如，除了JDK类，其他类toString时只会打印其类名＋System.IdentityHashCode。<br>println, printArray，都按上面的规律进行，所以只能打打基本类型。</p><p>如果想打印一个Object的属性，用printFields()来反射。</p><p>如果只想反射某个属性，参照下面打印Port属性的写法。从性能考虑，应把field用静态变量缓存起来。</p><p>注意JDK类与非JDK类的区别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">//JDK的类这样写就行</span><br><span class="line">private static Field fdFiled = field(&quot;java.io,FileInputStream&quot;, &quot;fd&quot;);</span><br><span class="line"></span><br><span class="line">//非JDK的类，要给出ClassLoader，否则ClassNotFound</span><br><span class="line">private static Field portField = field(classForName(&quot;com.vip.demo.MyObject&quot;, contextClassLoader()), &quot;port&quot;);</span><br><span class="line"></span><br><span class="line">public static void onChannelRead(@Self Object self) &#123;</span><br><span class="line">    println(&quot;port:&quot; + getInt(portField, self));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TLS，拦截函数间的通信机制"><a href="#TLS，拦截函数间的通信机制" class="headerlink" title="TLS，拦截函数间的通信机制"></a>TLS，拦截函数间的通信机制</h3><p>如果要多个拦截函数之间要通信，可以使用@TLS定义 ThreadLocal的变量来共享</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@TLS</span><br><span class="line">private static int port = -1;</span><br><span class="line"></span><br><span class="line">@OnMethod(clazz = &quot;java.net.ServerSocket&quot;, method = &quot;&lt;init&gt;&quot;)</span><br><span class="line">public static void onServerSocket(int p)&#123;</span><br><span class="line">    port = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@OnMethod(clazz = &quot;java.net.ServerSocket&quot;, method = &quot;bind&quot;)</span><br><span class="line">public static void onBind()&#123;</span><br><span class="line">  println(&quot;server socket at &quot; + port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="典型场景"><a href="#典型场景" class="headerlink" title="典型场景"></a>典型场景</h2><h3 id="打印慢调用"><a href="#打印慢调用" class="headerlink" title="打印慢调用"></a>打印慢调用</h3><p>下例打印所有用时超过1毫秒的filter。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@OnMethod(clazz = &quot;+com.vip.demo.Filter&quot;, method = &quot;doFilter&quot;, location = @Location(Kind.RETURN))</span><br><span class="line">public static void onDoFilter2(@ProbeClassName String pcn,  @Duration long duration) &#123;</span><br><span class="line">    if (duration &gt; 1000000) &#123;</span><br><span class="line">        println(pcn + &quot;,duration:&quot; + (duration / 100000));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好能抽取了打印耗时的函数，减少代码重复度。<br>定位到某一个Filter慢了之后，可以直接用Location(Kind.CALL)，进一步找出它里面的哪一步慢了。</p><h3 id="谁调用了这个函数"><a href="#谁调用了这个函数" class="headerlink" title="谁调用了这个函数"></a>谁调用了这个函数</h3><p>比如，谁调用了System.gc() ?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@OnMethod(clazz = &quot;java.lang.System&quot;, method = &quot;gc&quot;)</span><br><span class="line">public static void onSystemGC() &#123;</span><br><span class="line">    println(&quot;entered System.gc()&quot;);</span><br><span class="line">    jstack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="捕捉异常，或进入了某个特定代码行时，this对象及参数的值"><a href="#捕捉异常，或进入了某个特定代码行时，this对象及参数的值" class="headerlink" title="捕捉异常，或进入了某个特定代码行时，this对象及参数的值"></a>捕捉异常，或进入了某个特定代码行时，this对象及参数的值</h3><p>按之前的提示，自己组合一下即可。</p><h3 id="打印函数的调用-慢调用的统计信息"><a href="#打印函数的调用-慢调用的统计信息" class="headerlink" title="打印函数的调用/慢调用的统计信息"></a>打印函数的调用/慢调用的统计信息</h3><p>如果你已经看到了这里，那基本也不用我再啰嗦了，自己看Samples的Histogram.java, HistoOnEvent.java<br>可以用AtomicInteger构造计数器，然后定时(@OnTimer)，或根据事件(@OnEvent)输出结果(ctrl+c后选择发送事件)。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节码 </tag>
            
            <tag> BTrace </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码之红黑树(jdk1.8) </title>
      <link href="/hexo/post/a9f951c8.html"/>
      <url>/hexo/post/a9f951c8.html</url>
      
        <content type="html"><![CDATA[<p>TreeNode类似一颗红黑树<br>看下普通treeMap<br><a href="https://juejin.im/post/5a0658f76fb9a04523415a8d">https://juejin.im/post/5a0658f76fb9a04523415a8d</a></p><p>基本结构:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//父节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line"><span class="comment">//左右</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;<span class="comment">//红还是黑</span></span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回根结点</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                r = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line">        TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="keyword">if</span> (root != first) &#123;</span><br><span class="line">            Node&lt;K,V&gt; rn;</span><br><span class="line">            tab[index] = root;</span><br><span class="line">            TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class="line">            <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class="line">            <span class="keyword">if</span> (rp != <span class="keyword">null</span>)</span><br><span class="line">                rp.next = rn;</span><br><span class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">                first.prev = root;</span><br><span class="line">            root.next = first;</span><br><span class="line">            root.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> ph, dir; K pk;</span><br><span class="line">        TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                  (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">            p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = pl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</span><br><span class="line">        (d = a.getClass().getName().</span><br><span class="line">         compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">        d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">             -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hd.treeify(tab);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">                x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//如果是第一个结点则设置为根结点</span></span><br><span class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = <span class="keyword">null</span>;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    root = x;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//非第一个结点</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    K k = x.key;</span><br><span class="line">                    <span class="keyword">int</span> h = x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                        <span class="keyword">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;</span><br><span class="line"><span class="comment">//根据hash值大小判断放在左子结点还是右</span></span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//hash值一样</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                  (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                            dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            x.parent = xp;</span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line">                            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                                xp.left = x;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                xp.right = x;</span><br><span class="line">                            root = balanceInsertion(root, x);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            moveRootToFront(tab, root);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">            hd = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tl.next = p;</span><br><span class="line">        tl = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> dir, ph; K pk;</span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            dir = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                  (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                searched = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                    ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            dir = tieBreakOrder(k, pk);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                xp.left = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                xp.right = x;</span><br><span class="line">            xp.next = x;</span><br><span class="line">            x.parent = x.prev = xp;</span><br><span class="line">            <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeTreeNode</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; hash;</span><br><span class="line">    TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index], root = first, rl;</span><br><span class="line">    TreeNode&lt;K,V&gt; succ = (TreeNode&lt;K,V&gt;)next, pred = prev;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        tab[index] = first = succ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = succ;</span><br><span class="line">    <span class="keyword">if</span> (succ != <span class="keyword">null</span>)</span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.parent != <span class="keyword">null</span>)</span><br><span class="line">        root = root.root();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.right == <span class="keyword">null</span> ||</span><br><span class="line">        (rl = root.left) == <span class="keyword">null</span> || rl.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tab[index] = first.untreeify(map);  <span class="comment">// too small</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>, pl = left, pr = right, replacement;</span><br><span class="line">    <span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class="line">        <span class="keyword">while</span> ((sl = s.left) != <span class="keyword">null</span>) <span class="comment">// find successor</span></span><br><span class="line">            s = sl;</span><br><span class="line">        <span class="keyword">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">        TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class="line">        TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s&#x27;s direct parent</span></span><br><span class="line">            p.parent = s;</span><br><span class="line">            s.right = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class="line">            <span class="keyword">if</span> ((p.parent = sp) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                    sp.left = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sp.right = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((s.right = pr) != <span class="keyword">null</span>)</span><br><span class="line">                pr.parent = s;</span><br><span class="line">        &#125;</span><br><span class="line">        p.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((p.right = sr) != <span class="keyword">null</span>)</span><br><span class="line">            sr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((s.left = pl) != <span class="keyword">null</span>)</span><br><span class="line">            pl.parent = s;</span><br><span class="line">        <span class="keyword">if</span> ((s.parent = pp) == <span class="keyword">null</span>)</span><br><span class="line">            root = s;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">            pp.left = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = s;</span><br><span class="line">        <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">            replacement = sr;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            replacement = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="keyword">null</span>)</span><br><span class="line">        replacement = pl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="keyword">null</span>)</span><br><span class="line">        replacement = pr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        replacement = p;</span><br><span class="line">    <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (pp == <span class="keyword">null</span>)</span><br><span class="line">            root = replacement;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">            pp.left = replacement;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = replacement;</span><br><span class="line">        p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (replacement == p) &#123;  <span class="comment">// detach</span></span><br><span class="line">        TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">        p.parent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                pp.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                pp.right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (movable)</span><br><span class="line">        moveRootToFront(tab, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当扩容的时候，节点使用split，<code>((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceDeletion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span> || x == root)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((xpr = xp.right) != <span class="keyword">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class="line">                xpr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">true</span>;</span><br><span class="line">                root = rotateLeft(root, xp);</span><br><span class="line">                xpr = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xpr == <span class="keyword">null</span>)</span><br><span class="line">                x = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                <span class="keyword">if</span> ((sr == <span class="keyword">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                    (sl == <span class="keyword">null</span> || !sl.red)) &#123;</span><br><span class="line">                    xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                    x = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sr == <span class="keyword">null</span> || !sr.red) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sl != <span class="keyword">null</span>)</span><br><span class="line">                            sl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpr);</span><br><span class="line">                        xpr = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                            <span class="keyword">null</span> : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpr.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                            sr.red = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">            <span class="keyword">if</span> (xpl != <span class="keyword">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                xpl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">true</span>;</span><br><span class="line">                root = rotateRight(root, xp);</span><br><span class="line">                xpl = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xpl == <span class="keyword">null</span>)</span><br><span class="line">                x = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                <span class="keyword">if</span> ((sl == <span class="keyword">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                    (sr == <span class="keyword">null</span> || !sr.red)) &#123;</span><br><span class="line">                    xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                    x = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sl == <span class="keyword">null</span> || !sl.red) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                            sr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpl);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                            <span class="keyword">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpl.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((sl = xpl.left) != <span class="keyword">null</span>)</span><br><span class="line">                            sl.red = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">checkInvariants</span><span class="params">(TreeNode&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right,</span><br><span class="line">            tb = t.prev, tn = (TreeNode&lt;K,V&gt;)t.next;</span><br><span class="line">        <span class="keyword">if</span> (tb != <span class="keyword">null</span> &amp;&amp; tb.next != t)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tn != <span class="keyword">null</span> &amp;&amp; tn.prev != t)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tp != <span class="keyword">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (t.red &amp;&amp; tl != <span class="keyword">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class="keyword">null</span> &amp;&amp; tr.red)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>treeifyBin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment">     * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line"> <span class="comment">//如果当前哈希表为空，或者哈希表中元素的个数小于 进行树形化的阈值(默认为 64)，就去新建/扩容</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line"><span class="comment">//(n - 1) &amp; hash：确保索引在数组范围内</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//    // For treeifyBin</span></span><br><span class="line"><span class="comment">//    TreeNode&lt;K,V&gt; replacementTreeNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"> <span class="comment">//       return new TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span></span><br><span class="line"> <span class="comment">//   &#125;</span></span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line"> <span class="comment">//让桶的第一个元素指向新建的红黑树头结点，以后这个桶里的元素就是红黑树而不是链表了</span></span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/QH-Jimmy/p/7810644.html">https://www.cnblogs.com/QH-Jimmy/p/7810644.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 源码分析(一) ----入门使用、Namesrv分析</title>
      <link href="/hexo/post/54de003f.html"/>
      <url>/hexo/post/54de003f.html</url>
      
        <content type="html"><![CDATA[<p>入门使用 ：<a href="http://rocketmq.apache.org/docs/quick-start/">http://rocketmq.apache.org/docs/quick-start/</a></p><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unzip rocketmq-all-4.2.0-source-release.zip</span><br><span class="line">cd rocketmq-all-4.2.0/</span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line">cd distribution/target/apache-rocketmq</span><br></pre></td></tr></table></figure><p>Start Name Server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure><p>  The Name Server boot success…</p><p>Start Broker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log </span><br></pre></td></tr></table></figure><p>  The broker[%s, 172.30.30.233:10911] boot success…</p><h2 id="发送消息可靠同步的"><a href="#发送消息可靠同步的" class="headerlink" title="发送消息可靠同步的"></a>发送消息可靠同步的</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span></span><br><span class="line">            DefaultMQProducer(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">&quot;TagA&quot;</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">&quot;Hello RocketMQ &quot;</span> +</span><br><span class="line">                    i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//Call send message to deliver message to one of brokers.</span></span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Shut down once the producer instance is not longer in use.</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可靠的异步"><a href="#可靠的异步" class="headerlink" title="可靠的异步"></a>可靠的异步</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;ExampleProducerGroup&quot;</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">                <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;TagA&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;OrderID188&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Hello world&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                producer.send(msg, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;%-10d OK %s %n&quot;</span>, index,</span><br><span class="line">                            sendResult.getMsgId());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;%-10d Exception %s %n&quot;</span>, index, e);</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Shut down once the producer instance is not longer in use.</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;please_rename_unique_group_name_4&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;TopicTest&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="params"><span class="function">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s Receive New Messages: %s %n&quot;</span>, Thread.currentThread().getName(), msgs);</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单向传播"><a href="#单向传播" class="headerlink" title="单向传播"></a>单向传播</h2><p>弱可靠</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnewayProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;ExampleProducerGroup&quot;</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">&quot;TagA&quot;</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">&quot;Hello RocketMQ &quot;</span> +</span><br><span class="line">                    i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//Call send message to deliver message to one of brokers.</span></span><br><span class="line">            producer.sendOneway(msg);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Shut down once the producer instance is not longer in use.</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h1><p>给所有订阅者广播</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;ProducerGroupName&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>,</span><br><span class="line">                <span class="string">&quot;TagA&quot;</span>,</span><br><span class="line">                <span class="string">&quot;OrderID188&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Hello world&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;example_group_name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set to broadcast mode</span></span><br><span class="line">        consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;TopicTest&quot;</span>, <span class="string">&quot;TagA || TagC || TagD&quot;</span>);</span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="params"><span class="function">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                System.out.printf(Thread.currentThread().getName() + <span class="string">&quot; Receive New Messages: &quot;</span> + msgs + <span class="string">&quot;%n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.printf(<span class="string">&quot;Broadcast Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时消息"><a href="#定时消息" class="headerlink" title="定时消息"></a>定时消息</h1><p>1.订阅等待消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledMessageConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Instantiate message consumer</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;ExampleConsumer&quot;</span>);</span><br><span class="line">        <span class="comment">// Subscribe topics</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;TestTopic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// Register message listener</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; messages, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (MessageExt message : messages) &#123;</span><br><span class="line">                    <span class="comment">// Print approximate delay time period</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;Receive message[msgId=&quot;</span> + message.getMsgId() + <span class="string">&quot;] &quot;</span> + (System.currentTimeMillis() - message.getStoreTimestamp()) + <span class="string">&quot;ms later&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// Launch consumer</span></span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"> <span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledMessageProducer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         <span class="comment">// Instantiate a producer to send scheduled messages</span></span><br><span class="line">         DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;ExampleProducerGroup&quot;</span>);</span><br><span class="line">         <span class="comment">// Launch producer</span></span><br><span class="line">         producer.start();</span><br><span class="line">         <span class="keyword">int</span> totalMessagesToSend = <span class="number">100</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalMessagesToSend; i++) &#123;</span><br><span class="line">             Message message = <span class="keyword">new</span> Message(<span class="string">&quot;TestTopic&quot;</span>, (<span class="string">&quot;Hello scheduled message &quot;</span> + i).getBytes());</span><br><span class="line">             <span class="comment">// This message will be delivered to consumer 10 seconds later.</span></span><br><span class="line">             message.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line">             <span class="comment">// Send the message</span></span><br><span class="line">             producer.send(message);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// Shutdown producer after use.</span></span><br><span class="line">         producer.shutdown();</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="批量消息"><a href="#批量消息" class="headerlink" title="批量消息"></a>批量消息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String topic = <span class="string">&quot;BatchTest&quot;</span>;</span><br><span class="line">List&lt;Message&gt; messages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;OrderID001&quot;</span>, <span class="string">&quot;Hello world 0&quot;</span>.getBytes()));</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;OrderID002&quot;</span>, <span class="string">&quot;Hello world 1&quot;</span>.getBytes()));</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;OrderID003&quot;</span>, <span class="string">&quot;Hello world 2&quot;</span>.getBytes()));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    producer.send(messages);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="comment">//handle the error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>！！因为最大只能发4M消息，最好每个不要超过1M</p><h2 id="消息切分"><a href="#消息切分" class="headerlink" title="消息切分"></a>消息切分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListSplitter</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">List</span>&lt;<span class="title">Message</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_LIMIT = <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Message&gt; messages;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currIndex;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListSplitter</span><span class="params">(List&lt;Message&gt; messages)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.messages = messages;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currIndex &lt; messages.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nextIndex = currIndex;</span><br><span class="line">        <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; nextIndex &lt; messages.size(); nextIndex++) &#123;</span><br><span class="line">            Message message = messages.get(nextIndex);</span><br><span class="line">            <span class="keyword">int</span> tmpSize = message.getTopic().length() + message.getBody().length;</span><br><span class="line">            Map&lt;String, String&gt; properties = message.getProperties();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                tmpSize += entry.getKey().length() + entry.getValue().length();</span><br><span class="line">            &#125;</span><br><span class="line">            tmpSize = tmpSize + <span class="number">20</span>; <span class="comment">//for log overhead</span></span><br><span class="line">            <span class="keyword">if</span> (tmpSize &gt; SIZE_LIMIT) &#123;</span><br><span class="line">                <span class="comment">//it is unexpected that single message exceeds the SIZE_LIMIT</span></span><br><span class="line">                <span class="comment">//here just let it go, otherwise it will block the splitting process</span></span><br><span class="line">                <span class="keyword">if</span> (nextIndex - currIndex == <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="comment">//if the next sublist has no element, add this one and then break, otherwise just break</span></span><br><span class="line">                   nextIndex++;  </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmpSize + totalSize &gt; SIZE_LIMIT) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                totalSize += tmpSize;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Message&gt; subList = messages.subList(currIndex, nextIndex);</span><br><span class="line">        currIndex = nextIndex;</span><br><span class="line">        <span class="keyword">return</span> subList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//then you could split the large list into small ones:</span></span><br><span class="line">ListSplitter splitter = <span class="keyword">new</span> ListSplitter(messages);</span><br><span class="line"><span class="keyword">while</span> (splitter.hasNext()) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       List&lt;Message&gt;  listItem = splitter.next();</span><br><span class="line">       producer.send(listItem);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       <span class="comment">//handle the error</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过滤消息"><a href="#过滤消息" class="headerlink" title="过滤消息"></a>过滤消息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;CID_EXAMPLE&quot;</span>);</span><br><span class="line">consumer.subscribe(<span class="string">&quot;TOPIC&quot;</span>, <span class="string">&quot;TAGA || TAGB || TAGC&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">producer.start();</span><br><span class="line"></span><br><span class="line">Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>,</span><br><span class="line">    tag,</span><br><span class="line">    (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Set some properties.</span></span><br><span class="line">msg.putUserProperty(<span class="string">&quot;a&quot;</span>, String.valueOf(i));</span><br><span class="line"></span><br><span class="line">SendResult sendResult = producer.send(msg);</span><br><span class="line">   </span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;please_rename_unique_group_name_4&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// only subsribe messages have property a, also a &gt;=0 and a &lt;= 3</span></span><br><span class="line">consumer.subscribe(<span class="string">&quot;TopicTest&quot;</span>, MessageSelector.bySql(<span class="string">&quot;a between 0 and 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">consumer.start();</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class="line">        TransactionCheckListener transactionCheckListener = <span class="keyword">new</span> TransactionCheckListenerImpl();</span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">        producer.setCheckThreadPoolMinSize(<span class="number">2</span>);</span><br><span class="line">        producer.setCheckThreadPoolMaxSize(<span class="number">2</span>);</span><br><span class="line">        producer.setCheckRequestHoldMax(<span class="number">2000</span>);</span><br><span class="line">        producer.setTransactionCheckListener(transactionCheckListener);</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        String[] tags = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;TagB&quot;</span>, <span class="string">&quot;TagC&quot;</span>, <span class="string">&quot;TagD&quot;</span>, <span class="string">&quot;TagE&quot;</span>&#125;;</span><br><span class="line">        TransactionExecuterImpl tranExecuter = <span class="keyword">new</span> TransactionExecuterImpl();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Message msg =</span><br><span class="line">                    <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>, tags[i % tags.length], <span class="string">&quot;KEY&quot;</span> + i,</span><br><span class="line">                        (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter, <span class="keyword">null</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line"></span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionCheckListener</span> </span>&#123;</span><br><span class="line">    <span class="function">LocalTransactionState <span class="title">checkLocalTransactionState</span><span class="params">(<span class="keyword">final</span> MessageExt msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionCheckListenerImpl</span> <span class="keyword">implements</span> <span class="title">TransactionCheckListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger transactionIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransactionState</span><span class="params">(MessageExt msg)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;server checking TrMsg %s%n&quot;</span>, msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = transactionIndex.getAndIncrement();</span><br><span class="line">        <span class="keyword">if</span> ((value % <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Could not find db&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((value % <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((value % <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>log配置<a href="http://rocketmq.apache.org/docs/logappender-example/">http://rocketmq.apache.org/docs/logappender-example/</a></p><h1 id="OpenMessaging"><a href="#OpenMessaging" class="headerlink" title="OpenMessaging"></a>OpenMessaging</h1><p><a href="http://rocketmq.apache.org/docs/openmessaging-example/">http://rocketmq.apache.org/docs/openmessaging-example/</a></p><h1 id="Message-Reliablity"><a href="#Message-Reliablity" class="headerlink" title="Message Reliablity"></a>Message Reliablity</h1><p>影响消息可靠性的几种情况：</p><ol><li>Broker正常关闭</li><li>Broker异常Crash</li><li>OS Crash</li><li>机器掉电，但是能立即恢复供电情况。</li><li>机器无法开机（可能是cpu、主板、内存等关键设备损坏）</li><li>磁盘设备损坏。</li></ol><p>(1)、(2)、(3)、(4)四种情况都属于硬件资源可立即恢复情况，RocketMQ在这四种情况下能保证消息不丢，或者丢失少量数据（依赖刷盘方式是同步还是异步）。</p><p>(5)、(6)属于单点故障，且无法恢复，一旦发生，在此单点上的消息全部丢失。RocketMQ在这两种情况下，通过异步复制，可保证99%的消息不丢，但是仍然会有极少量的消息可能丢失。通过同步双写技术可以完全避免单点，同步双写势必会影响性能，适合对消息可靠性要求极高的场合，例如与Money相关的应用。</p><p>RocketMQ从3.0版本开始支持同步双写。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="https://user-images.githubusercontent.com/7789698/42863450-d5f9e96e-8a95-11e8-9494-fe2030afa585.png" alt="image"></p><h3 id="NameServer-Cluster"><a href="#NameServer-Cluster" class="headerlink" title="NameServer Cluster"></a><strong>NameServer Cluster</strong></h3><p>命名服务器提供了轻量级服务发现和路由。每台命名服务器记录了完整的路由信息。提供了一致性读写服务，支持快速存储扩展。</p><h3 id="Broker-Cluster"><a href="#Broker-Cluster" class="headerlink" title="Broker Cluster"></a><strong>Broker Cluster</strong></h3><p>Brokers专注于消息存储，提供轻量级的TOPIC和QUEUE机制。支持“推”和“拉”模式,包含容错机制(2或3份副本)，并提供强大的峰值填充和按原始时间顺序累积数千亿条消息的能力。 此外，Brokers还提供灾难恢复，丰富的指标统计和警报机制。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="代码分层"><a href="#代码分层" class="headerlink" title="代码分层"></a>代码分层</h2><p><img src="https://user-images.githubusercontent.com/7789698/32880452-526d5280-ca73-11e7-8451-bd88c32a9fe6.png" alt="image"></p><h1 id="脚本源码分析"><a href="#脚本源码分析" class="headerlink" title="脚本源码分析"></a>脚本源码分析</h1><p>mqnamesrv.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">if [ -z &quot;$ROCKETMQ_HOME&quot; ] ; then</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># resolve links - $0 may be a link to maven&#x27;s home</span></span></span><br><span class="line">  PRG=&quot;$0&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> need this <span class="keyword">for</span> relative symlinks</span></span><br><span class="line">  while [ -h &quot;$PRG&quot; ] ; do</span><br><span class="line">    ls=`ls -ld &quot;$PRG&quot;`</span><br><span class="line">    link=`expr &quot;$ls&quot; : &#x27;.*-&gt; \(.*\)$&#x27;`</span><br><span class="line">    if expr &quot;$link&quot; : &#x27;/.*&#x27; &gt; /dev/null; then</span><br><span class="line">      PRG=&quot;$link&quot;</span><br><span class="line">    else</span><br><span class="line">      PRG=&quot;`dirname &quot;$PRG&quot;`/$link&quot;</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">  saveddir=`pwd`</span><br><span class="line"></span><br><span class="line">  ROCKETMQ_HOME=`dirname &quot;$PRG&quot;`/..</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> make it fully qualified</span></span><br><span class="line">  ROCKETMQ_HOME=`cd &quot;$ROCKETMQ_HOME&quot; &amp;&amp; pwd`</span><br><span class="line"></span><br><span class="line">  cd &quot;$saveddir&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export ROCKETMQ_HOME</span><br><span class="line"></span><br><span class="line">sh $&#123;ROCKETMQ_HOME&#125;/bin/runserver.sh org.apache.rocketmq.namesrv.NamesrvStartup $@</span><br></pre></td></tr></table></figure><p>runserver.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">error_exit ()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;ERROR: $1 !!&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=$HOME/jdk/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/usr/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; error_exit &quot;Please set the JAVA_HOME variable in your environment, We need java(x64)!&quot;</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line">export JAVA=&quot;$JAVA_HOME/bin/java&quot;</span><br><span class="line">export BASE_DIR=$(dirname $0)/..</span><br><span class="line">export CLASSPATH=.:$&#123;BASE_DIR&#125;/conf:$&#123;CLASSPATH&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">===========================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> JVM Configuration</span></span><br><span class="line"><span class="meta">#</span><span class="bash">===========================================================================================</span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:PermSize=128m -XX:MaxPermSize=320m&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:SurvivorRatio=8 -XX:+DisableExplicitGC -XX:-UseParNewGC&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -verbose:gc -Xloggc:/dev/shm/rmq_srv_gc.log -XX:+PrintGCDetails&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125;  -XX:-UseLargePages&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs=$&#123;BASE_DIR&#125;/lib&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span></span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">JAVA <span class="variable">$&#123;JAVA_OPT&#125;</span> <span class="variable">$@</span></span></span><br></pre></td></tr></table></figure><p>脚本最后就是通过 java org.apache.rocketmq.namesrv.NamesrvStartup 运行nameserver</p><p>$@指的脚本传入的参数</p><h2 id="NamesrvStartup"><a href="#NamesrvStartup" class="headerlink" title="NamesrvStartup"></a>NamesrvStartup</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamesrvStartup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Properties properties = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommandLine commandLine = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        main0(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NamesrvController <span class="title">main0</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置rocketmq.remoting.version （版本号）</span></span><br><span class="line">        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));</span><br><span class="line"><span class="comment">//com.rocketmq.remoting.socket.sndbuf.size  </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_SNDBUF_SIZE)) &#123;</span><br><span class="line">            NettySystemConfig.socketSndbufSize = <span class="number">4096</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//com.rocketmq.remoting.socket.rcvbuf.size</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_RCVBUF_SIZE)) &#123;</span><br><span class="line">            NettySystemConfig.socketRcvbufSize = <span class="number">4096</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">//命令行Apache Commons CLI 见 https://my.oschina.net/cloudcoder/blog/363793</span></span><br><span class="line">            Options options = ServerUtil.buildCommandlineOptions(<span class="keyword">new</span> Options());</span><br><span class="line">            commandLine = ServerUtil.parseCmdLine(<span class="string">&quot;mqnamesrv&quot;</span>, args, buildCommandlineOptions(options), <span class="keyword">new</span> PosixParser());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == commandLine) &#123;</span><br><span class="line">                System.exit(-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">            <span class="keyword">final</span> NamesrvConfig namesrvConfig = <span class="keyword">new</span> NamesrvConfig();</span><br><span class="line">            <span class="keyword">final</span> NettyServerConfig nettyServerConfig = <span class="keyword">new</span> NettyServerConfig();</span><br><span class="line">            nettyServerConfig.setListenPort(<span class="number">9876</span>);</span><br><span class="line">            <span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;c&#x27;</span>)) &#123;</span><br><span class="line">                String file = commandLine.getOptionValue(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">                    properties = <span class="keyword">new</span> Properties();</span><br><span class="line">                    properties.load(in);</span><br><span class="line">                    MixAll.properties2Object(properties, namesrvConfig);</span><br><span class="line">                    MixAll.properties2Object(properties, nettyServerConfig);</span><br><span class="line">                    namesrvConfig.setConfigStorePath(file);</span><br><span class="line">                    System.out.printf(<span class="string">&quot;load config properties file OK, &quot;</span> + file + <span class="string">&quot;%n&quot;</span>);</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;p&#x27;</span>)) &#123;</span><br><span class="line">                MixAll.printObjectProperties(<span class="keyword">null</span>, namesrvConfig);</span><br><span class="line">                MixAll.printObjectProperties(<span class="keyword">null</span>, nettyServerConfig);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), namesrvConfig);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == namesrvConfig.getRocketmqHome()) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;Please set the &quot;</span> + MixAll.ROCKETMQ_HOME_ENV + <span class="string">&quot; variable in your environment to match the location of the RocketMQ installation%n&quot;</span>);</span><br><span class="line">                System.exit(-<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//logback配置 见http://www.iteye.com/topic/345924</span></span><br><span class="line">            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">            JoranConfigurator configurator = <span class="keyword">new</span> JoranConfigurator();</span><br><span class="line">            configurator.setContext(lc);</span><br><span class="line">            lc.reset();</span><br><span class="line">            configurator.doConfigure(namesrvConfig.getRocketmqHome() + <span class="string">&quot;/conf/logback_namesrv.xml&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);</span><br><span class="line"><span class="comment">//打印配置</span></span><br><span class="line">            MixAll.printObjectProperties(log, namesrvConfig);</span><br><span class="line">            MixAll.printObjectProperties(log, nettyServerConfig);</span><br><span class="line"><span class="comment">//构造NamesrvController</span></span><br><span class="line">            <span class="keyword">final</span> NamesrvController controller = <span class="keyword">new</span> NamesrvController(namesrvConfig, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// remember all configs to prevent discard</span></span><br><span class="line">            controller.getConfiguration().registerConfig(properties);</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">            <span class="keyword">boolean</span> initResult = controller.initialize();</span><br><span class="line">            <span class="keyword">if</span> (!initResult) &#123;</span><br><span class="line">                controller.shutdown();</span><br><span class="line">                System.exit(-<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//优雅退出</span></span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> ShutdownHookThread(log, <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    controller.shutdown();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">            controller.start();</span><br><span class="line"></span><br><span class="line">            String tip = <span class="string">&quot;The Name Server boot success. serializeType=&quot;</span> + RemotingCommand.getSerializeTypeConfigInThisServer();</span><br><span class="line">            log.info(tip);</span><br><span class="line">            System.out.printf(tip + <span class="string">&quot;%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> controller;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NamesrvController"><a href="#NamesrvController" class="headerlink" title="NamesrvController"></a>NamesrvController</h2><ul><li>namesrvConfig：nameServer的配置</li><li>nettyServerConfig：NameServer的netty配置</li><li>remotingServer：NameServer 的netty服务器</li><li>scheduledExecutorService：routeInfoManager和kvConfigManager使用的定时线程池</li><li>remotingExecutor：netty使用的线程池</li><li>brokerHosekeppingService：</li><li>kvConfigManager：kv配置管理</li><li>routeInfoManager：包含broker的ip和对应的队列信息，说明producer可以往哪一个broker发送消息，consumer从哪一个broker pull消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NamesrvController</span><span class="params">(NamesrvConfig namesrvConfig, NettyServerConfig nettyServerConfig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.namesrvConfig = namesrvConfig;</span><br><span class="line">    <span class="keyword">this</span>.nettyServerConfig = nettyServerConfig;</span><br><span class="line">    <span class="keyword">this</span>.kvConfigManager = <span class="keyword">new</span> KVConfigManager(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.routeInfoManager = <span class="keyword">new</span> RouteInfoManager();</span><br><span class="line">    <span class="keyword">this</span>.brokerHousekeepingService = <span class="keyword">new</span> BrokerHousekeepingService(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.configuration = <span class="keyword">new</span> Configuration(</span><br><span class="line">        log,</span><br><span class="line">        <span class="keyword">this</span>.namesrvConfig, <span class="keyword">this</span>.nettyServerConfig</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.configuration.setStorePathFromConfig(<span class="keyword">this</span>.namesrvConfig, <span class="string">&quot;configStorePath&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initialize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//从&quot;user.home&quot;+/namesrv/kvConfig.json   获取json配置解析到内存中-&gt;configTable</span></span><br><span class="line">        <span class="keyword">this</span>.kvConfigManager.load();</span><br><span class="line"><span class="comment">//构造NettyRemotingServer</span></span><br><span class="line">        <span class="keyword">this</span>.remotingServer = <span class="keyword">new</span> NettyRemotingServer(<span class="keyword">this</span>.nettyServerConfig, <span class="keyword">this</span>.brokerHousekeepingService);</span><br><span class="line"><span class="comment">//默认8</span></span><br><span class="line">        <span class="keyword">this</span>.remotingExecutor =</span><br><span class="line">            Executors.newFixedThreadPool(nettyServerConfig.getServerWorkerThreads(), <span class="keyword">new</span> ThreadFactoryImpl(<span class="string">&quot;RemotingExecutorThread_&quot;</span>));</span><br><span class="line"><span class="comment">//注册requestProcessor</span></span><br><span class="line">        <span class="keyword">this</span>.registerProcessor();</span><br><span class="line"><span class="comment">//“NSScheduledThread” 每10秒扫描下，如果broker超过2分钟，关闭channel，打印The broker channel expired,</span></span><br><span class="line">        <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                NamesrvController.<span class="keyword">this</span>.routeInfoManager.scanNotActiveBroker();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//每10分钟打印下kvConfigManager的配置</span></span><br><span class="line">        <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                NamesrvController.<span class="keyword">this</span>.kvConfigManager.printAllPeriodically();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//集群</span></span><br><span class="line">        <span class="keyword">if</span> (namesrvConfig.isClusterTest()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.remotingServer.registerDefaultProcessor(<span class="keyword">new</span> ClusterTestRequestProcessor(<span class="keyword">this</span>, namesrvConfig.getProductEnvName()),</span><br><span class="line">                <span class="keyword">this</span>.remotingExecutor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.remotingServer.registerDefaultProcessor(<span class="keyword">new</span> DefaultRequestProcessor(<span class="keyword">this</span>), <span class="keyword">this</span>.remotingExecutor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>start &amp;&amp; shutdown</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.remotingServer.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.remotingServer.shutdown();</span><br><span class="line">    <span class="keyword">this</span>.remotingExecutor.shutdown();</span><br><span class="line">    <span class="keyword">this</span>.scheduledExecutorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NettyRemotingServer"><a href="#NettyRemotingServer" class="headerlink" title="NettyRemotingServer"></a>NettyRemotingServer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NettyRemotingServer</span><span class="params">(<span class="keyword">final</span> NettyServerConfig nettyServerConfig,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> ChannelEventListener channelEventListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(nettyServerConfig.getServerOnewaySemaphoreValue(), nettyServerConfig.getServerAsyncSemaphoreValue());</span><br><span class="line">        <span class="keyword">this</span>.serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        <span class="keyword">this</span>.nettyServerConfig = nettyServerConfig;</span><br><span class="line">        <span class="keyword">this</span>.channelEventListener = channelEventListener;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> publicThreadNums = nettyServerConfig.getServerCallbackExecutorThreads();</span><br><span class="line">        <span class="keyword">if</span> (publicThreadNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            publicThreadNums = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.publicExecutor = Executors.newFixedThreadPool(publicThreadNums, <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">            <span class="keyword">private</span> AtomicInteger threadIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">&quot;NettyServerPublicExecutor_&quot;</span> + <span class="keyword">this</span>.threadIndex.incrementAndGet());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//boss线程组</span></span><br><span class="line">        <span class="keyword">this</span>.eventLoopGroupBoss = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>, <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">            <span class="keyword">private</span> AtomicInteger threadIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, String.format(<span class="string">&quot;NettyBoss_%d&quot;</span>, <span class="keyword">this</span>.threadIndex.incrementAndGet()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、是否是linux平台2、useEpollNativeSelector配置是否为true3、epoll是否可用</span></span><br><span class="line">        <span class="keyword">if</span> (useEpoll()) &#123;</span><br><span class="line">            <span class="comment">//serverSelectorThreads 默认为3</span></span><br><span class="line">            <span class="keyword">this</span>.eventLoopGroupSelector = <span class="keyword">new</span> EpollEventLoopGroup(nettyServerConfig.getServerSelectorThreads(), <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">                <span class="keyword">private</span> AtomicInteger threadIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">int</span> threadTotal = nettyServerConfig.getServerSelectorThreads();</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, String.format(<span class="string">&quot;NettyServerEPOLLSelector_%d_%d&quot;</span>, threadTotal, <span class="keyword">this</span>.threadIndex.incrementAndGet()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventLoopGroupSelector = <span class="keyword">new</span> NioEventLoopGroup(nettyServerConfig.getServerSelectorThreads(), <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">                <span class="keyword">private</span> AtomicInteger threadIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">int</span> threadTotal = nettyServerConfig.getServerSelectorThreads();</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, String.format(<span class="string">&quot;NettyServerNIOSelector_%d_%d&quot;</span>, threadTotal, <span class="keyword">this</span>.threadIndex.incrementAndGet()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>start</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultEventExecutorGroup = <span class="keyword">new</span> DefaultEventExecutorGroup(</span><br><span class="line">        <span class="comment">//默认8</span></span><br><span class="line">        nettyServerConfig.getServerWorkerThreads(),</span><br><span class="line">        <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger threadIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">&quot;NettyServerCodecThread_&quot;</span> + <span class="keyword">this</span>.threadIndex.incrementAndGet());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    ServerBootstrap childHandler =</span><br><span class="line">        <span class="keyword">this</span>.serverBootstrap.group(<span class="keyword">this</span>.eventLoopGroupBoss, <span class="keyword">this</span>.eventLoopGroupSelector)</span><br><span class="line">            .channel(useEpoll() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)</span><br><span class="line">            .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">            .option(ChannelOption.SO_REUSEADDR, <span class="keyword">true</span>)</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">            .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">false</span>)</span><br><span class="line">        <span class="comment">//禁用了Nagle算法，允许小包的发送</span></span><br><span class="line">            .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">        <span class="comment">//发送缓冲区大小，默认65535</span></span><br><span class="line">            .childOption(ChannelOption.SO_SNDBUF, nettyServerConfig.getServerSocketSndBufSize())</span><br><span class="line">        <span class="comment">//接收缓冲区大小，默认65535</span></span><br><span class="line">            .childOption(ChannelOption.SO_RCVBUF, nettyServerConfig.getServerSocketRcvBufSize())</span><br><span class="line">        <span class="comment">//绑定端口，默认8888</span></span><br><span class="line">            .localAddress(<span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.nettyServerConfig.getListenPort()))</span><br><span class="line">            .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ch.pipeline()</span><br><span class="line">                        .addLast(defaultEventExecutorGroup, HANDSHAKE_HANDLER_NAME,</span><br><span class="line">                            <span class="keyword">new</span> HandshakeHandler(TlsSystemConfig.tlsMode))</span><br><span class="line">                        .addLast(defaultEventExecutorGroup,</span><br><span class="line">                            <span class="keyword">new</span> NettyEncoder(),</span><br><span class="line">                            <span class="keyword">new</span> NettyDecoder(),</span><br><span class="line">                            <span class="keyword">new</span> IdleStateHandler(<span class="number">0</span>, <span class="number">0</span>, nettyServerConfig.getServerChannelMaxIdleTimeSeconds()),</span><br><span class="line">                            <span class="keyword">new</span> NettyConnectManageHandler(),</span><br><span class="line">                            <span class="keyword">new</span> NettyServerHandler()</span><br><span class="line">                        );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nettyServerConfig.isServerPooledByteBufAllocatorEnable()) &#123;</span><br><span class="line">        childHandler.childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ChannelFuture sync = <span class="keyword">this</span>.serverBootstrap.bind().sync();</span><br><span class="line">        InetSocketAddress addr = (InetSocketAddress) sync.channel().localAddress();</span><br><span class="line">        <span class="keyword">this</span>.port = addr.getPort();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;this.serverBootstrap.bind().sync() InterruptedException&quot;</span>, e1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.channelEventListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nettyEventExecutor.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                NettyRemotingServer.<span class="keyword">this</span>.scanResponseTable();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;scanResponseTable exception&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span> * <span class="number">3</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/hexo/post/3ad834c9.html"/>
      <url>/hexo/post/3ad834c9.html</url>
      
        <content type="html"><![CDATA[<p><strong>CAP</strong> </p><blockquote><p>CAP由Eric Brewer在2000年PODC会议上提出[1][2]，是Eric Brewer在Inktomi[3]期间研发搜索引擎、分布式web缓存时得出的关于数据一致性(consistency)、服务可用性(availability)、分区容错性(partition-tolerance)的猜想：</p></blockquote><ul><li>数据一致性(consistency)：如果系统对一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有读操作都不能读到这个数据，对调用者而言数据具有强一致性(strong consistency) (又叫原子性 atomic、线性一致性 linearizable consistency)[5]</li><li>服务可用性(availability)：所有读写请求在一定时间内得到响应，可终止、不会一直等待</li><li>分区容错性(partition-tolerance)：在网络分区的情况下，被分隔的节点仍能正常对外服务</li></ul><p>在某时刻如果满足AP，分隔的节点同时对外服务但不能相互通信，将导致状态不一致，即不能满足C；如果满足CP，网络分区的情况下为达成C，请求只能一直等待，即不满足A；如果要满足CA，在一定时间内要达到节点状态一致，要求不能出现网络分区，则不能满足P。</p><p>C、A、P三者最多只能满足其中两个，和FLP定理一样，CAP定理也指示了一个不可达的结果(impossibility result)。</p><p>在满足分区容错的前提下，没有算法能同时满足数据一致性和服务可用性[11]：</p><p>P 是必选项，那3选2的选择题不就变成数据一致性(consistency)、服务可用性(availability) 2选1？工程实践中一致性有不同程度，可用性也有不同等级，在保证分区容错性的前提下，放宽约束后可以兼顾一致性和可用性，两者不是非此即彼[12]。</p><span id="more"></span><ul><li>序列一致性(sequential consistency)[13]：不要求时序一致，A操作先于B操作，在B操作后如果所有调用端读操作得到A操作的结果，满足序列一致性</li><li>最终一致性(eventual consistency)[14]：放宽对时间的要求，在被调完成操作响应后的某个时间点，被调多个节点的数据最终达成一致</li></ul><p>可用性在CAP定理里指所有读写操作必须要能终止，实际应用中从主调、被调两个不同的视角，可用性具有不同的含义。当P(网络分区)出现时，主调可以只支持读操作，通过牺牲部分可用性达成数据一致。</p><p>工程实践中，较常见的做法是通过异步拷贝副本(asynchronous replication)、quorum/NRW，实现在调用端看来数据强一致、被调端最终一致，在调用端看来服务可用、被调端允许部分节点不可用(或被网络分隔)的效果[15]。</p><p>例如延时(latency)，它是衡量系统可用性、与用户体验直接相关的一项重要指标[16]。CAP理论中的可用性要求操作能终止、不无休止地进行，除此之外，我们还关心到底需要多长时间能结束操作，这就是延时，它值得我们设计、实现分布式系统时单列出来考虑。</p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><p>临时结点（ephemeral）：1.创建该node的客户端会话超时或主动关闭2.某客户端删除</p><p>持久化结点（persistent）</p><p>有序结点（sequential）：自增整数会被加到路径之后</p><p>监听（watch）和通知（notification）：客户端向zk注册需要接收通知的znode，通过对znode设置监视点来接收通知</p><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>前台运行并查看输出<br><code>bin/zkServer.sh start-foreground</code></p><p><img src="https://user-images.githubusercontent.com/7789698/32696391-7873f59a-c73c-11e7-975c-5a8489cc0e75.png" alt="image"></p><p><code>create /absurd &#39;&quot;&#39;</code></p><p><code>delete /absurd</code></p><h2 id="会话的状态和声明周期"><a href="#会话的状态和声明周期" class="headerlink" title="会话的状态和声明周期"></a>会话的状态和声明周期</h2><p>CONNECTING、CONNECTED、CLOSED、NOT_CONNECTED</p><p><img src="https://user-images.githubusercontent.com/7789698/32696552-b3a6a82a-c740-11e7-9c24-4d0af715b5e0.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/32696435-d422efd0-c73d-11e7-975b-04c227aa24c2.png" alt="image"></p><h3 id="会话超时时间"><a href="#会话超时时间" class="headerlink" title="会话超时时间"></a>会话超时时间</h3><p>如果经过T时间后服务接收不到会话任何消息，服务就会声明会话过期。客户端侧，如果经过T/3时间未接收到任何消息，客户端将发送心跳消息。经过2T/3时间后，开始寻找其他服务器。当尝试连接到不同服务器时，服务器的zk要与最后连接的服务器的zk状态保持最新。客户端不能连接到 一个未发现更新而客户端已经发现的更新，Zookeeper通过在服务中排序更新操作来决定新鲜程度(Freshness)。每一个对Zookeeper布局状态的改动操作相对于所有其它执行的更新操作都是全序的，所以如果一个客户端已经在位置i观察到一个更新，它不能连接一个仅看到i’ &lt; i的服务器。在ZooKeeper的实现中，系统分配给每个更新操作一个事务ID来建立这个顺序。</p><p><img src="https://user-images.githubusercontent.com/7789698/32696557-cda6df88-c740-11e7-84c5-f9344ab2ab26.png" alt="image"><br>客户端因为超时和s1断开连接后，它尝试连接s2，但是s2已经落后了，并不能反应客户端已知的更新。而s3已经看到和客户端一样看到的更新，所以它被安全连接。</p><blockquote><p>server.1=127.0.0.1:2222:2223<br>server.2=127.0.0.1:3333:3334<br>server.3=127.0.0.1:4444:4445</p></blockquote><p>ip(hostname):port(仲裁):port(群首选举)</p><blockquote><p>mkdir z1<br>mkdir z1/data<br>echo 1&gt; z1/data/myid<br>mkdir z2<br>mkdir z2/data<br>echo 2&gt; z2/data/myid<br>mkdir z3<br>mkdir z3/data<br>echo 3&gt; z3/data/myid</p></blockquote><p>设置监视点：<br>getData、getChildren、exists都可以在读取的znode设置监视点<br>会话状态（KeeperState）：Disconnected (0)、 SyncConnected (3)、AuthFailed (4)、 ConnectedReadOnly (5)、SaslAuthenticated(6)、Expired (-112);<br>事件状态（EventType）：None (-1)、 NodeCreated (1)、 NodeDeleted (2)、NodeDataChanged (3)、NodeChildrenChanged (4);</p><p>监视点一旦设置就无法移除，1.触发这个监视点2.使其会话关闭或者过期</p><p>如果想无限监听，使用ZkClient的subscribeDataChanges或者CuratorFramework的TreeCache.getListenable().addListener</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//监听指定节点的数据变化</span><br><span class="line"> zk.subscribeDataChanges(nodeName, new IZkDataListener() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void handleDataChange(String s, Object o) throws Exception &#123;</span><br><span class="line">         logger.info(&quot;node data changed!&quot;);</span><br><span class="line">         logger.info(&quot;node=&gt;&quot; + s);</span><br><span class="line">         logger.info(&quot;data=&gt;&quot; + o);</span><br><span class="line">         logger.info(&quot;--------------&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void handleDataDeleted(String s) throws Exception &#123;</span><br><span class="line">         logger.info(&quot;node data deleted!&quot;);</span><br><span class="line">         logger.info(&quot;s=&gt;&quot; + s);</span><br><span class="line">         logger.info(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TreeCache treeCache = new TreeCache(client,path);</span><br><span class="line">treeCache.getListenable().addListener( new TreeCacheListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception &#123;</span><br><span class="line">        ChildData data = event.getData();</span><br><span class="line">        if(data != null)&#123;</span><br><span class="line">            switch (event.getType())&#123;</span><br><span class="line">                case NODE_ADDED:</span><br><span class="line">                case NODE_REMOVED:</span><br><span class="line">                case NODE_UPDATED:</span><br><span class="line">                    System.out.println(event.getType().name()+&quot;:&quot;+new String(event.getData().getData()));</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">treeCache.start();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 一致性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从源码了解spring MVC</title>
      <link href="/hexo/post/da0ac317.html"/>
      <url>/hexo/post/da0ac317.html</url>
      
        <content type="html"><![CDATA[<p>一般要让springmvc生效，我们都在web.xml配上这么一段 </p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>记得以前很早的时候刚开始学java web的时候都是直接继承HttpServlet然后写的，这个当然也不例外，<br><img src="https://user-images.githubusercontent.com/7789698/32280463-f0a242e8-bee9-11e7-973d-9c9b3a9461c8.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/32544587-d40df77e-c4b3-11e7-8e2d-c77cb5e1c3c9.png" alt="sequencediagram1"></p><p>Servlet接口 包括 <code>public void init(ServletConfig config) throws ServletException;</code>、 <code> public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;</code>、<code>public void destroy();</code></p><p>在DispatcherServlet父类FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());</span><br><span class="line"><span class="keyword">if</span> (HttpMethod.PATCH == httpMethod || httpMethod == <span class="keyword">null</span>) &#123;<span class="comment">//因为HttpServlet没有实现对PATCH的支持</span></span><br><span class="line">processRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">super</span>.service(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后根据请求调用的又是FrameworkServlet的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">processRequest(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">doService(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">failureCause = ex;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">failureCause = ex;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">failureCause = ex;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line"><span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">requestAttributes.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(<span class="string">&quot;Could not complete request&quot;</span>, failureCause);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Leaving response open for concurrent processing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(<span class="string">&quot;Successfully completed request&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class="string">&quot; resumed&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">logger.debug(<span class="string">&quot;DispatcherServlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span> + resumed +</span><br><span class="line"><span class="string">&quot; processing &quot;</span> + request.getMethod() + <span class="string">&quot; request for [&quot;</span> + getRequestUri(request) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line"><span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<span class="comment">//javax.servlet.include.request_uri </span></span><br><span class="line">attributesSnapshot = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line"><span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">String attrName = (String) attrNames.nextElement();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(<span class="string">&quot;org.springframework.web.servlet&quot;</span>)) &#123;</span><br><span class="line">attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"><span class="comment">//转发 request是不变的，重定向会生成新的request，那传递参数就不能直接用request进行传递。通过FlashMap存储一个请求的输出，当进入另一个请求时作为该请求的输入，典型场景如重定向（POST-REDIRECT-GET模式，1、POST时将下一次需要的数据放在FlashMap；2、重定向；3、通过GET访问重定向的地址，此时FlashMap会把1放到FlashMap的数据取出放到请求中，并从FlashMap中删除；从而支持在两次请求之间保存数据并防止了重复表单提交）。</span></span><br><span class="line">FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line"><span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">&#125;</span><br><span class="line">request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">doDispatch(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line"><span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>doDispatch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">processedRequest = checkMultipart(request);<span class="comment">//文件上传,返回MultipartHttpServletRequest对象，如果不是则返回原始对象</span></span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);<span class="comment">//HandlerMapping找到对应handler</span></span><br><span class="line"><span class="comment">//BeanNameUrlHandlerMapping ：通过对比url和bean的name找到对应的对象 </span></span><br><span class="line"><span class="comment">//SimpleUrlHandlerMapping ：也是直接配置url和对应bean,比BeanNameUrlHandlerMapping功能更多 </span></span><br><span class="line"><span class="comment">//DefaultAnnotationHandlerMapping : 主要是针对注解配置@RequestMapping的，已过时 </span></span><br><span class="line"><span class="comment">//RequestMappingHandlerMapping ：取代了上面一个 </span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line"><span class="comment">//HttpRequestHandlerAdapter ： 要求handler实现HttpRequestHandler接口，该接口的方法为                                                             void handleRequest(HttpServletRequest request, HttpServletResponse response)也就是  handler必须有一个handleRequest方法 </span></span><br><span class="line"><span class="comment">//SimpleControllerHandlerAdapter：要求handler实现Controller接口，该接口的方法为ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)，也就是本工程采用的 </span></span><br><span class="line"><span class="comment">//AnnotationMethodHandlerAdapter ：和上面的DefaultAnnotationHandlerMapping配对使用的，也已过时 </span></span><br><span class="line"><span class="comment">//RequestMappingHandlerAdapter : 和上面的RequestMappingHandlerMapping配对使用，针对@RequestMapping </span></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());<span class="comment">//由handler 找到对应的HandlerAdapter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line"><span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line"><span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Last-Modified value for [&quot;</span> + getRequestUri(request) + <span class="string">&quot;] is: &quot;</span> + lastModified);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                               <span class="comment">//HandlerInterceptor的preHandle</span></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                               <span class="comment">//设置一个默认的视图名，用在某些直接返回model的</span></span><br><span class="line">applyDefaultViewName(processedRequest, mv);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">//HandlerInterceptor postHandle</span></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line"><span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line"><span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line"><span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line"><span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>getHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(</span><br><span class="line"><span class="string">&quot;Testing handler map [&quot;</span> + hm + <span class="string">&quot;] in DispatcherServlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getHandlerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;Testing handler adapter [&quot;</span> + ha + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果适配，就返回HandlerAdapter</span></span><br><span class="line"><span class="keyword">if</span> (ha.supports(handler)) &#123;</span><br><span class="line"><span class="keyword">return</span> ha;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class="line"><span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processDispatchResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Did the handler return a view to render?</span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">render(mv, request, response);</span><br><span class="line"><span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Null ModelAndView returned to DispatcherServlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line"><span class="string">&quot;&#x27;: assuming HandlerAdapter completed request handling&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//HandlerInterceptor的afterCompletion</span></span><br><span class="line">mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// Determine locale for request and apply it to the response.</span></span><br><span class="line">Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</span><br><span class="line">response.setLocale(locale);</span><br><span class="line"></span><br><span class="line">View view;</span><br><span class="line"><span class="keyword">if</span> (mv.isReference()) &#123;</span><br><span class="line"><span class="comment">// 解析视图名</span></span><br><span class="line">view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br><span class="line"><span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +</span><br><span class="line"><span class="string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">view = mv.getView();</span><br><span class="line"><span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;ModelAndView [&quot;</span> + mv + <span class="string">&quot;] neither contains a view name nor a &quot;</span> +</span><br><span class="line"><span class="string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delegate to the View object for rendering.</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Rendering view [&quot;</span> + view + <span class="string">&quot;] in DispatcherServlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">response.setStatus(mv.getStatus().value());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里决定究竟是转发还是重定向,或者说变成其他视图</span></span><br><span class="line">view.render(mv.getModelInternal(), request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Error rendering view [&quot;</span> + view + <span class="string">&quot;] in DispatcherServlet with name &#x27;&quot;</span> +</span><br><span class="line">getServletName() + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;Rendering view with name &#x27;&quot;</span> + <span class="keyword">this</span>.beanName + <span class="string">&quot;&#x27; with model &quot;</span> + model +</span><br><span class="line"><span class="string">&quot; and static attributes &quot;</span> + <span class="keyword">this</span>.staticAttributes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class="line">prepareResponse(request, response);</span><br><span class="line">renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(Map&lt;String, Object&gt; model, //</span></span></span><br><span class="line"><span class="params"><span class="function">                                           HttpServletRequest request, //</span></span></span><br><span class="line"><span class="params"><span class="function">                                           HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object value = filterModel(model);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream outnew = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = JSON.writeJSONString(outnew, <span class="comment">//</span></span><br><span class="line">                fastJsonConfig.getCharset(), <span class="comment">//</span></span><br><span class="line">                value, <span class="comment">//</span></span><br><span class="line">                fastJsonConfig.getSerializeConfig(), <span class="comment">//</span></span><br><span class="line">                fastJsonConfig.getSerializeFilters(), <span class="comment">//</span></span><br><span class="line">                fastJsonConfig.getDateFormat(), <span class="comment">//</span></span><br><span class="line">                JSON.DEFAULT_GENERATE_FEATURE, <span class="comment">//</span></span><br><span class="line">                fastJsonConfig.getSerializerFeatures());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.updateContentLength) &#123;</span><br><span class="line">            <span class="comment">// Write content length (determined via byte array).</span></span><br><span class="line">            response.setContentLength(len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Flush byte array to servlet output stream.</span></span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        outnew.writeTo(out);</span><br><span class="line">        outnew.close();</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="HandlerExecutionChain"><a href="#HandlerExecutionChain" class="headerlink" title="HandlerExecutionChain"></a>HandlerExecutionChain</h2><p>1请求对应的控制器<br>2拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class="line">HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line"><span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">interceptor.afterCompletion(request, response, <span class="keyword">this</span>.handler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h2><p>初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerAdapters</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.handlerAdapters = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerAdapters) &#123;</span><br><span class="line"><span class="comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">Map&lt;String, HandlerAdapter&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerAdapters = <span class="keyword">new</span> ArrayList&lt;HandlerAdapter&gt;(matchingBeans.values());</span><br><span class="line"><span class="comment">// We keep HandlerAdapters in sorted order.</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerAdapters);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);</span><br><span class="line"><span class="keyword">this</span>.handlerAdapters = Collections.singletonList(ha);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore, we&#x27;ll add a default HandlerAdapter later.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure we have at least some HandlerAdapters, by registering</span></span><br><span class="line"><span class="comment">// default HandlerAdapters if no other adapters are found.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerAdapters = getDefaultStrategies(context, HandlerAdapter.class);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;No HandlerAdapters found in servlet &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;: using default&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractHandlerMethodAdapter#handle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ModelAndView mav;</span><br><span class="line"><span class="comment">//检查request是支持的method和是否需要session</span></span><br><span class="line">checkRequest(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果session级别，则同步</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line"><span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line"><span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">applyCacheSeconds(response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">prepareResponse(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">Object result = asyncManager.getConcurrentResult();</span><br><span class="line">mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">asyncManager.clearConcurrentResult();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Found concurrent result value [&quot;</span> + result + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最重要的地方，执行</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">webRequest.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServletInvocableHandlerMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest,</span></span></span><br><span class="line"><span class="params"><span class="function">ModelAndViewContainer mavContainer, Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isRequestNotModified(webRequest) || hasResponseStatus() || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.responseReason)) &#123;</span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(getReturnValueHandlingErrorMessage(<span class="string">&quot;Error handling return value&quot;</span>, returnValue), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Invoking [&quot;</span>);</span><br><span class="line">sb.append(getBeanType().getSimpleName()).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">sb.append(getMethod().getName()).append(<span class="string">&quot;] method with arguments &quot;</span>);</span><br><span class="line">sb.append(Arrays.asList(args));</span><br><span class="line">logger.trace(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">Object returnValue = doInvoke(args);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;Method [&quot;</span> + getMethod().getName() + <span class="string">&quot;] returned [&quot;</span> + returnValue + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ReflectionUtils.makeAccessible(getBridgedMethod());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//通过反射</span></span><br><span class="line"><span class="keyword">return</span> getBridgedMethod().invoke(getBean(), args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">assertTargetBean(getBridgedMethod(), getBean(), args);</span><br><span class="line">String message = (ex.getMessage() != <span class="keyword">null</span> ? ex.getMessage() : <span class="string">&quot;Illegal argument&quot;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getInvocationErrorMessage(message, args), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="comment">// Unwrap for HandlerExceptionResolvers ...</span></span><br><span class="line">Throwable targetException = ex.getTargetException();</span><br><span class="line"><span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line"><span class="keyword">throw</span> (RuntimeException) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Error) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Exception) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">String msg = getInvocationErrorMessage(<span class="string">&quot;Failed to invoke controller method&quot;</span>, args);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg, targetException);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h2><p>题外，这个是如何初始化的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;<span class="comment">//判断是否默认添加所有的HandlerMappings,初始值是默认添加的</span></span><br><span class="line"><span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</span><br><span class="line"><span class="comment">// 通过@order注解去排序</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不是默认添加所有的，那么就去context中找一个声明的bean</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore, we&#x27;ll add a default HandlerMapping later.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line"><span class="comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line"><span class="comment">//如果上面两步没有找到可以使用的handlerMapping，那么就采用默认的handlerMapping</span></span><br><span class="line">        <span class="comment">//默认的HandlerMapping都定义在了DispatcherServlet.properties中，大致定义了如下两个</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;No HandlerMappings found in servlet &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;: using default&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis设计与实现 阅读笔记</title>
      <link href="/hexo/post/c6de90cc.html"/>
      <url>/hexo/post/c6de90cc.html</url>
      
        <content type="html"><![CDATA[<p>1.redis数据结构</p><h1 id="简单字符串"><a href="#简单字符串" class="headerlink" title="简单字符串"></a>简单字符串</h1><p>redis专门封装了一个叫SDS的数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="comment">// 记录 buf 数组中已使用字节的数量</span></span><br><span class="line">    <span class="comment">// 等于 SDS 所保存字符串的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录 buf 数组中未使用字节的数量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字节数组，用于保存字符串</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>free 属性的值为 0 ， 表示这个 SDS 没有分配任何未使用空间。</li><li>len 属性的值为 5 ， 表示这个 SDS 保存了一个五字节长的字符串。（strlen的复杂度就从O(n)变为O(1)）</li><li>buf 属性是一个 char 类型的数组， 数组的前五个字节分别保存了 ‘R’ 、 ‘e’ 、 ‘d’ 、 ‘i’ 、 ‘s’ 五个字符， 而最后一个字节则保存了空字符 ‘\0’ 。</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/30947484-9f4c6148-a43c-11e7-8ea0-7c1772c45dab.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/30947884-e653020c-a43e-11e7-8692-0afa793643a5.png" alt="2015-09-13_55f50d86a66ae"></p><p>优点：</p><ul><li>常数复杂度获取字符串长度</li><li>杜绝缓冲区溢出<br>举个例子， &lt;string.h&gt;/strcat 函数可以将 src 字符串中的内容拼接到 dest 字符串的末尾：</li></ul><p><code>char *strcat(char *dest, const char *src);</code></p><p>因为 C 字符串不记录自身的长度， 所以 strcat 假定用户在执行这个函数时， 已经为 dest 分配了足够多的内存， 可以容纳 src 字符串中的所有内容， 而一旦这个假定不成立时， 就会产生缓冲区溢出。<br>举个例子， 假设程序里有两个在内存中紧邻着的 C 字符串 s1 和 s2 ， 其中 s1 保存了字符串 “Redis” ， 而 s2 则保存了字符串 “MongoDB”， 如图 2-7 所示。<br><img src="https://user-images.githubusercontent.com/7789698/30947756-fd52851e-a43d-11e7-8401-edab070fb25f.png" alt="2015-09-13_55f50e28c1620"></p><p><code>strcat(s1, &quot; Cluster&quot;);</code></p><p>将 s1 的内容修改为 “Redis Cluster” ， 但粗心的他却忘了在执行 strcat 之前为 s1 分配足够的空间， 那么在 strcat 函数执行之后， s1 的数据将溢出到 s2 所在的空间中， 导致 s2 保存的内容被意外地修改， 如图 2-8 所示。<br><img src="https://user-images.githubusercontent.com/7789698/30947766-13d71c50-a43e-11e7-97c3-79d7595df328.png" alt="2015-09-13_55f50e29e04a2"></p><p>与 C 字符串不同， SDS 的空间分配策略完全杜绝了发生缓冲区溢出的可能性： 当 SDS API 需要对 SDS 进行修改时， API 会先检查 SDS 的空间是否满足修改所需的要求， 如果不满足的话， API 会自动将 SDS 的空间扩展至执行修改所需的大小， 然后才执行实际的修改操作， 所以使用 SDS 既不需要手动修改 SDS 的空间大小， 也不会出现前面所说的缓冲区溢出问题。</p><p>举个例子， SDS 的 API 里面也有一个用于执行拼接操作的 sdscat 函数， 它可以将一个 C 字符串拼接到给定 SDS 所保存的字符串的后面， 但是在执行拼接操作之前， sdscat 会先检查给定 SDS 的空间是否足够， 如果不够的话， sdscat 就会先扩展 SDS 的空间， 然后才执行拼接操作。</p><p><img src="https://user-images.githubusercontent.com/7789698/30947776-2a5fdf48-a43e-11e7-9280-7da4112f1fd5.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7789698/30947789-3d2738a6-a43e-11e7-92f8-214bcc0c63ab.png" alt="image"></p><ul><li>减少修改字符串时带来的内存重分配次数<br> 因为 C 字符串并不记录自身的长度， 所以对于一个包含了 N 个字符的 C 字符串来说， 这个 C 字符串的底层实现总是一个 N+1 个字符长的数组（额外的一个字符空间用于保存空字符）。<br> 因为 C 字符串的长度和底层数组的长度之间存在着这种关联性， 所以每次增长或者缩短一个 C 字符串， 程序都总要对保存这个 C 字符串的数组进行一次内存重分配操作：</li></ul><p>如果程序执行的是增长字符串的操作， 比如拼接操作（append）， 那么在执行这个操作之前， 程序需要先通过内存重分配来扩展底层数组的空间大小 —— 如果忘了这一步就会产生缓冲区溢出。<br>如果程序执行的是缩短字符串的操作， 比如截断操作（trim）， 那么在执行这个操作之后， 程序需要通过内存重分配来释放字符串不再使用的那部分空间 —— 如果忘了这一步就会产生内存泄漏。<br>举个例子， 如果我们持有一个值为 “Redis” 的 C 字符串 s ， 那么为了将 s 的值改为 “Redis Cluster” ， 在执行：<br><code>strcat(s, &quot; Cluster&quot;);</code></p><p>为了避免 C 字符串的这种缺陷， SDS 通过未使用空间解除了字符串长度和底层数组长度之间的关联： 在 SDS 中， buf 数组的长度不一定就是字符数量加一， 数组里面可以包含未使用的字节， 而这些字节的数量就由 SDS 的 free 属性记录。<br>通过未使用空间， SDS 实现了空间预分配和惰性空间释放两种优化策略。</p><ul><li>空间预分配<br>空间预分配用于优化 SDS 的字符串增长操作： 当 SDS 的 API 对一个 SDS 进行修改， 并且需要对 SDS 进行空间扩展的时候， 程序不仅会为 SDS 分配修改所必须要的空间， 还会为 SDS 分配额外的未使用空间。</li></ul><p>其中， 额外分配的未使用空间数量由以下公式决定：</p><p>如果对 SDS 进行修改之后， SDS 的长度（也即是 len 属性的值）将小于 1 MB ， 那么程序分配和 len 属性同样大小的未使用空间， 这时 SDS len 属性的值将和 free 属性的值相同。 举个例子， 如果进行修改之后， SDS 的 len 将变成 13 字节， 那么程序也会分配13 字节的未使用空间， SDS 的 buf 数组的实际长度将变成 13 + 13 + 1 = 27 字节（额外的一字节用于保存空字符）。</p><p>如果对 SDS 进行修改之后， SDS 的长度将大于等于 1 MB ， 那么程序会分配 1 MB 的未使用空间。 举个例子， 如果进行修改之后， SDS 的 len 将变成 30 MB ， 那么程序会分配 1 MB 的未使用空间， SDS 的 buf 数组的实际长度将为 30 MB + 1 MB + 1 byte 。</p><p><code>sdscat(s, &quot; Cluster&quot;);</code></p><p>那么 sdscat 将执行一次内存重分配操作， 将 SDS 的长度修改为 13 字节， 并将 SDS 的未使用空间同样修改为 13 字节， 如图 2-12 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30948189-d2db4002-a440-11e7-8e25-6102a31d740e.png" alt="2015-09-13_55f50e329713a"></p><p><img src="https://user-images.githubusercontent.com/7789698/30948205-e30d41b4-a440-11e7-81c8-233008f63d47.png" alt="2015-09-13_55f50e33eb3a4"></p><p>如果这时， 我们再次对 s 执行：<br><code>sdscat(s, &quot; Tutorial&quot;);</code><br>那么这次 sdscat 将不需要执行内存重分配： 因为未使用空间里面的 13 字节足以保存 9 字节的 “ Tutorial” ， 执行 sdscat 之后的 SDS 如图 2-13 所示。<br><img src="https://user-images.githubusercontent.com/7789698/30948239-15dd7988-a441-11e7-94a1-4abf8aea7ec3.png" alt="image"></p><p>在扩展 SDS 空间之前， SDS API 会先检查未使用空间是否足够， 如果足够的话， API 就会直接使用未使用空间， 而无须执行内存重分配。</p><p>通过这种预分配策略， SDS 将连续增长 N 次字符串所需的内存重分配次数从必定 N 次降低为最多 N 次。</p><ul><li>惰性空间释放</li></ul><p>惰性空间释放用于优化 SDS 的字符串缩短操作： 当 SDS 的 API 需要缩短 SDS 保存的字符串时， 程序并不立即使用内存重分配来回收缩短后多出来的字节， 而是使用 free 属性将这些字节的数量记录起来， 并等待将来使用。<br>举个例子， sdstrim 函数接受一个 SDS 和一个 C 字符串作为参数， 从 SDS 左右两端分别移除所有在 C 字符串中出现过的字符。</p><p>sdstrim(s, “XY”);   // 移除 SDS 字符串中的所有 ‘X’ 和 ‘Y’</p><p>会将 SDS 修改成图 2-15 所示的样子。</p><p><img src="https://user-images.githubusercontent.com/7789698/30948262-4073db6a-a441-11e7-9a09-397fda3aad4d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/7789698/30948275-4ecc74f6-a441-11e7-95dd-3a949dce7868.png" alt="image"></p><p>注意执行 sdstrim 之后的 SDS 并没有释放多出来的 8 字节空间， 而是将这 8 字节空间作为未使用空间保留在了 SDS 里面， 如果将来要对 SDS 进行增长操作的话， 这些未使用空间就可能会派上用场。</p><ul><li>二进制安全<br> SDS 的 API 都是二进制安全的（binary-safe）： 所有 SDS API 都会以处理二进制的方式来处理 SDS 存放在 buf 数组里的数据， 程序不会对其中的数据做任何限制、过滤、或者假设 —— 数据在写入时是什么样的， 它被读取时就是什么样。</li></ul><ul><li>兼容部分 C 字符串函数</li></ul><img width="938" alt="wx20170928-114705 2x" src="https://user-images.githubusercontent.com/7789698/30948471-d65552d4-a442-11e7-9570-3422d7570b40.png"><img width="937" alt="wx20170928-114913 2x" src="https://user-images.githubusercontent.com/7789698/30948529-1574ae24-a443-11e7-9c56-87f4047aeb57.png"><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; LLEN integers</span><br><span class="line">(integer) 1024</span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE integers 0 10</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">6) &quot;6&quot;</span><br><span class="line">7) &quot;7&quot;</span><br><span class="line">8) &quot;8&quot;</span><br><span class="line">9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br><span class="line">11) &quot;11&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct listNode &#123;</span><br><span class="line"></span><br><span class="line">    // 前置节点</span><br><span class="line">    struct listNode *prev;</span><br><span class="line"></span><br><span class="line">    // 后置节点</span><br><span class="line">    struct listNode *next;</span><br><span class="line"></span><br><span class="line">    // 节点的值</span><br><span class="line">    void *value;</span><br><span class="line"></span><br><span class="line">&#125; listNode;</span><br></pre></td></tr></table></figure><p>多个 listNode 可以通过 prev 和 next 指针组成双端链表， 如图 3-1 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30948577-86fe8d4e-a443-11e7-8700-e9ab993d2bfb.png" alt="2015-09-13_55f50fad082e3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">typedef struct list &#123;</span><br><span class="line"></span><br><span class="line">    // 表头节点</span><br><span class="line">    listNode *head;</span><br><span class="line"></span><br><span class="line">    // 表尾节点</span><br><span class="line">    listNode *tail;</span><br><span class="line"></span><br><span class="line">    // 链表所包含的节点数量</span><br><span class="line">    unsigned long len;</span><br><span class="line"></span><br><span class="line">    // 节点值复制函数</span><br><span class="line">    void *(*dup)(void *ptr);</span><br><span class="line"></span><br><span class="line">    // 节点值释放函数</span><br><span class="line">    void (*free)(void *ptr);</span><br><span class="line"></span><br><span class="line">    // 节点值对比函数</span><br><span class="line">    int (*match)(void *ptr, void *key);</span><br><span class="line"></span><br><span class="line">&#125; list;</span><br></pre></td></tr></table></figure><p>list 结构为链表提供了表头指针 head 、表尾指针 tail ， 以及链表长度计数器 len ， 而 dup 、 free 和 match 成员则是用于实现多态链表所需的类型特定函数：</p><p>dup 函数用于复制链表节点所保存的值；<br>free 函数用于释放链表节点所保存的值；<br>match 函数则用于对比链表节点所保存的值和另一个输入值是否相等。</p><p><img src="https://user-images.githubusercontent.com/7789698/30948645-d81d4d82-a443-11e7-9f03-1141889620b2.png" alt="2015-09-13_55f50fb39b6cb"></p><p>Redis 的链表实现的特性可以总结如下：</p><ol><li>双端： 链表节点带有 prev 和 next 指针， 获取某个节点的前置节点和后置节点的复杂度都是 O(1) 。</li><li>无环： 表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL ， 对链表的访问以 NULL 为终点。</li><li>带表头指针和表尾指针： 通过 list 结构的 head 指针和 tail 指针， 程序获取链表的表头节点和表尾节点的复杂度为 O(1) 。</li><li>带链表长度计数器： 程序使用 list 结构的 len 属性来对 list 持有的链表节点进行计数， 程序获取链表中节点数量的复杂度为 O(1)。</li><li>多态： 链表节点使用 void* 指针来保存节点值， 并且可以通过 list 结构的 dup 、 free 、 match 三个属性为节点值设置类型特定函数， 所以链表可以用于保存各种不同类型的值。</li></ol><img width="932" alt="wx20170928-120027 2x" src="https://user-images.githubusercontent.com/7789698/30949299-1988948a-a448-11e7-999d-3022b762da23.png"><img width="936" alt="wx20170928-120039 2x" src="https://user-images.githubusercontent.com/7789698/30949304-28391518-a448-11e7-89b0-409f58f7b079.png"><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典， 又称符号表（symbol table）、关联数组（associative array）或者映射（map）， 是一种用于保存键值对（key-value pair）的抽象数据结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; HLEN website</span><br><span class="line">(integer) 10086</span><br><span class="line"></span><br><span class="line">redis&gt; HGETALL website</span><br><span class="line">1) &quot;Redis&quot;</span><br><span class="line">2) &quot;Redis.io&quot;</span><br><span class="line">3) &quot;MariaDB&quot;</span><br><span class="line">4) &quot;MariaDB.org&quot;</span><br><span class="line">5) &quot;MongoDB&quot;</span><br><span class="line">6) &quot;MongoDB.org&quot;</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>其中一个键值对的键为 “Redis” ， 值为 “Redis.io” 。<br>另一个键值对的键为 “MariaDB” ， 值为 “MariaDB.org” ；<br>还有一个键值对的键为 “MongoDB” ， 值为 “MongoDB.org” ；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictht &#123;</span><br><span class="line"></span><br><span class="line">    // 哈希表数组</span><br><span class="line">    dictEntry **table;</span><br><span class="line"></span><br><span class="line">    // 哈希表大小</span><br><span class="line">    unsigned long size;</span><br><span class="line"></span><br><span class="line">    // 哈希表大小掩码，用于计算索引值</span><br><span class="line">    // 总是等于 size - 1</span><br><span class="line">    unsigned long sizemask;</span><br><span class="line"></span><br><span class="line">    // 该哈希表已有节点的数量</span><br><span class="line">    unsigned long used;</span><br><span class="line"></span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><p>table 属性是一个数组， 数组中的每个元素都是一个指向 dict.h/dictEntry 结构的指针， 每个 dictEntry 结构保存着一个键值对。<br>size 属性记录了哈希表的大小， 也即是 table 数组的大小， 而 used 属性则记录了哈希表目前已有节点（键值对）的数量。<br>sizemask 属性的值总是等于 size - 1 ， 这个属性和哈希值一起决定一个键应该被放到 table 数组的哪个索引上面。</p><p><img src="https://user-images.githubusercontent.com/7789698/30949367-7e5f2860-a448-11e7-8339-6cefb372aa0e.png" alt="2015-09-13_55f511fc9428c"></p><ul><li>哈希表节点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictEntry &#123;</span><br><span class="line"></span><br><span class="line">    // 键</span><br><span class="line">    void *key;</span><br><span class="line"></span><br><span class="line">    // 值</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">    &#125; v;</span><br><span class="line"></span><br><span class="line">    // 指向下个哈希表节点，形成链表</span><br><span class="line">    struct dictEntry *next;</span><br><span class="line"></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p>key 属性保存着键值对中的键， 而 v 属性则保存着键值对中的值， 其中键值对的值可以是一个指针， 或者是一个 uint64_t 整数， 又或者是一个 int64_t 整数。</p><p>next 属性是指向另一个哈希表节点的指针， 这个指针可以将多个哈希值相同的键值对连接在一次， 以此来解决键冲突（collision）的问题。</p><p>举个例子， 图 4-2 就展示了如何通过 next 指针， 将两个索引值相同的键 k1 和 k0 连接在一起。</p><p><img src="https://user-images.githubusercontent.com/7789698/30951893-ec80c1f0-a457-11e7-8c93-374095b0234f.png" alt="2015-09-13_55f51205335f9"></p><ul><li>字典</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line"></span><br><span class="line">    // 类型特定函数</span><br><span class="line">    dictType *type;</span><br><span class="line"></span><br><span class="line">    // 私有数据</span><br><span class="line">    void *privdata;</span><br><span class="line"></span><br><span class="line">    // 哈希表</span><br><span class="line">    dictht ht[2];</span><br><span class="line"></span><br><span class="line">    // rehash 索引</span><br><span class="line">    // 当 rehash 不在进行时，值为 -1</span><br><span class="line">    int rehashidx; /* rehashing not in progress if rehashidx == -1 */</span><br><span class="line"></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>type 属性和 privdata 属性是针对不同类型的键值对， 为创建多态字典而设置的：</p><p>type 属性是一个指向 dictType 结构的指针， 每个 dictType 结构保存了一簇用于操作特定类型键值对的函数， Redis 会为用途不同的字典设置不同的类型特定函数。</p><p>而 privdata 属性则保存了需要传给那些类型特定函数的可选参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictType &#123;</span><br><span class="line"></span><br><span class="line">    // 计算哈希值的函数</span><br><span class="line">    unsigned int (*hashFunction)(const void *key);</span><br><span class="line"></span><br><span class="line">    // 复制键的函数</span><br><span class="line">    void *(*keyDup)(void *privdata, const void *key);</span><br><span class="line"></span><br><span class="line">    // 复制值的函数</span><br><span class="line">    void *(*valDup)(void *privdata, const void *obj);</span><br><span class="line"></span><br><span class="line">    // 对比键的函数</span><br><span class="line">    int (*keyCompare)(void *privdata, const void *key1, const void *key2);</span><br><span class="line"></span><br><span class="line">    // 销毁键的函数</span><br><span class="line">    void (*keyDestructor)(void *privdata, void *key);</span><br><span class="line"></span><br><span class="line">    // 销毁值的函数</span><br><span class="line">    void (*valDestructor)(void *privdata, void *obj);</span><br><span class="line"></span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure><p>ht 属性是一个包含两个项的数组， 数组中的每个项都是一个 dictht 哈希表， 一般情况下， 字典只使用 ht[0] 哈希表， ht[1] 哈希表只会在对 ht[0] 哈希表进行 rehash 时使用。</p><p>除了 ht[1] 之外， 另一个和 rehash 有关的属性就是 rehashidx ： 它记录了 rehash 目前的进度， 如果目前没有在进行 rehash ， 那么它的值为 -1 。</p><p>图 4-3 展示了一个普通状态下（没有进行 rehash）的字典：</p><p><img src="https://user-images.githubusercontent.com/7789698/30952389-48202166-a45a-11e7-87f9-7f641db990a8.png" alt="2015-09-13_55f5120772706"></p><ul><li>哈希算法</li></ul><p>当要将一个新的键值对添加到字典里面时， 程序需要先根据键值对的键计算出哈希值和索引值， 然后再根据索引值， 将包含新键值对的哈希表节点放到哈希表数组的指定索引上面。</p><p>Redis 计算哈希值和索引值的方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用字典设置的哈希函数，计算键 key 的哈希值</span><br><span class="line">hash = dict-&gt;type-&gt;hashFunction(key);</span><br><span class="line"></span><br><span class="line"># 使用哈希表的 sizemask 属性和哈希值，计算出索引值</span><br><span class="line"># 根据情况不同， ht[x] 可以是 ht[0] 或者 ht[1]</span><br><span class="line">index = hash &amp; dict-&gt;ht[x].sizemask;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/30952777-c41403b8-a45b-11e7-9cfc-d17d250c8f40.png" alt="2015-09-13_55f5128c90054"></p><p>举个例子， 对于图 4-4 所示的字典来说， 如果我们要将一个键值对 k0 和 v0 添加到字典里面， 那么程序会先使用语句：<br><code>hash = dict-&gt;type-&gt;hashFunction(k0);</code><br>计算键 k0 的哈希值。<br>假设计算得出的哈希值为 8 ， 那么程序会继续使用语句：<br><code>index = hash &amp; dict-&gt;ht[0].sizemask = 8 &amp; 3 = 0;</code><br>计算出键 k0 的索引值 0 ， 这表示包含键值对 k0 和 v0 的节点应该被放置到哈希表数组的索引 0 位置上， 如图 4-5 所示。<br><img src="https://user-images.githubusercontent.com/7789698/30952800-da4a106e-a45b-11e7-8b36-32757f62cd40.png" alt="2015-09-13_55f51293b4642"></p><p>当字典被用作数据库的底层实现， 或者哈希键的底层实现时， Redis 使用 MurmurHash2 算法来计算键的哈希值。</p><p>MurmurHash 算法最初由 Austin Appleby 于 2008 年发明， 这种算法的优点在于， 即使输入的键是有规律的， 算法仍能给出一个很好的随机分布性， 并且算法的计算速度也非常快。</p><p>MurmurHash 算法目前的最新版本为 MurmurHash3 ， 而 Redis 使用的是 MurmurHash2 ， 关于 MurmurHash 算法的更多信息可以参考该算法的主页： <a href="http://code.google.com/p/smhasher/">http://code.google.com/p/smhasher/</a> </p><ul><li>解决键冲突</li></ul><p>当有两个或以上数量的键被分配到了哈希表数组的同一个索引上面时， 我们称这些键发生了冲突（collision）。</p><p>Redis 的哈希表使用链地址法（separate chaining）来解决键冲突： 每个哈希表节点都有一个 next 指针， 多个哈希表节点可以用 next 指针构成一个单向链表， 被分配到同一个索引上的多个节点可以用这个单向链表连接起来， 这就解决了键冲突的问题。<br>举个例子， 假设程序要将键值对 k2 和 v2 添加到图 4-6 所示的哈希表里面， 并且计算得出 k2 的索引值为 2 ， 那么键 k1 和 k2 将产生冲突， 而解决冲突的办法就是使用 next 指针将键 k2 和 k1 所在的节点连接起来， 如图 4-7 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30953004-c158d1ca-a45c-11e7-9a67-c8ea8966fcc7.png" alt="2015-09-13_55f512c4d7f99"></p><p><img src="https://user-images.githubusercontent.com/7789698/30953007-c2a45824-a45c-11e7-9ac8-55f067e9898b.png" alt="2015-09-13_55f512c2524e5"></p><p>因为 dictEntry 节点组成的链表没有指向链表表尾的指针， 所以为了速度考虑， 程序总是将新节点添加到链表的表头位置（复杂度为 O(1)）， 排在其他已有节点的前面。</p><ul><li>rehash<br>随着操作的不断执行， 哈希表保存的键值对会逐渐地增多或者减少， 为了让哈希表的负载因子（load factor）维持在一个合理的范围之内， 当哈希表保存的键值对数量太多或者太少时， 程序需要对哈希表的大小进行相应的扩展或者收缩。</li></ul><p>扩展和收缩哈希表的工作可以通过执行 rehash （重新散列）操作来完成， Redis 对字典的哈希表执行 rehash 的步骤如下：</p><p>为字典的 ht[1] 哈希表分配空间， 这个哈希表的空间大小取决于要执行的操作， 以及 ht[0] 当前包含的键值对数量 （也即是ht[0].used 属性的值）：<br>如果执行的是扩展操作， 那么 ht[1] 的大小为第一个大于等于 ht[0].used * 2 的 2^n （2 的 n 次方幂）；<br>如果执行的是收缩操作， 那么 ht[1] 的大小为第一个大于等于 ht[0].used 的 2^n 。<br>将保存在 ht[0] 中的所有键值对 rehash 到 ht[1] 上面： rehash 指的是重新计算键的哈希值和索引值， 然后将键值对放置到 ht[1] 哈希表的指定位置上。</p><p>当 ht[0] 包含的所有键值对都迁移到了 ht[1] 之后 （ht[0] 变为空表）， 释放 ht[0] ， 将 ht[1] 设置为 ht[0] ， 并在 ht[1] 新创建一个空白哈希表， 为下一次 rehash 做准备。</p><p>举个例子， 假设程序要对图 4-8 所示字典的 ht[0] 进行扩展操作， 那么程序将执行以下步骤：<br>ht[0].used 当前的值为 4 ， 4 * 2 = 8 ， 而 8 （2^3）恰好是第一个大于等于 4 的 2 的 n 次方， 所以程序会将 ht[1] 哈希表的大小设置为 8 。 图 4-9 展示了 ht[1] 在分配空间之后， 字典的样子。<br>将 ht[0] 包含的四个键值对都 rehash 到 ht[1] ， 如图 4-10 所示。<br>释放 ht[0] ，并将 ht[1] 设置为 ht[0] ，然后为 ht[1] 分配一个空白哈希表，如图 4-11 所示。<br>至此， 对哈希表的扩展操作执行完毕， 程序成功将哈希表的大小从原来的 4 改为了现在的 8 。</p><p><img src="https://user-images.githubusercontent.com/7789698/30953216-7d7ff108-a45d-11e7-9f90-ae3426492096.png" alt="2015-09-13_55f5130162f2d"></p><p><img src="https://user-images.githubusercontent.com/7789698/30953264-a6e83a0a-a45d-11e7-8849-c056d07b85a7.png" alt="2015-09-13_55f51302b6785"></p><p><img src="https://user-images.githubusercontent.com/7789698/30953273-b5c7243c-a45d-11e7-8323-b8f25f2b5187.png" alt="2015-09-13_55f51309b4775"></p><p><img src="https://user-images.githubusercontent.com/7789698/30953287-c35d0026-a45d-11e7-981d-273db0f853f8.png" alt="2015-09-13_55f5130b2ec57"></p><ul><li>哈希表的扩展与收缩</li></ul><p>当以下条件中的任意一个被满足时， 程序会自动开始对哈希表执行扩展操作：</p><p>服务器目前没有在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 1 ；<br>服务器目前正在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 5 ；<br>其中哈希表的负载因子可以通过公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 负载因子 = 哈希表已保存节点数量 / 哈希表大小</span><br><span class="line">load_factor = ht[0].used / ht[0].size</span><br></pre></td></tr></table></figure><p>计算得出。</p><p>比如说， 对于一个大小为 4 ， 包含 4 个键值对的哈希表来说， 这个哈希表的负载因子为：<br><code>load_factor = 4 / 4 = 1</code></p><p>又比如说， 对于一个大小为 512 ， 包含 256 个键值对的哈希表来说， 这个哈希表的负载因子为：<br><code>load_factor = 256 / 512 = 0.5</code></p><p>根据 BGSAVE 命令或 BGREWRITEAOF 命令是否正在执行， 服务器执行扩展操作所需的负载因子并不相同， 这是因为在执行 BGSAVE 命令或BGREWRITEAOF 命令的过程中， Redis 需要创建当前服务器进程的子进程， 而大多数操作系统都采用写时复制（copy-on-write）技术来优化子进程的使用效率， 所以在子进程存在期间， 服务器会提高执行扩展操作所需的负载因子， 从而尽可能地避免在子进程存在期间进行哈希表扩展操作， 这可以避免不必要的内存写入操作， 最大限度地节约内存。<br>另一方面， 当哈希表的负载因子小于 0.1 时， 程序自动开始对哈希表执行收缩操作。</p><ul><li>渐进式 rehash<br>上一节说过， 扩展或收缩哈希表需要将 ht[0] 里面的所有键值对 rehash 到 ht[1] 里面， 但是， 这个 rehash 动作并不是一次性、集中式地完成的， 而是分多次、渐进式地完成的。</li></ul><p>这样做的原因在于， 如果 ht[0] 里只保存着四个键值对， 那么服务器可以在瞬间就将这些键值对全部 rehash 到 ht[1] ； 但是， 如果哈希表里保存的键值对数量不是四个， 而是四百万、四千万甚至四亿个键值对， 那么要一次性将这些键值对全部 rehash 到 ht[1] 的话， 庞大的计算量可能会导致服务器在一段时间内停止服务。</p><p>因此， 为了避免 rehash 对服务器性能造成影响， 服务器不是一次性将 ht[0] 里面的所有键值对全部 rehash 到 ht[1] ， 而是分多次、渐进式地将 ht[0] 里面的键值对慢慢地 rehash 到 ht[1] 。<br>以下是哈希表渐进式 rehash 的详细步骤：</p><ol><li>为 ht[1] 分配空间， 让字典同时持有 ht[0] 和 ht[1] 两个哈希表。</li><li>在字典中维持一个索引计数器变量 rehashidx ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始。</li><li>在 rehash 进行期间， 每次对字典执行添加、删除、查找或者更新操作时， 程序除了执行指定的操作以外， 还会顺带将 ht[0] 哈希表在 rehashidx 索引上的所有键值对 rehash 到 ht[1] ， 当 rehash 工作完成之后， 程序将 rehashidx 属性的值增一。</li><li>随着字典操作的不断执行， 最终在某个时间点上， ht[0] 的所有键值对都会被 rehash 至 ht[1] ， 这时程序将 rehashidx 属性的值设为 -1 ， 表示 rehash 操作已完成。<br>渐进式 rehash 的好处在于它采取分而治之的方式， 将 rehash 键值对所需的计算工作均滩到对字典的每个添加、删除、查找和更新操作上， 从而避免了集中式 rehash 而带来的庞大计算量。</li></ol><p><a href="https://www.kancloud.cn/kancloud/redisbook/63842">https://www.kancloud.cn/kancloud/redisbook/63842</a></p><img width="957" alt="wx20170928-150614 2x" src="https://user-images.githubusercontent.com/7789698/30953489-c2f6d85e-a45e-11e7-97e7-543618fad97a.png"><h1 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h1><p>跳跃表（skiplist）是一种有序数据结构， 它通过在每个节点中维持多个指向其他节点的指针， 从而达到快速访问节点的目的。</p><p>跳跃表支持平均 O(\log N) 最坏 O(N) 复杂度的节点查找， 还可以通过顺序性操作来批量处理节点。<br>在大部分情况下， 跳跃表的效率可以和平衡树相媲美， 并且因为跳跃表的实现比平衡树要来得更为简单， 所以有不少程序都使用跳跃表来代替平衡树。</p><p>Redis 使用跳跃表作为有序集合键的底层实现之一： 如果一个有序集合包含的元素数量比较多， 又或者有序集合中元素的成员（member）是比较长的字符串时， Redis 就会使用跳跃表来作为有序集合键的底层实现。</p><p>举个例子， fruit-price 是一个有序集合键， 这个有序集合以水果名为成员， 水果价钱为分值， 保存了 130 款水果的价钱：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; ZRANGE fruit-price 0 2 WITHSCORES</span><br><span class="line">1) &quot;banana&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;cherry&quot;</span><br><span class="line">4) &quot;6.5&quot;</span><br><span class="line">5) &quot;apple&quot;</span><br><span class="line">6) &quot;8&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; ZCARD fruit-price</span><br><span class="line">(integer) 130</span><br></pre></td></tr></table></figure><p>fruit-price 有序集合的所有数据都保存在一个跳跃表里面， 其中每个跳跃表节点（node）都保存了一款水果的价钱信息， 所有水果按价钱的高低从低到高在跳跃表里面排序：</p><p>和链表、字典等数据结构被广泛地应用在 Redis 内部不同， Redis 只在两个地方用到了跳跃表， 一个是实现有序集合键， 另一个是在集群节点中用作内部数据结构， 除此之外， 跳跃表在 Redis 里面没有其他用途。</p><p>Redis 的跳跃表由 redis.h/zskiplistNode 和 redis.h/zskiplist 两个结构定义， 其中 zskiplistNode 结构用于表示跳跃表节点， 而 zskiplist结构则用于保存跳跃表节点的相关信息， 比如节点的数量， 以及指向表头节点和表尾节点的指针， 等等。</p><p><img src="https://user-images.githubusercontent.com/7789698/30953604-36ae23ba-a45f-11e7-9264-b9b9ba6565dd.png" alt="2015-09-13_55f51478611a6"></p><p>图 5-1 展示了一个跳跃表示例， 位于图片最左边的是 zskiplist 结构， 该结构包含以下属性：<br>header ：指向跳跃表的表头节点。<br>tail ：指向跳跃表的表尾节点。<br>level ：记录目前跳跃表内，层数最大的那个节点的层数（表头节点的层数不计算在内）。<br>length ：记录跳跃表的长度，也即是，跳跃表目前包含节点的数量（表头节点不计算在内）。<br>位于 zskiplist 结构右方的是四个 zskiplistNode 结构， 该结构包含以下属性：<br>层（level）：节点中用 L1 、 L2 、 L3 等字样标记节点的各个层， L1 代表第一层， L2 代表第二层，以此类推。每个层都带有两个属性：前进指针和跨度。前进指针用于访问位于表尾方向的其他节点，而跨度则记录了前进指针所指向节点和当前节点的距离。在上面的图片中，连线上带有数字的箭头就代表前进指针，而那个数字就是跨度。当程序从表头向表尾进行遍历时，访问会沿着层的前进指针进行。<br>后退（backward）指针：节点中用 BW 字样标记节点的后退指针，它指向位于当前节点的前一个节点。后退指针在程序从表尾向表头遍历时使用。<br>分值（score）：各个节点中的 1.0 、 2.0 和 3.0 是节点所保存的分值。在跳跃表中，节点按各自所保存的分值从小到大排列。<br>成员对象（obj）：各个节点中的 o1 、 o2 和 o3 是节点所保存的成员对象。<br>注意表头节点和其他节点的构造是一样的： 表头节点也有后退指针、分值和成员对象， 不过表头节点的这些属性都不会被用到， 所以图中省略了这些部分， 只显示了表头节点的各个层。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">typedef struct zskiplistNode &#123;</span><br><span class="line"></span><br><span class="line">    // 后退指针</span><br><span class="line">    struct zskiplistNode *backward;</span><br><span class="line"></span><br><span class="line">    // 分值</span><br><span class="line">    double score;</span><br><span class="line"></span><br><span class="line">    // 成员对象</span><br><span class="line">    robj *obj;</span><br><span class="line"></span><br><span class="line">    // 层</span><br><span class="line">    struct zskiplistLevel &#123;</span><br><span class="line"></span><br><span class="line">        // 前进指针</span><br><span class="line">        struct zskiplistNode *forward;</span><br><span class="line"></span><br><span class="line">        // 跨度</span><br><span class="line">        unsigned int span;</span><br><span class="line"></span><br><span class="line">    &#125; level[];</span><br><span class="line"></span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><ul><li>层<br>跳跃表节点的 level 数组可以包含多个元素， 每个元素都包含一个指向其他节点的指针， 程序可以通过这些层来加快访问其他节点的速度， 一般来说， 层的数量越多， 访问其他节点的速度就越快。</li></ul><p>每次创建一个新跳跃表节点的时候， 程序都根据幂次定律 （power law，越大的数出现的概率越小） 随机生成一个介于 1 和 32 之间的值作为 level 数组的大小， 这个大小就是层的“高度”。</p><ul><li>前进指针</li></ul><p>每个层都有一个指向表尾方向的前进指针（level[i].forward 属性）， 用于从表头向表尾方向访问节点。<br>图 5-3 用虚线表示出了程序从表头向表尾方向， 遍历跳跃表中所有节点的路径：</p><p>1.迭代程序首先访问跳跃表的第一个节点（表头）， 然后从第四层的前进指针移动到表中的第二个节点。<br>2.在第二个节点时， 程序沿着第二层的前进指针移动到表中的第三个节点。<br>3.在第三个节点时， 程序同样沿着第二层的前进指针移动到表中的第四个节点。<br>4.当程序再次沿着第四个节点的前进指针移动时， 它碰到一个 NULL ， 程序知道这时已经到达了跳跃表的表尾， 于是结束这次遍历。</p><ul><li>跨度<br>层的跨度（level[i].span 属性）用于记录两个节点之间的距离：<br>两个节点之间的跨度越大， 它们相距得就越远。<br>指向 NULL 的所有前进指针的跨度都为 0 ， 因为它们没有连向任何节点。<br>初看上去， 很容易以为跨度和遍历操作有关， 但实际上并不是这样 —— 遍历操作只使用前进指针就可以完成了， 跨度实际上是用来计算排位（rank）的： 在查找某个节点的过程中， 将沿途访问过的所有层的跨度累计起来， 得到的结果就是目标节点在跳跃表中的排位。</li></ul><p>举个例子， 图 5-4 用虚线标记了在跳跃表中查找分值为 3.0 、 成员对象为 o3 的节点时， 沿途经历的层： 查找的过程只经过了一个层， 并且层的跨度为 3 ， 所以目标节点在跳跃表中的排位为 3 。</p><ul><li>后退指针</li></ul><p>节点的后退指针（backward 属性）用于从表尾向表头方向访问节点： 跟可以一次跳过多个节点的前进指针不同， 因为每个节点只有一个后退指针， 所以每次只能后退至前一个节点。<br>图 5-6 用虚线展示了如果从表尾向表头遍历跳跃表中的所有节点： 程序首先通过跳跃表的 tail 指针访问表尾节点， 然后通过后退指针访问倒数第二个节点， 之后再沿着后退指针访问倒数第三个节点， 再之后遇到指向 NULL 的后退指针， 于是访问结束。</p><ul><li>分值和成员<br>节点的分值（score 属性）是一个 double 类型的浮点数， 跳跃表中的所有节点都按分值从小到大来排序。<br>节点的成员对象（obj 属性）是一个指针， 它指向一个字符串对象， 而字符串对象则保存着一个 SDS 值。<br>在同一个跳跃表中， 各个节点保存的成员对象必须是唯一的， 但是多个节点保存的分值却可以是相同的： 分值相同的节点将按照成员对象在字典序中的大小来进行排序， 成员对象较小的节点会排在前面（靠近表头的方向）， 而成员对象较大的节点则会排在后面（靠近表尾的方向）。</li></ul><p>举个例子， 在图 5-7 所示的跳跃表中， 三个跳跃表节点都保存了相同的分值 10086.0 ， 但保存成员对象 o1 的节点却排在保存成员对象 o2和 o3 的节点之前， 而保存成员对象 o2 的节点又排在保存成员对象 o3 的节点之前， 由此可见， o1 、 o2 、 o3 三个成员对象在字典中的排序为 o1 &lt;= o2 &lt;= o3 。</p><ul><li>跳跃表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct zskiplist &#123;</span><br><span class="line"></span><br><span class="line">    // 表头节点和表尾节点</span><br><span class="line">    struct zskiplistNode *header, *tail;</span><br><span class="line"></span><br><span class="line">    // 表中节点的数量</span><br><span class="line">    unsigned long length;</span><br><span class="line"></span><br><span class="line">    // 表中层数最大的节点的层数</span><br><span class="line">    int level;</span><br><span class="line"></span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure><h1 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h1><p>整数集合（intset）是集合键的底层实现之一： 当一个集合只包含整数值元素， 并且这个集合的元素数量不多时， Redis 就会使用整数集合作为集合键的底层实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; SADD numbers 1 3 5 7 9</span><br><span class="line">(integer) 5</span><br><span class="line"></span><br><span class="line">redis&gt; OBJECT ENCODING numbers</span><br><span class="line">&quot;intset&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct intset &#123;</span><br><span class="line"></span><br><span class="line">    // 编码方式</span><br><span class="line">    uint32_t encoding;</span><br><span class="line"></span><br><span class="line">    // 集合包含的元素数量</span><br><span class="line">    uint32_t length;</span><br><span class="line"></span><br><span class="line">    // 保存元素的数组</span><br><span class="line">    int8_t contents[];</span><br><span class="line"></span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p>contents 数组是整数集合的底层实现： 整数集合的每个元素都是 contents 数组的一个数组项（item）， 各个项在数组中按值的大小从小到大有序地排列， 并且数组中不包含任何重复项。</p><p>length 属性记录了整数集合包含的元素数量， 也即是 contents 数组的长度。</p><p>虽然 intset 结构将 contents 属性声明为 int8_t 类型的数组， 但实际上 contents 数组并不保存任何 int8_t 类型的值 —— contents 数组的真正类型取决于 encoding 属性的值：</p><ol><li><p>如果 encoding 属性的值为 INTSET_ENC_INT16 ， 那么 contents 就是一个 int16_t 类型的数组， 数组里的每个项都是一个 int16_t 类型的整数值 （最小值为 -32,768 ，最大值为 32,767 ）。</p></li><li><p>如果 encoding 属性的值为 INTSET_ENC_INT32 ， 那么 contents 就是一个 int32_t 类型的数组， 数组里的每个项都是一个 int32_t 类型的整数值 （最小值为 -2,147,483,648 ，最大值为 2,147,483,647 ）。</p></li><li><p>如果 encoding 属性的值为 INTSET_ENC_INT64 ， 那么 contents 就是一个 int64_t 类型的数组， 数组里的每个项都是一个 int64_t 类型的整数值 （最小值为 -9,223,372,036,854,775,808 ，最大值为 9,223,372,036,854,775,807 ）。</p></li><li><p>encoding 属性的值为 INTSET_ENC_INT16 ， 表示整数集合的底层实现为 int16_t 类型的数组， 而集合保存的都是 int16_t 类型的整数值。</p></li><li><p>length 属性的值为 5 ， 表示整数集合包含五个元素。</p></li><li><p>contents 数组按从小到大的顺序保存着集合中的五个元素。</p></li><li><p>因为每个集合元素都是 int16_t 类型的整数值， 所以 contents 数组的大小等于 sizeof(int16_t) * 5 = 16 * 5 = 80 位。</p></li></ol><p><img src="https://user-images.githubusercontent.com/7789698/30954135-a2993f9a-a461-11e7-9eae-d5c8ea98f996.png" alt="2015-09-13_55f51a1132a4b"></p><ol><li>encoding 属性的值为 INTSET_ENC_INT64 ， 表示整数集合的底层实现为 int64_t 类型的数组， 而数组中保存的都是 int64_t 类型的整数值。</li><li>length 属性的值为 4 ， 表示整数集合包含四个元素。</li><li>contents 数组按从小到大的顺序保存着集合中的四个元素。</li><li>因为每个集合元素都是 int64_t 类型的整数值， 所以 contents 数组的大小为 sizeof(int64_t) * 4 = 64 * 4 = 256 位。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/30954158-baaaab46-a461-11e7-9cb2-8886e331b927.png" alt="2015-09-13_55f51a139a148"></p><p>虽然 contents 数组保存的四个整数值中， 只有 -2675256175807981027 是真正需要用 int64_t 类型来保存的， 而其他的 1 、 3 、 5 三个值都可以用 int16_t 类型来保存， 不过根据整数集合的升级规则， 当向一个底层为 int16_t 数组的整数集合添加一个 int64_t 类型的整数值时， 整数集合已有的所有元素都会被转换成 int64_t 类型， 所以 contents 数组保存的四个整数值都是 int64_t 类型的， 不仅仅是-2675256175807981027 。</p><ul><li>升级<br>每当我们要将一个新元素添加到整数集合里面， 并且新元素的类型比整数集合现有所有元素的类型都要长时， 整数集合需要先进行升级（upgrade）， 然后才能将新元素添加到整数集合里面。</li></ul><p>升级整数集合并添加新元素共分为三步进行：</p><ol><li>根据新元素的类型， 扩展整数集合底层数组的空间大小， 并为新元素分配空间。</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型， 并将类型转换后的元素放置到正确的位上， 而且在放置元素的过程中， 需要继续维持底层数组的有序性质不变。</li><li>将新元素添加到底层数组里面。</li></ol><p>举个例子， 假设现在有一个 INTSET_ENC_INT16 编码的整数集合， 集合中包含三个 int16_t 类型的元素， 如图 6-3 所示。</p><p>因为每个元素都占用 16 位空间， 所以整数集合底层数组的大小为 3 * 16 = 48 位， 图 6-4 展示了整数集合的三个元素在这 48 位里的位置。</p><p><img src="https://user-images.githubusercontent.com/7789698/30954310-404deb50-a462-11e7-8bb7-560f7a946b1e.png" alt="2015-09-13_55f51ab6dbe72"></p><p>现在， 假设我们要将类型为 int32_t 的整数值 65535 添加到整数集合里面， 因为 65535 的类型 int32_t 比整数集合当前所有元素的类型都要长， 所以在将 65535 添加到整数集合之前， 程序需要先对整数集合进行升级。<br>升级首先要做的是， 根据新类型的长度， 以及集合元素的数量（包括要添加的新元素在内）， 对底层数组进行空间重分配。</p><p>整数集合目前有三个元素， 再加上新元素 65535 ， 整数集合需要分配四个元素的空间， 因为每个 int32_t 整数值需要占用 32 位空间， 所以在空间重分配之后， 底层数组的大小将是 32 * 4 = 128 位， 如图 6-5 所示</p><p><img src="https://user-images.githubusercontent.com/7789698/30954327-545efdfa-a462-11e7-901f-ef8ea9b90d37.png" alt="2015-09-13_55f51abfde71b"></p><p>虽然程序对底层数组进行了空间重分配， 但数组原有的三个元素 1 、 2 、 3 仍然是 int16_t 类型， 这些元素还保存在数组的前 48 位里面， 所以程序接下来要做的就是将这三个元素转换成 int32_t 类型， 并将转换后的元素放置到正确的位上面， 而且在放置元素的过程中， 需要维持底层数组的有序性质不变。<br>首先， 因为元素 3 在 1 、 2 、 3 、 65535 四个元素中排名第三， 所以它将被移动到 contents 数组的索引 2 位置上， 也即是数组 64 位至 95 位的空间内， 如图 6-6 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30954364-7456234a-a462-11e7-9d9c-b775c31ebbf5.png" alt="2015-09-13_55f51ac25b6a0"></p><p>接着， 因为元素 2 在 1 、 2 、 3 、 65535 四个元素中排名第二， 所以它将被移动到 contents 数组的索引 1 位置上， 也即是数组的 32位至 63 位的空间内， 如图 6-7 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30954458-d2490634-a462-11e7-8dbb-9f61d8058d17.png" alt="2015-09-13_55f51ac353bfa"></p><p>之后， 因为元素 1 在 1 、 2 、 3 、 65535 四个元素中排名第一， 所以它将被移动到 contents 数组的索引 0 位置上， 也即是数组的 0 位至 31 位的空间内， 如图 6-8 所示。<br><img src="https://user-images.githubusercontent.com/7789698/30954472-e529b758-a462-11e7-92d3-eb843fa11494.png" alt="2015-09-13_55f51ac466154"></p><p>然后， 因为元素 65535 在 1 、 2 、 3 、 65535 四个元素中排名第四， 所以它将被添加到 contents 数组的索引 3 位置上， 也即是数组的96 位至 127 位的空间内， 如图 6-9 所示。<br><img src="https://user-images.githubusercontent.com/7789698/30954508-feab27f2-a462-11e7-9310-a8f06db5899c.png" alt="2015-09-13_55f51acae92db"></p><p>最后， 程序将整数集合 encoding 属性的值从 INTSET_ENC_INT16 改为 INTSET_ENC_INT32 ， 并将 length 属性的值从 3 改为 4 ， 设置完成之后的整数集合如图 6-10 所示。<br><img src="https://user-images.githubusercontent.com/7789698/30954520-07d5e196-a463-11e7-833c-a950e122e357.png" alt="2015-09-13_55f51ae117896"></p><p>因为每次向整数集合添加新元素都可能会引起升级， 而每次升级都需要对底层数组中已有的所有元素进行类型转换， 所以向整数集合添加新元素的时间复杂度为 O(N) </p><p>其他类型的升级操作， 比如从 INTSET_ENC_INT16 编码升级为 INTSET_ENC_INT64 编码， 或者从 INTSET_ENC_INT32 编码升级为 INTSET_ENC_INT64 编码， 升级的过程都和上面展示的升级过程类似。</p><p>升级之后新元素的摆放位置</p><p>因为引发升级的新元素的长度总是比整数集合现有所有元素的长度都大， 所以这个新元素的值要么就大于所有现有元素， 要么就小于所有现有元素：</p><p>在新元素小于所有现有元素的情况下， 新元素会被放置在底层数组的最开头（索引 0 ）；<br>在新元素大于所有现有元素的情况下， 新元素会被放置在底层数组的最末尾（索引 length-1 ）。</p><ul><li>降级<br>整数集合不支持降级操作， 一旦对数组进行了升级， 编码就会一直保持升级后的状态。</li></ul><img width="957" alt="wx20170928-153940 2x" src="https://user-images.githubusercontent.com/7789698/30954573-44344f1a-a463-11e7-9937-f202bd13f84b.png"><h1 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h1><p>当一个列表键只包含少量列表项， 并且每个列表项要么就是小整数值， 要么就是长度比较短的字符串， 那么 Redis 就会使用压缩列表来做列表键的底层实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; RPUSH lst 1 3 5 10086 &quot;hello&quot; &quot;world&quot;</span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line">redis&gt; OBJECT ENCODING lst</span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><p>另外， 当一个哈希键只包含少量键值对， 并且每个键值对的键和值要么就是小整数值， 要么就是长度比较短的字符串， 那么 Redis 就会使用压缩列表来做哈希键的底层实现。</p><p>举个例子， 执行以下命令将创建一个压缩列表实现的哈希键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; HMSET profile &quot;name&quot; &quot;Jack&quot; &quot;age&quot; 28 &quot;job&quot; &quot;Programmer&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; OBJECT ENCODING profile</span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/30954687-abdd05a8-a463-11e7-81d7-23810c2e3c94.png" alt="2015-09-13_55f51bfccbd83"></p><img width="955" alt="wx20170928-154257 2x" src="https://user-images.githubusercontent.com/7789698/30954715-c2a1bb30-a463-11e7-8ef3-a356a3953cc9.png"><ol><li>列表 zlbytes 属性的值为 0x50 （十进制 80）， 表示压缩列表的总长为 80 字节。</li><li>列表 zltail 属性的值为 0x3c （十进制 60）， 这表示如果我们有一个指向压缩列表起始地址的指针 p ， 那么只要用指针 p 加上偏移量 60 ， 就可以计算出表尾节点 entry3 的地址。</li><li>列表 zllen 属性的值为 0x3 （十进制 3）， 表示压缩列表包含三个节点。</li></ol><ul><li>压缩列表节点的构成</li></ul><p>每个压缩列表节点可以保存一个字节数组或者一个整数值， 其中， 字节数组可以是以下三种长度的其中一种：</p><ol><li>长度小于等于 63 （2^{6}-1）字节的字节数组；</li><li>长度小于等于 16383 （2^{14}-1） 字节的字节数组；</li><li>长度小于等于 4294967295 （2^{32}-1）字节的字节数组；</li></ol><p>而整数值则可以是以下六种长度的其中一种：</p><ol><li>4 位长，介于 0 至 12 之间的无符号整数；</li><li>1 字节长的有符号整数；</li><li>3 字节长的有符号整数；</li><li>int16_t 类型整数；</li><li>int32_t 类型整数；</li><li>int64_t 类型整数。</li></ol><p>每个压缩列表节点都由 previous_entry_length 、 encoding 、 content 三个部分组成</p><ul><li>previous_entry_length</li></ul><p>节点的 previous_entry_length 属性以字节为单位， 记录了压缩列表中前一个节点的长度。<br>previous_entry_length 属性的长度可以是 1 字节或者 5 字节：</p><ol><li>如果前一节点的长度小于 254 字节， 那么 previous_entry_length 属性的长度为 1 字节： 前一节点的长度就保存在这一个字节里面。</li><li>如果前一节点的长度大于等于 254 字节， 那么 previous_entry_length 属性的长度为 5 字节： 其中属性的第一字节会被设置为 0xFE（十进制值 254）， 而之后的四个字节则用于保存前一节点的长度。</li></ol><p>因为节点的 previous_entry_length 属性记录了前一个节点的长度， 所以程序可以通过指针运算， 根据当前节点的起始地址来计算出前一个节点的起始地址。</p><p>压缩列表的从表尾向表头遍历操作就是使用这一原理实现的： 只要我们拥有了一个指向某个节点起始地址的指针， 那么通过这个指针以及这个节点的 previous_entry_length 属性， 程序就可以一直向前一个节点回溯， 最终到达压缩列表的表头节点。<br>图 7-8 展示了一个从表尾节点向表头节点进行遍历的完整过程：</p><ol><li>首先，我们拥有指向压缩列表表尾节点 entry4 起始地址的指针 p1 （指向表尾节点的指针可以通过指向压缩列表起始地址的指针加上zltail 属性的值得出）；</li><li>通过用 p1 减去 entry4 节点 previous_entry_length 属性的值， 我们得到一个指向 entry4 前一节点 entry3 起始地址的指针 p2 ；</li><li>通过用 p2 减去 entry3 节点 previous_entry_length 属性的值， 我们得到一个指向 entry3 前一节点 entry2 起始地址的指针 p3 ；</li><li>通过用 p3 减去 entry2 节点 previous_entry_length 属性的值， 我们得到一个指向 entry2 前一节点 entry1 起始地址的指针 p4 ， entry1为压缩列表的表头节点；</li><li>最终， 我们从表尾节点向表头节点遍历了整个列表。</li></ol><ul><li>encoding</li></ul><p>节点的 encoding 属性记录了节点的 content 属性所保存数据的类型以及长度：</p><ol><li>一字节、两字节或者五字节长， 值的最高位为 00 、 01 或者 10 的是字节数组编码： 这种编码表示节点的 content 属性保存着字节数组， 数组的长度由编码除去最高两位之后的其他位记录；</li><li>一字节长， 值的最高位以 11 开头的是整数编码： 这种编码表示节点的 content 属性保存着整数值， 整数值的类型和长度由编码除去最高两位之后的其他位记录；</li></ol><img width="963" alt="wx20170928-155056 2x" src="https://user-images.githubusercontent.com/7789698/30955209-67be740e-a465-11e7-81d5-727da5f34484.png"><ul><li>content</li></ul><p>编码的最高两位 00 表示节点保存的是一个字节数组；<br>编码的后六位 001011 记录了字节数组的长度 11 ；<br>content 属性保存着节点的值 “hello world” 。</p><p>编码 11000000 表示节点保存的是一个 int16_t 类型的整数值；<br>content 属性保存着节点的值 10086 。</p><ul><li>连锁更新<br><a href="https://www.kancloud.cn/kancloud/redisbook/63859">https://www.kancloud.cn/kancloud/redisbook/63859</a></li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisObject &#123;</span><br><span class="line"></span><br><span class="line">    // 类型</span><br><span class="line">    unsigned type:4;</span><br><span class="line"></span><br><span class="line">    // 编码</span><br><span class="line">    unsigned encoding:4;</span><br><span class="line"></span><br><span class="line">    // 指向底层实现数据结构的指针</span><br><span class="line">    void *ptr;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><ul><li>类型</li></ul><table><thead><tr><th>类型常量</th><th>对象的名称</th></tr></thead><tbody><tr><td>REDIS_STRING</td><td>字符串对象</td></tr><tr><td>REDIS_LIST</td><td>列表对象</td></tr><tr><td>REDIS_HASH</td><td>哈希对象</td></tr><tr><td>REDIS_SET</td><td>集合对象</td></tr><tr><td>REDIS_ZSET</td><td>有序集合对象</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 键为字符串对象，值为字符串对象</span><br><span class="line"></span><br><span class="line">redis&gt; SET msg &quot;hello world&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; TYPE msg</span><br><span class="line">string</span><br><span class="line"></span><br><span class="line"># 键为字符串对象，值为列表对象</span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH numbers 1 3 5</span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line">redis&gt; TYPE numbers</span><br><span class="line">list</span><br><span class="line"></span><br><span class="line"># 键为字符串对象，值为哈希对象</span><br><span class="line"></span><br><span class="line">redis&gt; HMSET profile name Tome age 25 career Programmer</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; TYPE profile</span><br><span class="line">hash</span><br><span class="line"></span><br><span class="line"># 键为字符串对象，值为集合对象</span><br><span class="line"></span><br><span class="line">redis&gt; SADD fruits apple banana cherry</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">redis&gt; TYPE fruits</span><br><span class="line">set</span><br><span class="line"></span><br><span class="line"># 键为字符串对象，值为有序集合对象</span><br><span class="line"></span><br><span class="line">redis&gt; ZADD price 8.5 apple 5.0 banana 6.0 cherry</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">redis&gt; TYPE price</span><br><span class="line">zset</span><br></pre></td></tr></table></figure><table><thead><tr><th>对象</th><th>对象 type 属性的值</th><th>TYPE 命令的输出</th></tr></thead><tbody><tr><td>字符串对象</td><td>REDIS_STRING</td><td>“string”</td></tr><tr><td>列表对象</td><td>REDIS_LIST</td><td>“list”</td></tr><tr><td>哈希对象</td><td>REDIS_HASH</td><td>“hash”</td></tr><tr><td>集合对象</td><td>REDIS_SET</td><td>“set”</td></tr><tr><td>有序集合对象</td><td>REDIS_ZSET</td><td>“zset”</td></tr></tbody></table><ul><li>编码和底层实现</li></ul><table><thead><tr><th>编码常量</th><th>编码所对应的底层数据结构</th></tr></thead><tbody><tr><td>REDIS_ENCODING_INT</td><td>long 类型的整数</td></tr><tr><td>REDIS_ENCODING_EMBSTR</td><td>embstr 编码的简单动态字符串</td></tr><tr><td>REDIS_ENCODING_RAW</td><td>简单动态字符串</td></tr><tr><td>REDIS_ENCODING_HT</td><td>字典</td></tr><tr><td>REDIS_ENCODING_LINKEDLIST</td><td>双端链表</td></tr><tr><td>REDIS_ENCODING_ZIPLIST</td><td>压缩列表</td></tr><tr><td>REDIS_ENCODING_INTSET</td><td>整数集合</td></tr><tr><td>REDIS_ENCODING_SKIPLIST</td><td>跳跃表和字典</td></tr></tbody></table><table><thead><tr><th>类型</th><th>编码</th><th>对象</th></tr></thead><tbody><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_INT</td><td>使用整数值实现的字符串对象。</td></tr><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_EMBSTR</td><td>使用 embstr 编码的简单动态字符串实现的字符串对象。</td></tr><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_RAW</td><td>使用简单动态字符串实现的字符串对象。</td></tr><tr><td>REDIS_LIST</td><td>REDIS_ENCODING_ZIPLIST</td><td>使用压缩列表实现的列表对象。</td></tr><tr><td>REDIS_LIST</td><td>REDIS_ENCODING_LINKEDLIST</td><td>使用双端链表实现的列表对象。</td></tr><tr><td>REDIS_HASH</td><td>REDIS_ENCODING_ZIPLIST</td><td>使用压缩列表实现的哈希对象。</td></tr><tr><td>REDIS_HASH</td><td>REDIS_ENCODING_HT</td><td>使用字典实现的哈希对象。</td></tr><tr><td>REDIS_SET</td><td>REDIS_ENCODING_INTSET</td><td>使用整数集合实现的集合对象。</td></tr><tr><td>REDIS_SET</td><td>REDIS_ENCODING_HT</td><td>使用字典实现的集合对象。</td></tr><tr><td>REDIS_ZSET</td><td>REDIS_ENCODING_ZIPLIST</td><td>使用压缩列表实现的有序集合对象。</td></tr><tr><td>REDIS_ZSET</td><td>REDIS_ENCODING_SKIPLIST</td><td>使用跳跃表和字典实现的有序集合对象。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; SET msg &quot;hello wrold&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; OBJECT ENCODING msg</span><br><span class="line">&quot;embstr&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; SET story &quot;long long long long long long ago ...&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; OBJECT ENCODING story</span><br><span class="line">&quot;raw&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; SADD numbers 1 3 5</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">redis&gt; OBJECT ENCODING numbers</span><br><span class="line">&quot;intset&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; SADD numbers &quot;seven&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; OBJECT ENCODING numbers</span><br><span class="line">&quot;hashtable&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th>对象所使用的底层数据结构</th><th>编码常量</th><th>OBJECT ENCODING 命令输出</th></tr></thead><tbody><tr><td>整数</td><td>REDIS_ENCODING_INT</td><td>“int”</td></tr><tr><td>embstr 编码的简单动态字符串（SDS）</td><td>REDIS_ENCODING_EMBSTR</td><td>“embstr”</td></tr><tr><td>简单动态字符串</td><td>REDIS_ENCODING_RAW</td><td>“raw”</td></tr><tr><td>字典</td><td>REDIS_ENCODING_HT</td><td>“hashtable”</td></tr><tr><td>双端链表</td><td>REDIS_ENCODING_LINKEDLIST</td><td>“linkedlist”</td></tr><tr><td>压缩列表</td><td>REDIS_ENCODING_ZIPLIST</td><td>“ziplist”</td></tr><tr><td>整数集合</td><td>REDIS_ENCODING_INTSET</td><td>“intset”</td></tr><tr><td>跳跃表和字典</td><td>REDIS_ENCODING_SKIPLIST</td><td>“skiplist”</td></tr></tbody></table><p><a href="https://www.kancloud.cn/kancloud/redisbook/63862">https://www.kancloud.cn/kancloud/redisbook/63862</a></p><ul><li>内存回收<br>Redis 在自己的对象系统中构建了一个引用计数（reference counting）技术实现的内存回收机制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisObject &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // 引用计数</span><br><span class="line">    int refcount;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><ol><li>在创建一个新对象时， 引用计数的值会被初始化为 1 ；</li><li>当对象被一个新程序使用时， 它的引用计数值会被增一；</li><li>当对象不再被一个程序使用时， 它的引用计数值会被减一；</li><li>当对象的引用计数值变为 0 时， 对象所占用的内存会被释放。</li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>incrRefCount</td><td>将对象的引用计数值增一。</td></tr><tr><td>decrRefCount</td><td>将对象的引用计数值减一， 当对象的引用计数值等于 0 时， 释放对象。</td></tr><tr><td>resetRefCount</td><td>将对象的引用计数值设置为 0 ， 但并不释放对象， 这个函数通常在需要重新设置对象的引用计数值时使用。</td></tr></tbody></table><ul><li>对象共享<br> 对象的引用计数属性还带有对象共享的作用</li></ul><p>Redis 只对包含整数值的字符串对象进行共享。</p><ul><li>对象的空转时长</li></ul><p>除了前面介绍过的 type 、 encoding 、 ptr 和 refcount 四个属性之外， redisObject 结构包含的最后一个属性为 lru 属性， 该属性记录了对象最后一次被命令程序访问的时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisObject &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    unsigned lru:22;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><h1 id="单机数据库的实现"><a href="#单机数据库的实现" class="headerlink" title="单机数据库的实现"></a>单机数据库的实现</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>数据库键空间<br>Redis 是一个键值对（key-value pair）数据库服务器， 服务器中的每个数据库都由一个 redis.h/redisDb 结构表示， 其中， redisDb 结构的dict 字典保存了数据库中的所有键值对， 我们将这个字典称为键空间（key space）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisDb &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // 数据库键空间，保存着数据库中的所有键值对</span><br><span class="line">    dict *dict;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><ul><li>添加新键<br>添加一个新键值对到数据库， 实际上就是将一个新键值对添加到键空间字典里面， 其中键为字符串对象， 而值则为任意一种类型的 Redis 对象。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; SET message &quot;hello world&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">redis&gt; HSET book name &quot;Redis in Action&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; HSET book author &quot;Josiah L. Carlson&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; HSET book publisher &quot;Manning&quot;</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; SET date &quot;2013.12.1&quot;</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/30955855-c032d600-a467-11e7-8699-9c88744eba2a.png" alt="2015-09-13_55f5227cb91e3"></p><ul><li><p>删除键<br>删除数据库中的一个键， 实际上就是在键空间里面删除键所对应的键值对对象。</p></li><li><p>更新键<br>对一个数据库键进行更新， 实际上就是对键空间里面键所对应的值对象进行更新， 根据值对象的类型不同， 更新的具体方法也会有所不同。</p></li><li><p>对键取值</p></li></ul><ul><li><p>读写键空间时的维护操作<br>当使用 Redis 命令对数据库进行读写时， 服务器不仅会对键空间执行指定的读写操作， 还会执行一些额外的维护操作， 其中包括：</p></li><li><p>在读取一个键之后（读操作和写操作都要对键进行读取）， 服务器会根据键是否存在， 以此来更新服务器的键空间命中（hit）次数或键空间不命中（miss）次数， 这两个值可以在 INFO stats 命令的 keyspace_hits 属性和 keyspace_misses 属性中查看。</p></li><li><p>在读取一个键之后， 服务器会更新键的 LRU （最后一次使用）时间， 这个值可以用于计算键的闲置时间， 使用命令 OBJECT idletime  命令可以查看键 key 的闲置时间。</p></li><li><p>如果服务器在读取一个键时， 发现该键已经过期， 那么服务器会先删除这个过期键， 然后才执行余下的其他操作， 本章稍后对过期键的讨论会详细说明这一点。</p></li><li><p>如果有客户端使用 WATCH 命令监视了某个键， 那么服务器在对被监视的键进行修改之后， 会将这个键标记为脏（dirty）， 从而让事务程序注意到这个键已经被修改过， 《事务》一章会详细说明这一点。</p></li><li><p>服务器每次修改一个键之后， 都会对脏（dirty）键计数器的值增一， 这个计数器会触发服务器的持久化以及复制操作执行， 《RDB 持久化》、《AOF 持久化》和《复制》这三章都会说到这一点。</p></li><li><p>如果服务器开启了数据库通知功能， 那么在对键进行修改之后， 服务器将按配置发送相应的数据库通知， 本章稍后讨论数据库通知功能的实现时会详细说明这一点。</p></li></ul><ul><li>Redis 服务器的所有数据库都保存在 redisServer.db 数组中， 而数据库的数量则由 redisServer.dbnum 属性保存。</li><li>客户端通过修改目标数据库指针， 让它指向 redisServer.db 数组中的不同元素来切换不同的数据库。</li><li>数据库主要由 dict 和 expires 两个字典构成， 其中 dict 字典负责保存键值对， 而 expires 字典则负责保存键的过期时间。</li><li>因为数据库由字典构成， 所以对数据库的操作都是建立在字典操作之上的。</li><li>数据库的键总是一个字符串对象， 而值则可以是任意一种 Redis 对象类型， 包括字符串对象、哈希表对象、集合对象、列表对象和有序集合对象， 分别对应字符串键、哈希表键、集合键、列表键和有序集合键。</li><li>expires 字典的键指向数据库中的某个键， 而值则记录了数据库键的过期时间， 过期时间是一个以毫秒为单位的 UNIX 时间戳。</li><li>Redis 使用惰性删除和定期删除两种策略来删除过期的键： 惰性删除策略只在碰到过期键时才进行删除操作， 定期删除策略则每隔一段时间， 主动查找并删除过期键。</li><li>执行 SAVE 命令或者 BGSAVE 命令所产生的新 RDB 文件不会包含已经过期的键。</li><li>执行 BGREWRITEAOF 命令所产生的重写 AOF 文件不会包含已经过期的键。</li><li>当一个过期键被删除之后， 服务器会追加一条 DEL 命令到现有 AOF 文件的末尾， 显式地删除过期键。</li><li>当主服务器删除一个过期键之后， 它会向所有从服务器发送一条 DEL 命令， 显式地删除过期键。</li><li>从服务器即使发现过期键， 也不会自作主张地删除它， 而是等待主节点发来 DEL 命令， 这种统一、中心化的过期键删除策略可以保证主从服务器数据的一致性。</li><li>当 Redis 命令对数据库进行修改之后， 服务器会根据配置， 向客户端发送数据库通知。</li></ul><h2 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h2><ul><li>RDB 文件结构<br><img src="https://user-images.githubusercontent.com/7789698/30956342-98488282-a469-11e7-919d-d0b5af2a405d.png" alt="2015-09-13_55f523462fa07"></li></ul><p>RDB 文件的最开头是 REDIS 部分， 这个部分的长度为 5 字节， 保存着 “REDIS” 五个字符。 通过这五个字符， 程序可以在载入文件时， 快速检查所载入的文件是否 RDB 文件。</p><p>db_version 长度为 4 字节， 它的值是一个字符串表示的整数， 这个整数记录了 RDB 文件的版本号， 比如 “0006” 就代表 RDB 文件的版本为第六版。</p><p>databases 部分包含着零个或任意多个数据库， 以及各个数据库中的键值对数据：</p><ul><li>如果服务器的数据库状态为空（所有数据库都是空的）， 那么这个部分也为空， 长度为 0 字节。</li><li>如果服务器的数据库状态为非空（有至少一个数据库非空）， 那么这个部分也为非空， 根据数据库所保存键值对的数量、类型和内容不同， 这个部分的长度也会有所不同。</li></ul><p>EOF 常量的长度为 1 字节， 这个常量标志着 RDB 文件正文内容的结束， 当读入程序遇到这个值的时候， 它知道所有数据库的所有键值对都已经载入完毕了</p><p>check_sum 是一个 8 字节长的无符号整数， 保存着一个校验和， 这个校验和是程序通过对 REDIS 、 db_version 、 databases 、 EOF 四个部分的内容进行计算得出的。 服务器在载入 RDB 文件时， 会将载入数据所计算出的校验和与 check_sum 所记录的校验和进行对比， 以此来检查 RDB 文件是否有出错或者损坏的情况出现。</p><ul><li>databases 部分<br>一个 RDB 文件的 databases 部分可以保存任意多个非空数据库。</li></ul><p>每个非空数据库在 RDB 文件中都可以保存为 SELECTDB 、 db_number 、 key_value_pairs 三个部分</p><p>SELECTDB 常量的长度为 1 字节， 当读入程序遇到这个值的时候， 它知道接下来要读入的将是一个数据库号码。</p><p>db_number 保存着一个数据库号码， 根据号码的大小不同， 这个部分的长度可以是 1 字节、 2 字节或者 5 字节。 当程序读入 db_number 部分之后， 服务器会调用 SELECT 命令， 根据读入的数据库号码进行数据库切换， 使得之后读入的键值对可以载入到正确的数据库中。</p><p>key_value_pairs 部分保存了数据库中的所有键值对数据， 如果键值对带有过期时间， 那么过期时间也会和键值对保存在一起。 根据键值对的数量、类型、内容、以及是否有过期时间等条件的不同， key_value_pairs 部分的长度也会有所不同。</p><ul><li>key_value_pairs 部分<br>RDB 文件中的每个 key_value_pairs 部分都保存了一个或以上数量的键值对， 如果键值对带有过期时间的话， 那么键值对的过期时间也会被保存在内。</li></ul><p>不带过期时间的键值对在 RDB 文件中对由 TYPE 、 key 、 value 三部分组成， 如图 IMAGE_KEY_WITHOUT_EXPIRE_TIME 所示</p><ul><li>REDIS_RDB_TYPE_STRING</li><li>REDIS_RDB_TYPE_LIST</li><li>REDIS_RDB_TYPE_SET</li><li>REDIS_RDB_TYPE_ZSET</li><li>REDIS_RDB_TYPE_HASH</li><li>REDIS_RDB_TYPE_LIST_ZIPLIST</li><li>REDIS_RDB_TYPE_SET_INTSET</li><li>REDIS_RDB_TYPE_ZSET_ZIPLIST</li><li>REDIS_RDB_TYPE_HASH_ZIPLIST</li></ul><p>以上列出的每个 TYPE 常量都代表了一种对象类型或者底层编码， 当服务器读入 RDB 文件中的键值对数据时， 程序会根据 TYPE 的值来决定如何读入和解释 value 的数据。<br>key 和 value 分别保存了键值对的键对象和值对象：</p><ul><li>其中 key 总是一个字符串对象， 它的编码方式和 REDIS_RDB_TYPE_STRING 类型的 value 一样。 根据内容长度的不同， key 的长度也会有所不同。</li><li>根据 TYPE 类型的不同， 以及保存内容长度的不同， 保存 value 的结构和长度也会有所不同， 本节稍后会详细说明每种 TYPE 类型的value 结构保存方式。</li></ul><p><a href="https://www.kancloud.cn/kancloud/redisbook/63879">https://www.kancloud.cn/kancloud/redisbook/63879</a></p><h2 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h2><p>AOF 持久化功能的实现可以分为命令追加（append）、文件写入、文件同步（sync）三个步骤。</p><p>当 AOF 持久化功能处于打开状态时， 服务器在执行完一个写命令之后， 会以协议格式将被执行的写命令追加到服务器状态的 aof_buf 缓冲区的末尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct redisServer &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // AOF 缓冲区</span><br><span class="line">    sds aof_buf;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>AOF 文件的写入与同步<br>Redis 的服务器进程就是一个事件循环（loop）， 这个循环中的文件事件负责接收客户端的命令请求， 以及向客户端发送命令回复， 而时间事件则负责执行像 serverCron 函数这样需要定时运行的函数。</li></ul><p>因为服务器在处理文件事件时可能会执行写命令， 使得一些内容被追加到 aof_buf 缓冲区里面， 所以在服务器每次结束一个事件循环之前， 它都会调用 flushAppendOnlyFile 函数， 考虑是否需要将 aof_buf 缓冲区中的内容写入和保存到 AOF 文件里面， 这个过程可以用以下伪代码表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def eventLoop():</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line"></span><br><span class="line">        # 处理文件事件，接收命令请求以及发送命令回复</span><br><span class="line">        # 处理命令请求时可能会有新内容被追加到 aof_buf 缓冲区中</span><br><span class="line">        processFileEvents()</span><br><span class="line"></span><br><span class="line">        # 处理时间事件</span><br><span class="line">        processTimeEvents()</span><br><span class="line"></span><br><span class="line">        # 考虑是否要将 aof_buf 中的内容写入和保存到 AOF 文件里面</span><br><span class="line">        flushAppendOnlyFile()</span><br></pre></td></tr></table></figure><table><thead><tr><th>appendfsync 选项的值</th><th>flushAppendOnlyFile 函数的行为</th></tr></thead><tbody><tr><td>always</td><td>将 aof_buf 缓冲区中的所有内容写入并同步到 AOF 文件。</td></tr><tr><td>everysec</td><td>将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 如果上次同步 AOF 文件的时间距离现在超过一秒钟， 那么再次对 AOF 文件进行同步， 并且这个同步操作是由一个线程专门负责执行的。</td></tr><tr><td>no</td><td>将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 但并不对 AOF 文件进行同步， 何时同步由操作系统来决定。</td></tr></tbody></table><p>如果用户没有主动为 appendfsync 选项设置值， 那么 appendfsync 选项的默认值为 everysec ， 关于 appendfsync 选项的更多信息， 请参考 Redis 项目附带的示例配置文件 redis.conf 。</p><p>为了提高文件的写入效率， 在现代操作系统中， 当用户调用 write 函数， 将一些数据写入到文件的时候， 操作系统通常会将写入数据暂时保存在一个内存缓冲区里面， 等到缓冲区的空间被填满、或者超过了指定的时限之后， 才真正地将缓冲区中的数据写入到磁盘里面。</p><p>这种做法虽然提高了效率， 但也为写入数据带来了安全问题， 因为如果计算机发生停机， 那么保存在内存缓冲区里面的写入数据将会丢失。为此， 系统提供了 fsync 和 fdatasync 两个同步函数， 它们可以强制让操作系统立即将缓冲区中的数据写入到硬盘里面， 从而确保写入数据的安全性。</p><p>如果这时 flushAppendOnlyFile 函数被调用， 假设服务器当前 appendfsync 选项的值为 everysec ， 并且根据 server.aof_last_fsync 属性显示， 距离上次同步 AOF 文件已经超过一秒钟， 那么服务器会先将 aof_buf 中的内容写入到 AOF 文件中， 然后再对 AOF 文件进行同步。</p><p>当 appendfsync 的值为 always 时， 服务器在每个事件循环都要将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 并且同步 AOF 文件， 所以 always 的效率是 appendfsync 选项三个值当中最慢的一个， 但从安全性来说， always 也是最安全的， 因为即使出现故障停机， AOF 持久化也只会丢失一个事件循环中所产生的命令数据。</p><p>当 appendfsync 的值为 everysec 时， 服务器在每个事件循环都要将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 并且每隔超过一秒就要在子线程中对 AOF 文件进行一次同步： 从效率上来讲， everysec 模式足够快， 并且就算出现故障停机， 数据库也只丢失一秒钟的命令数据。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>Redis 基于 Reactor 模式开发了自己的网络事件处理器： 这个处理器被称为文件事件处理器（file event handler）：</p><ul><li>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p>虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性。</p><ul><li>文件事件处理器的构成<br>图 IMAGE_CONSTRUCT_OF_FILE_EVENT_HANDLER 展示了文件事件处理器的四个组成部分， 它们分别是套接字、 I/O 多路复用程序、 文件事件分派器（dispatcher）、 以及事件处理器。</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/30958265-2cdfc2a2-a46f-11e7-9bed-b456ce0760c9.png" alt="2015-09-13_55f524b50e6e6"></p><p>文件事件是对套接字操作的抽象， 每当一个套接字准备好执行连接应答（accept）、写入、读取、关闭等操作时， 就会产生一个文件事件。 因为一个服务器通常会连接多个套接字， 所以多个文件事件有可能会并发地出现。</p><p>I/O 多路复用程序负责监听多个套接字， 并向文件事件分派器传送那些产生了事件的套接字。</p><p>尽管多个文件事件可能会并发地出现， 但 I/O 多路复用程序总是会将所有产生事件的套接字都入队到一个队列里面， 然后通过这个队列， 以有序（sequentially）、同步（synchronously）、每次一个套接字的方式向文件事件分派器传送套接字： 当上一个套接字产生的事件被处理完毕之后（该套接字为事件所关联的事件处理器执行完毕）， I/O 多路复用程序才会继续向文件事件分派器传送下一个套接字， 如图 IMAGE_DISPATCH_EVENT_VIA_QUEUE 。</p><p><img src="https://user-images.githubusercontent.com/7789698/30958923-315077b2-a471-11e7-867f-15a4ee350dda.png" alt="2015-09-13_55f524bd8058c"></p><p>文件事件分派器接收 I/O 多路复用程序传来的套接字， 并根据套接字产生的事件的类型， 调用相应的事件处理器。</p><p>服务器会为执行不同任务的套接字关联不同的事件处理器， 这些处理器是一个个函数， 它们定义了某个事件发生时， 服务器应该执行的动作。</p><ul><li>I/O 多路复用程序的实现<br>Redis 的 I/O 多路复用程序的所有功能都是通过包装常见的 select 、 epoll 、 evport 和 kqueue 这些 I/O 多路复用函数库来实现的， 每个 I/O 多路复用函数库在 Redis 源码中都对应一个单独的文件， 比如 ae_select.c 、 ae_epoll.c 、 ae_kqueue.c ， 诸如此类。</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/30959044-950343a2-a471-11e7-925c-f94ce82a3995.png" alt="2015-09-13_55f524bea64ce"></p><p>Redis 在 I/O 多路复用程序的实现源码中用 #include 宏定义了相应的规则， 程序会在编译时自动选择系统中性能最高的 I/O 多路复用函数库来作为 Redis 的 I/O 多路复用程序的底层实现：</p><p><a href="https://www.kancloud.cn/kancloud/redisbook/63885">https://www.kancloud.cn/kancloud/redisbook/63885</a></p><ul><li>一次完整的客户端与服务器连接事件示例<br>让我们来追踪一次 Redis 客户端与服务器进行连接并发送命令的整个过程， 看看在过程中会产生什么事件， 而这些事件又是如何被处理的。</li></ul><p>假设一个 Redis 服务器正在运作， 那么这个服务器的监听套接字的 AE_READABLE 事件应该正处于监听状态之下， 而该事件所对应的处理器为连接应答处理器。</p><p>如果这时有一个 Redis 客户端向服务器发起连接， 那么监听套接字将产生 AE_READABLE 事件， 触发连接应答处理器执行： 处理器会对客户端的连接请求进行应答， 然后创建客户端套接字， 以及客户端状态， 并将客户端套接字的 AE_READABLE 事件与命令请求处理器进行关联， 使得客户端可以向主服务器发送命令请求。</p><p>之后， 假设客户端向主服务器发送一个命令请求， 那么客户端套接字将产生 AE_READABLE 事件， 引发命令请求处理器执行， 处理器读取客户端的命令内容， 然后传给相关程序去执行。</p><p>执行命令将产生相应的命令回复， 为了将这些命令回复传送回客户端， 服务器会将客户端套接字的 AE_WRITABLE 事件与命令回复处理器进行关联： 当客户端尝试读取命令回复的时候， 客户端套接字将产生 AE_WRITABLE 事件， 触发命令回复处理器执行， 当命令回复处理器将命令回复全部写入到套接字之后， 服务器就会解除客户端套接字的 AE_WRITABLE 事件与命令回复处理器之间的关联。</p><p>图 IMAGE_COMMAND_PROGRESS 总结了上面描述的整个通讯过程， 以及通讯时用到的事件处理器。<br><img src="https://user-images.githubusercontent.com/7789698/30960298-33b7c72c-a475-11e7-8a1b-f2ffe510df96.png" alt="2015-09-13_55f524c5218e4"></p><ul><li>客户端属性<br>客户端状态包含的属性可以分为两类：</li></ul><ol><li>一类是比较通用的属性， 这些属性很少与特定功能相关， 无论客户端执行的是什么工作， 它们都要用到这些属性。</li><li>另外一类是和特定功能相关的属性， 比如操作数据库时需要用到的 db 属性和 dictid 属性， 执行事务时需要用到的 mstate 属性， 以及执行 WATCH 命令时需要用到的 watched_keys 属性， 等等。</li></ol><ul><li>套接字描述符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisClient &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    int fd;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>根据客户端类型的不同， fd 属性的值可以是 -1 或者是大于 -1 的整数：<br>伪客户端（fake client）的 fd 属性的值为 -1 ： 伪客户端处理的命令请求来源于 AOF 文件或者 Lua 脚本， 而不是网络， 所以这种客户端不需要套接字连接， 自然也不需要记录套接字描述符。 目前 Redis 服务器会在两个地方用到伪客户端， 一个用于载入 AOF 文件并还原数据库状态， 而另一个则用于执行 Lua 脚本中包含的 Redis 命令。</p><p>普通客户端的 fd 属性的值为大于 -1 的整数： 普通客户端使用套接字来与服务器进行通讯， 所以服务器会用 fd 属性来记录客户端套接字的描述符。 因为合法的套接字描述符不能是 -1 ， 所以普通客户端的套接字描述符的值必然是大于 -1 的整数。</p><p>执行 CLIENT_LIST 命令可以列出目前所有连接到服务器的普通客户端， 命令输出中的 fd 域显示了服务器连接客户端所使用的套接字描述符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; CLIENT list</span><br><span class="line"></span><br><span class="line">addr=127.0.0.1:53428 fd=6 name= age=1242 idle=0 ...</span><br><span class="line">addr=127.0.0.1:53469 fd=7 name= age=4 idle=4 ...</span><br></pre></td></tr></table></figure><p>使用 CLIENT_SETNAME 命令可以为客户端设置一个名字， 让客户端的身份变得更清晰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisClient &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    robj *name;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><ul><li>标志<br>客户端的标志属性 flags 记录了客户端的角色（role）， 以及客户端目前所处的状态：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisClient &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    int flags;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以是多个标志的二进制或， 比如：</p><p><code>flags = &lt;flag1&gt; | &lt;flag2&gt; | ...</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 客户端是一个主服务器</span><br><span class="line">REDIS_MASTER</span><br><span class="line"></span><br><span class="line"># 客户端正在被列表命令阻塞</span><br><span class="line">REDIS_BLOCKED</span><br><span class="line"></span><br><span class="line"># 客户端正在执行事务，但事务的安全性已被破坏</span><br><span class="line">REDIS_MULTI | REDIS_DIRTY_CAS</span><br><span class="line"></span><br><span class="line"># 客户端是一个从服务器，并且版本低于 Redis 2.8</span><br><span class="line">REDIS_SLAVE | REDIS_PRE_PSYNC</span><br><span class="line"></span><br><span class="line"># 这是专门用于执行 Lua 脚本包含的 Redis 命令的伪客户端</span><br><span class="line"># 它强制服务器将当前执行的命令写入 AOF 文件，并复制给从服务器</span><br><span class="line">REDIS_LUA_CLIENT | REDIS_FORCE_AOF | REDIS_FORCE_REPL</span><br></pre></td></tr></table></figure><ul><li>输入缓冲区</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisClient &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    sds querybuf;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>输入缓冲区的大小会根据输入内容动态地缩小或者扩大， 但它的最大大小不能超过 1 GB ， 否则服务器将关闭这个客户端。</p><ul><li>命令与命令参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisClient &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    robj **argv;</span><br><span class="line"></span><br><span class="line">    int argc;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><ul><li>身份验证</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisClient &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    int authenticated;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>如果 authenticated 的值为 0 ， 那么表示客户端未通过身份验证； 如果 authenticated 的值为 1 ， 那么表示客户端已经通过了身份验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># authenticated 属性的值从 0 变为 1</span><br><span class="line">redis&gt; AUTH 123321</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; PING</span><br><span class="line">PONG</span><br><span class="line"></span><br><span class="line">redis&gt; SET msg &quot;hello world&quot;</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>时间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisClient &#123;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    time_t ctime;</span><br><span class="line"></span><br><span class="line">    time_t lastinteraction;</span><br><span class="line"></span><br><span class="line">    time_t obuf_soft_limit_reached_time;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><ul><li>服务端</li><li>命令请求的执行过程</li></ul><p>那么从客户端发送 SET KEY VALUE 命令到获得回复 OK 期间， 客户端和服务器共需要执行以下操作：</p><ol><li>客户端向服务器发送命令请求 SET KEY VALUE 。</li><li>服务器接收并处理客户端发来的命令请求 SET KEY VALUE ， 在数据库中进行设置操作， 并产生命令回复 OK 。</li><li>服务器将命令回复 OK 发送给客户端。</li><li>客户端接收服务器返回的命令回复 OK ， 并将这个回复打印给用户观看。</li></ol><ul><li>发送命令请求<br>Redis 服务器的命令请求来自 Redis 客户端， 当用户在客户端中键入一个命令请求时， 客户端会将这个命令请求转换成协议格式， 然后通过连接到服务器的套接字， 将协议格式的命令请求发送给服务器<br><img src="https://user-images.githubusercontent.com/7789698/30960377-64b676c0-a475-11e7-9dee-d0edcbcd3a30.png" alt="2015-09-13_55f526cca2250"></li></ul><ul><li>读取命令请求</li></ul><p>当客户端与服务器之间的连接套接字因为客户端的写入而变得可读时， 服务器将调用命令请求处理器来执行以下操作：</p><ol><li>读取套接字中协议格式的命令请求， 并将其保存到客户端状态的输入缓冲区里面。</li><li>对输入缓冲区中的命令请求进行分析， 提取出命令请求中包含的命令参数， 以及命令参数的个数， 然后分别将参数和参数个数保存到客户端状态的 argv 属性和 argc 属性里面。</li><li>调用命令执行器， 执行客户端指定的命令。</li></ol><p><a href="https://www.kancloud.cn/kancloud/redisbook/63892">https://www.kancloud.cn/kancloud/redisbook/63892</a></p><h1 id="多机数据库的实现"><a href="#多机数据库的实现" class="headerlink" title="多机数据库的实现"></a>多机数据库的实现</h1><h2 id="旧版复制功能的实现"><a href="#旧版复制功能的实现" class="headerlink" title="旧版复制功能的实现"></a>旧版复制功能的实现</h2><p>Redis 的复制功能分为同步（sync）和命令传播（command propagate）两个操作：</p><ul><li><p>同步操作用于将从服务器的数据库状态更新至主服务器当前所处的数据库状态。</p></li><li><p>而命令传播操作则用于在主服务器的数据库状态被修改， 导致主从服务器的数据库状态出现不一致时， 让主从服务器的数据库重新回到一致状态。</p></li><li><p>同步<br>当客户端向从服务器发送 SLAVEOF 命令， 要求从服务器复制主服务器时， 从服务器首先需要执行同步操作， 也即是， 将从服务器的数据库状态更新至主服务器当前所处的数据库状态。</p></li></ul><p>从服务器对主服务器的同步操作需要通过向主服务器发送 SYNC 命令来完成， 以下是 SYNC 命令的执行步骤：</p><ol><li>从服务器向主服务器发送 SYNC 命令。</li><li>收到 SYNC 命令的主服务器执行 BGSAVE 命令， 在后台生成一个 RDB 文件， 并使用一个缓冲区记录从现在开始执行的所有写命令。</li><li>当主服务器的 BGSAVE 命令执行完毕时， 主服务器会将 BGSAVE 命令生成的 RDB 文件发送给从服务器， 从服务器接收并载入这个 RDB 文件， 将自己的数据库状态更新至主服务器执行 BGSAVE 命令时的数据库状态。</li><li>主服务器将记录在缓冲区里面的所有写命令发送给从服务器， 从服务器执行这些写命令， 将自己的数据库状态更新至主服务器数据库当前所处的状态。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/30960614-1ed7a902-a476-11e7-817e-3fe42e095c2b.png" alt="2015-09-13_55f5274336096"></p><table><thead><tr><th>时间</th><th>主服务器</th><th>从服务器</th></tr></thead><tbody><tr><td>T0</td><td>服务器启动。</td><td>服务器启动。</td></tr><tr><td>T1</td><td>执行 SET k1 v1 。</td><td></td></tr><tr><td>T2</td><td>执行 SET k2 v2 。</td><td></td></tr><tr><td>T3</td><td>执行 SET k3 v3 。</td><td></td></tr><tr><td>T4</td><td></td><td>向主服务器发送 SYNC 命令。</td></tr><tr><td>T5</td><td>接收到从服务器发来的 SYNC 命令， 执行 BGSAVE 命令， 创建包含键 k1 、 k2 、 k3 的 RDB 文件， 并使用缓冲区记录接下来执行的所有写命令。</td><td></td></tr><tr><td>T6</td><td>执行 SET k4 v4 ， 并将这个命令记录到缓冲区里面。</td><td></td></tr><tr><td>T7</td><td>执行 SET k5 v5 ， 并将这个命令记录到缓冲区里面。</td><td></td></tr><tr><td>T8</td><td>BGSAVE 命令执行完毕， 向从服务器发送 RDB 文件。</td><td></td></tr><tr><td>T9</td><td></td><td>接收并载入主服务器发来的 RDB 文件 ， 获得 k1 、 k2 、 k3 三个键。</td></tr><tr><td>T10</td><td>向从服务器发送缓冲区中保存的写命令 SET k4 v4 和 SET k5v5 。</td><td></td></tr><tr><td>T11</td><td></td><td>接收并执行主服务器发来的两个 SET 命令， 得到 k4 和 k5 两个键。</td></tr><tr><td>T12</td><td>同步完成， 现在主从服务器两者的数据库都包含了键 k1 、k2 、 k3 、 k4 和 k5 。</td><td>同步完成， 现在主从服务器两者的数据库都包含了键 k1 、 k2 、k3 、 k4 和 k5 。</td></tr></tbody></table><ul><li>命令传播<br>在同步操作执行完毕之后， 主从服务器两者的数据库将达到一致状态， 但这种一致并不是一成不变的 —— 每当主服务器执行客户端发送的写命令时， 主服务器的数据库就有可能会被修改， 并导致主从服务器状态不再一致。</li></ul><p>举个例子， 假设一个主服务器和一个从服务器刚刚完成同步操作， 它们的数据库都保存了相同的五个键 k1 至 k5 ， 如图 IMAGE_CONSISTENT 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30960653-3dd78516-a476-11e7-80a9-b96951fb733c.png" alt="2015-09-13_55f52746e0111"></p><p>如果这时， 客户端向主服务器发送命令 DEL k3 ， 那么主服务器在执行完这个 DEL 命令之后， 主从服务器的数据库将出现不一致： 主服务器的数据库已经不再包含键 k3 ， 但这个键却仍然包含在从服务器的数据库里面， 如图 IMAGE_INCONSISTENT 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30960690-59c4313e-a476-11e7-8652-1eabd5e35054.png" alt="2015-09-13_55f527488c8ad"></p><p>为了让主从服务器再次回到一致状态， 主服务器需要对从服务器执行命令传播操作： 主服务器会将自己执行的写命令 —— 也即是造成主从服务器不一致的那条写命令 —— 发送给从服务器执行， 当从服务器执行了相同的写命令之后， 主从服务器将再次回到一致状态。</p><p>在上面的例子中， 主服务器因为执行了命令 DEL k3 而导致主从服务器不一致， 所以主服务器将向从服务器发送相同的命令 DEL k3 ： 当从服务器执行完这个命令之后， 主从服务器将再次回到一致状态 —— 现在主从服务器两者的数据库都不再包含键 k3 了， 如图 IMAGE_PROPAGATE_DEL_k3 所示。</p><p><img src="https://user-images.githubusercontent.com/7789698/30960728-7680800c-a476-11e7-9321-7c17ff15f041.png" alt="2015-09-13_55f5274a0ca0f"></p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><ul><li>启动并初始化 Sentinel<br>启动一个 Sentinel 可以使用命令：<br><code>$ redis-sentinel /path/to/your/sentinel.conf</code><br>或者命令：<br><code>$ redis-server /path/to/your/sentinel.conf --sentinel</code><br>这两个命令的效果完全相同。</li></ul><p>当一个 Sentinel 启动时， 它需要执行以下步骤：</p><ol><li>初始化服务器。</li><li>将普通 Redis 服务器使用的代码替换成 Sentinel 专用代码。</li><li>初始化 Sentinel 状态。</li><li>根据给定的配置文件， 初始化 Sentinel 的监视主服务器列表。</li><li>创建连向主服务器的网络连接。</li></ol><ul><li>初始化服务器<br>因为 Sentinel 本质上只是一个运行在特殊模式下的 Redis 服务器， 所以启动 Sentinel 的第一步， 就是初始化一个普通的 Redis 服务器</li></ul><table><thead><tr><th>功能</th><th>使用情况</th></tr></thead><tbody><tr><td>数据库和键值对方面的命令， 比如 SET 、 DEL 、FLUSHDB 。</td><td>不使用。</td></tr><tr><td>事务命令， 比如 MULTI 和 WATCH 。</td><td>不使用。</td></tr><tr><td>脚本命令，比如 EVAL 。</td><td>不使用。</td></tr><tr><td>RDB 持久化命令， 比如 SAVE 和 BGSAVE 。</td><td>不使用。</td></tr><tr><td>AOF 持久化命令， 比如 BGREWRITEAOF 。</td><td>不使用。</td></tr><tr><td>复制命令，比如 SLAVEOF 。</td><td>Sentinel 内部可以使用，但客户端不可以使用。</td></tr><tr><td>发布与订阅命令， 比如 PUBLISH 和 SUBSCRIBE 。</td><td>SUBSCRIBE 、 PSUBSCRIBE 、 UNSUBSCRIBE PUNSUBSCRIBE 四个命令在 Sentinel 内部和客户端都可以使用， 但 PUBLISH 命令只能在 Sentinel 内部使用。</td></tr><tr><td>文件事件处理器（负责发送命令请求、处理命令回复）。</td><td>Sentinel 内部使用， 但关联的文件事件处理器和普通 Redis 服务器不同。</td></tr><tr><td>时间事件处理器（负责执行 serverCron 函数）。</td><td>Sentinel 内部使用， 时间事件的处理器仍然是 serverCron 函数， serverCron函数会调用 sentinel.c/sentinelTimer 函数， 后者包含了 Sentinel 要执行的所有操作。</td></tr></tbody></table><ul><li>使用 Sentinel 专用代码<br>启动 Sentinel 的第二个步骤就是将一部分普通 Redis 服务器使用的代码替换成 Sentinel 专用代码。</li></ul><p>比如说， 普通 Redis 服务器使用 redis.h/REDIS_SERVERPORT 常量的值作为服务器端口：<br><code>#define REDIS_SERVERPORT 6379</code><br>而 Sentinel 则使用 sentinel.c/REDIS_SENTINEL_PORT 常量的值作为服务器端口：<br><code>#define REDIS_SENTINEL_PORT 26379</code></p><p>除此之外， 普通 Redis 服务器使用 redis.c/redisCommandTable 作为服务器的命令表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct redisCommand redisCommandTable[] = &#123;</span><br><span class="line">    &#123;&quot;get&quot;,getCommand,2,&quot;r&quot;,0,NULL,1,1,1,0,0&#125;,</span><br><span class="line">    &#123;&quot;set&quot;,setCommand,-3,&quot;wm&quot;,0,noPreloadGetKeys,1,1,1,0,0&#125;,</span><br><span class="line">    &#123;&quot;setnx&quot;,setnxCommand,3,&quot;wm&quot;,0,noPreloadGetKeys,1,1,1,0,0&#125;,</span><br><span class="line">    // ...</span><br><span class="line">    &#123;&quot;script&quot;,scriptCommand,-2,&quot;ras&quot;,0,NULL,0,0,0,0,0&#125;,</span><br><span class="line">    &#123;&quot;time&quot;,timeCommand,1,&quot;rR&quot;,0,NULL,0,0,0,0,0&#125;,</span><br><span class="line">    &#123;&quot;bitop&quot;,bitopCommand,-4,&quot;wm&quot;,0,NULL,2,-1,1,0,0&#125;,</span><br><span class="line">    &#123;&quot;bitcount&quot;,bitcountCommand,-2,&quot;r&quot;,0,NULL,1,1,1,0,0&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化 Sentinel 状态<br>在应用了 Sentinel 的专用代码之后， 接下来， 服务器会初始化一个 sentinel.c/sentinelState 结构（后面简称“Sentinel 状态”）， 这个结构保存了服务器中所有和 Sentinel 功能有关的状态 （服务器的一般状态仍然由 redis.h/redisServer 结构保存）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">struct sentinelState &#123;</span><br><span class="line"></span><br><span class="line">    // 当前纪元，用于实现故障转移</span><br><span class="line">    uint64_t current_epoch;</span><br><span class="line"></span><br><span class="line">    // 保存了所有被这个 sentinel 监视的主服务器</span><br><span class="line">    // 字典的键是主服务器的名字</span><br><span class="line">    // 字典的值则是一个指向 sentinelRedisInstance 结构的指针</span><br><span class="line">    dict *masters;</span><br><span class="line"></span><br><span class="line">    // 是否进入了 TILT 模式？</span><br><span class="line">    int tilt;</span><br><span class="line"></span><br><span class="line">    // 目前正在执行的脚本的数量</span><br><span class="line">    int running_scripts;</span><br><span class="line"></span><br><span class="line">    // 进入 TILT 模式的时间</span><br><span class="line">    mstime_t tilt_start_time;</span><br><span class="line"></span><br><span class="line">    // 最后一次执行时间处理器的时间</span><br><span class="line">    mstime_t previous_time;</span><br><span class="line"></span><br><span class="line">    // 一个 FIFO 队列，包含了所有需要执行的用户脚本</span><br><span class="line">    list *scripts_queue;</span><br><span class="line"></span><br><span class="line">&#125; sentinel;</span><br></pre></td></tr></table></figure><ul><li>初始化 Sentinel 状态的 masters 属性<br>Sentinel 状态中的 masters 字典记录了所有被 Sentinel 监视的主服务器的相关信息， 其中：</li><li>字典的键是被监视主服务器的名字。</li><li>而字典的值则是被监视主服务器对应的 sentinel.c/sentinelRedisInstance 结构。<br>每个 sentinelRedisInstance 结构（后面简称“实例结构”）代表一个被 Sentinel 监视的 Redis 服务器实例（instance）， 这个实例可以是主服务器、从服务器、或者另外一个 Sentinel 。<br>实例结构包含的属性非常多， 以下代码展示了实例结构在表示主服务器时使用的其中一部分属性， 本章接下来将逐步对实例结构中的各个属性进行介绍：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">typedef struct sentinelRedisInstance &#123;</span><br><span class="line"></span><br><span class="line">    // 标识值，记录了实例的类型，以及该实例的当前状态</span><br><span class="line">    int flags;</span><br><span class="line"></span><br><span class="line">    // 实例的名字</span><br><span class="line">    // 主服务器的名字由用户在配置文件中设置</span><br><span class="line">    // 从服务器以及 Sentinel 的名字由 Sentinel 自动设置</span><br><span class="line">    // 格式为 ip:port ，例如 &quot;127.0.0.1:26379&quot;</span><br><span class="line">    char *name;</span><br><span class="line"></span><br><span class="line">    // 实例的运行 ID</span><br><span class="line">    char *runid;</span><br><span class="line"></span><br><span class="line">    // 配置纪元，用于实现故障转移</span><br><span class="line">    uint64_t config_epoch;</span><br><span class="line"></span><br><span class="line">    // 实例的地址</span><br><span class="line">    sentinelAddr *addr;</span><br><span class="line"></span><br><span class="line">    // SENTINEL down-after-milliseconds 选项设定的值</span><br><span class="line">    // 实例无响应多少毫秒之后才会被判断为主观下线（subjectively down）</span><br><span class="line">    mstime_t down_after_period;</span><br><span class="line"></span><br><span class="line">    // SENTINEL monitor &lt;master-name&gt; &lt;IP&gt; &lt;port&gt; &lt;quorum&gt; 选项中的 quorum 参数</span><br><span class="line">    // 判断这个实例为客观下线（objectively down）所需的支持投票数量</span><br><span class="line">    int quorum;</span><br><span class="line"></span><br><span class="line">    // SENTINEL parallel-syncs &lt;master-name&gt; &lt;number&gt; 选项的值</span><br><span class="line">    // 在执行故障转移操作时，可以同时对新的主服务器进行同步的从服务器数量</span><br><span class="line">    int parallel_syncs;</span><br><span class="line"></span><br><span class="line">    // SENTINEL failover-timeout &lt;master-name&gt; &lt;ms&gt; 选项的值</span><br><span class="line">    // 刷新故障迁移状态的最大时限</span><br><span class="line">    mstime_t failover_timeout;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; sentinelRedisInstance;</span><br></pre></td></tr></table></figure><p>sentinelRedisInstance.addr 属性是一个指向 sentinel.c/sentinelAddr 结构的指针， 这个结构保存着实例的 IP 地址和端口号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct sentinelAddr &#123;</span><br><span class="line"></span><br><span class="line">    char *ip;</span><br><span class="line"></span><br><span class="line">    int port;</span><br><span class="line"></span><br><span class="line">&#125; sentinelAddr;</span><br></pre></td></tr></table></figure><p>对 Sentinel 状态的初始化将引发对 masters 字典的初始化， 而 masters 字典的初始化是根据被载入的 Sentinel 配置文件来进行的。</p><ul><li>创建连向主服务器的网络连接<br>初始化 Sentinel 的最后一步是创建连向被监视主服务器的网络连接： Sentinel 将成为主服务器的客户端， 它可以向主服务器发送命令， 并从命令回复中获取相关的信息。</li></ul><p>对于每个被 Sentinel 监视的主服务器来说， Sentinel 会创建两个连向主服务器的异步网络连接：</p><p>一个是命令连接， 这个连接专门用于向主服务器发送命令， 并接收命令回复。<br>另一个是订阅连接， 这个连接专门用于订阅主服务器的 <strong>sentinel</strong>:hello 频道。<br>为什么有两个连接？</p><p>在 Redis 目前的发布与订阅功能中， 被发送的信息都不会保存在 Redis 服务器里面， 如果在信息发送时， 想要接收信息的客户端不在线或者断线， 那么这个客户端就会丢失这条信息。</p><p>因此， 为了不丢失 <strong>sentinel</strong>:hello 频道的任何信息， Sentinel 必须专门用一个订阅连接来接收该频道的信息。<br>而另一方面， 除了订阅频道之外， Sentinel 还又必须向主服务器发送命令， 以此来与主服务器进行通讯， 所以 Sentinel 还必须向主服务器创建命令连接。</p><p>并且因为 Sentinel 需要与多个实例创建多个网络连接， 所以 Sentinel 使用的是异步连接。</p><p>图 IMAGE_SENTINEL_CONNECT_SERVER 展示了一个 Sentinel 向被它监视的两个主服务器 master1 和 master2 创建命令连接和订阅连接的例子。</p><p><img src="https://user-images.githubusercontent.com/7789698/30962201-75404d30-a47b-11e7-8f0c-29ba45be8932.png" alt="2015-09-13_55f5282219b43"></p><ul><li>Sentinel 只是一个运行在特殊模式下的 Redis 服务器， 它使用了和普通模式不同的命令表， 所以 Sentinel 模式能够使用的命令和普通 Redis 服务器能够使用的命令不同。</li><li>Sentinel 会读入用户指定的配置文件， 为每个要被监视的主服务器创建相应的实例结构， 并创建连向主服务器的命令连接和订阅连接， 其中命令连接用于向主服务器发送命令请求， 而订阅连接则用于接收指定频道的消息。</li><li>Sentinel 通过向主服务器发送 INFO 命令来获得主服务器属下所有从服务器的地址信息， 并为这些从服务器创建相应的实例结构， 以及连向这些从服务器的命令连接和订阅连接。</li><li>在一般情况下， Sentinel 以每十秒一次的频率向被监视的主服务器和从服务器发送 INFO 命令， 当主服务器处于下线状态， 或者 Sentinel 正在对主服务器进行故障转移操作时， Sentinel 向从服务器发送 INFO 命令的频率会改为每秒一次。</li><li>对于监视同一个主服务器和从服务器的多个 Sentinel 来说， 它们会以每两秒一次的频率， 通过向被监视服务器的 <strong>sentinel</strong>:hello频道发送消息来向其他 Sentinel 宣告自己的存在。</li><li>每个 Sentinel 也会从 <strong>sentinel</strong>:hello 频道中接收其他 Sentinel 发来的信息， 并根据这些信息为其他 Sentinel 创建相应的实例结构， 以及命令连接。</li><li>Sentinel 只会与主服务器和从服务器创建命令连接和订阅连接， Sentinel 与 Sentinel 之间则只创建命令连接。</li><li>Sentinel 以每秒一次的频率向实例（包括主服务器、从服务器、其他 Sentinel）发送 PING 命令， 并根据实例对 PING 命令的回复来判断实例是否在线： 当一个实例在指定的时长中连续向 Sentinel 发送无效回复时， Sentinel 会将这个实例判断为主观下线。</li><li>当 Sentinel 将一个主服务器判断为主观下线时， 它会向同样监视这个主服务器的其他 Sentinel 进行询问， 看它们是否同意这个主服务器已经进入主观下线状态。</li><li>当 Sentinel 收集到足够多的主观下线投票之后， 它会将主服务器判断为客观下线， 并发起一次针对主服务器的故障转移操作。</li></ul><p>Sentinel 系统选举领头 Sentinel 的方法是对 Raft 算法的领头选举方法的实现</p><ul><li>集群</li></ul><p>一个 Redis 集群通常由多个节点（node）组成， 在刚开始的时候， 每个节点都是相互独立的， 它们都处于一个只包含自己的集群当中， 要组建一个真正可工作的集群， 我们必须将各个独立的节点连接起来， 构成一个包含多个节点的集群。</p><p>连接各个节点的工作可以使用 CLUSTER MEET 命令来完成， 该命令的格式如下：</p><p><code>CLUSTER MEET &lt;ip&gt; &lt;port&gt;</code></p><p>向一个节点 node 发送 CLUSTER MEET 命令， 可以让 node 节点与 ip 和 port 所指定的节点进行握手（handshake）， 当握手成功时， node节点就会将 ip 和 port 所指定的节点添加到 node 节点当前所在的集群中。<br>举个例子， 假设现在有三个独立的节点 127.0.0.1:7000 、 127.0.0.1:7001 、 127.0.0.1:7002 （下文省略 IP 地址，直接使用端口号来区分各个节点）， 我们首先使用客户端连上节点 7000 ， 通过发送 CLUSTER NODE 命令可以看到， 集群目前只包含 7000 自己一个节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -c -p 7000</span><br><span class="line">127.0.0.1:7000&gt; CLUSTER NODES</span><br><span class="line">51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure><p>通过向节点 7000 发送以下命令， 我们可以将节点 7001 添加到节点 7000 所在的集群里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7000&gt; CLUSTER MEET 127.0.0.1 7001</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:7000&gt; CLUSTER NODES</span><br><span class="line">68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388204746210 0 connected</span><br><span class="line">51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure><p>继续向节点 7000 发送以下命令， 我们可以将节点 7002 也添加到节点 7000 和节点 7001 所在的集群里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7000&gt; CLUSTER MEET 127.0.0.1 7002</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:7000&gt; CLUSTER NODES</span><br><span class="line">68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388204848376 0 connected</span><br><span class="line">9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388204847977 0 connected</span><br><span class="line">51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure><p>现在， 这个集群里面包含了 7000 、 7001 和 7002 三个节点， 图 IMAGE_CONNECT_NODES_1 至 IMAGE_CONNECT_NODES_5 展示了这三个节点进行握手的整个过程。</p><p><img src="https://user-images.githubusercontent.com/7789698/30962347-f7021b0a-a47b-11e7-9f53-7db8a3818ab6.png" alt="2015-09-13_55f52896e231a"></p><p><img src="https://user-images.githubusercontent.com/7789698/30962355-fe5ce376-a47b-11e7-8373-a0750e4aac54.png" alt="2015-09-13_55f52898c2d57"></p><p><img src="https://user-images.githubusercontent.com/7789698/30962363-045127f6-a47c-11e7-805e-2a7568d9e580.png" alt="2015-09-13_55f52899dbdb6"></p><p><img src="https://user-images.githubusercontent.com/7789698/30962380-15c00106-a47c-11e7-944f-162fc1594086.png" alt="2015-09-13_55f5289b0e82b"></p><ul><li>启动节点<br>一个节点就是一个运行在集群模式下的 Redis 服务器， Redis 服务器在启动时会根据 cluster-enabled 配置选项的是否为 yes 来决定是否开启服务器的集群模式</li></ul><p>节点（运行在集群模式下的 Redis 服务器）会继续使用所有在单机模式中使用的服务器组件， 比如说：</p><ul><li><p>节点会继续使用文件事件处理器来处理命令请求和返回命令回复。</p></li><li><p>节点会继续使用时间事件处理器来执行 serverCron 函数， 而 serverCron 函数又会调用集群模式特有的 clusterCron 函数： clusterCron函数负责执行在集群模式下需要执行的常规操作， 比如向集群中的其他节点发送 Gossip 消息， 检查节点是否断线； 又或者检查是否需要对下线节点进行自动故障转移， 等等。</p></li><li><p>节点会继续使用数据库来保存键值对数据，键值对依然会是各种不同类型的对象。</p></li><li><p>节点会继续使用 RDB 持久化模块和 AOF 持久化模块来执行持久化工作。</p></li><li><p>节点会继续使用发布与订阅模块来执行 PUBLISH 、 SUBSCRIBE 等命令。</p></li><li><p>节点会继续使用复制模块来进行节点的复制工作。</p></li><li><p>节点会继续使用 Lua 脚本环境来执行客户端输入的 Lua 脚本。</p></li><li><p>集群数据结构<br>clusterNode 结构保存了一个节点的当前状态， 比如节点的创建时间， 节点的名字， 节点当前的配置纪元， 节点的 IP 和地址， 等等。</p></li></ul><p>每个节点都会使用一个 clusterNode 结构来记录自己的状态， 并为集群中的所有其他节点（包括主节点和从节点）都创建一个相应的clusterNode 结构， 以此来记录其他节点的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">struct clusterNode &#123;</span><br><span class="line"></span><br><span class="line">    // 创建节点的时间</span><br><span class="line">    mstime_t ctime;</span><br><span class="line"></span><br><span class="line">    // 节点的名字，由 40 个十六进制字符组成</span><br><span class="line">    // 例如 68eef66df23420a5862208ef5b1a7005b806f2ff</span><br><span class="line">    char name[REDIS_CLUSTER_NAMELEN];</span><br><span class="line"></span><br><span class="line">    // 节点标识</span><br><span class="line">    // 使用各种不同的标识值记录节点的角色（比如主节点或者从节点），</span><br><span class="line">    // 以及节点目前所处的状态（比如在线或者下线）。</span><br><span class="line">    int flags;</span><br><span class="line"></span><br><span class="line">    // 节点当前的配置纪元，用于实现故障转移</span><br><span class="line">    uint64_t configEpoch;</span><br><span class="line"></span><br><span class="line">    // 节点的 IP 地址</span><br><span class="line">    char ip[REDIS_IP_STR_LEN];</span><br><span class="line"></span><br><span class="line">    // 节点的端口号</span><br><span class="line">    int port;</span><br><span class="line"></span><br><span class="line">    // 保存连接节点所需的有关信息</span><br><span class="line">    clusterLink *link;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>clusterNode 结构的 link 属性是一个 clusterLink 结构， 该结构保存了连接节点所需的有关信息， 比如套接字描述符， 输入缓冲区和输出缓冲区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">typedef struct clusterLink &#123;</span><br><span class="line"></span><br><span class="line">    // 连接的创建时间</span><br><span class="line">    mstime_t ctime;</span><br><span class="line"></span><br><span class="line">    // TCP 套接字描述符</span><br><span class="line">    int fd;</span><br><span class="line"></span><br><span class="line">    // 输出缓冲区，保存着等待发送给其他节点的消息（message）。</span><br><span class="line">    sds sndbuf;</span><br><span class="line"></span><br><span class="line">    // 输入缓冲区，保存着从其他节点接收到的消息。</span><br><span class="line">    sds rcvbuf;</span><br><span class="line"></span><br><span class="line">    // 与这个连接相关联的节点，如果没有的话就为 NULL</span><br><span class="line">    struct clusterNode *node;</span><br><span class="line"></span><br><span class="line">&#125; clusterLink;</span><br></pre></td></tr></table></figure><p>redisClient 结构和 clusterLink 结构的相同和不同之处</p><p>redisClient 结构和 clusterLink 结构都有自己的套接字描述符和输入、输出缓冲区， 这两个结构的区别在于， redisClient 结构中的套接字和缓冲区是用于连接客户端的， 而 clusterLink 结构中的套接字和缓冲区则是用于连接节点的。</p><p>最后， 每个节点都保存着一个 clusterState 结构， 这个结构记录了在当前节点的视角下， 集群目前所处的状态 —— 比如集群是在线还是下线， 集群包含多少个节点， 集群当前的配置纪元， 诸如此类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">typedef struct clusterState &#123;</span><br><span class="line"></span><br><span class="line">    // 指向当前节点的指针</span><br><span class="line">    clusterNode *myself;</span><br><span class="line"></span><br><span class="line">    // 集群当前的配置纪元，用于实现故障转移</span><br><span class="line">    uint64_t currentEpoch;</span><br><span class="line"></span><br><span class="line">    // 集群当前的状态：是在线还是下线</span><br><span class="line">    int state;</span><br><span class="line"></span><br><span class="line">    // 集群中至少处理着一个槽的节点的数量</span><br><span class="line">    int size;</span><br><span class="line"></span><br><span class="line">    // 集群节点名单（包括 myself 节点）</span><br><span class="line">    // 字典的键为节点的名字，字典的值为节点对应的 clusterNode 结构</span><br><span class="line">    dict *nodes;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; clusterState;</span><br></pre></td></tr></table></figure><p>以前面介绍的 7000 、 7001 、 7002 三个节点为例， 图 IMAGE_CLUSTER_STATE_OF_7000 展示了节点 7000 创建的 clusterState 结构， 这个结构从节点 7000 的角度记录了集群、以及集群包含的三个节点的当前状态 （为了空间考虑，图中省略了 clusterNode 结构的一部分属性）：</p><ul><li>结构的 currentEpoch 属性的值为 0 ， 表示集群当前的配置纪元为 0 。</li><li>结构的 size 属性的值为 0 ， 表示集群目前没有任何节点在处理槽： 因此结构的 state 属性的值为 REDIS_CLUSTER_FAIL —— 这表示集群目前处于下线状态。</li><li>结构的 nodes 字典记录了集群目前包含的三个节点， 这三个节点分别由三个 clusterNode 结构表示： 其中 myself 指针指向代表节点 7000 的 clusterNode 结构， 而字典中的另外两个指针则分别指向代表节点 7001 和代表节点 7002 的 clusterNode 结构， 这两个节点是节点 7000 已知的在集群中的其他节点。</li><li>三个节点的 clusterNode 结构的 flags 属性都是 REDIS_NODE_MASTER ，说明三个节点都是主节点。</li></ul><p>节点 7001 和节点 7002 也会创建类似的 clusterState 结构：</p><ul><li><p>不过在节点 7001 创建的 clusterState 结构中， myself 指针将指向代表节点 7001 的 clusterNode 结构， 而节点 7000 和节点 7002 则是集群中的其他节点。</p></li><li><p>而在节点 7002 创建的 clusterState 结构中， myself 指针将指向代表节点 7002 的 clusterNode 结构， 而节点 7000 和节点 7001 则是集群中的其他节点。</p></li><li><p>CLUSTER MEET 命令的实现<br>通过向节点 A 发送 CLUSTER MEET 命令， 客户端可以让接收命令的节点 A 将另一个节点 B 添加到节点 A 当前所在的集群里面：</p></li></ul><p><code>CLUSTER MEET &lt;ip&gt; &lt;port&gt;</code></p><p>收到命令的节点 A 将与节点 B 进行握手（handshake）， 以此来确认彼此的存在， 并为将来的进一步通信打好基础：</p><ol><li>节点 A 会为节点 B 创建一个 clusterNode 结构， 并将该结构添加到自己的 clusterState.nodes 字典里面。</li><li>之后， 节点 A 将根据 CLUSTER MEET 命令给定的 IP 地址和端口号， 向节点 B 发送一条 MEET 消息（message）。</li><li>如果一切顺利， 节点 B 将接收到节点 A 发送的 MEET 消息， 节点 B 会为节点 A 创建一个 clusterNode 结构， 并将该结构添加到自己的 clusterState.nodes 字典里面。</li><li>之后， 节点 B 将向节点 A 返回一条 PONG 消息。</li><li>如果一切顺利， 节点 A 将接收到节点 B 返回的 PONG 消息， 通过这条 PONG 消息节点 A 可以知道节点 B 已经成功地接收到了自己发送的 MEET 消息。</li><li>之后， 节点 A 将向节点 B 返回一条 PING 消息。</li><li>如果一切顺利， 节点 B 将接收到节点 A 返回的 PING 消息， 通过这条 PING 消息节点 B 可以知道节点 A 已经成功地接收到了自己返回的 PONG 消息， 握手完成。</li></ol><p><img src="https://user-images.githubusercontent.com/7789698/30962518-aaeae3e0-a47c-11e7-9e7e-49d70d108122.png" alt="2015-09-13_55f528a75c69b"></p><p>之后， 节点 A 会将节点 B 的信息通过 Gossip 协议传播给集群中的其他节点， 让其他节点也与节点 B 进行握手， 最终， 经过一段时间之后， 节点 B 会被集群中的所有节点认识。</p><h1 id="独立功能的实现"><a href="#独立功能的实现" class="headerlink" title="独立功能的实现"></a>独立功能的实现</h1><p><a href="https://www.kancloud.cn/kancloud/redisbook/63905">https://www.kancloud.cn/kancloud/redisbook/63905</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO</title>
      <link href="/hexo/post/429dd195.html"/>
      <url>/hexo/post/429dd195.html</url>
      
        <content type="html"><![CDATA[<h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><p>假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。</p><p>假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“<strong>缓冲区非空</strong>”。</p><p>但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“<strong>缓冲区满</strong>”。</p><p>假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“<strong>缓冲区非满</strong>”</p><p>也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“<strong>缓冲区空</strong>”。</p><p>阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)</p><h2 id="非阻塞忙轮询的I-O方式"><a href="#非阻塞忙轮询的I-O方式" class="headerlink" title="非阻塞忙轮询的I/O方式"></a>非阻塞忙轮询的I/O方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while true &#123;</span><br><span class="line">    for i in stream[]; &#123;</span><br><span class="line">        if i has data</span><br><span class="line">            read until unavailable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有的流都没有数据，那么只会白白浪费CPU</p><h2 id="非阻塞无差别轮询的I-O方式"><a href="#非阻塞无差别轮询的I-O方式" class="headerlink" title="非阻塞无差别轮询的I/O方式"></a>非阻塞无差别轮询的I/O方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while true &#123;</span><br><span class="line">    select(streams[])</span><br><span class="line">    for i in streams[] &#123;</span><br><span class="line">        if i has data</span><br><span class="line">            read until unavailable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流。</p><p>使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，每一次无差别轮询时间就越长。</p><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>epoll会把哪个流发生了怎样的I/O事件通知我们。（复杂度降低到了O(1)）</p><ul><li>epoll_create 创建一个epoll对象，一般epollfd = epoll_create()</li><li>epoll_ctl （epoll_add/epoll_del的合体），往epoll对象中增加/删除某一个流的某一个事件</li><li>epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入</li><li>epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入</li><li>epoll_wait(epollfd,…)等待直到注册的事件发生<br>（注：当对一个非阻塞流的读写发生缓冲区满或缓冲区空，write/read会返回-1，并设置errno=EAGAIN。而epoll只关心缓冲区非满和缓冲区非空事件）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while true &#123;</span><br><span class="line">    active_stream[] = epoll_wait(epollfd)</span><br><span class="line">    for i in active_stream[] &#123;</span><br><span class="line">        read or write till</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内核的最底层是中断，类似系统回调的机制。网卡设备对应一个中断号, 当网卡收到网络端的消息的时候会向CPU发起中断请求, 然后CPU处理该请求. 通过驱动程序 进而操作系统得到通知, 系统然后通知epoll, epoll通知用户代码。epoll在被内核初始化时（操作系统启动），同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的socket，这些socket会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</p><h2 id="epoll和select的区别"><a href="#epoll和select的区别" class="headerlink" title="epoll和select的区别"></a>epoll和select的区别</h2><p>进程通过将一个或多个fd传递给select或poll系统调用，阻塞在select;这样select/poll可以帮我们侦测许多fd是否就绪；但是select/poll是顺序扫描fd是否就绪，而且支持的fd数量有限。linux还提供了一个epoll系统调用，epoll是基于事件驱动方式，而不是顺序扫描,当有fd就绪时，立即回调函数rollback</p><p>传统的BIO里面socket.read()，如果TCP RecvBuffer里没有数据，函数会一直阻塞，直到收到数据，返回读到的数据。</p><p>对于NIO，如果TCP RecvBuffer有数据，就把数据从网卡读到内存，并且返回给用户；反之则直接返回0，永远不会阻塞。</p><p>最新的AIO(Async I/O)里面会更进一步：不但等待就绪是非阻塞的，就连数据从网卡到内存的过程也是异步的。</p><p>换句话说，BIO里用户最关心“我要读”，NIO里用户最关心”我可以读了”，在AIO模型里用户更需要关注的是“读完了”。</p><p>NIO一个重要的特点是：socket主要的读、写、注册和接收函数，在等待就绪阶段都是非阻塞的，真正的I/O操作是同步阻塞的（消耗CPU但性能非常高）。</p><p>NIO的读写函数可以立刻返回，这就给了我们不开线程利用CPU的最好机会：如果一个连接不能读写（socket.read()返回0或者socket.write()返回0），我们可以把这件事记下来，记录的方式通常是在Selector上注册标记位，然后切换到其它就绪的连接（channel）继续进行读写。</p><p>下面具体看下如何利用事件模型单线程处理所有I/O请求：</p><p>NIO的主要事件有几个：读就绪、写就绪、有新连接到来。</p><p>我们首先需要注册当这几个事件到来的时候所对应的处理器。然后在合适的时机告诉事件选择器：我对这个事件感兴趣。对于写操作，就是写不出去的时候对写事件感兴趣；对于读操作，就是完成连接和系统没有办法承载新读入的数据的时；对于accept，一般是服务器刚启动的时候；而对于connect，一般是connect失败需要重连或者直接异步调用connect的时候。</p><p>其次，用一个死循环选择就绪的事件，会执行系统调用（Linux 2.6之前是select、poll，2.6之后是epoll，Windows是IOCP），还会阻塞的等待新事件的到来。新事件到来的时候，会在selector上注册标记位，标示可读、可写或者有连接到来。</p><p>注意，select是阻塞的，无论是通过操作系统的通知（epoll）还是不停的轮询(select，poll)，这个函数是阻塞的。所以你可以放心大胆地在一个while(true)里面调用这个函数而不用担心CPU空转。</p><p>Java NIO 由以下几个核心部分组成：</p><ul><li>Channels</li><li>Buffers</li><li>Selectors</li></ul><h1 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h1><p>当我们需要与 NIO Channel 进行交互时, 我们就需要使用到 NIO Buffer, 即数据从 Buffer读取到 Channel 中, 并且从 Channel 中写入到 Buffer 中.<br>实际上, 一个 Buffer 其实就是一块内存区域, 我们可以在这个内存区域中进行数据的读写. NIO Buffer 其实是这样的内存块的一个封装, 并提供了一些操作方法让我们能够方便地进行数据的读写.</p><p>Buffer 类型有:</p><ol><li>ByteBuffer 包括HeapByteBuffer和DirectByteBuffer两种。<br>ByteBuffer<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(capacity, capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>HeapByteBuffer 通过初始化字节数组hd，在虚拟机堆上申请内存空间。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   HeapByteBuffer(<span class="keyword">int</span> cap, <span class="keyword">int</span> lim) &#123;            <span class="comment">// package-private</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, lim, cap, <span class="keyword">new</span> <span class="keyword">byte</span>[cap], <span class="number">0</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        hb = new byte[cap];</span></span><br><span class="line"><span class="comment">        offset = 0;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ByteBuffer(<span class="keyword">int</span> mark, <span class="keyword">int</span> pos, <span class="keyword">int</span> lim, <span class="keyword">int</span> cap,   <span class="comment">// package-private</span></span><br><span class="line">                 <span class="keyword">byte</span>[] hb, <span class="keyword">int</span> offset)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">super</span>(mark, pos, lim, cap);</span><br><span class="line">        <span class="keyword">this</span>.hb = hb;</span><br><span class="line">        <span class="keyword">this</span>.offset = offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span>[] hb;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectByteBuffer(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DirectByteBuffer 通过unsafe.allocateMemory在物理内存中申请地址空间（非jvm堆内存），并在ByteBuffer的address变量中维护指向该内存的地址。<br>unsafe.setMemory(base, size, (byte) 0)方法把新申请的内存数据清零。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="keyword">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line">     <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="comment">//-Dsun.nio.PageAlignDirectMemory=true 判断是否开启按页分配对齐</span></span><br><span class="line">     <span class="keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">    <span class="comment">//默认4k</span></span><br><span class="line">     <span class="keyword">int</span> ps = Bits.pageSize();</span><br><span class="line">     <span class="keyword">long</span> size = Math.max(<span class="number">1L</span>, (<span class="keyword">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">     Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">long</span> base = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         base = unsafe.allocateMemory(size);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">         Bits.unreserveMemory(size, cap);</span><br><span class="line">         <span class="keyword">throw</span> x;</span><br><span class="line">     &#125;</span><br><span class="line">     unsafe.setMemory(base, size, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">     <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">         <span class="comment">// 如果是按页分配对齐的，对齐到地址的页首，为什么要使用页首呢？</span></span><br><span class="line">         <span class="comment">//CPU不会一次读取或写入一个字节。相反，CPU一次访问2、4、8、16或32字节块中的内存。这样做的原因是性能 —在4字节或16字节边界上访问地址要比在1字节边界上访问地址快得多。</span></span><br><span class="line">         <span class="comment">//如果数据没有对齐为4字节的边界，CPU必须执行额外的工作来访问数据：加载2个数据块，转移不需要的字节，然后将它们组合在一起。这个过程肯定会降低性能，浪费CPU周期，只是为了从内存中获得正确的数据。</span></span><br><span class="line">         <span class="comment">//http://www.songho.ca/misc/alignment/dataalign.html</span></span><br><span class="line">         address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         address = base;</span><br><span class="line">     &#125;</span><br><span class="line">     cleaner = Cleaner.create(<span class="keyword">this</span>, <span class="keyword">new</span> Deallocator(base, size, cap));</span><br><span class="line">     att = <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li><li><a href="http://www.jianshu.com/p/f90866dcbffc">MappedByteBuffer</a></li></ol><p>使用Buffer读写数据一般遵循以下四个步骤：</p><ol><li>写入数据到Buffer</li><li>调用flip()方法</li><li>从Buffer中读取数据</li><li>调用clear()方法或者compact()方法</li></ol><p>当我们将数据写入到 Buffer 中时, Buffer 会记录我们已经写了多少的数据, 当我们需要从 Buffer 中读取数据时, 必须调用 Buffer.flip()将 Buffer 切换为读模式.<br>一旦读取了所有的 Buffer 数据, 那么我们必须清理 Buffer, 让其从新可写, 清理 Buffer 可以调用 Buffer.clear() 或 Buffer.compact().<br>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IntBuffer intBuffer = IntBuffer.allocate(2);</span><br><span class="line">intBuffer.put(12345678);</span><br><span class="line">intBuffer.put(2);</span><br><span class="line">intBuffer.flip();</span><br><span class="line">System.err.println(intBuffer.get());</span><br><span class="line">System.err.println(intBuffer.get());</span><br></pre></td></tr></table></figure><ul><li>mark：初始值为-1，用于备份当前的position</li><li>position：初始值为0。position表示当前可以写入或读取数据的位置。当写入或读取一个数据后， position向前移动到下一个位置。</li><li>limit：<br>写模式下，limit表示最多能往Buffer里写多少数据，等于capacity值。<br>读模式下，limit表示最多可以读取多少数据。</li><li>capacity：缓存数组大小</li></ul><p><img src="https://user-images.githubusercontent.com/7789698/30013264-2a2093e8-9178-11e7-8b97-027d224908d3.png" alt="image"></p><p>mark()：把当前的position赋值给mark</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public final Buffer mark() &#123;</span><br><span class="line">    mark = position;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reset()：把mark值还原给position</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final Buffer reset() &#123;</span><br><span class="line">    int m = mark;</span><br><span class="line">    if (m &lt; 0)</span><br><span class="line">        throw new InvalidMarkException();</span><br><span class="line">    position = m;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clear()：一旦读完Buffer中的数据，需要让Buffer准备好再次被写入，clear会恢复状态值，但不会擦除数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public final Buffer clear() &#123;</span><br><span class="line">    position = 0;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -1;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flip()：Buffer有两种模式，写模式和读模式，flip后Buffer从写模式变成读模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public final Buffer flip() &#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = 0;</span><br><span class="line">    mark = -1;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rewind()：重置position为0，从头读写数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final Buffer rewind() &#123;</span><br><span class="line">    position = 0;</span><br><span class="line">    mark = -1;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h1><ul><li>流是单向的，通道是双向的，可读可写。</li><li>流读写是阻塞的，通道可以异步读写。</li><li>流中的数据可以选择性的先读到缓存中，通道的数据总是要先读到一个缓存中，或从缓存中写入，如下所示：<br><img src="https://user-images.githubusercontent.com/7789698/30013733-c37fffc2-917a-11e7-843f-2bab57034d57.png" alt="image"></li></ul><p>目前已知Channel的实现类有：</p><ol><li>FileChannel  从文件中读写数据。</li><li>DatagramChannel  能通过UDP读写网络中的数据。</li><li>SocketChannel  能通过TCP读写网络中的数据。</li><li>ServerSocketChannel  可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。</li></ol><p>从Channel写到Buffer的例子</p><p><code>int bytesRead = inChannel.read(buf); //read into buffer.</code></p><p>从Buffer读取数据到Channel的例子：</p><p><code>int bytesWritten = inChannel.write(buf);</code></p><p>FileChannel的read、write和map通过其实现类FileChannelImpl实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">File file = new RandomAccessFile(&quot;data.txt&quot;, &quot;rw&quot;);</span><br><span class="line">FileChannel channel = file.getChannel();</span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(48);</span><br><span class="line"></span><br><span class="line">int bytesRead = channel.read(buffer);</span><br><span class="line">while (bytesRead != -1) &#123;</span><br><span class="line">    System.out.println(&quot;Read &quot; + bytesRead);</span><br><span class="line">    buffer.flip();</span><br><span class="line">    while(buffer.hasRemaining())&#123;</span><br><span class="line">        System.out.print((char) buffer.get());</span><br><span class="line">    &#125;</span><br><span class="line">    buffer.clear();</span><br><span class="line">    bytesRead = channel.read(buffer);</span><br><span class="line">&#125;</span><br><span class="line">file.close();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public int read(ByteBuffer dst) throws IOException &#123;</span><br><span class="line">    ensureOpen();</span><br><span class="line">    if(!readable) &#123;</span><br><span class="line">        throw new NonReadableChannelException();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        synchronized(positionLock) &#123;</span><br><span class="line">            int n = 0;</span><br><span class="line">            int ti = -1;</span><br><span class="line">            try &#123;</span><br><span class="line">               begin();</span><br><span class="line">                ti = threads.add();</span><br><span class="line">                if(!isOpen()) &#123;</span><br><span class="line">                    return 0;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        n = IOUtil.read(this.fd, dst, -1L, this.nd);</span><br><span class="line">                    &#125; while(n == IOStatus.INTERRUPTED &amp;&amp; this.isOpen());</span><br><span class="line"></span><br><span class="line">                    return IOStatus.normalize(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">               threads.remove(ti);</span><br><span class="line">               end(n &gt; 0);</span><br><span class="line">                assert IOStatus.check(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IOUtil</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static int read(FileDescriptor fd, ByteBuffer dst, long position, NativeDispatcher nd) throws IOException &#123;</span><br><span class="line">    if(dst.isReadOnly()) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Read-only buffer&quot;);</span><br><span class="line">    &#125; else if(dst instanceof DirectBuffer) &#123;</span><br><span class="line">        return readIntoNativeBuffer(fd, dst, position, ));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ByteBuffer bb = Util.getTemporaryDirectBuffer(dst.remaining());</span><br><span class="line">        try &#123;</span><br><span class="line">            int n = readIntoNativeBuffer(fd, bb, position, ));</span><br><span class="line">            bb.flip();</span><br><span class="line">            if(n &gt; 0) &#123;</span><br><span class="line">                dst.put(bb);</span><br><span class="line">            &#125;</span><br><span class="line">            return n;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            Util.offerFirstTemporaryDirectBuffer(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述实现可以看出，基于channel的文件数据读取步骤如下：<br>1、申请一块和缓存同大小的DirectByteBuffer bb。<br>2、读取数据到缓存bb，底层由NativeDispatcher的read实现。<br>3、把bb的数据读取到dst（用户定义的缓存，在jvm中分配内存）。</p><p>read方法导致数据复制了两次。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public int write(ByteBuffer src) throws IOException &#123;</span><br><span class="line">    ensureOpen();</span><br><span class="line">     if(!writable) &#123;</span><br><span class="line">         throw new NonWritableChannelException();</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         synchronized(positionLock) &#123;</span><br><span class="line">             int n = 0;</span><br><span class="line">             int ti = -1;</span><br><span class="line"></span><br><span class="line">             try &#123;</span><br><span class="line">                begin();</span><br><span class="line">                 ti =threads.add();</span><br><span class="line">                 if(isOpen()) &#123;</span><br><span class="line">                     do &#123;</span><br><span class="line">                         n = IOUtil.write(this.fd, src, -1L, this.nd);</span><br><span class="line">                     &#125; while(n == IOStatus.INTERRUPTED &amp;&amp; this.isOpen());</span><br><span class="line">                     return IOStatus.normalize(n);</span><br><span class="line">                 &#125;</span><br><span class="line">                 return 0;</span><br><span class="line">             &#125; finally &#123;</span><br><span class="line">                threads.remove(ti);</span><br><span class="line">                end(n &gt; 0);</span><br><span class="line">                 assert IOStatus.check(n);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">static int write(FileDescriptor fd, ByteBuffer src, long position, NativeDispatcher nd) throws IOException &#123;</span><br><span class="line">    if(src instanceof DirectBuffer) &#123;</span><br><span class="line">        return writeFromNativeBuffer(fd, src, position, nd);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        int pos = src.position();</span><br><span class="line">        int lim = src.limit();</span><br><span class="line">        assert(pos &lt;= lim);</span><br><span class="line">        int rem = pos &lt;= lim?lim - pos:0;</span><br><span class="line">        ByteBuffer bb = Util.getTemporaryDirectBuffer(rem);</span><br><span class="line">        try &#123;</span><br><span class="line">            bb.put(src);</span><br><span class="line">            bb.flip();</span><br><span class="line">            src.position(pos);</span><br><span class="line">            int n = writeFromNativeBuffer(fd, bb, position, nd);</span><br><span class="line">            if(n &gt; 0) &#123;</span><br><span class="line">                src.position(pos + n);</span><br><span class="line">            &#125;</span><br><span class="line">            return n;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            Util.offerFirstTemporaryDirectBuffer(bb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述实现可以看出，基于channel的文件数据写入步骤如下：<br>1、申请一块DirectByteBuffer，bb大小为byteBuffer中的limit - position。<br>2、复制byteBuffer中的数据到bb中。<br>3、把数据从bb中写入到文件，底层由NativeDispatcher的write实现，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private static int writeFromNativeBuffer(FileDescriptor fd, </span><br><span class="line">      ByteBuffer bb, long position, NativeDispatcher nd)</span><br><span class="line">  throws IOException &#123;</span><br><span class="line">  int pos = bb.position();</span><br><span class="line">  int lim = bb.limit();</span><br><span class="line">  assert (pos &lt;= lim);</span><br><span class="line">  int rem = (pos &lt;= lim ? lim - pos : 0);</span><br><span class="line"></span><br><span class="line">  int written = 0;</span><br><span class="line">  if (rem == 0)</span><br><span class="line">      return 0;</span><br><span class="line">  if (position != -1) &#123;</span><br><span class="line">      written = nd.pwrite(fd,</span><br><span class="line">                          ((DirectBuffer)bb).address() + pos,</span><br><span class="line">                          rem, position);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      written = nd.write(fd, ((DirectBuffer)bb).address() + pos, rem);</span><br><span class="line">  &#125;</span><br><span class="line">  if (written &gt; 0)</span><br><span class="line">      bb.position(pos + written);</span><br><span class="line">  return written;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transferFrom()</p><p>FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中。在SoketChannel的实现中，SocketChannel只会传输此刻准备好的数据（可能不足count字节）。因此，SocketChannel可能不会将请求的所有数据(count个字节)全部传输到FileChannel中。</p><p><code>toChannel.transferFrom(0, fromChannel.size(), fromChannel);</code></p><p>transferTo()</p><p>transferTo()方法将数据从FileChannel传输到其他的channel中</p><p><code>fromChannel.transferTo(position, count, toChannel);</code></p><h2 id="Scattering-Reads"><a href="#Scattering-Reads" class="headerlink" title="Scattering Reads"></a>Scattering Reads</h2><p>Scattering Reads是指数据从一个channel读取到多个buffer中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer header = ByteBuffer.allocate(128);</span><br><span class="line">ByteBuffer body   = ByteBuffer.allocate(1024);</span><br><span class="line">ByteBuffer[] bufferArray = &#123; header, body &#125;;</span><br><span class="line">channel.read(bufferArray);</span><br></pre></td></tr></table></figure><p>read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写</p><h2 id="Gathering-Writes"><a href="#Gathering-Writes" class="headerlink" title="Gathering Writes"></a>Gathering Writes</h2><p>Gathering Writes是指数据从多个buffer写入到同一个channel</p><p>write()方法会按照buffer在数组中的顺序，将数据写入到channel，注意只有position和limit之间的数据才会被写入</p><h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><p>Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。仅用单个线程来处理多个Channels的好处是，只需要更少的线程来处理通道。事实上，可以只用一个线程处理所有的通道。对于操作系统来说，线程之间上下文切换的开销很大，而且每个线程都要占用系统的一些资源（如内存）。因此，使用的线程越少越好。</p><p>Selector的创建<br><code>Selector selector = Selector.open();</code></p><p>向Selector注册通道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(false);</span><br><span class="line">SelectionKey key = channel.register(selector,Selectionkey.OP_READ);</span><br></pre></td></tr></table></figure><ul><li>Connect   SelectionKey.OP_CONNECT(8)</li><li>Accept     SelectionKey.OP_ACCEPT(16)</li><li>Read        SelectionKey.OP_READ(1)</li><li>Write       SelectionKey.OP_WRITE(4)</li></ul><p>可以用“位或”操作符将常量连接<br>int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</p><h2 id="interest集合"><a href="#interest集合" class="headerlink" title="interest集合"></a>interest集合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int interestSet = selectionKey.interestOps();</span><br><span class="line">boolean isInterestedInAccept  = (interestSet &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；</span><br><span class="line">boolean isInterestedInConnect = interestSet &amp; SelectionKey.OP_CONNECT;</span><br><span class="line">boolean isInterestedInRead    = interestSet &amp; SelectionKey.OP_READ;</span><br><span class="line">boolean isInterestedInWrite   = interestSet &amp; SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure><h2 id="ready集合"><a href="#ready集合" class="headerlink" title="ready集合"></a>ready集合</h2><p>ready 集合是通道已经准备就绪的操作的集合。在一次选择(Selection)之后，你会首先访问这个ready set。可以这样访问ready集合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int readySet = selectionKey.readyOps();</span><br><span class="line"></span><br><span class="line">selectionKey.isAcceptable();</span><br><span class="line">selectionKey.isConnectable();</span><br><span class="line">selectionKey.isReadable();</span><br><span class="line">selectionKey.isWritable();</span><br><span class="line"></span><br><span class="line">    public final boolean isReadable() &#123;</span><br><span class="line">        return (readyOps() &amp; OP_READ) != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final boolean isWritable() &#123;</span><br><span class="line">        return (readyOps() &amp; OP_WRITE) != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final boolean isConnectable() &#123;</span><br><span class="line">        return (readyOps() &amp; OP_CONNECT) != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final boolean isAcceptable() &#123;</span><br><span class="line">        return (readyOps() &amp; OP_ACCEPT) != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Set selectedKeys = selector.selectedKeys();</span><br><span class="line">Iterator keyIterator = selectedKeys.iterator();</span><br><span class="line">while(keyIterator.hasNext()) &#123;</span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line">    if(key.isAcceptable()) &#123;</span><br><span class="line">        // a connection was accepted by a ServerSocketChannel.</span><br><span class="line">    &#125; else if (key.isConnectable()) &#123;</span><br><span class="line">        // a connection was established with a remote server.</span><br><span class="line">    &#125; else if (key.isReadable()) &#123;</span><br><span class="line">        // a channel is ready for reading</span><br><span class="line">    &#125; else if (key.isWritable()) &#123;</span><br><span class="line">        // a channel is ready for writing</span><br><span class="line">    &#125;</span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意每次迭代末尾的keyIterator.remove()调用。Selector不会自己从已选择键集中移除SelectionKey实例。必须在处理完通道时自己移除。下次该通道变成就绪时，Selector会再次将其放入已选择键集中。</p><p>SelectionKey.channel()方法返回的通道需要转型成你要处理的类型，如ServerSocketChannel或SocketChannel等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> selector = Selector.open();//创建多路复用器</span><br><span class="line"> serverSocketChannel = ServerSocketChannel.open();//打开管道</span><br><span class="line"> serverSocketChannel.socket()</span><br><span class="line">       .bind(new InetSocketAddress(port),1024);//绑定端口</span><br><span class="line"> serverSocketChannel.configureBlocking(false);//非阻塞</span><br><span class="line"> serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);//管道注册到多路复用器上</span><br><span class="line"></span><br><span class="line"> Set&lt;SelectionKey&gt; keySet = selector.selectedKeys();</span><br><span class="line"> Iterator&lt;SelectionKey&gt; iterator =  keySet.iterator();</span><br><span class="line"> while (iterator.hasNext())&#123;</span><br><span class="line">        SelectionKey key = iterator.next();</span><br><span class="line">        iterator.remove();</span><br><span class="line">        try &#123;</span><br><span class="line">             if (key.isAcceptable())&#123;</span><br><span class="line">                 SocketChannel socketChannel = ((ServerSocketChannel) key.channel()).accept();//完成tcp握手，建立物理链路</span><br><span class="line">                 socketChannel.configureBlocking(false);</span><br><span class="line">                 socketChannel.register(selector,SelectionKey.OP_READ,ByteBuffer.allocate(1024));//注册客户端到多路复用器上，监听读操作</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;//关闭</span><br><span class="line">             if (key!=null)&#123;</span><br><span class="line">                  key.cancel();</span><br><span class="line">                  if (key.channel()!=null)&#123;</span><br><span class="line">                        key.channel().close();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="非阻塞IO通道（Non-blocking-IO-Pipelines）"><a href="#非阻塞IO通道（Non-blocking-IO-Pipelines）" class="headerlink" title="非阻塞IO通道（Non-blocking IO Pipelines）"></a>非阻塞IO通道（Non-blocking IO Pipelines）</h1><p>非阻塞的IO管道（Non-blocking IO Pipelines）可以看做是整个非阻塞IO处理过程的链条。包括在以非阻塞形式进行的读与写操作</p><p><img src="https://user-images.githubusercontent.com/7789698/30017848-4baa5b4c-918d-11e7-905d-5463469a08b7.png" alt="1"></p><p>我们的组件（Component）通过Selector检查当前Channel是否有数据需要写入。此时component读入数据，并且根据输入的数据input对外提供数据输出output。这个对外的数据输出output被写到了另一个Channel中。<br>一个非阻塞的IO管道不必同时需要读和写数据，通常来说有些管道只需要读数据，而另一些管道则只需写数据。当然一个非阻塞的IO管道他也可以同时从多个Channel中读取数据，例如同时冲多个SocketChannel中读取数据；</p><p>非阻塞和阻塞通道比较（Non-blocking vs. Blocking IO Pipelines）</p><p>非阻塞IO管道和阻塞IO管道之间最大的区别是他们各自如何从Channel（套接字socket或文件file）读写数据。<br>IO管道通常直接从流中读取数据，然后把数据分割为连续的消息。这个处理与我们读取流信息，用tokenizer进行解析非常相似。不同的是我们在这里会把数据流分割为更大一些的消息块。我把这个过程叫做Message Reader.下面是一张说明的插图：<br><img src="https://user-images.githubusercontent.com/7789698/30018294-e9992e5e-918e-11e7-96cc-e2ab16045e19.png" alt="1"><br>一个阻塞IO管道的使用可以和输入流一样调用，每次从Channel中读取一个字节的数据，阻塞自身直到有数据可读。这个流程就是一个阻塞的Messsage Reader实现。</p><p>使用阻塞IO大大简化了Message Reader的实现成本。阻塞的Message Reader无需关注没有数据返回的情形，无需关注返回部分数据或者数据解析需要被复用的问题。<br>相似的，一个阻塞的Message Writer也不需要关注写入部分数据，和数据复用的问题。</p><p>基础的非阻塞通道设计（Basic Non-blocking IO Pipeline Design）</p><p>一个非阻塞的IO通道可以用单线程读取多个数据流。这个前提是相关的流可以切换为非阻塞模式（并不是所有流都可以以非阻塞形式操作）。在非阻塞模式下，读取一个流可能返回0个或多个字节。如果流还没有可供读取的数据那么就会返回0，其他大于1的返回都表明这是实际读取到的数据；<br>为了避开没有数据可读的流，我们结合Java NIO中的Selector。一个Selector可以注册多个SelectableChannel实例。当我们调用select()或selectorNow()方法时Selector会返回一个有数据可读的SelectableChannel实例。这个设计可以如下插图：<br><img src="https://user-images.githubusercontent.com/7789698/30018352-288fb452-918f-11e7-8764-ea3b57895dd2.png" alt="1"></p><p>读取部分信息(Reading Partial Messages)</p><p>当我们冲SelectableChannel中读取一段数据后，我们并不知道这段数据是否是完整的一个message。因为一个数据段可能包含部分message，也就是说即可能少于一个message，也可能多一个message，正如下面这张插图所示意的那样：<br><img src="https://user-images.githubusercontent.com/7789698/30018411-572a7b8a-918f-11e7-9482-2c5dbe929d15.png" alt="1"></p><p>要处理这种截断的message，我们会遇到两个问题：</p><ol><li>检测数据段中是否包含一个完整的message</li><li>在message剩余部分获取到之前，我们如何处理不完整的message</li></ol><p>检测完整message要求Message Reader查看数据段中的数据是否至少包含一个完整的message。如果包含一个或多个完整message，这些message可以被下发到通道中处理。查找完整message的过程是个大量重复的操作，所以这个操作必须是越快越好的。</p><p>当数据段中有一个不完整的message时，无论不完整消息是整个数据段还是说在完整message前后，这个不完整的message数据都需要在剩余部分获得前存储起来。</p><p>检查message完整性和存储不完整message都是Message Reader的职责。为了避免混淆来自不同Channel的数据，我们为每一个Channel分配一个Message Reader。整个设计大概是这样的：</p><p><img src="https://user-images.githubusercontent.com/7789698/30018448-740a93e8-918f-11e7-9062-5bf2af8f82f7.png" alt="1"></p><p>当我们通过Selector获取到一个有数据可以读取的Channel之后，改Channel关联的Message Reader会读取数据，并且把数据打断为Message块。得到完整的message后就可以通过通道下发到其他组件进行处理。<br>一个Message Reader自然是协议相关的。他需要知道message的格式以便读取。如果我们的服务器是跨协议复用的，那他必须实现Message Reader的协议-大致类似于接收一个Message Reader工厂作为配置参数。</p><p>存储不完整的Message（Storing Partial Messages）</p><p>现在我们已经明确了由Message Reader负责不完整消息的存储直到接收到完整的消息。闲杂我们还需要知道这个存储过程需要如何来实现。<br>在设计的时候我们需要考虑两个关键因素：</p><ol><li>我们希望在拷贝消息数据的时候数据量能尽可能的小，拷贝量越大则性能相对越低；</li><li>我们希望完整的消息是以顺序的字节存储，这样方便进行数据的解析；</li></ol><p>为每个Message Reade分配Buffer（A Buffer Per Message Reader）</p><p>显然不完整的消息数据需要存储在某种buffer中。比较直接的办法是我们为每个Message Reader都分配一个内部的buffer成员。但是，多大的buffer才合适呢？这个buffer必须能存储下一个message最大的大小。如果一个message最大是1MB，那每个Message Reader内部的buffer就至少有1MB大小。<br>在百万级别的并发链接数下，1MB的buffer基本没法正常工作。举例来说，1,000,000 x 1MB就是1TB的内存大小！如果消息的最大数据量是16MB又需要多少内存呢？128MB呢？</p><p>可伸缩Buffer（Resizable Buffers）</p><p>另一个方案是在每个Message Reader内部维护一个容量可变的buffer。一个可变的buffer在初始化时占用较少控件，在消息变得很大超出容量时自动扩容。这样每个链接就不需要都占用比如1MB的空间。每个链接只使用承载下一个消息所必须的内存大小。</p><p>拷贝扩容（Resize by Copy）</p><p>第一种实现可伸缩buffer的办法是初始化buffer的时候只申请较少的空间，比如4KB。如果消息超出了4KB的大小那么开赔一个更大的空间，比如8KB，然后把4KB中的数据拷贝纸8KB的内存块中。<br>以拷贝方式扩容的优点是一个消息的全部数据都被保存在了一个连续的字节数组中。这使得数据解析变得更加容易。<br>同时它的缺点是会增加大量的数据拷贝操作。<br>为了减少数据的拷贝操作，你可以分析整个消息流中的消息大小，一次来找到最适合当前机器的可以减少拷贝操作的buffer大小。例如，你可能会注意到觉大多数的消息都是小于4KB的，因为他们仅仅包含了一个非常请求和响应。这意味着消息的处所荣校应该设置为4KB。<br>同时，你可能会发现如果一个消息大于4KB，很可能是因为他包含了一个文件。你会可能注意到 大多数通过系统的数据都是小于128KB的。所以我们可以在第一次扩容设置为128KB。<br>最后你可能会发现当一个消息大于128KB后，没有什么规律可循来确定下次分配的空间大小，这意味着最后的buffer容量应该设置为消息最大的可能数据量。<br>结合这三次扩容时的大小设置，可以一定程度上减少数据拷贝。4KB以下的数据无需拷贝。在1百万的连接下需要的空间例如1,000,000x4KB=4GB，目前（2015）大多数服务器都扛得住。4KB到128KB会仅需拷贝一次，即拷贝4KB数据到128KB的里面。消息大小介于128KB和最大容量的时需要拷贝两次。首先4KB数据被拷贝第二次是拷贝128KB的数据，所以总共需要拷贝132KB数据。假设没有很多的消息会超过128KB，那么这个方案还是可以接受的。<br>当一个消息被完整的处理完毕后，它占用的内容应当即刻被释放。这样下一个来自东一个链接通道的消息可以从最小的buffer大小重新开始。这个操作是必须的如果我们需要尽可能高效地复用不同链接之间的内存。大多数情况下并不是所有的链接都会在同一时刻需要大容量的buffer。<br>笔者写了一个完整的教程阐述了如何实现一个内存buffer使其支持扩容：<a href="http://tutorials.jenkov.com/java-performance/resizable-array.html">Resizable Arrays</a> 。这个教程也附带了一个指向GitHub上的源码仓地址，里面有实现方案的具体代码。</p><p>追加扩容（Resize by Append）</p><p>另一种实现buffer扩容的方案是让buffer包含几个数组。当需要扩容的时候只需要在开辟一个新的字节数组，然后把内容写到里面去。<br>这种扩容也有两个具体的办法。一中是开辟单独的字节数组，然后用一个列表把这些独立数组关联起来。另一种是开辟一些更大的，相互共享的字节数组切片，然后用列表把这些切片和buffer关联起来。个人而言，笔者认为第二种切片方案更好一点点，但是它们之前的差异比较小。<br>这种追加扩容的方案不管是用独立数组还是切片都有一个优点，那就是写数据的时候不需要二外的拷贝操作。所有的数据可以直接从socket（Channel）中拷贝至数组活切片当中。<br>这种方案的缺点也很明显，就是数据不是存储在一个连续的数组中。这会使得数据的解析变得更加复杂，因为解析器不得不同时查找每一个独立数组的结尾和所有数组的结尾。正因为我们需要在写数据时查找消息的结尾，这个模型在设计实现时会相对不那么容易。</p><p>TLV编码消息(TLV Encoded Messages)</p><p>有些协议的消息消失采用的是一种TLV格式（Type, Length, Value）。这意味着当消息到达时，消息的完整大小存储在了消息的开始部分。我们可以立刻判断为消息开辟多少内存空间。<br>TLV编码是的内存管理变得更加简单。我们可以立刻知道为消息分配多少内存。即便是不完整的消息，buffer结尾后面也不会有浪费的内存。<br>TLV编码的一个缺点是我们需要在消息的全部数据接收到之前就开辟好需要用的所有内存。因此少量链接慢，但发送了大块数据的链接会占用较多内存，导致服务器无响应。<br>解决上诉问题的一个变通办法是使用一种内部包含多个TLV的消息格式。这样我们为每个TLV段分配内存而不是为整个的消息分配，并且只在消息的片段到达时才分配内存。但是消息片段很大时，任然会出现一样的问题。<br>另一个办法是为消息设置超时，如果长时间未接收到的消息（比如10-15秒）。这可以让服务器从偶发的并发处理大块消息恢复过来，不过还是会让服务器有一段时间无响应。另外恶意的DoS攻击会导致服务器开辟大量内存。<br>TLV编码有不同的变种。有多少字节使用这样确切的类型和字段长度取决于每个独立的TLV编码。有的TLV编码吧字段长度放在前面，接着放类型，最后放值。尽管字段的顺序不同，但他任然是一个TLV的类型。<br>TLV编码使得内存管理更加简单，这也是HTTP1.1协议让人觉得是一个不太优良的的协议的原因。正因如此，HTTP2.0协议在设计中也利用TLV编码来传输数据帧。也是因为这个原因我们设计了自己的利用TLV编码的网络协议<a href="http://vstack.co/">VStack.co</a>。</p><p>写不完整的消息（Writing Partial Messages）</p><p>在非阻塞IO管道中，写数据也是一个不小的挑战。当你调用一个非阻塞模式Channel的write()方法时，无法保证有多少机字节被写入了ByteBuffer中。write方法返回了实际写入的字节数，所以跟踪记录已被写入的字节数也是可行的。这就是我们遇到的问题：持续记录被写入的不完整的小树知道一个消息中所有的数据都发送完毕。<br>为了管理不完整消息的写操作，我们需要创建一个Message Writer。正如前面的Message Reader，我们也需要每个Channel配备一个Message Writer来写数据。在每个Message Writer中我们记录准确的已经写入的字节数。<br>为了避免多个消息传递到Message Writer超出他所能处理到Channel的量，我们需要让到达的消息进入队列。Message Writer则尽可能快的将数据写到Channel里。<br>下面是一个流程图，展示的是不完整消息被写入的过程：</p><p><img src="https://user-images.githubusercontent.com/7789698/30021081-b69d9198-9198-11e7-8baa-7aec0dd22307.png" alt="1"></p><p>为了使Message Writer能够持续发送刚才已经发送了一部分的消息，Message Writer需要被移植调用，这样他就可以发送更多数据。</p><p>如果你有大量的链接，你会持有大量的Message Writer实例。检查比如1百万的Message Writer实例是来确定他们是否处于可写状态是很慢的操作。首先，许多Message Writer可能根本就没有数据需要发送。我们不想检查这些实例。其次，不是所有的Channel都处于可写状态。我们不想浪费时间在这些非写入状态的Channel。</p><p>为了检查一个Channel是否可写，可以把它注册到Selector上。但是我们不希望把所有的Channel实例都注册到Selector。试想一下，如果你有1百万的链接，这里面大部分是空闲的，把1百万链接都祖册到Selector上。然后调用select方法的时候就会有很多的Channel处于可写状态。你需要检查所有这些链接中的Message Writer以确认是否有数据可写。<br>为了避免检查所有的这些Message Writer，以及那些根本没有消息需要发送给他们的Channel实例，我么可以采用入校两步策略：</p><ol><li>当有消息写入到Message Writer忠厚，把它关联的Channel注册到Selector上（如果还未注册的话）。</li><li>当服务器有空的时候，可以检查Selector看看注册在上面的Channel实例是否处于可写状态。每个可写的channel，使其Message Writer向Channel中写入数据。如果Message Writer已经把所有的消息都写入Channel，把Channel从Selector上解绑。</li></ol><p>这两个小步骤确保只有有数据要写的Channel才会被注册到Selector。</p><p>集成（Putting it All Together）</p><p>正如你所知到的，一个被阻塞的服务器需要时刻检查当前是否有显得完整消息抵达。在一个消息被完整的收到前，服务器可能需要检查多次。检查一次是不够的。<br>类似的，服务器也需要时刻检查当前是否有任何可写的数据。如果有的话，服务器需要检查相应的链接看他们是否处于可写状态。仅仅在消息第一次进入队列时检查是不够的，因为一个消息可能被部分写入。<br>总而言之，一个非阻塞的服务器要三个管道，并且经常执行：</p><ol><li>读数据管道，用来检查打开的链接是否有新的数据到达；</li><li>处理数据管道，负责处理接收到的完整消息；</li><li>写数据管道，用于检查是否有数据可以写入打开的连接中；<br>这三个管道在循环中重复执行。你可以尝试优化它的执行。比如，如果没有消息在队列中等候，那么可以跳过写数据管道。或者，如果没有收到新的完整消息，你甚至可以跳过处理数据管道。<br>下面这张流程图阐述了这整个服务器循环过程：<br><img src="https://user-images.githubusercontent.com/7789698/30021182-11fc30d0-9199-11e7-8a7f-74fec4018028.png" alt="1"></li></ol><p>假如你还是感觉这比较复杂难懂，可以去clone我们的源码仓： <a href="https://github.com/jjenkov/java-nio-server">https://github.com/jjenkov/java-nio-server</a> 也许亲眼看到了代码会帮助你理解这一块是如何实现的。</p><p>服务器线程模型（Server Thread Model）</p><p>我们在GitHub上的源码中实现的非阻塞IO服务使用了一个包含两条线程的线程模型。第一个线程负责从ServerSocketChannel接收到达的链接。另一个线程负责处理这些链接，包括读消息，处理消息，把响应写回到链接。这个双线程模型如下：</p><p><img src="https://user-images.githubusercontent.com/7789698/30021219-2a808a02-9199-11e7-82a6-2c274afc2745.png" alt="1"></p><p>DatagramChannel数据报通道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DatagramChannel channel = DatagramChannel.open();</span><br><span class="line">channel.socket().bind(new InetSocketAddress(9999));</span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">buf.clear();</span><br><span class="line"></span><br><span class="line">**channel.receive(buf);**</span><br></pre></td></tr></table></figure><p>receive()方法会把接收到的数据包中的数据拷贝至给定的Buffer中。如果数据包的内容超过了Buffer的大小，剩余的数据会被直接丢弃。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String newData = &quot;New String to wrte to file...&quot;+System.currentTimeMillis();</span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line">**int byteSent = channel.send(buf, new InetSocketAddress(&quot;jenkov.com&quot;, 80));**</span><br></pre></td></tr></table></figure><p>上述示例会把一个字符串发送到“jenkov.com”服务器的UDP端口80.目前这个端口没有被任何程序监听，所以什么都不会发生。当发送了数据后，我们不会收到数据包是否被接收的的通知，这是由于UDP本身不保证任何数据的发送问题。</p><p>链接特定机器地址（Connecting to a Specific Address）</p><p>DatagramChannel实际上是可以指定到网络中的特定地址的。由于UDP是面向无连接的，这种链接方式并不会创建实际的连接，这和TCP通道类似。确切的说，他会锁定DatagramChannel,这样我们就只能通过特定的地址来收发数据包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.connect(new InetSocketAddress(&quot;jenkov.com&quot;), 80));</span><br><span class="line">int bytesRead = channel.read(buf);</span><br><span class="line">int bytesWritten = channel.write(buf);</span><br></pre></td></tr></table></figure><p> NIO Pipe管道</p><p>一个Java NIO的管道是两个线程间单向传输数据的连接。一个管道（Pipe）有一个source channel和一个sink channel(没想到合适的中文名)。我们把数据写到sink channel中，这些数据可以同过source channel再读取出来</p><p><img src="https://user-images.githubusercontent.com/7789698/30043278-18437b70-9229-11e7-8043-8053bbc77817.png" alt="1"></p><p>创建管道(Creating a Pipe)</p><p>打开一个管道通过调用Pipe.open()工厂方法，如下：<br><code>Pipe pipe = Pipe.open();</code></p><p>向管道写入数据（Writing to a Pipe）</p><p>向管道写入数据需要访问他的sink channel,接下来就是调用write()方法写入数据了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Pipe.SinkChannel sinkChannel = pipe.sink();</span><br><span class="line">String newData = &quot;New String to write to file...&quot; + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line">while(buf.hasRemaining()) &#123;</span><br><span class="line">    sinkChannel.write(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从管道读取数据（Reading from a Pipe）</p><p>类似的从管道中读取数据需要访问他的source channel,接下来调用read()方法读取数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pipe.SourceChannel sourceChannel = pipe.source();</span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line"></span><br><span class="line">int bytesRead = inChannel.read(buf);</span><br></pre></td></tr></table></figure><p>NIO AsynchronousFileChannel异步文件通道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(&quot;data/test.xml&quot;);</span><br><span class="line"></span><br><span class="line">AsynchronousFileChannel fileChannel =</span><br><span class="line">    AsynchronousFileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(1024);</span><br><span class="line">long position = 0;</span><br><span class="line">Future&lt;Integer&gt; operation = fileChannel.read(buffer, 0);</span><br><span class="line"></span><br><span class="line">while(!operation.isDone());</span><br><span class="line"></span><br><span class="line">buffer.flip();</span><br><span class="line">byte[] data = new byte[buffer.limit()];</span><br><span class="line">buffer.get(data);</span><br><span class="line">System.out.println(new String(data));</span><br><span class="line">buffer.clear();</span><br></pre></td></tr></table></figure><p>通过CompletionHandler读取数据（Reading Data Via a CompletionHandler）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fileChannel.read(buffer, position, buffer, new CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void completed(Integer result, ByteBuffer attachment) &#123;</span><br><span class="line">        System.out.println(&quot;result = &quot; + result);</span><br><span class="line"></span><br><span class="line">        attachment.flip();</span><br><span class="line">        byte[] data = new byte[attachment.limit()];</span><br><span class="line">        attachment.get(data);</span><br><span class="line">        System.out.println(new String(data));</span><br><span class="line">        attachment.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void failed(Throwable exc, ByteBuffer attachment) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一旦读取完成，将会触发CompletionHandler的completed()方法，并传入一个Integer和ByteBuffer。前面的整形表示的是读取到的字节数大小。第二个ByteBuffer也可以换成其他合适的对象方便数据写入。 如果读取操作失败了，那么会触发failed()方法。</p><p>参考：<a href="http://www.jianshu.com/p/052035037297">http://www.jianshu.com/p/052035037297</a><br><a href="http://ifeve.com/java-nio-scattergather/">http://ifeve.com/java-nio-scattergather/</a><br><a href="https://java-nio.avenwu.net/java-nio-channel.html">https://java-nio.avenwu.net/java-nio-channel.html</a><br><a href="http://www.importnew.com/24794.html">http://www.importnew.com/24794.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> NIO </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI</title>
      <link href="/hexo/post/2400ed9b.html"/>
      <url>/hexo/post/2400ed9b.html</url>
      
        <content type="html"><![CDATA[<p>SPI指的是Service Provider Interface，服务提供接口</p><p>我们系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案，xml解析模块、jdbc模块的方案等。面向的对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。</p><p>为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。Java spi就是提供这样的一个机制：为某个接口寻找服务实现的机制。有点类似IOC的思想，就是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要。</p><p>当服务的提供者，提供了服务接口的一种实现之后，在jar包的META-INF/services/目录里同时创建一个以服务接口命名的文件。该文件里就是实现该服务接口的具体实现类。而当外部程序装配这个模块的时候，就能通过该jar包META-INF/services/里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。 </p><p>基于这样一个约定就能很好的找到服务接口的实现类，而不需要再代码里制定。jdk提供服务实现查找的一个工具类：java.util.ServiceLoader. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spi;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Search</span> </span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> spi;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearch</span> <span class="keyword">implements</span> <span class="title">Search</span> </span>&#123;  </span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;哥是文件搜索&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> spi;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseSearch</span> <span class="keyword">implements</span> <span class="title">Search</span> </span>&#123;  </span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;哥是database搜索&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoSearch</span> </span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    ServiceLoader&lt;Search&gt; sl = ServiceLoader.load(Search.class);  </span><br><span class="line">    Iterator&lt;Search&gt; s = sl.iterator();  </span><br><span class="line">    <span class="keyword">if</span> (s.hasNext()) &#123;  </span><br><span class="line">      Search ss = s.next();  </span><br><span class="line">      ss.search();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>最后在META-INF/services目录下创建spi.Search(包名+接口名)文件，<br>当文件内容为spi.FileSearch（包名+实现类名）时，程序输出结果为：哥是文件搜索<br>当内容为spi.DataBaseSearch时，程序输出结果为：哥是database搜索.<br>由此可以看出DOSearch类中没有任何和具体实现有关的代码，而是基于spi的机制去查找服务的实现</p><p>dubbo中基于SPI思想的实现</p><p>Dubbo改进了JDK标准的SPI的以下问题：</p><p>1.JDK标准的SPI会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源。</p><p>2.如果扩展点加载失败，连扩展点的名称都拿不到了。比如：JDK标准的ScriptEngine，通过getName();获取脚本类型的名称，但如果RubyScriptEngine因为所依赖的jruby.jar不存在，导致RubyScriptEngine类加载失败，这个失败原因被吃掉了，和ruby对应不起来，当用户执行ruby脚本时，会报不支持ruby，而不是真正失败的原因。</p><p>3.增加了对扩展点IoC和AOP的支持，一个扩展点可以直接setter注入其它扩展点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SPI &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 缺省扩展点名。  </span></span><br><span class="line"><span class="comment">     */</span>   </span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;spring&quot;)</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> </span>&#123;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>dubbo/dubbo-container/src/main/resources/META-INF/dubbo/internal</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetty</span>=<span class="string">com.alibaba.dubbo.container.jetty.JettyContainer</span></span><br><span class="line"><span class="attr">log4j</span>=<span class="string">com.alibaba.dubbo.container.log4j.Log4jContainer</span></span><br><span class="line"><span class="attr">logback</span>=<span class="string">com.alibaba.dubbo.container.logback.LogbackContainer</span></span><br><span class="line"><span class="attr">spring</span>=<span class="string">com.alibaba.dubbo.container.spring.SpringContainer</span></span><br></pre></td></tr></table></figure><p><code>ExtensionLoader.getExtensionLoader(Container.class).getExtension(name)</code></p><p>ExtensionLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此方法已经getExtensionClasses方法同步过。</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class="line">    <span class="keyword">final</span> SPI defaultAnnotation = type.getAnnotation(SPI.class);</span><br><span class="line">    <span class="keyword">if</span>(defaultAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String value = defaultAnnotation.value();</span><br><span class="line">        <span class="keyword">if</span>(value != <span class="keyword">null</span> &amp;&amp; (value = value.trim()).length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String[] names = NAME_SEPARATOR.split(value);</span><br><span class="line">            <span class="keyword">if</span>(names.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;more than 1 default extension name on extension &quot;</span> + type.getName()</span><br><span class="line">                        + <span class="string">&quot;: &quot;</span> + Arrays.toString(names));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(names.length == <span class="number">1</span>) cachedDefaultName = names[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class="keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">    loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY);</span><br><span class="line">    loadFile(extensionClasses, DUBBO_DIRECTORY);</span><br><span class="line">    loadFile(extensionClasses, SERVICES_DIRECTORY);</span><br><span class="line">    <span class="keyword">return</span> extensionClasses;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICES_DIRECTORY = <span class="string">&quot;META-INF/services/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_DIRECTORY = <span class="string">&quot;META-INF/dubbo/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_INTERNAL_DIRECTORY = DUBBO_DIRECTORY + <span class="string">&quot;internal/&quot;</span>;</span><br></pre></td></tr></table></figure><p>cachedAdaptiveClass : 当前Extension类型对应的AdaptiveExtension类型(只能一个)</p><p>cachedWrapperClasses : 当前Extension类型对应的所有Wrapper实现类型(无顺序)</p><p>cachedActivates : 当前Extension实现自动激活实现缓存(map,无序)</p><p>cachedNames : 扩展点实现类对应的名称(如配置多个名称则值为第一个)</p><p>cachedDefaultName : 当前扩展点的默认实现名称</p><p>cachedClasses : 扩展点实现名称对应的实现类(一个实现类可能有多个名称)</p><p>loadFile最后调用的是Class.forName(line, true, classLoader);</p><p>然后injectExtension 注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">injectExtension</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (objectFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().startsWith(<span class="string">&quot;set&quot;</span>)</span><br><span class="line">                        &amp;&amp; method.getParameterTypes().length == <span class="number">1</span></span><br><span class="line">                        &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                    Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String property = method.getName().length() &gt; <span class="number">3</span> ? method.getName().substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + method.getName().substring(<span class="number">4</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        Object object = objectFactory.getExtension(pt, property);</span><br><span class="line">                        <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            method.invoke(instance, object);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        logger.error(<span class="string">&quot;fail to inject via method &quot;</span> + method.getName()</span><br><span class="line">                                + <span class="string">&quot; of interface &quot;</span> + type.getName() + <span class="string">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiExtensionFactory</span> <span class="keyword">implements</span> <span class="title">ExtensionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getExtension</span><span class="params">(Class&lt;T&gt; type, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type.isInterface() &amp;&amp; type.isAnnotationPresent(SPI.class)) &#123;</span><br><span class="line">            ExtensionLoader&lt;T&gt; loader = ExtensionLoader.getExtensionLoader(type);</span><br><span class="line">            <span class="keyword">if</span> (loader.getSupportedExtensions().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> loader.getAdaptiveExtension();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringExtensionFactory</span> <span class="keyword">implements</span> <span class="title">ExtensionFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;ApplicationContext&gt; contexts = <span class="keyword">new</span> ConcurrentHashSet&lt;ApplicationContext&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        contexts.add(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        contexts.remove(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getExtension</span><span class="params">(Class&lt;T&gt; type, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ApplicationContext context : contexts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (context.containsBean(name)) &#123;</span><br><span class="line">                Object bean = context.getBean(name);</span><br><span class="line">                <span class="keyword">if</span> (type.isInstance(bean)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (T) bean;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7789698/29960840-e18362a4-8f2f-11e7-9891-4dc0d0fd7ad6.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 字节码 </tag>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cglib</title>
      <link href="/hexo/post/29cef8e0.html"/>
      <url>/hexo/post/29cef8e0.html</url>
      
        <content type="html"><![CDATA[<p>cglib（字节码生成库）是一个生成和转化Java字节码的高级api。被使用在AOP上。在实现内部，CGLIB库使用了ASM这一个轻量但高性能的字节码操作框架来转化字节码，产生新类</p><p>Enhancer是cglib一个很重要的类。Enhancer动态创建一个子类。</p><p>Enhancer只能在java字节码级别构造方法，但是不能构造static或者final类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Object createProxy(Class targetClass) &#123;</span><br><span class="line">     Enhancer enhancer = new Enhancer();</span><br><span class="line">     enhancer.setSuperclass(targetClass);</span><br><span class="line">     enhancer.setCallback(NoOp.INSTANCE);</span><br><span class="line">     return enhancer.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在例子中，默认的无参构造方法被使用来创建目标对象。如果你希望CGLIB创建一个有参数的实例，你应该使用net.sf.cglib.proxy.Enhancer.create(Class[], Object[])。NoOp是内置的一个类，可以看下源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface NoOp extends Callback &#123;</span><br><span class="line">    NoOp INSTANCE = new NoOp() &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class SampleClass &#123;</span><br><span class="line">  public String test(String input) &#123;</span><br><span class="line">    return &quot;Hello world!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testFixedValue() throws Exception &#123;</span><br><span class="line">  Enhancer enhancer = new Enhancer();</span><br><span class="line">  enhancer.setSuperclass(SampleClass.class);</span><br><span class="line">  enhancer.setCallback(new FixedValue() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object loadObject() throws Exception &#123;</span><br><span class="line">      return &quot;Hello cglib!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  SampleClass proxy = (SampleClass) enhancer.create();</span><br><span class="line">  assertEquals(&quot;Hello cglib!&quot;, proxy.test(null));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方式，任何方法都会被代理。比如proxy.toString()会返回”Hello cglib!” ，proxy.hashCode()则会抛出ClassCastException异常因为hashcode需要整数。此外final方法不会被拦截。Object#getClass 会返回类似 “SampleClass$$EnhancerByCGLIB$$e277c63c”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testInvocationHandler() throws Exception &#123;</span><br><span class="line">  Enhancer enhancer = new Enhancer();</span><br><span class="line">  enhancer.setSuperclass(SampleClass.class);</span><br><span class="line">  enhancer.setCallback(new InvocationHandler() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class="line">        throws Throwable &#123;</span><br><span class="line">      if(method.getDeclaringClass() != Object.class &amp;&amp; method.getReturnType() == String.class) &#123;</span><br><span class="line">        return &quot;Hello cglib!&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        throw new RuntimeException(&quot;Do not know what to do.&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  SampleClass proxy = (SampleClass) enhancer.create();</span><br><span class="line">  assertEquals(&quot;Hello cglib!&quot;, proxy.test(null));</span><br><span class="line">  assertNotEquals(&quot;Hello cglib!&quot;, proxy.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有调用方法将会分发到相同的InvocationHandler可能会导致死循环.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testMethodInterceptor() throws Exception &#123;</span><br><span class="line">  Enhancer enhancer = new Enhancer();</span><br><span class="line">  enhancer.setSuperclass(SampleClass.class);</span><br><span class="line">  enhancer.setCallback(new MethodInterceptor() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy)</span><br><span class="line">        throws Throwable &#123;</span><br><span class="line">      if(method.getDeclaringClass() != Object.class &amp;&amp; method.getReturnType() == String.class) &#123;</span><br><span class="line">        return &quot;Hello cglib!&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return proxy.invokeSuper(obj, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  SampleClass proxy = (SampleClass) enhancer.create();</span><br><span class="line">  assertEquals(&quot;Hello cglib!&quot;, proxy.test(null));</span><br><span class="line">  assertNotEquals(&quot;Hello cglib!&quot;, proxy.toString());</span><br><span class="line">  proxy.hashCode(); // Does not throw an exception or result in an endless loop.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MethodInterceptor的创建和链接需要生成不同类型的字节码和一些不需要Invocationhandler就能产生的运行对象</p><blockquote><p>LazyLoader: Even though the LazyLoader’s only method has the same method signature as FixedValue, the LazyLoader is fundamentally different to the FixedValue interceptor. The LazyLoader is actually supposed to return an instance of a subclass of the enhanced class. This instance is requested only when a method is called on the enhanced object and then stored for future invocations of the generated proxy. This makes sense if your object is expensive in its creation without knowing if the object will ever be used. Be aware that some constructor of the enhanced class must be called both for the proxy object and for the lazily loaded object. Thus, make sure that there is another cheap (maybe protected) constructor available or use an interface type for the proxy. You can choose the invoked constructed by supplying arguments to Enhancer#create(Object…).在被代理对象需要懒加载场景下非常有用，如果被代理对象加载完成，那么在以后的代理调用时会重复使用。</p><p>Dispatcher: The Dispatcher is like the LazyLoader but will be invoked on every method call without storing the loaded object. This allows to change the implementation of a class without changing the reference to it. Again, be aware that some constructor must be called for both the proxy and the generated objects.与net.sf.cglib.proxy.LazyLoader差不多，但每次调用代理方法时都会调用loadObject方法来加载被代理对象。</p><p>ProxyRefDispatcher: This class carries a reference to the proxy object it is invoked from in its signature. This allows for example to delegate method calls to another method of this proxy. Be aware that this can easily cause an endless loop and will always cause an endless loop if the same method is called from within ProxyRefDispatcher#loadObject(Object).与Dispatcher相同，但它的loadObject方法支持传入代理对象。</p><p>NoOp: The NoOp class does not what its name suggests. Instead, it delegates each method call to the enhanced class’s method implementation.</p></blockquote><p>net.sf.cglib.proxy.CallbackFilter允许你在方法级别设置回调。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class PersistenceServiceImpl implements PersistenceService &#123;</span><br><span class="line"></span><br><span class="line">    public void save(long id, String data) &#123;</span><br><span class="line">        System.out.println(data + &quot; has been saved successfully.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String load(long id) &#123;</span><br><span class="line">        return &quot;Jason Zhicheng Li&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>accept方法将代理方法映射到回调。方法返回值是一个回调对象数组中的下标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class PersistenceServiceCallbackFilter implements CallbackFilter &#123;</span><br><span class="line"></span><br><span class="line">    //callback index for save method</span><br><span class="line">    private static final int SAVE = 0;</span><br><span class="line"></span><br><span class="line">    //callback index for load method</span><br><span class="line">    private static final int LOAD = 1;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Specify which callback to use for the method being invoked.</span><br><span class="line">     * @method the method being invoked.</span><br><span class="line">     * @return the callback index in the callback array for this method</span><br><span class="line">     */</span><br><span class="line">    public int accept(Method method) &#123;</span><br><span class="line">        String name = method.getName();</span><br><span class="line">        if (&quot;save&quot;.equals(name)) &#123;</span><br><span class="line">            return SAVE;</span><br><span class="line">        &#125;</span><br><span class="line">        // for other methods, including the load method, use the</span><br><span class="line">        // second callback</span><br><span class="line">        return LOAD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Enhancer enhancer = new Enhancer();</span><br><span class="line">enhancer.setSuperclass(PersistenceServiceImpl.class);</span><br><span class="line"></span><br><span class="line">CallbackFilter callbackFilter = new PersistenceServiceCallbackFilter();</span><br><span class="line">enhancer.setCallbackFilter(callbackFilter);</span><br><span class="line"></span><br><span class="line">AuthorizationService authorizationService = ...</span><br><span class="line">Callback saveCallback = new AuthorizationInterceptor(authorizationService);</span><br><span class="line">Callback loadCallback = NoOp.INSTANCE;</span><br><span class="line">Callback[] callbacks = new Callback[]&#123;saveCallback, loadCallback &#125;;</span><br><span class="line">enhancer.setCallbacks(callbacks);</span><br><span class="line">...</span><br><span class="line">return (PersistenceServiceImpl)enhancer.create();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testCallbackFilter() throws Exception &#123;</span><br><span class="line">  Enhancer enhancer = new Enhancer();</span><br><span class="line">  CallbackHelper callbackHelper = new CallbackHelper(SampleClass.class, new Class[0]) &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected Object getCallback(Method method) &#123;</span><br><span class="line">      if(method.getDeclaringClass() != Object.class &amp;&amp; method.getReturnType() == String.class) &#123;</span><br><span class="line">        return new FixedValue() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public Object loadObject() throws Exception &#123;</span><br><span class="line">            return &quot;Hello cglib!&quot;;</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return NoOp.INSTANCE; // A singleton provided by NoOp.</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  enhancer.setSuperclass(MyClass.class);</span><br><span class="line">  enhancer.setCallbackFilter(callbackHelper);</span><br><span class="line">  enhancer.setCallbacks(callbackHelper.getCallbacks());</span><br><span class="line">  SampleClass proxy = (SampleClass) enhancer.create();</span><br><span class="line">  assertEquals(&quot;Hello cglib!&quot;, proxy.test(null));</span><br><span class="line">  assertNotEquals(&quot;Hello cglib!&quot;, proxy.toString());</span><br><span class="line">  proxy.hashCode(); // Does not throw an exception or result in an endless loop.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean generator</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testBeanGenerator() throws Exception &#123;</span><br><span class="line">  BeanGenerator beanGenerator = new BeanGenerator();</span><br><span class="line">  beanGenerator.addProperty(&quot;value&quot;, String.class);</span><br><span class="line">  Object myBean = beanGenerator.create();</span><br><span class="line">   </span><br><span class="line">  Method setter = myBean.getClass().getMethod(&quot;setValue&quot;, String.class);</span><br><span class="line">  setter.invoke(myBean, &quot;Hello cglib!&quot;);</span><br><span class="line">  Method getter = myBean.getClass().getMethod(&quot;getValue&quot;);</span><br><span class="line">  assertEquals(&quot;Hello cglib!&quot;, getter.invoke(myBean));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean copier</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class OtherSampleBean &#123;</span><br><span class="line">  private String value;</span><br><span class="line">  public String getValue() &#123;</span><br><span class="line">    return value;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setValue(String value) &#123;</span><br><span class="line">    this.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testBeanCopier() throws Exception &#123;</span><br><span class="line">  BeanCopier copier = BeanCopier.create(SampleBean.class, OtherSampleBean.class, false);</span><br><span class="line">  SampleBean bean = new SampleBean();</span><br><span class="line">  bean.setValue(&quot;Hello cglib!&quot;);</span><br><span class="line">  OtherSampleBean otherBean = new OtherSampleBean();</span><br><span class="line">  copier.copy(bean, otherBean, null);</span><br><span class="line">  assertEquals(&quot;Hello cglib!&quot;, otherBean.getValue()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bulk bean</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testBulkBean() throws Exception &#123;</span><br><span class="line">  BulkBean bulkBean = BulkBean.create(SampleBean.class,</span><br><span class="line">      new String[]&#123;&quot;getValue&quot;&#125;,</span><br><span class="line">      new String[]&#123;&quot;setValue&quot;&#125;,</span><br><span class="line">      new Class[]&#123;String.class&#125;);</span><br><span class="line">  SampleBean bean = new SampleBean();</span><br><span class="line">  bean.setValue(&quot;Hello world!&quot;);</span><br><span class="line">  assertEquals(1, bulkBean.getPropertyValues(bean).length);</span><br><span class="line">  assertEquals(&quot;Hello world!&quot;, bulkBean.getPropertyValues(bean)[0]);</span><br><span class="line">  bulkBean.setPropertyValues(bean, new Object[] &#123;&quot;Hello cglib!&quot;&#125;);</span><br><span class="line">  assertEquals(&quot;Hello cglib!&quot;, bean.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testBeanGenerator() throws Exception &#123;</span><br><span class="line">  SampleBean bean = new SampleBean();</span><br><span class="line">  BeanMap map = BeanMap.create(bean);</span><br><span class="line">  bean.setValue(&quot;Hello cglib!&quot;);</span><br><span class="line">  assertEquals(&quot;Hello cglib&quot;, map.get(&quot;value&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/cglib/cglib/wiki/Tutorial">https://github.com/cglib/cglib/wiki/Tutorial</a></p><p>AOP源码如下～</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// Configure CGLIB Enhancer...</span><br><span class="line">Enhancer enhancer = createEnhancer();</span><br><span class="line">if (classLoader != null) &#123;</span><br><span class="line">enhancer.setClassLoader(classLoader);</span><br><span class="line">if (classLoader instanceof SmartClassLoader &amp;&amp;</span><br><span class="line">((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class="line">enhancer.setUseCache(false);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">enhancer.setSuperclass(proxySuperClass);</span><br><span class="line">enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));</span><br><span class="line">enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">enhancer.setStrategy(new ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));</span><br><span class="line"></span><br><span class="line">Callback[] callbacks = getCallbacks(rootClass);</span><br><span class="line">Class&lt;?&gt;[] types = new Class&lt;?&gt;[callbacks.length];</span><br><span class="line">for (int x = 0; x &lt; types.length; x++) &#123;</span><br><span class="line">types[x] = callbacks[x].getClass();</span><br><span class="line">&#125;</span><br><span class="line">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span><br><span class="line">enhancer.setCallbackFilter(new ProxyCallbackFilter(</span><br><span class="line">this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));</span><br><span class="line">enhancer.setCallbackTypes(types);</span><br><span class="line"></span><br><span class="line">protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callbacks) &#123;</span><br><span class="line">enhancer.setInterceptDuringConstruction(false);</span><br><span class="line">enhancer.setCallbacks(callbacks);</span><br><span class="line">return (this.constructorArgs != null ?</span><br><span class="line">enhancer.create(this.constructorArgTypes, this.constructorArgs) :</span><br><span class="line">enhancer.create());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cglib </tag>
            
            <tag> java </tag>
            
            <tag> 字节码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK动态代理</title>
      <link href="/hexo/post/dfdc2005.html"/>
      <url>/hexo/post/dfdc2005.html</url>
      
        <content type="html"><![CDATA[<p>使用动态代理的五大步骤<br>1.通过实现InvocationHandler接口来自定义自己的InvocationHandler;</p><p>2.通过Proxy.getProxyClass获得动态代理类</p><p>3.通过反射机制获得代理类的构造方法，方法签名为getConstructor(InvocationHandler.class)</p><p>4.通过构造函数获得代理对象并将自定义的InvocationHandler实例对象传为参数传入</p><p>5.通过代理对象调用目标方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public interface HelloWorld &#123;  </span><br><span class="line">    void sayHello(String name);  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class HelloWorldImpl implements HelloWorld &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void sayHello(String name) &#123;  </span><br><span class="line">        System.out.println(&quot;Hello &quot; + name);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CustomInvocationHandler implements InvocationHandler &#123;  </span><br><span class="line">    private Object target;  </span><br><span class="line">  </span><br><span class="line">    public CustomInvocationHandler(Object target) &#123;  </span><br><span class="line">        this.target = target;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;  </span><br><span class="line">        System.out.println(&quot;Before invocation&quot;);  </span><br><span class="line">        Object retVal = method.invoke(target, args);  </span><br><span class="line">        System.out.println(&quot;After invocation&quot;);  </span><br><span class="line">        return retVal;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyTest &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">//生成$Proxy0的class文件</span><br><span class="line">        System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);  </span><br><span class="line"> //获取动态代理类</span><br><span class="line">        Class proxyClazz = Proxy.getProxyClass(HelloWorld.class.getClassLoader(),HelloWorld.class);</span><br><span class="line"></span><br><span class="line">  //获得代理类的构造函数，并传入参数类型InvocationHandler.class</span><br><span class="line">        Constructor constructor = proxyClazz.getConstructor(InvocationHandler.class);</span><br><span class="line">        //通过构造函数来创建动态代理对象，将自定义的InvocationHandler实例传入</span><br><span class="line">        HelloWorld proxy = (HelloWorld) constructor.newInstance(new CustomInvocationHandler(new HelloWorldImpl()));</span><br><span class="line">        proxy.sayHello(&quot;Mikan&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>方法2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyTest &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">//生成$Proxy0的class文件</span><br><span class="line">        System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);  </span><br><span class="line">        CustomInvocationHandler handler = new CustomInvocationHandler(new HelloWorldImpl());  </span><br><span class="line">        HelloWorld proxy = (HelloWorld) Proxy.newProxyInstance(  </span><br><span class="line">                ProxyTest.class.getClassLoader(),  </span><br><span class="line">                new Class[]&#123;HelloWorld.class&#125;,  </span><br><span class="line">                handler);  </span><br><span class="line">        proxy.sayHello(&quot;Mikan&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/MOBIN/p/5597215.html">http://www.cnblogs.com/MOBIN/p/5597215.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行为参数化</title>
      <link href="/hexo/post/caed6928.html"/>
      <url>/hexo/post/caed6928.html</url>
      
        <content type="html"><![CDATA[<p>假设有如下业务：有一堆有颜色和重量的苹果，我需要通过颜色和重量取出相应苹果<br>定义苹果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Apple &#123;</span><br><span class="line">    private int weight = 0;</span><br><span class="line">    private String color = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    public Apple(int weight, String color)&#123;</span><br><span class="line">        this.weight = weight;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getWeight() &#123;</span><br><span class="line">        return weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWeight(Integer weight) &#123;</span><br><span class="line">        this.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getColor() &#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(String color) &#123;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Apple&#123;&quot; +</span><br><span class="line">                &quot;color=&#x27;&quot; + color + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, weight=&quot; + weight +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inventory = Arrays.asList(new Apple(80,&quot;green&quot;), new Apple(155, &quot;green&quot;), new Apple(120, &quot;red&quot;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方案1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        for(Apple apple: inventory)&#123;</span><br><span class="line">            if(&quot;green&quot;.equals(apple.getColor()))&#123;</span><br><span class="line">                result.add(apple);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这是最常见的方法。但是这样的结构很难复用。比如我颜色不确定呢？</p><p>解决方案2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">for(Apple apple: inventory)&#123;</span><br><span class="line">    if(apple.getColor().equals(color))&#123;</span><br><span class="line">        result.add(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我需要100g以上的且红色的苹果我就需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">for(Apple apple: inventory)&#123;</span><br><span class="line">    if(apple.getColor().equals(color) </span><br><span class="line">                    &amp;&amp; apple.getWeight() &gt; weight)&#123;</span><br><span class="line">        result.add(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我需要100g以上或者红色的苹果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">for(Apple apple: inventory)&#123;</span><br><span class="line">    if(apple.getColor().equals(color) </span><br><span class="line">                    || apple.getWeight() &gt; weight)&#123;</span><br><span class="line">        result.add(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是变得没完没了了？<br>解决方案3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Apple&gt; filterApples(List&lt;Apple&gt; inventory, ApplePredicate p)&#123;</span><br><span class="line">        List&lt;Apple&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        for(Apple apple : inventory)&#123;</span><br><span class="line">            if(p.test(apple))&#123;</span><br><span class="line">                result.add(apple);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">interface ApplePredicate&#123;</span><br><span class="line">    boolean test(Apple a);</span><br><span class="line">&#125;</span><br><span class="line"> class AppleWeightPredicate implements ApplePredicate&#123;</span><br><span class="line">    public boolean test(Apple apple)&#123;</span><br><span class="line">        return apple.getWeight() &gt; 150;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> class AppleColorPredicate implements ApplePredicate&#123;</span><br><span class="line">    public boolean test(Apple apple)&#123;</span><br><span class="line">        return &quot;green&quot;.equals(apple.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> class AppleRedAndHeavyPredicate implements ApplePredicate&#123;</span><br><span class="line">    public boolean test(Apple apple)&#123;</span><br><span class="line">        return &quot;red&quot;.equals(apple.getColor())</span><br><span class="line">                &amp;&amp; apple.getWeight() &gt; 150;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; greenApples2 = filterApples(inventory, new AppleColorPredicate());</span><br></pre></td></tr></table></figure><p>这种方法和合适。不过如果规则也是不确定的呢？</p><p>解决方案4:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; redApples2 = filterApples(inventory, new ApplePredicate() &#123;</span><br><span class="line">    public boolean test(Apple a)&#123;</span><br><span class="line">        return a.getColor().equals(&quot;red&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Good!这样就能做到定制化了。不过通过lambda写起来更加优美</p><p>解决方案5:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; redApples2 = filterApples(inventory, (Apple a)-&gt; a.getColor().equals(&quot;red&quot;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们要推广。不只是苹果而是所有的判断规则？</p><p>解决方案6:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface Predicate&lt;T&gt;&#123;</span><br><span class="line">    boolean test(T t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; List&lt;T&gt; filter(List&lt;T&gt; inventory, Predicate&lt;T&gt; p)&#123;</span><br><span class="line">    List&lt;T&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">    for(T apple : inventory)&#123;</span><br><span class="line">        if(p.test(apple))&#123;</span><br><span class="line">            result.add(apple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; redApples2 = filter(inventory, (Apple a)-&gt; a.getColor().equals(&quot;red&quot;));</span><br></pre></td></tr></table></figure><p>其实java 8 的思路也是这样的<br>解决方案7:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; redApples2 = inventory</span><br><span class="line">        .stream()</span><br><span class="line">        .filter((Apple a)-&gt; a.getColor().equals(&quot;red&quot;))</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java分布式锁四种实现方案</title>
      <link href="/hexo/post/b49cb7a7.html"/>
      <url>/hexo/post/b49cb7a7.html</url>
      
        <content type="html"><![CDATA[<h2 id="方案一：数据库乐观锁"><a href="#方案一：数据库乐观锁" class="headerlink" title="方案一：数据库乐观锁"></a>方案一：数据库乐观锁</h2><p>乐观锁通常实现基于数据版本(version)的记录机制实现的，比如有一张红包表（t_bonus），有一个字段(left_count)记录礼物的剩余个数，用户每领取一个奖品，对应的left_count减1，在并发的情况下如何要保证left_count不为负数，乐观锁的实现方式为在红包表上添加一个版本号字段（version），默认为0。</p><h3 id="异常实现流程"><a href="#异常实现流程" class="headerlink" title="异常实现流程"></a>异常实现流程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可能会发生的异常情况</span></span><br><span class="line"><span class="comment">-- 线程1查询，当前left_count为1，则有记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_bonus <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span> <span class="keyword">and</span> left_count <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 线程2查询，当前left_count为1，也有记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_bonus <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span> <span class="keyword">and</span> left_count <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 线程1完成领取记录，修改left_count为0,</span></span><br><span class="line">update t_bonus <span class="keyword">set</span> left_count <span class="operator">=</span> left_count <span class="operator">-</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 线程2完成领取记录，修改left_count为-1，产生脏数据</span></span><br><span class="line">update t_bonus <span class="keyword">set</span> left_count <span class="operator">=</span> left_count <span class="operator">-</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span></span><br></pre></td></tr></table></figure><h4 id="通过乐观锁实现"><a href="#通过乐观锁实现" class="headerlink" title="通过乐观锁实现"></a>通过乐观锁实现</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加版本号控制字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">table</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> version <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AFTER t_bonus;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 线程1查询，当前left_count为1，则有记录，当前版本号为1234</span></span><br><span class="line"><span class="keyword">select</span> left_count, version <span class="keyword">from</span> t_bonus <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span> <span class="keyword">and</span> left_count <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 线程2查询，当前left_count为1，有记录，当前版本号为1234</span></span><br><span class="line"><span class="keyword">select</span> left_count, version <span class="keyword">from</span> t_bonus <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span> <span class="keyword">and</span> left_count <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 线程1,更新完成后当前的version为1235，update状态为1，更新成功</span></span><br><span class="line">update t_bonus <span class="keyword">set</span> version <span class="operator">=</span> <span class="number">1235</span>, left_count <span class="operator">=</span> left_count<span class="number">-1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 线程2,更新由于当前的version为1235，udpate状态为0，更新失败，再针对相关业务做异常处理</span></span><br><span class="line">update t_bonus <span class="keyword">set</span> version <span class="operator">=</span> <span class="number">1235</span>, left_count <span class="operator">=</span> left_count<span class="number">-1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10001</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="方案二：基于Redis的分布式锁"><a href="#方案二：基于Redis的分布式锁" class="headerlink" title="方案二：基于Redis的分布式锁"></a>方案二：基于Redis的分布式锁</h2><blockquote><p>SETNX命令（SET if Not eXists）<br>语法：SETNX key value<br>功能：原子性操作，当且仅当 key 不存在，将 key 的值设为 value ，并返回1；若给定的 key 已经存在，则 SETNX 不做任何动作，并返回0。</p><p>Expire命令<br>语法：expire(key, expireTime)<br>功能：key设置过期时间</p><p>GETSET命令<br>语法：GETSET key value<br>功能：将给定 key 的值设为 value ，并返回 key 的旧值 (old value)，当 key 存在但不是字符串类型时，返回一个错误，当key不存在时，返回nil。</p><p>GET命令<br>语法：GET key<br>功能：返回 key 所关联的字符串值，如果 key 不存在那么返回特殊值 nil 。</p><p>DEL命令<br>语法：DEL key [KEY …]<br>功能：删除给定的一个或多个 key ,不存在的 key 会被忽略。</p><p>SET命令<br>语法：SET key value  [expiration EX seconds |PX milliseconds][NX|XX]<br>功能：如果key已经存在，则覆盖<br>解释：<code>EX</code> <em>seconds</em> – 指定到期时间，秒<br><code>PX</code> <em>milliseconds</em> – 指定到期时间，毫秒<br><code>NX</code> –  不存在才设置<br><code>XX</code> – 只有存在才设置</p></blockquote><h3 id="第一种：使用redis的setnx-、expire-方法，用于分布式锁"><a href="#第一种：使用redis的setnx-、expire-方法，用于分布式锁" class="headerlink" title="第一种：使用redis的setnx()、expire()方法，用于分布式锁"></a>第一种：使用redis的setnx()、expire()方法，用于分布式锁</h3><ol><li>setnx(lockkey, 1) 如果返回0，则说明占位失败；如果返回1，则说明占位成功</li><li>expire()命令对lockkey设置超时时间，为的是避免死锁问题。</li><li>执行完业务代码后，可以通过delete命令删除key。</li></ol><p><em>这个方案其实是可以解决日常工作中的需求的，但从技术方案的探讨上来说，可能还有一些可以完善的地方。比如，如果在第一步setnx执行成功后，在expire()命令执行成功前，发生了宕机的现象，那么就依然会出现死锁的问题。这个问题可以通过使用Lua脚本（包含SETNX和EXPIRE两条命令），但是如果Redis仅执行了一条命令后crash或者发生主从切换，依然会出现锁没有过期时间，最终导致无法释放。</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> r = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;SETNX&#x27;</span>, KEYS[<span class="number">1</span>],ARGV[<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">redis.call(<span class="string">&#x27;PEXPIRE&#x27;</span>,KEYS[<span class="number">1</span>],ARGV[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><h3 id="第二种：使用redis的setnx-、get-、getset-方法，用于分布式锁，解决死锁问题"><a href="#第二种：使用redis的setnx-、get-、getset-方法，用于分布式锁，解决死锁问题" class="headerlink" title="第二种：使用redis的setnx()、get()、getset()方法，用于分布式锁，解决死锁问题"></a>第二种：使用redis的setnx()、get()、getset()方法，用于分布式锁，解决死锁问题</h3><ol><li>setnx(lockkey, 当前时间+过期超时时间) ，如果返回1，则获取锁成功；如果返回0则没有获取到锁，转向2。</li><li>get(lockkey)获取值oldExpireTime ，并将这个value值与当前的系统时间进行比较，如果小于当前系统时间，则认为这个锁已经超时，可以允许别的请求重新获取，转向3。</li><li>计算newExpireTime=当前时间+过期超时时间，然后getset(lockkey, newExpireTime) 会返回当前lockkey的值currentExpireTime。</li><li>判断currentExpireTime与oldExpireTime 是否相等，如果相等，说明当前getset设置成功，获取到了锁。如果不相等，说明这个锁又被别的请求获取走了，那么当前请求可以直接返回失败，或者继续重试。</li><li>在获取到锁之后，当前线程可以开始自己的业务处理，当处理完毕后，比较自己的处理时间和对于锁设置的超时时间，如果小于锁设置的超时时间，则直接执行delete释放锁；如果大于锁设置的超时时间，则不需要再锁进行处理。</li></ol><p><strong>注意</strong>：这个版本去掉了EXPIRE命令，改为通过Value时间戳值来判断过期</p><p>问题：</p><pre><code>1. 在锁竞争较高的情况下，会出现Value不断被覆盖，但是没有一个Client获取到锁。2. 在获取锁的过程中不断的修改原有锁的数据，设想一种场景C1，C2竞争锁，C1获取到了锁，C2锁执行了GETSET操作修改了C1锁的过期时间，如果C1没有正确释放锁，锁的过期时间被延长，其它Client需要等待更久的时间。</code></pre><h3 id="第三种：使用-SET-resource-name-my-random-value-NX-PX-30000"><a href="#第三种：使用-SET-resource-name-my-random-value-NX-PX-30000" class="headerlink" title="第三种：使用 SET resource_name my_random_value NX PX 30000"></a>第三种：使用 SET resource_name my_random_value NX PX 30000</h3><p>redis 2.6.12版本以后支持了set带过期时间的写法，官方的意思是以后会逐步用setnx取代set</p><ol><li><p>Redis客户端为了<strong>获取锁</strong>，向Redis节点发送如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure><p>上面的命令如果执行成功，则客户端成功获取到了锁，接下来就可以<strong>访问共享资源</strong>了；而如果上面的命令执行失败，则说明获取锁失败。</p><p>注意，在上面的<code>SET</code>命令中：</p><ul><li><code>my_random_value</code>是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。</li><li><code>NX</code>表示只有当<code>resource_name</code>对应的key值不存在的时候才能<code>SET</code>成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。</li><li><code>PX 30000</code>表示这个锁有一个30秒的自动过期时间。当然，这里30秒只是一个例子，客户端可以选择合适的过期时间。</li></ul></li><li><p>当客户端完成了对共享资源的操作之后，执行下面的Redis Lua脚本来<strong>释放锁</strong>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol><p>   这段Lua脚本在执行的时候要把前面的<code>my_random_value</code>作为<code>ARGV[1]</code>的值传进去，把<code>resource_name</code>作为<code>KEYS[1]</code>的值传进去。</p><p>问题：</p><ol><li><p>这个锁必须要设置一个过期时间。否则的话，当一个客户端获取锁成功之后，假如它崩溃了，或者由于发生了网络分割（network partition）导致它再也无法和Redis节点通信了，那么它就会一直持有这个锁，而其它客户端永远无法获得锁了。antirez在后面的分析中也特别强调了这一点，而且把这个过期时间称为锁的有效时间(lock validity time)。获得锁的客户端必须在这个时间之内完成对共享资源的访问。</p></li><li><p>第一步<strong>获取锁</strong>的操作，网上不少文章把它实现成了两个Redis命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SETNX resource_name my_random_value</span><br><span class="line">EXPIRE resource_name 30</span><br></pre></td></tr></table></figure><p>虽然这两个命令和前面算法描述中的一个<code>SET</code>命令执行效果相同，但却不是原子的。如果客户端在执行完<code>SETNX</code>后崩溃了，那么就没有机会执行<code>EXPIRE</code>了，导致它一直持有这个锁。</p></li><li><p>设置一个随机字符串<code>my_random_value</code>是很有必要的，它保证了一个客户端释放的锁必须是自己持有的那个锁。假如获取锁时<code>SET</code>的不是一个随机字符串，而是一个固定值，那么可能会发生下面的执行序列：</p><ol><li>客户端1获取锁成功。</li><li>客户端1在某个操作上阻塞了很长时间。</li><li>过期时间到了，锁自动释放了。</li><li>客户端2获取到了对应同一个资源的锁。</li><li>客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。</li></ol><p>之后，客户端2在访问共享资源的时候，就没有锁为它提供保护了。</p></li><li><p>释放锁的操作必须使用Lua脚本来实现。释放锁其实包含三步操作：’GET’、判断和’DEL’，用Lua脚本来实现能保证这三步的原子性。否则，如果把这三步操作放到客户端逻辑中去执行的话，就有可能发生与前面第三个问题类似的执行序列：</p><ol><li>客户端1获取锁成功。</li><li>客户端1访问共享资源。</li><li>客户端1为了释放锁，先执行’GET’操作获取随机字符串的值。</li><li>客户端1判断随机字符串的值，与预期的值相等。</li><li>客户端1由于某个原因阻塞住了很长时间。</li><li>过期时间到了，锁自动释放了。</li><li>客户端2获取到了对应同一个资源的锁。</li><li>客户端1从阻塞中恢复过来，执行<code>DEL</code>操纵，释放掉了客户端2持有的锁。</li></ol><p>实际上，在上述第三个问题和第四个问题的分析中，如果不是客户端阻塞住了，而是出现了大的网络延迟，也有可能导致类似的执行序列发生。</p></li><li><p>假如Redis节点宕机了，那么所有客户端就都无法获得锁了，服务变得不可用。为了提高可用性，我们可以给这个Redis节点挂一个Slave，当Master节点不可用的时候，系统自动切到Slave上（failover）。但由于Redis的主从复制（replication）是异步的，这可能导致在failover过程中丧失锁的安全性。考虑下面的执行序列：</p><ol><li>客户端1从Master获取了锁。</li><li>Master宕机了，存储锁的key还没有来得及同步到Slave上。</li><li>Slave升级为Master。</li><li>客户端2从新的Master获取到了对应同一个资源的锁。</li></ol><p>于是，客户端1和客户端2同时持有了同一个资源的锁。</p></li></ol><h3 id="第四种：Redlock算法"><a href="#第四种：Redlock算法" class="headerlink" title="第四种：Redlock算法"></a>第四种：Redlock算法</h3><p>在Redis的分布式环境中，我们假设有N个Redis master。这些节点完全互相独立，不存在主从复制或者其他集群协调机制。</p><ol><li><p>获取当前Unix时间，以毫秒为单位。</p></li><li><p>依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。</p></li><li><p>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</p></li><li><p>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</p></li><li><p>如果因为某些原因，获取锁失败（<em>没有</em>在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）。</p></li></ol><p><a href="https://github.com/www1350/redislock">https://github.com/www1350/redislock</a></p><h2 id="方案三：基于Zookeeper的分布式锁"><a href="#方案三：基于Zookeeper的分布式锁" class="headerlink" title="方案三：基于Zookeeper的分布式锁"></a>方案三：基于Zookeeper的分布式锁</h2><h3 id="利用节点名称的唯一性来实现独占锁"><a href="#利用节点名称的唯一性来实现独占锁" class="headerlink" title="利用节点名称的唯一性来实现独占锁"></a>利用节点名称的唯一性来实现独占锁</h3><blockquote><p>ZooKeeper机制规定同一个目录下只能有一个唯一的文件名，zookeeper上的一个znode看作是一把锁，通过createznode的方式来实现。所有客户端都去创建/lock/${lock_name}_lock节点，最终成功创建的那个客户端也即拥有了这把锁，创建失败的可以选择监听继续等待，还是放弃抛出异常实现独占锁。</p></blockquote><h3 id="利用临时顺序节点控制时序实现"><a href="#利用临时顺序节点控制时序实现" class="headerlink" title="利用临时顺序节点控制时序实现"></a>利用临时顺序节点控制时序实现</h3><blockquote><p>/lock已经预先存在，所有客户端在它下面创建临时顺序编号目录节点，和选master一样，编号最小的获得锁，用完删除，依次方便。<br>算法思路：对于加锁操作，可以让所有客户端都去/lock目录下创建临时顺序节点，如果创建的客户端发现自身创建节点序列号是/lock/目录下最小的节点，则获得锁。否则，监视比自己创建节点的序列号小的节点（比自己创建的节点小的最大节点），进入等待。 对于解锁操作，只需要将自身创建的节点删除即可。</p></blockquote><ol><li>客户端调用create()方法创建名为“<em>locknode</em>/guid-lock-”的节点，需要注意的是，这里节点的创建类型需要设置为EPHEMERAL_SEQUENTIAL。</li><li>客户端调用getChildren(“_locknode_”)方法来获取所有已经创建的子节点，<strong>同时在这个节点上注册上子节点变更通知的Watcher</strong>。</li><li>客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点是所有节点中序号最小的，那么就认为这个客户端获得了锁。</li><li>如果在步骤3中发现自己并非是所有子节点中最小的，说明自己还没有获取到锁，就开始等待，直到下次子节点变更通知的时候，再进行子节点的获取，判断是否获取锁。</li></ol><p><strong>释放锁</strong>的过程相对比较简单，就是删除自己创建的那个子节点即可。</p><p><strong>问题所在</strong></p><p>上面这个分布式锁的实现中，大体能够满足了一般的分布式集群竞争锁的需求。这里说的一般性场景是指集群规模不大，一般在10台机器以内。</p><p>不过，细想上面的实现逻辑，我们很容易会发现一个问题，步骤4，“即获取所有的子点，判断自己创建的节点是否已经是序号最小的节点”，这个过程，在整个分布式锁的竞争过程中，大量重复运行，并且绝大多数的运行结果都是判断出自己并非是序号最小的节点，从而继续等待下一次通知——这个显然看起来不怎么科学。客户端无端的接受到过多的和自己不相关的事件通知，这如果在集群规模大的时候，会对Server造成很大的性能影响，并且如果一旦同一时间有多个节点的客户端断开连接，这个时候，服务器就会像其余客户端发送大量的事件通知——这就是所谓的羊群效应。而这个问题的根源在于，没有找准客户端真正的关注点。</p><p>我们再来回顾一下上面的分布式锁竞争过程，它的核心逻辑在于：判断自己是否是所有节点中序号最小的。于是，很容易可以联想的到的是，每个节点的创建者只需要关注比自己序号小的那个节点。</p><p><strong>改进后的分布式锁实现</strong></p><p>下面是改进后的分布式锁实现，和之前的实现方式唯一不同之处在于，这里设计成每个锁竞争者，只需要关注”_locknode_”节点下序号比自己小的那个节点是否存在即可。实现如下：</p><ol><li>客户端调用create()方法创建名为“<em>locknode</em>/guid-lock-”的节点，需要注意的是，这里节点的创建类型需要设置为EPHEMERAL_SEQUENTIAL。</li><li>客户端调用getChildren(“_locknode_”)方法来获取所有已经创建的子节点，注意，这里不注册任何Watcher。</li><li>客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点序号最小，那么就认为这个客户端获得了锁。</li><li>如果在步骤3中发现自己并非所有子节点中最小的，说明自己还没有获取到锁。此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时注册事件监听。</li><li>之后当这个被关注的节点被移除了，客户端会收到相应的通知。这个时候客户端需要再次调用getChildren(“_locknode_”)方法来获取所有已经创建的子节点，确保自己确实是最小的节点了，然后进入步骤3。</li></ol><h2 id="方案四：基于memcached的分布式锁"><a href="#方案四：基于memcached的分布式锁" class="headerlink" title="方案四：基于memcached的分布式锁"></a>方案四：基于memcached的分布式锁</h2><h3 id="利用add操作实现独占锁"><a href="#利用add操作实现独占锁" class="headerlink" title="利用add操作实现独占锁"></a>利用add操作实现独占锁</h3><p>memcache中**Memcache::add()**方法在缓存服务器之前不存在<code>key</code>时， 以<code>key</code>作为key存储一个变量<code>var</code>到缓存服务器，该操作是原子操作，可以设置一个超时时间。del用来解锁。</p><p>参考：</p><p><a href="http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html</a></p><p><a href="https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w">https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w</a></p><p><a href="https://mp.weixin.qq.com/s/4CUe7OpM6y1kQRK8TOC_qQ">https://mp.weixin.qq.com/s/4CUe7OpM6y1kQRK8TOC_qQ</a></p><p><a href="http://redis.cn/topics/distlock.html">http://redis.cn/topics/distlock.html</a></p><p><a href="http://tech.dianwoda.com/2018/04/11/redisfen-bu-shi-suo-jin-hua-shi/">http://tech.dianwoda.com/2018/04/11/redisfen-bu-shi-suo-jin-hua-shi/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring+MyBatis实现读写分离</title>
      <link href="/hexo/post/9bf9b506.html"/>
      <url>/hexo/post/9bf9b506.html</url>
      
        <content type="html"><![CDATA[<h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p>通过MyBatis配置文件创建读写分离两个DataSource，每个SqlSessionFactoryBean对象的mapperLocations属性制定两个读写数据源的配置文件。将所有读的操作配置在读文件中，所有写的操作配置在写文件中。</p><ul><li>优点：实现简单</li><li>缺点：维护麻烦，需要对原有的xml文件进行重新修改，不支持多读，不易扩展</li><li>实现方式</li></ul><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;abstractDataSource&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;validationQuery&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SELECT &#x27;x&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnReturn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolPreparedStatementPerConnectionSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionProperties&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config.decrypt=true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;readDataSource&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;writeDataSource&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;readSqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;readDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/read/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;writeSqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;writeDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/write/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><p>通过Spring AOP在业务层实现读写分离，在DAO层调用前定义切面，利用Spring的AbstractRoutingDataSource解决多数据源的问题，实现动态选择数据源</p><ul><li>优点：通过注解的方法在DAO每个方法上配置数据源，原有代码改动量少，易扩展，支持多读</li><li>缺点：需要在DAO每个方法上配置注解，人工管理，容易出错</li><li>实现方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义枚举类型，读写 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DynamicDataSourceGlobal</span> </span>&#123; </span><br><span class="line">    READ, WRITE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* RUNTIME </span></span><br><span class="line"><span class="comment">* 定义注解 </span></span><br><span class="line"><span class="comment">* 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSourceGlobal <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> DynamicDataSourceGlobal.READ</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 本地线程设置和获取数据源信息 </span></span><br><span class="line"><span class="comment">* Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder = <span class="keyword">new</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt;(); </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putDataSource</span><span class="params">(DynamicDataSourceGlobal dataSource)</span></span>&#123; </span><br><span class="line">        holder.set(dataSource); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DynamicDataSourceGlobal <span class="title">getDataSource</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> holder.get(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        holder.remove(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource; </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="keyword">import</span> java.util.List; <span class="keyword">import</span> java.util.Map; </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom; </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong; </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock; </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by IDEA </span></span><br><span class="line"><span class="comment">* Desc: 动态数据源实现读写分离 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object writeDataSource; <span class="comment">//写数据源 </span></span><br><span class="line">        <span class="keyword">private</span> List&lt;Object&gt; readDataSources; <span class="comment">//多个读数据源 </span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> readDataSourceSize; <span class="comment">//读数据源个数 </span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> readDataSourcePollPattern = <span class="number">0</span>; <span class="comment">//获取读数据源方式，0：随机，1：轮询 </span></span><br><span class="line">        <span class="keyword">private</span> AtomicLong counter = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long MAX_POOL = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.writeDataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Property &#x27;writeDataSource&#x27; is required&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setDefaultTargetDataSource(writeDataSource);</span><br><span class="line">            Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.readDataSources == <span class="keyword">null</span>) &#123;</span><br><span class="line">                readDataSourceSize = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; readDataSources.size(); i++) &#123;</span><br><span class="line">                    targetDataSources.put(DynamicDataSourceGlobal.READ.name() + i, readDataSources.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                readDataSourceSize = readDataSources.size();</span><br><span class="line">            &#125;</span><br><span class="line">            setTargetDataSources(targetDataSources);</span><br><span class="line">            <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</span><br><span class="line">            <span class="keyword">if</span> (dynamicDataSourceGlobal == <span class="keyword">null</span> || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE</span><br><span class="line">                    || readDataSourceSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> DynamicDataSourceGlobal.WRITE.name();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (readDataSourcePollPattern == <span class="number">1</span>) &#123; <span class="comment">//轮询方式 </span></span><br><span class="line">                <span class="keyword">long</span> currValue = counter.incrementAndGet();</span><br><span class="line">                <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.lock();</span><br><span class="line">                        <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</span><br><span class="line">                            counter.set(<span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                index = (<span class="keyword">int</span>) (currValue % readDataSourceSize);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//随机方式 </span></span><br><span class="line">                index = ThreadLocalRandom.current().nextInt(<span class="number">0</span>, readDataSourceSize);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dynamicDataSourceGlobal.name() + index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteDataSource</span><span class="params">(Object writeDataSource)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.writeDataSource = writeDataSource;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSources</span><span class="params">(List&lt;Object&gt; readDataSources)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.readDataSources = readDataSources;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSourcePollPattern</span><span class="params">(<span class="keyword">int</span> readDataSourcePollPattern)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.readDataSourcePollPattern = readDataSourcePollPattern;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger; </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint; </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature; </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method; </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by IDEA </span></span><br><span class="line"><span class="comment">* Desc: 定义选择数据源切面 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceAspect</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(DynamicDataSourceAspect.class);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint point)</span> </span>&#123;</span><br><span class="line">            Object target = point.getTarget();</span><br><span class="line">            String methodName = point.getSignature().getName();</span><br><span class="line">            Class&lt;?&gt;[] clazz = target.getClass().getInterfaces();</span><br><span class="line">            Class&lt;?&gt;[] parameterTypes =</span><br><span class="line">                    ((MethodSignature) point.getSignature()).getMethod().getParameterTypes();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = clazz[<span class="number">0</span>].getMethod(methodName, parameterTypes);</span><br><span class="line">                <span class="keyword">if</span> (method != <span class="keyword">null</span> &amp;&amp; method.isAnnotationPresent(DataSource.class)) &#123;</span><br><span class="line">                    DataSource data = method.getAnnotation(DataSource.class);</span><br><span class="line">                    DynamicDataSourceHolder.putDataSource(data.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(String.format(<span class="string">&quot;Choose DataSource error, method:%s, msg:%s&quot;</span>, methodName,</span><br><span class="line">                        e.getMessage()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint point)</span> </span>&#123;</span><br><span class="line">            DynamicDataSourceHolder.clearDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;abstractDataSource&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;validationQuery&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SELECT &#x27;x&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnReturn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolPreparedStatementPerConnectionSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionProperties&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config.decrypt=true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceRead1&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.minPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceRead2&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.minPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceWrite&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.minPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.api.dao.datasource.DynamicDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;writeDataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSourceWrite&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readDataSources&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;dataSourceRead1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;dataSourceRead2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--轮询方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readDataSourcePollPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultTargetDataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSourceWrite&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 针对myBatis的配置项 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包以及它的子包下的所有映射接口类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.test.api.dao.inte&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库注解aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dynamicDataSourceAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.api.dao.datasource.DynamicDataSourceAspect&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dynamicDataSourceAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.test.api.dao.inte..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库注解aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h2><p>通过Mybatis的Plugin在业务层实现数据库读写分离，借鉴了LazyConnectionDataSourceProxy的connection Proxy实现方式， 在MyBatis创建Statement对象前通过拦截器选择真正的数据源，在拦截器中根据方法名称不同（select、update、insert、delete）选择数据源。</p><ul><li>优点：原有代码不变，支持多读，易扩展</li><li>缺点：</li><li>实现方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by IDEA </span></span><br><span class="line"><span class="comment">* Desc: 创建Connection代理接口 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConnectionProxy</span> <span class="keyword">extends</span> <span class="title">Connection</span> </span>&#123; </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * 根据传入的读写分离需要的key路由到正确的connection </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key 数据源标识 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function">Connection <span class="title">getTargetConnection</span><span class="params">(String key)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.AbstractDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.DataSourceLookup;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDynamicDataSourceProxy</span> <span class="keyword">extends</span> <span class="title">AbstractDataSource</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; readDataSources;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DataSource&gt; resolvedReadDataSources;</span><br><span class="line">    <span class="keyword">private</span> Object writeDataSource;</span><br><span class="line">    <span class="keyword">private</span> DataSource resolvedWriteDataSource;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> readDataSourcePollPattern = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> readDsSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> defaultAutoCommit = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> defaultTransactionIsolation = Connection.TRANSACTION_READ_COMMITTED;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String READ = <span class="string">&quot;read&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WRITE = <span class="string">&quot;write&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> DataSourceLookup dataSourceLookup = <span class="keyword">new</span> JndiDataSourceLookup();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Connection) Proxy.newProxyInstance(</span><br><span class="line">                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123; com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> RWConnectionInvocationHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Connection) Proxy.newProxyInstance(</span><br><span class="line">                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123; com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> RWConnectionInvocationHandler(username, password));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getReadDsSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readDsSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;DataSource&gt; <span class="title">getResolvedReadDataSources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resolvedReadDataSources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (writeDataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Property &#x27;writeDataSource&#x27; is required&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.resolvedWriteDataSource = resolveSpecifiedDataSource(writeDataSource);</span><br><span class="line">        resolvedReadDataSources = <span class="keyword">new</span> ArrayList&lt;DataSource&gt;(readDataSources.size());</span><br><span class="line">        <span class="keyword">for</span> (Object item : readDataSources) &#123;</span><br><span class="line">            resolvedReadDataSources.add(resolveSpecifiedDataSource(item));</span><br><span class="line">        &#125;</span><br><span class="line">        readDsSize = readDataSources.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(<span class="keyword">this</span>.resolvedReadDataSources, <span class="string">&quot;DataSource router not initialized&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (WRITE.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolvedWriteDataSource;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> loadReadDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> </span>&#123; <span class="comment">// NOOP Just ignore</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取真实的data source</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource (jndi | real data source)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DataSource <span class="title">resolveSpecifiedDataSource</span><span class="params">(Object dataSource)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource <span class="keyword">instanceof</span> DataSource) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataSource) dataSource;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataSource <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.dataSourceLookup.getDataSource((String) dataSource);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;Illegal data source value - only [javax.sql.DataSource] and String supported: &quot;</span></span><br><span class="line">                            + dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> DataSource <span class="title">loadReadDataSource</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDsSize</span><span class="params">(<span class="keyword">int</span> readDsSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.readDsSize = readDsSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getReadDataSources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readDataSources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSources</span><span class="params">(List&lt;Object&gt; readDataSources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.readDataSources = readDataSources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getWriteDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> writeDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteDataSource</span><span class="params">(Object writeDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writeDataSource = writeDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResolvedReadDataSources</span><span class="params">(List&lt;DataSource&gt; resolvedReadDataSources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resolvedReadDataSources = resolvedReadDataSources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getResolvedWriteDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resolvedWriteDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResolvedWriteDataSource</span><span class="params">(DataSource resolvedWriteDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resolvedWriteDataSource = resolvedWriteDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getReadDataSourcePollPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readDataSourcePollPattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSourcePollPattern</span><span class="params">(<span class="keyword">int</span> readDataSourcePollPattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.readDataSourcePollPattern = readDataSourcePollPattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invocation handler that defers fetching an actual JDBC Connection</span></span><br><span class="line"><span class="comment">     * until first creation of a Statement.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RWConnectionInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">        <span class="keyword">private</span> Boolean readOnly = Boolean.FALSE;</span><br><span class="line">        <span class="keyword">private</span> Integer transactionIsolation;</span><br><span class="line">        <span class="keyword">private</span> Boolean autoCommit;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> closed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">private</span> Connection target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RWConnectionInvocationHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RWConnectionInvocationHandler</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>();</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">            <span class="keyword">this</span>.password = password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">// Invocation on ConnectionProxy interface coming in...</span></span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;equals&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// We must avoid fetching a target Connection for &quot;equals&quot;. </span></span><br><span class="line">                <span class="comment">// Only consider equal when proxies are identical.</span></span><br><span class="line">                <span class="keyword">return</span> (proxy == args[<span class="number">0</span>] ? Boolean.TRUE : Boolean.FALSE);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// We must avoid fetching a target Connection for &quot;hashCode&quot;, </span></span><br><span class="line">                <span class="comment">// and we must return the same hash code even when the target </span></span><br><span class="line">                <span class="comment">// Connection has been fetched: use hashCode of Connection proxy. </span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(System.identityHashCode(proxy));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getTargetConnection&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Handle getTargetConnection method: return underlying connection. </span></span><br><span class="line">                <span class="keyword">return</span> getTargetConnection(method, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!hasTargetConnection()) &#123;</span><br><span class="line">                <span class="comment">// No physical target Connection kept yet -&gt; </span></span><br><span class="line">                <span class="comment">// resolve transaction demarcation methods without fetching </span></span><br><span class="line">                <span class="comment">// a physical JDBC Connection until absolutely necessary. </span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;RW Routing DataSource Proxy&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;isReadOnly&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.readOnly;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;setReadOnly&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.readOnly = (Boolean) args[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getTransactionIsolation&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.transactionIsolation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.transactionIsolation;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> defaultTransactionIsolation;</span><br><span class="line">                    <span class="comment">// Else fetch actual Connection and check there, </span></span><br><span class="line">                    <span class="comment">// because we didn&#x27;t have a default specified. </span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;setTransactionIsolation&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.transactionIsolation = (Integer) args[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getAutoCommit&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.autoCommit != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.autoCommit;</span><br><span class="line">                    <span class="keyword">return</span> defaultAutoCommit;</span><br><span class="line">                    <span class="comment">// Else fetch actual Connection and check there, </span></span><br><span class="line">                    <span class="comment">// because we didn&#x27;t have a default specified.</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;setAutoCommit&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.autoCommit = (Boolean) args[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;commit&quot;</span>)) &#123; <span class="comment">// Ignore: no statements created yet. </span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;rollback&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// Ignore: no statements created yet. </span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getWarnings&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;clearWarnings&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;isClosed&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">this</span>.closed ? Boolean.TRUE : Boolean.FALSE);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;close&quot;</span>)) &#123; <span class="comment">// Ignore: no target connection yet. </span></span><br><span class="line">                    <span class="keyword">this</span>.closed = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.closed) &#123;</span><br><span class="line">                    <span class="comment">// Connection proxy closed, without ever having fetched a </span></span><br><span class="line">                    <span class="comment">// physical JDBC Connection: throw corresponding SQLException. </span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;Illegal operation: connection is closed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Target Connection already fetched, </span></span><br><span class="line">            <span class="comment">// or target Connection necessary for current operation -&gt; </span></span><br><span class="line">            <span class="comment">// invoke method on target connection. </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex.getTargetException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Return whether the proxy currently holds a target Connection.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasTargetConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">this</span>.target != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Return the target Connection, fetching it and initializing it if necessary.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Connection <span class="title">getTargetConnection</span><span class="params">(Method operation, Object[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                String key = (String) args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">// No target Connection held -&gt; fetch one. </span></span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Connecting to database for operation &#x27;&quot;</span> + operation.getName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Fetch physical Connection from DataSource. </span></span><br><span class="line">                <span class="keyword">this</span>.target = (<span class="keyword">this</span>.username != <span class="keyword">null</span>) ?</span><br><span class="line">                        determineTargetDataSource(key).getConnection(<span class="keyword">this</span>.username, <span class="keyword">this</span>.password) :</span><br><span class="line">                        determineTargetDataSource(key).getConnection();</span><br><span class="line">                <span class="comment">// If we still lack default connection properties, check them now. </span></span><br><span class="line">                <span class="comment">// checkDefaultConnectionProperties(this.target); </span></span><br><span class="line">                <span class="comment">// Apply kept transaction settings, if any. </span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.readOnly.booleanValue()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.target.setReadOnly(<span class="keyword">this</span>.readOnly.booleanValue());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.transactionIsolation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.target.setTransactionIsolation(<span class="keyword">this</span>.transactionIsolation.intValue());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.autoCommit != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.autoCommit.booleanValue() != <span class="keyword">this</span>.target</span><br><span class="line">                        .getAutoCommit()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.target.setAutoCommit(<span class="keyword">this</span>.autoCommit.booleanValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Target Connection already held -&gt; return it. </span></span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(</span><br><span class="line">                            <span class="string">&quot;Using existing database connection for operation &#x27;&quot;</span> + operation.getName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by IDEA </span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRoutingDataSourceProxy</span> <span class="keyword">extends</span> <span class="title">AbstractDynamicDataSourceProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicLong counter = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long MAX_POOL = Long.MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> DataSource <span class="title">loadReadDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (getReadDataSourcePollPattern() == <span class="number">1</span>) &#123; <span class="comment">//轮询方式 </span></span><br><span class="line">            <span class="keyword">long</span> currValue = counter.incrementAndGet();</span><br><span class="line">            <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</span><br><span class="line">                        counter.set(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            index = (<span class="keyword">int</span>) (currValue % getReadDsSize());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//随机方式 </span></span><br><span class="line">            index = ThreadLocalRandom.current().nextInt(<span class="number">0</span>, getReadDsSize());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getResolvedReadDataSources().get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlCommandType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts(&#123; </span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123;</span></span><br><span class="line"><span class="meta">        Connection.class &#125;) &#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicPlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Connection conn = (Connection) invocation.getArgs()[<span class="number">0</span>]; <span class="comment">//如果是采用了我们代理,则路由数据源 </span></span><br><span class="line">        <span class="keyword">if</span> (conn <span class="keyword">instanceof</span> com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy) &#123;</span><br><span class="line">            StatementHandler statementHandler = (StatementHandler) invocation.getTarget();</span><br><span class="line">            MappedStatement mappedStatement = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (statementHandler <span class="keyword">instanceof</span> RoutingStatementHandler) &#123;</span><br><span class="line">                StatementHandler delegate =</span><br><span class="line">                        (StatementHandler) ReflectionUtils.getFieldValue(statementHandler, <span class="string">&quot;delegate&quot;</span>);</span><br><span class="line">                mappedStatement =</span><br><span class="line">                        (MappedStatement) ReflectionUtils.getFieldValue(delegate, <span class="string">&quot;mappedStatement&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mappedStatement =</span><br><span class="line">                        (MappedStatement) ReflectionUtils.getFieldValue(statementHandler, <span class="string">&quot;mappedStatement&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String key = AbstractDynamicDataSourceProxy.WRITE;</span><br><span class="line">            <span class="keyword">if</span> (mappedStatement.getSqlCommandType() == SqlCommandType.SELECT) &#123;</span><br><span class="line">                key = AbstractDynamicDataSourceProxy.READ;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                key = AbstractDynamicDataSourceProxy.WRITE;</span><br><span class="line">            &#125;</span><br><span class="line">            ConnectionProxy connectionProxy = (ConnectionProxy) conn;</span><br><span class="line">            connectionProxy.getTargetConnection(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123; <span class="comment">//NOOP </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(ReflectionUtils.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置对象属性值,无视private/protected修饰符,不经过setter函数.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object object, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> </span>&#123;</span><br><span class="line">        Field field = getDeclaredField(object, fieldName);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;Could not find field [&quot;</span> + fieldName + <span class="string">&quot;] on target [&quot;</span> + object + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        makeAccessible(field);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接读取对象属性值,无视private/protected修饰符,不经过getter函数.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object object, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = getDeclaredField(object, fieldName);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;Could not find field [&quot;</span> + fieldName + <span class="string">&quot;] on target [&quot;</span> + object + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        makeAccessible(field);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = field.get(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接调用对象方法,无视private/protected修饰符.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeMethod</span><span class="params">(<span class="keyword">final</span> Object object, <span class="keyword">final</span> String methodName,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">final</span> Class&lt;?&gt;[] parameterTypes, <span class="keyword">final</span> Object[] parameters)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        Method method = getDeclaredMethod(object, methodName, parameterTypes);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;Could not find method [&quot;</span> + methodName + <span class="string">&quot;] on target [&quot;</span> + object + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(object, parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环向上转型,获取对象的DeclaredField.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Field <span class="title">getDeclaredField</span><span class="params">(<span class="keyword">final</span> Object object, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; superClass = object.getClass();</span><br><span class="line">             superClass != Object.class; superClass = superClass.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> superClass.getDeclaredField(fieldName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环向上转型,获取对象的DeclaredField.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(<span class="keyword">final</span> Field field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(field.getModifiers()) || !Modifier</span><br><span class="line">                .isPublic(field.getDeclaringClass().getModifiers())) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环向上转型,获取对象的DeclaredMethod.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Method <span class="title">getDeclaredMethod</span><span class="params">(Object object, String methodName, Class&lt;?&gt;[] parameterTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; superClass = object.getClass();</span><br><span class="line">             superClass != Object.class; superClass = superClass.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> superClass.getDeclaredMethod(methodName, parameterTypes);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射,获得Class定义中声明的父类的泛型参数的类型. * eg. * public UserDao extends HibernateDao&lt;User&gt; * * <span class="doctag">@param</span> clazz The class to introspect * <span class="doctag">@return</span> the first generic declaration, or Object.class if cannot be determined</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Class&lt;T&gt; <span class="title">getSuperClassGenricType</span><span class="params">(<span class="keyword">final</span> Class clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSuperClassGenricType(clazz, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射,获得Class定义中声明的父类的泛型参数的类型. * eg. * public UserDao extends HibernateDao&lt;User&gt; * * <span class="doctag">@param</span> clazz The class to introspect * <span class="doctag">@return</span> the first generic declaration, or Object.class if cannot be determined</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title">getSuperClassGenricType</span><span class="params">(<span class="keyword">final</span> Class clazz,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Type genType = clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (!(genType <span class="keyword">instanceof</span> ParameterizedType)) &#123;</span><br><span class="line">            logger.warn(clazz.getSimpleName() + <span class="string">&quot;&#x27;s superclass not ParameterizedType&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Object.class;</span><br><span class="line">        &#125;</span><br><span class="line">        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= params.length || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size of &quot;</span> + clazz.getSimpleName() + <span class="string">&quot;&#x27;s Parameterized Type: &quot;</span></span><br><span class="line">                    + params.length);</span><br><span class="line">            <span class="keyword">return</span> Object.class;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(params[index] <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            logger.warn(clazz.getSimpleName() + <span class="string">&quot; not set the actual class on superclass generic parameter&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Object.class;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Class) params[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将反射时的checked exception转换为unchecked exception.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IllegalArgumentException <span class="title">convertToUncheckedException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IllegalAccessException || e <span class="keyword">instanceof</span> IllegalArgumentException</span><br><span class="line">                || e <span class="keyword">instanceof</span> NoSuchMethodException)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Refelction Exception.&quot;</span>, e);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD SQL Map Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.test.api.dao.mybatis.DynamicPlugin&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;abstractDataSource&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;validationQuery&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SELECT &#x27;x&#x27;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnReturn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolPreparedStatementPerConnectionSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionProperties&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config.decrypt=true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceRead1&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.minPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read1.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceRead2&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.minPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;read2.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceWrite&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.minPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.api.dao.datasource.DynamicRoutingDataSourceProxy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;writeDataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSourceWrite&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readDataSources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;dataSourceRead1&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;dataSourceRead2&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--轮询方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readDataSourcePollPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 针对myBatis的配置项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-plugin-config.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.test.api.dao.inte&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方案4"><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h2><p>Spring路由选择+MyBatis拦截器实现<br>如果你的后台结构是spring+mybatis，可以通过spring的AbstractRoutingDataSource和mybatis Plugin拦截器实现非常友好的读写分离，原有代码不需要任何改变。推荐第四种方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.autohome.api.dealer.util.rwdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by IDEA </span></span><br><span class="line"><span class="comment"> * Desc: 动态数据源实现读写分离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object writeDataSource;<span class="comment">//写数据源 </span></span><br><span class="line">    <span class="keyword">private</span> Object readDataSource; <span class="comment">//读数据源 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.writeDataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Property &#x27;writeDataSource&#x27; is required&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setDefaultTargetDataSource(writeDataSource);</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</span><br><span class="line">        targetDataSources.put(DynamicDataSourceGlobal.READ.name(), readDataSource);</span><br><span class="line">        setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</span><br><span class="line">        <span class="keyword">if</span> (dynamicDataSourceGlobal == <span class="keyword">null</span> || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE) &#123;</span><br><span class="line">            <span class="keyword">return</span> DynamicDataSourceGlobal.WRITE.name();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DynamicDataSourceGlobal.READ.name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteDataSource</span><span class="params">(Object writeDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writeDataSource = writeDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getWriteDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> writeDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getReadDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSource</span><span class="params">(Object readDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.readDataSource = readDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.autohome.api.dealer.util.rwdb; </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by IDEA </span></span><br><span class="line"><span class="comment">* Desc: </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DynamicDataSourceGlobal</span> </span>&#123; </span><br><span class="line">    READ, WRITE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.autohome.api.dealer.util.rwdb;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by IDEA </span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder =</span><br><span class="line">            <span class="keyword">new</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DynamicDataSourceHolder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putDataSource</span><span class="params">(DynamicDataSourceGlobal dataSource)</span> </span>&#123;</span><br><span class="line">        holder.set(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DynamicDataSourceGlobal <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> holder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        holder.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.autohome.api.dealer.util.rwdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by IDEA </span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceTransactionManager</span> <span class="keyword">extends</span> <span class="title">DataSourceTransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只读事务到读库，读写事务到写库 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transaction </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> definition</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBegin</span><span class="params">(Object transaction, TransactionDefinition definition)</span> </span>&#123; <span class="comment">//设置数据源 </span></span><br><span class="line">        <span class="keyword">boolean</span> readOnly = definition.isReadOnly();</span><br><span class="line">        <span class="keyword">if</span> (readOnly) &#123;</span><br><span class="line">            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.READ);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.WRITE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.doBegin(transaction, definition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理本地线程的数据源 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transaction</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doCleanupAfterCompletion</span><span class="params">(Object transaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doCleanupAfterCompletion(transaction);</span><br><span class="line">        DynamicDataSourceHolder.clearDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.autohome.api.dealer.util.rwdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlCommandType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by IDEA </span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123; MappedStatement.class, Object.class &#125;),</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123; MappedStatement.class, Object.class,</span></span><br><span class="line"><span class="meta">                                                                     RowBounds.class,</span></span><br><span class="line"><span class="meta">                                                                     ResultHandler.class &#125;) &#125;)</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicPlugin</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DynamicPlugin.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">&quot;.*insert.*|.*delete.*|.*update.*|.*drop.*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, DynamicDataSourceGlobal&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class="line">        <span class="keyword">if</span> (!synchronizationActive) &#123;</span><br><span class="line">            Object[] objects = invocation.getArgs();</span><br><span class="line">            MappedStatement ms = (MappedStatement) objects[<span class="number">0</span>];</span><br><span class="line">            DynamicDataSourceGlobal dynamicDataSourceGlobal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> ((dynamicDataSourceGlobal = cacheMap.get(ms.getId())) == <span class="keyword">null</span>) &#123; <span class="comment">//读方法 </span></span><br><span class="line">                <span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</span><br><span class="line">                    BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[<span class="number">1</span>]);</span><br><span class="line">                    String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(<span class="string">&quot;[\\t\\n\\r]&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (sql.matches(REGEX)) &#123;</span><br><span class="line">                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.READ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;设置方法[&#123;&#125;] use [&#123;&#125;] Strategy, SqlCommandType [&#123;&#125;]..&quot;</span>, ms.getId(),</span><br><span class="line">                            dynamicDataSourceGlobal.name(), ms.getSqlCommandType().name());</span><br><span class="line">                &#125;</span><br><span class="line">                cacheMap.put(ms.getId(), dynamicDataSourceGlobal);</span><br><span class="line">            &#125;</span><br><span class="line">            DynamicDataSourceHolder.putDataSource(dynamicDataSourceGlobal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) &#123;</span><br><span class="line">            <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123; <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;abstractDataSource&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;autoSuper.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;autoSuper.jdbc.initPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;autoSuper.jdbc.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;validationQuery&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SELECT &#x27;x&#x27;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnReturn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolPreparedStatementPerConnectionSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionProperties&quot;</span> <span class="attr">value</span>=<span class="string">&quot;config.decrypt=true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;autoSuperDataSourceWrite&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;autoSuper.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;autoSuper.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;autoSuperDataSourceRead&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abstractDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;autoSuper.jdbc.readOnly.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;autoSuper.jdbc.readOnly.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;autoSuperDataSource&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.autohome.api.dealer.util.rwdb.DynamicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;writeDataSource&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;autoSuperDataSourceWrite&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readDataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;autoSuperDataSourceRead&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;autoSuperTransactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;autoSuperTransactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.autohome.api.dealer.util.rwdb.DynamicDataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;autoSuperDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 针对myBatis的配置项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;autoSuperSqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;autoSuperDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-plugin-config.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描me/gacl/mapping/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置</span></span><br><span class="line"><span class="comment">        value=&quot;classpath:me/gacl/mapping/*.xml&quot;指的是classpath(类路径)下me.gacl.mapping包中的所有xml文件</span></span><br><span class="line"><span class="comment">        UserMapper.xml位于me.gacl.mapping包下，这样UserMapper.xml就可以被自动扫描</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/autoSuper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.autohome.api.supercall.dao.domain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描包以及它的子包下的所有映射接口类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.autohome.api.supercall.dao.inte.autoSuper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;autoSuperSqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD SQL Map Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.autohome.api.dealer.util.rwdb.DynamicPlugin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring实现多数据源同时访问（跨数据库查询）</title>
      <link href="/hexo/post/5d182a8d.html"/>
      <url>/hexo/post/5d182a8d.html</url>
      
        <content type="html"><![CDATA[<p>假如配置了两个数据源dataSourceOne、dataSourceTwo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dynamicDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.core.DynamicDataSource&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetDataSources&quot;</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">&quot;dataSourceOne&quot;</span> <span class="attr">key</span>=<span class="string">&quot;dataSourceOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">&quot;dataSourceTwo&quot;</span> <span class="attr">key</span>=<span class="string">&quot;dataSourceTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">map</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultTargetDataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSourceOne&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br></pre></td></tr></table></figure><p> DynamicDataSource.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.core;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span></span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> DatabaseContextHolder.getCustomerType();   </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>DatabaseContextHolder.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.core;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseContextHolder</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCustomerType</span><span class="params">(String customerType)</span> </span>&#123;  </span><br><span class="line">        contextHolder.set(customerType);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCustomerType</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> contextHolder.get();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearCustomerType</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        contextHolder.remove();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>DataSourceInterceptor.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.core;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceInterceptor</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setdataSourceOne</span><span class="params">(JoinPoint jp)</span> </span>&#123;  </span><br><span class="line">        DatabaseContextHolder.setCustomerType(<span class="string">&quot;dataSourceOne&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setdataSourceTwo</span><span class="params">(JoinPoint jp)</span> </span>&#123;  </span><br><span class="line">        DatabaseContextHolder.setCustomerType(<span class="string">&quot;dataSourceTwo&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>aop配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSourceInterceptor&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;daoOne&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.dao.one.*.*(..))&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;daoTwo&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.dao.two.*.*(..))&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;daoOne&quot;</span> <span class="attr">method</span>=<span class="string">&quot;setdataSourceOne&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;daoTwo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;setdataSourceTwo&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span>  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springtransaction 事务</title>
      <link href="/hexo/post/c930c494.html"/>
      <url>/hexo/post/c930c494.html</url>
      
        <content type="html"><![CDATA[<p>事务传播属性  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation=Propagation.REQUIRED)</span> <span class="comment">//如果有事务,那么加入事务,没有的话新建一个(不写的情况下)  **默认**</span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.NOT_SUPPORTED)</span> <span class="comment">//容器不为这个方法开启事务  </span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.REQUIRES_NEW)</span> <span class="comment">//不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务  </span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.MANDATORY)</span> <span class="comment">//必须在一个已有的事务中执行,否则抛出异常  </span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.NEVER)</span> <span class="comment">//必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)  </span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.SUPPORTS)</span> <span class="comment">//如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.  </span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.NESTED)</span>   <span class="comment">//如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。 </span></span><br><span class="line"><span class="meta">@Transactional</span> (propagation = Propagation.REQUIRED,readOnly=<span class="keyword">true</span>) <span class="comment">//readOnly=true只读,不能更新,删除   </span></span><br><span class="line"><span class="meta">@Transactional</span> (propagation = Propagation.REQUIRED,timeout=<span class="number">30</span>)<span class="comment">//设置超时时间   </span></span><br><span class="line"><span class="meta">@Transactional</span> (propagation = Propagation.REQUIRED,isolation=Isolation.DEFAULT)<span class="comment">//设置数据库隔离级别  </span></span><br></pre></td></tr></table></figure><p>xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- hibernate事务管理器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- mybatis配置事务管理 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>       </span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>1.直接配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;</span>&gt;</span>  </span><br><span class="line">       <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoTarget&quot;</span> /&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyInterfaces&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.absurd.xxxDao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务属性 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionAttributes&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;*&quot;</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>2.共享一个代理基类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionBase&quot;</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 配置事务属性 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionAttributes&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;*&quot;</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;transactionBase&quot;</span> &gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoTarget&quot;</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionInterceptor&quot;</span>  </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span>  </span><br><span class="line">      <span class="comment">&lt;!-- 配置事务属性 --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionAttributes&quot;</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;*&quot;</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beanNames&quot;</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>*Dao<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>transactionInterceptor<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>4.使用tx标签配置的拦截器<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;interceptorPointCuts&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">expression</span>=<span class="string">&quot;execution(* com.absurd.*.*(..))&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">pointcut-ref</span>=<span class="string">&quot;interceptorPointCuts&quot;</span> /&gt;</span>        </span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span>      </span><br></pre></td></tr></table></figure></p><p>5.全注解</p><p> <code> &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</code></p><p>6.编程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DefaultTransactionDefinition def = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line">def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line"></span><br><span class="line">TransactionStatus status = txManager.getTransaction(def);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  userMapper.insertUser(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MyException ex) &#123;</span><br><span class="line">  txManager.rollback(status);</span><br><span class="line">  <span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">txManager.commit(status);</span><br></pre></td></tr></table></figure><p>TransactionStatus</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">boolean isNewTransaction();</span><br><span class="line"></span><br><span class="line">boolean hasSavepoint();</span><br><span class="line"></span><br><span class="line">void setRollbackOnly();</span><br><span class="line"></span><br><span class="line">boolean isRollbackOnly();</span><br><span class="line"></span><br><span class="line">void flush();</span><br><span class="line"></span><br><span class="line">boolean isCompleted();</span><br></pre></td></tr></table></figure><p>PlatformTransactionManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br></pre></td></tr></table></figure><p>源码解析：<br>从TxNamespaceHandler入手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">registerBeanDefinitionParser(<span class="string">&quot;advice&quot;</span>, <span class="keyword">new</span> TxAdviceBeanDefinitionParser());</span><br><span class="line">registerBeanDefinitionParser(<span class="string">&quot;annotation-driven&quot;</span>, <span class="keyword">new</span> AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">registerBeanDefinitionParser(<span class="string">&quot;jta-transaction-manager&quot;</span>, <span class="keyword">new</span> JtaTransactionManagerBeanDefinitionParser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到分别用不同的解析器去解析xml，<br>TxAdviceBeanDefinitionParser用来解析<code>&lt;tx:advice&gt;</code>并被解析为RuleBasedTransactionAttribute。</p><p>parse(Element element, ParserContext parserContext)-&gt;parseInternal(Element element, ParserContext parserContext)-&gt;getBeanClass(Element element)-&gt;TransactionInterceptor<br>解析到的bean被设置为TransactionInterceptor统一拦截</p><p><img src="https://user-images.githubusercontent.com/7789698/34664349-5bba05ca-f496-11e7-94f1-11355666c5d3.png" alt="image"></p><p>AnnotationDrivenBeanDefinitionParser是用来解析<code>&lt;annotation-driven&gt;</code>为RootBeanDefinition</p><p><img src="https://user-images.githubusercontent.com/7789698/34664424-c8565878-f496-11e7-9456-1b8b3bcb93f3.png" alt="image"></p><p>DataSourceTransactionManager 和DataSourceTransactionManager<br><img src="https://user-images.githubusercontent.com/7789698/34664675-fa586a9a-f497-11e7-997e-7196bdbc63e2.png" alt="image"></p><p>TransactionInterceptor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object invoke(final MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">// Work out the target class: may be &#123;@code null&#125;.</span><br><span class="line">// The TransactionAttributeSource should be passed the target class</span><br><span class="line">// as well as the method, which may be from an interface.</span><br><span class="line">Class&lt;?&gt; targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line"></span><br><span class="line">// Adapt to TransactionAspectSupport&#x27;s invokeWithinTransaction...</span><br><span class="line">return invokeWithinTransaction(invocation.getMethod(), targetClass, new InvocationCallback() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object proceedWithInvocation() throws Throwable &#123;</span><br><span class="line">return invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected Object invokeWithinTransaction(Method method, Class&lt;?&gt; targetClass, final InvocationCallback invocation)</span><br><span class="line">throws Throwable &#123;</span><br><span class="line">// If the transaction attribute is null, the method is non-transactional.</span><br><span class="line">final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass);</span><br><span class="line">//选择事务管理器</span><br><span class="line">final PlatformTransactionManager tm = determineTransactionManager(txAttr);</span><br><span class="line">//切面方法标识</span><br><span class="line">final String joinpointIdentification = methodIdentification(method, targetClass);</span><br><span class="line"></span><br><span class="line">if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span><br><span class="line">TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class="line">Object retVal = null;</span><br><span class="line">try &#123;</span><br><span class="line">//原有逻辑执行</span><br><span class="line">retVal = invocation.proceedWithInvocation();</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line">// target invocation exception</span><br><span class="line">completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">//清理TransactionInfo信息</span><br><span class="line">cleanupTransactionInfo(txInfo);</span><br><span class="line">&#125;</span><br><span class="line">//提交事务</span><br><span class="line">commitTransactionAfterReturning(txInfo);</span><br><span class="line">return retVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else &#123;</span><br><span class="line">// It&#x27;s a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span><br><span class="line">try &#123;</span><br><span class="line">Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,</span><br><span class="line">new TransactionCallback&lt;Object&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class="line">TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">try &#123;</span><br><span class="line">return invocation.proceedWithInvocation();</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line">if (txAttr.rollbackOn(ex)) &#123;</span><br><span class="line">// A RuntimeException: will lead to a rollback.</span><br><span class="line">if (ex instanceof RuntimeException) &#123;</span><br><span class="line">throw (RuntimeException) ex;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">throw new ThrowableHolderException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// A normal return value: will lead to a commit.</span><br><span class="line">return new ThrowableHolder(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">cleanupTransactionInfo(txInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Check result: It might indicate a Throwable to rethrow.</span><br><span class="line">if (result instanceof ThrowableHolder) &#123;</span><br><span class="line">throw ((ThrowableHolder) result).getThrowable();</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (ThrowableHolderException ex) &#123;</span><br><span class="line">throw ex.getCause();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected TransactionInfo createTransactionIfNecessary(</span><br><span class="line">PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) &#123;</span><br><span class="line"></span><br><span class="line">// If no name specified, apply method identification as transaction name.</span><br><span class="line">if (txAttr != null &amp;&amp; txAttr.getName() == null) &#123;</span><br><span class="line">txAttr = new DelegatingTransactionAttribute(txAttr) &#123;</span><br><span class="line">@Override</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return joinpointIdentification;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TransactionStatus status = null;</span><br><span class="line">if (txAttr != null) &#123;</span><br><span class="line">if (tm != null) &#123;</span><br><span class="line">//获取事务状态</span><br><span class="line">status = tm.getTransaction(txAttr);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">//debug..</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来看下：AbstractPlatformTransactionManager#getTransaction</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException &#123;</span><br><span class="line">Object transaction = doGetTransaction();</span><br><span class="line"></span><br><span class="line">//...</span><br><span class="line">                //如果存在事务</span><br><span class="line">if (isExistingTransaction(transaction)) &#123;</span><br><span class="line"></span><br><span class="line">return handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Check definition settings for new transaction.</span><br><span class="line">if (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">throw new InvalidTimeoutException(&quot;Invalid transaction timeout&quot;, definition.getTimeout());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//不存在事务，Propagation.MANDATORY，抛出异常</span><br><span class="line">if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">throw new IllegalTransactionStateException(</span><br><span class="line">&quot;No existing transaction found for transaction marked with propagation &#x27;mandatory&#x27;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_NESTED</span><br><span class="line">else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">//不用挂起</span><br><span class="line">SuspendedResourcesHolder suspendedResources = suspend(null);</span><br><span class="line">//debug...</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">doBegin(transaction, definition);</span><br><span class="line">prepareSynchronization(status, definition);</span><br><span class="line">return status;</span><br><span class="line">&#125;</span><br><span class="line">catch (RuntimeException ex) &#123;</span><br><span class="line">resume(null, suspendedResources);</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">catch (Error err) &#123;</span><br><span class="line">resume(null, suspendedResources);</span><br><span class="line">throw err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">//创建空事务，同步</span><br><span class="line">if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(&quot;Custom isolation level specified but no actual transaction initiated; &quot; +</span><br><span class="line">&quot;isolation level will effectively be ignored: &quot; + definition);</span><br><span class="line">&#125;</span><br><span class="line">boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">return prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TransactionStatus <span class="title">handleExistingTransaction</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">TransactionDefinition definition, Object transaction, <span class="keyword">boolean</span> debugEnabled)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="comment">//PROPAGATION_NEVER抛出异常(Propagation.NEVER)</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line"><span class="string">&quot;Existing transaction found for transaction marked with propagation &#x27;never&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PROPAGATION_NOT_SUPPORTED不为这个方法开启事务（Propagation.NOT_SUPPORTED）</span></span><br><span class="line"><span class="comment">//线程存在事务则挂起（挂起实现其实就是断开连接下次进行重连）</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</span><br><span class="line"><span class="comment">//debug...</span></span><br><span class="line">Object suspendedResources = suspend(transaction);</span><br><span class="line"><span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line"> <span class="comment">//创建非事务的事务状态，让方法非事务地执行  </span></span><br><span class="line"><span class="keyword">return</span> prepareTransactionStatus(</span><br><span class="line">definition, <span class="keyword">null</span>, <span class="keyword">false</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PROPAGATION_REQUIRES_NEW不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务(Propagation.REQUIRES_NEW )</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//挂起原来事务</span></span><br><span class="line">SuspendedResourcesHolder suspendedResources = suspend(transaction);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//只要不是never就执行完毕新的</span></span><br><span class="line"><span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">doBegin(transaction, definition);</span><br><span class="line">prepareSynchronization(status, definition);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException beginEx) &#123;</span><br><span class="line"><span class="comment">//异常了恢复原来事务</span></span><br><span class="line">resumeAfterBeginException(transaction, suspendedResources, beginEx);</span><br><span class="line"><span class="keyword">throw</span> beginEx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error beginErr) &#123;</span><br><span class="line">resumeAfterBeginException(transaction, suspendedResources, beginErr);</span><br><span class="line"><span class="keyword">throw</span> beginErr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NESTED如果是嵌套事务（TransactionDefinition.PROPAGATION_NESTED）</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line"><span class="comment">//如果不允许事务嵌套，则抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (!isNestedTransactionAllowed()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NestedTransactionNotSupportedException(</span><br><span class="line"><span class="string">&quot;Transaction manager does not allow nested transactions by default - &quot;</span> +<span class="string">&quot;specify &#x27;nestedTransactionAllowed&#x27; property with value &#x27;true&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//debug...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果允许使用savepoint保存点保存嵌套事务  </span></span><br><span class="line"><span class="keyword">if</span> (useSavepointForNestedTransaction()) &#123;</span><br><span class="line">   <span class="comment">//为当前事务创建一个保存点  </span></span><br><span class="line">DefaultTransactionStatus status =</span><br><span class="line">prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, <span class="keyword">false</span>, debugEnabled, <span class="keyword">null</span>);</span><br><span class="line">status.createAndHoldSavepoint();</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="comment">//如果不允许使用savepoint保存点保存嵌套事务 ,使用JTA的嵌套commit/rollback调用  </span></span><br><span class="line"><span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</span><br><span class="line">doBegin(transaction, definition);</span><br><span class="line">prepareSynchronization(status, definition);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//debug...</span></span><br><span class="line"><span class="comment">//PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span></span><br><span class="line"> <span class="comment">//校验已存在的事务，如果已有事务与事务属性配置不一致，则抛出异常  </span></span><br><span class="line"><span class="keyword">if</span> (isValidateExistingTransaction()) &#123;</span><br><span class="line">  <span class="comment">//如果事务隔离级别不是默认隔离级别 ，获取到的当前事务隔离级别为null 或 获取不等于事务属性配置的隔离级别</span></span><br><span class="line"><span class="keyword">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123;</span><br><span class="line">Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line"><span class="keyword">if</span> (currentIsolationLevel == <span class="keyword">null</span> || currentIsolationLevel != definition.getIsolationLevel()) &#123;</span><br><span class="line">Constants isoConstants = DefaultTransactionDefinition.constants;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">&quot;Participating transaction with definition [&quot;</span> +</span><br><span class="line">definition + <span class="string">&quot;] specifies isolation level which is incompatible with existing transaction: &quot;</span> +</span><br><span class="line">(currentIsolationLevel != <span class="keyword">null</span> ?</span><br><span class="line">isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :</span><br><span class="line"><span class="string">&quot;(unknown)&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//如果当前已有事务是只读 ，抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (!definition.isReadOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">&quot;Participating transaction with definition [&quot;</span> +</span><br><span class="line">definition + <span class="string">&quot;] is not marked as read-only but existing transaction is&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line"><span class="keyword">return</span> prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBegin</span><span class="params">(Object transaction, TransactionDefinition definition)</span> </span>&#123;</span><br><span class="line">DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (txObject.getConnectionHolder() == <span class="keyword">null</span> ||</span><br><span class="line">txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">Connection newCon = <span class="keyword">this</span>.dataSource.getConnection();</span><br><span class="line"><span class="comment">//debug...</span></span><br><span class="line">&#125;</span><br><span class="line">txObject.setConnectionHolder(<span class="keyword">new</span> ConnectionHolder(newCon), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txObject.getConnectionHolder().setSynchronizedWithTransaction(<span class="keyword">true</span>);</span><br><span class="line">con = txObject.getConnectionHolder().getConnection();</span><br><span class="line"></span><br><span class="line">Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class="line">txObject.setPreviousIsolationLevel(previousIsolationLevel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (con.getAutoCommit()) &#123;</span><br><span class="line">txObject.setMustRestoreAutoCommit(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//debug...</span></span><br><span class="line">con.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">txObject.getConnectionHolder().setTransactionActive(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> timeout = determineTimeout(definition);</span><br><span class="line"><span class="keyword">if</span> (timeout != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">txObject.getConnectionHolder().setTimeoutInSeconds(timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the session holder to the thread.</span></span><br><span class="line"><span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">TransactionSynchronizationManager.bindResource(getDataSource(), txObject.getConnectionHolder());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">DataSourceUtils.releaseConnection(con, <span class="keyword">this</span>.dataSource);</span><br><span class="line">txObject.setConnectionHolder(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> CannotCreateTransactionException(<span class="string">&quot;Could not open JDBC Connection for transaction&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> SuspendedResourcesHolder <span class="title">suspend</span><span class="params">(Object transaction)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="comment">//如果事务是激活的，且当前线程事务同步机制也是激活状态  </span></span><br><span class="line"><span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line"><span class="comment">//挂起当前线程中所有同步的事务  TransactionSynchronization#suspend   还有 TransactionSynchronizationManager#unbindResource</span></span><br><span class="line">List&lt;TransactionSynchronization&gt; suspendedSynchronizations = doSuspendSynchronization();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Object suspendedResources = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (transaction != <span class="keyword">null</span>) &#123;</span><br><span class="line">suspendedResources = doSuspend(transaction);</span><br><span class="line">&#125;</span><br><span class="line">String name = TransactionSynchronizationManager.getCurrentTransactionName();</span><br><span class="line">TransactionSynchronizationManager.setCurrentTransactionName(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">boolean</span> readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();</span><br><span class="line">TransactionSynchronizationManager.setCurrentTransactionReadOnly(<span class="keyword">false</span>);</span><br><span class="line">Integer isolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">boolean</span> wasActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line">TransactionSynchronizationManager.setActualTransactionActive(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SuspendedResourcesHolder(</span><br><span class="line">suspendedResources, suspendedSynchronizations, name, readOnly, isolationLevel, wasActive);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line"><span class="comment">// doSuspend failed - original transaction is still active...</span></span><br><span class="line">doResumeSynchronization(suspendedSynchronizations);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line"><span class="comment">// doSuspend failed - original transaction is still active...</span></span><br><span class="line">doResumeSynchronization(suspendedSynchronizations);</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (transaction != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Transaction active but no synchronization active.</span></span><br><span class="line">Object suspendedResources = doSuspend(transaction);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SuspendedResourcesHolder(suspendedResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Neither transaction nor synchronization active.</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//doSuspendSynchronization方法将逐个挂起当前线程中的TransactionSynchronization</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TransactionSynchronization&gt; <span class="title">doSuspendSynchronization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;TransactionSynchronization&gt; suspendedSynchronizations =</span><br><span class="line">TransactionSynchronizationManager.getSynchronizations();</span><br><span class="line"><span class="keyword">for</span> (TransactionSynchronization synchronization : suspendedSynchronizations) &#123;</span><br><span class="line">synchronization.suspend();</span><br><span class="line">&#125;</span><br><span class="line">TransactionSynchronizationManager.clearSynchronization();</span><br><span class="line"><span class="keyword">return</span> suspendedSynchronizations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConnectionSynchronization#suspend</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">suspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line"><span class="comment">//解绑数据源</span></span><br><span class="line">TransactionSynchronizationManager.unbindResource(<span class="keyword">this</span>.dataSource);</span><br><span class="line"><span class="comment">// 如果存在连接，且处于打开状态</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.connectionHolder.hasConnection() &amp;&amp; !<span class="keyword">this</span>.connectionHolder.isOpen()) &#123;</span><br><span class="line"> <span class="comment">// 当挂起的时候如果没有句柄连接到该connection，将释放该连接</span></span><br><span class="line"> <span class="comment">// 当resume的时候 会重开打开一个连接参与到原来的事务中</span></span><br><span class="line">releaseConnection(<span class="keyword">this</span>.connectionHolder.getConnection(), <span class="keyword">this</span>.dataSource);</span><br><span class="line"><span class="keyword">this</span>.connectionHolder.setConnection(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复事务</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doResumeSynchronization</span><span class="params">(List&lt;TransactionSynchronization&gt; suspendedSynchronizations)</span> </span>&#123;</span><br><span class="line">TransactionSynchronizationManager.initSynchronization();</span><br><span class="line"><span class="keyword">for</span> (TransactionSynchronization synchronization : suspendedSynchronizations) &#123;</span><br><span class="line">synchronization.resume();</span><br><span class="line">TransactionSynchronizationManager.registerSynchronization(synchronization);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SqlSessionSynchronization#resume</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line">       <span class="comment">//debug...</span></span><br><span class="line">        TransactionSynchronizationManager.bindResource(<span class="keyword">this</span>.sessionFactory, <span class="keyword">this</span>.holder);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//DataSourceTransactionManager#doSuspend</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doSuspend</span><span class="params">(Object transaction)</span> </span>&#123;</span><br><span class="line">DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line">txObject.setConnectionHolder(<span class="keyword">null</span>);</span><br><span class="line">ConnectionHolder conHolder = (ConnectionHolder)</span><br><span class="line">TransactionSynchronizationManager.unbindResource(<span class="keyword">this</span>.dataSource);</span><br><span class="line"><span class="keyword">return</span> conHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h2><p>AbstractPlatformTransactionManager##commit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="comment">//如果事务状态是已完成，再次提交会抛出“Transaction is already completed - do not call commit or rollback more than once per transaction”</span></span><br><span class="line"><span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line"><span class="string">&quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line"><span class="comment">//rollback only</span></span><br><span class="line"><span class="keyword">if</span> (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Transactional code has requested rollback&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回滚</span></span><br><span class="line">processRollback(defStatus);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">processRollback(defStatus);</span><br><span class="line"><span class="comment">// Throw UnexpectedRollbackException only at outermost transaction boundary</span></span><br><span class="line"><span class="comment">// or if explicitly asked to.</span></span><br><span class="line"><span class="keyword">if</span> (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line"><span class="string">&quot;Transaction rolled back because it has been marked as rollback-only&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processCommit(defStatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processRollback</span><span class="params">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回调TransactionSynchronization对象的beforeCompletion方法。</span></span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line"><span class="comment">//有保存点</span></span><br><span class="line"><span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Rolling back transaction to savepoint&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回滚到保存点</span></span><br><span class="line">status.rollbackToHeldSavepoint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是一个新事务</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Initiating transaction rollback&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//rollback</span></span><br><span class="line">doRollback(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.hasTransaction()) &#123;</span><br><span class="line"><span class="comment">//如果RollbackOnly或者globalRollbackOnParticipationFailure（部分失败）</span></span><br><span class="line"><span class="keyword">if</span> (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Participating transaction failed - marking existing transaction as rollback-only&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">doSetRollbackOnly(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Participating transaction failed - letting transaction originator decide on rollback&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Should roll back transaction but cannot - no transaction available&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line"><span class="comment">//TransactionSynchronization 的afterCompletion</span></span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">cleanupAfterCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processCommit</span><span class="params">(DefaultTransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> beforeCompletionInvoked = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">prepareForCommit(status);</span><br><span class="line"><span class="comment">//TransactionSynchronization 的beforeCommit 提交前提示</span></span><br><span class="line">triggerBeforeCommit(status);</span><br><span class="line"><span class="comment">//TransactionSynchronization 的beforeCompletion 完成前提示</span></span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">beforeCompletionInvoked = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> globalRollbackOnly = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">globalRollbackOnly = status.isGlobalRollbackOnly();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Releasing transaction savepoint&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">status.releaseHeldSavepoint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Initiating transaction commit&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">doCommit(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Throw UnexpectedRollbackException if we have a global rollback-only</span></span><br><span class="line"><span class="comment">// marker but still didn&#x27;t get a corresponding exception from commit.</span></span><br><span class="line"><span class="keyword">if</span> (globalRollbackOnly) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line"><span class="string">&quot;Transaction silently rolled back because it has been marked as rollback-only&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UnexpectedRollbackException ex) &#123;</span><br><span class="line"><span class="comment">// can only be caused by doCommit</span></span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (TransactionException ex) &#123;</span><br><span class="line"><span class="comment">// can only be caused by doCommit</span></span><br><span class="line"><span class="keyword">if</span> (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">doRollbackOnCommitException(status, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">doRollbackOnCommitException(status, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line"><span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">doRollbackOnCommitException(status, err);</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger afterCommit callbacks, with an exception thrown there</span></span><br><span class="line"><span class="comment">// propagated to callers but the transaction still considered as committed.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">triggerAfterCommit(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">cleanupAfterCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隔离级别（其实最后是通过jdbc的隔离级别做的）：</p><blockquote><p>Isolation.DEFAULT(TransactionDefinition.ISOLATION_DEFAULT)<br>使用数据库默认的事务隔离级别。</p></blockquote><blockquote><p>Isolation.READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),<br>这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。<br>实现：<code>SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED</code></p></blockquote><blockquote><p>Isolation.READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),<br>保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。<br>实现：<code> SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED</code></p></blockquote><blockquote><p>Isolation.REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),<br>这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。<br>实现：<code>SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ</code></p></blockquote><blockquote><p>Isolation.SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);<br>这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻读。<br>实现：<code>SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE</code></p></blockquote><p>详细：<a href="http://www1350.github.io/#post/64">http://www1350.github.io/#post/64</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于盖楼评论我的看法</title>
      <link href="/hexo/post/ab54ac08.html"/>
      <url>/hexo/post/ab54ac08.html</url>
      
        <content type="html"><![CDATA[<p>效果如下<br><img src="https://cloud.githubusercontent.com/assets/7789698/16605514/28534b6a-4362-11e6-8f1e-5c3f5d298f1e.png" alt="image"></p><p>关于表设计，网上大部分人的设计是储存一个父评论id，采用自反递归查询<br><a href="http://www.tracefact.net/Software-Design/Unlimited-comment-quote-using-recursion.aspx">http://www.tracefact.net/Software-Design/Unlimited-comment-quote-using-recursion.aspx</a></p><p>我认为<br>1.这个父id可以按层次顺序存储所有父id，这样批量查询一次就行了。<br>2.可以在评论内容里面直接写入盖楼效果，展示的时候css控制就好了</p><p>3.闭包表<br><a href="http://blog.jobbole.com/112315/">http://blog.jobbole.com/112315/</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 盖楼 </tag>
            
            <tag> 评论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全队列Queue</title>
      <link href="/hexo/post/a5db83c3.html"/>
      <url>/hexo/post/a5db83c3.html</url>
      
        <content type="html"><![CDATA[<p>线程安全的Queue可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是BlockingQueue，非阻塞队列的典型例子是ConcurrentLinkedQueue</p><ul><li>单生产者，单消费者  用 LinkedBlockingqueue</li><li>多生产者，单消费者   用 LinkedBlockingqueue</li><li>单生产者 ，多消费者   用 ConcurrentLinkedQueue</li><li>多生产者 ，多消费者   用 ConcurrentLinkedQueue</li></ul><p>可能报异常 返回布尔值 可能阻塞    设定等待时间</p><ul><li>入队    add(e)  offer(e)    put(e)  offer(e, timeout, unit)</li><li>出队    remove()    poll()  take()  poll(timeout, unit)</li><li>查看    element()   peek()  无 无</li><li>add(e) remove() element() 方法不会阻塞线程。当不满足约束条件时，会抛出IllegalStateException 异常。例如：当队列被元素填满后，再调用add(e)，则会抛出异常。</li><li>offer(e) poll() peek() 方法即不会阻塞线程，也不会抛出异常。例如：当队列被元素填满后，再调用offer(e)，则不会插入元素，函数返回false。</li><li>要想要实现阻塞功能，需要调用put(e) take() 方法。当不满足约束条件时，会阻塞线程。</li></ul><p>ConcurrentLinkedQueue内部有个匿名内部类Node<br>源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span><br><span class="line">        volatile E item;</span><br><span class="line">        volatile Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Constructs a new node.  Uses relaxed write because item can</span><br><span class="line">         * only be seen after publication via casNext.</span><br><span class="line">         */</span><br><span class="line">        Node(E item) &#123;</span><br><span class="line">            UNSAFE.putObject(this, itemOffset, item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean casItem(E cmp, E val) &#123;</span><br><span class="line">            return UNSAFE.compareAndSwapObject(this, itemOffset, cmp, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void lazySetNext(Node&lt;E&gt; val) &#123;</span><br><span class="line">            UNSAFE.putOrderedObject(this, nextOffset, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean casNext(Node&lt;E&gt; cmp, Node&lt;E&gt; val) &#123;</span><br><span class="line">            return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Unsafe mechanics</span><br><span class="line"></span><br><span class="line">        private static final sun.misc.Unsafe UNSAFE;</span><br><span class="line">        private static final long itemOffset;</span><br><span class="line">        private static final long nextOffset;</span><br><span class="line"></span><br><span class="line">        static &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">                Class&lt;?&gt; k = Node.class;</span><br><span class="line">                itemOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                    (k.getDeclaredField(&quot;item&quot;));</span><br><span class="line">                nextOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                    (k.getDeclaredField(&quot;next&quot;));</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new Error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Queue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq整合spring简单样例</title>
      <link href="/hexo/post/cb39cd53.html"/>
      <url>/hexo/post/cb39cd53.html</url>
      
        <content type="html"><![CDATA[<p><strong>生产者</strong><br>spring 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">port</span>=<span class="string">&quot;5672&quot;</span> <span class="attr">publisher-confirms</span>=<span class="string">&quot;true&quot;</span> <span class="attr">virtual-host</span>=<span class="string">&quot;/&quot;</span> <span class="attr">username</span>=<span class="string">&quot;absurd&quot;</span> <span class="attr">password</span>=<span class="string">&quot;absurd&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面只有当声明了exchange和队列才可以使用-&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;rabbit:queue id=&quot;queue&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; name=&quot;queue&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;rabbit:queue id=&quot;queue2&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; name=&quot;queue2&quot;/&gt;</span></span><br><span class="line"><span class="comment">        将队列绑定到交换路由同时与key绑定</span></span><br><span class="line"><span class="comment">    &lt;rabbit:fanout-exchange name=&quot;absurd_exchange&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; id=&quot;absurd_exchange&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;rabbit:bindings&gt;</span></span><br><span class="line"><span class="comment">            &lt;rabbit:binding queue=&quot;queue&quot; /&gt;</span></span><br><span class="line"><span class="comment">            &lt;rabbit:binding queue=&quot;queue2&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/rabbit:bindings&gt;</span></span><br><span class="line"><span class="comment">    &lt;/rabbit:fanout-exchange&gt; </span></span><br><span class="line"><span class="comment"> &lt;rabbit:template id=&quot;rabbitTemplate&quot; exchange=&quot;absurd_exchange&quot; connection-factory=&quot;connectionFactory&quot;/&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">&quot;rabbitTemplate&quot;</span>  <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProducerService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg, String routingKey,String exchange)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;err&quot;</span>+msg+routingKey+exchange);</span><br><span class="line">        RabbitAdmin admin = <span class="keyword">new</span> RabbitAdmin(<span class="keyword">this</span>.rabbitTemplate.getConnectionFactory());</span><br><span class="line">        admin.declareExchange(<span class="keyword">new</span> FanoutExchange(exchange,<span class="keyword">true</span>,<span class="keyword">false</span>));  </span><br><span class="line">        admin.declareQueue(<span class="keyword">new</span> Queue(routingKey,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>) );</span><br><span class="line">        admin.declareBinding(<span class="keyword">new</span> Binding(routingKey, DestinationType.QUEUE, exchange, routingKey, <span class="keyword">null</span>));<span class="comment">//如果声明了队列、exchange、绑定后就无需使用RabbitAdmin </span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchange,routingKey,msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(routingKey,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/publish/&#123;msg&#125;/&#123;queue&#125;/&#123;exchange&#125;&quot;,method=RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">publish</span><span class="params">(<span class="meta">@PathVariable(value=&quot;msg&quot;)</span>String msg,<span class="meta">@PathVariable(value=&quot;queue&quot;)</span>String queue,<span class="meta">@PathVariable(value=&quot;exchange&quot;)</span>String exchange)</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    producerService.sendMessage(msg, queue,exchange);</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">    mv.setViewName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong><br>spring配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">publisher-confirms</span>=<span class="string">&quot;true&quot;</span> <span class="attr">virtual-host</span>=<span class="string">&quot;/&quot;</span> <span class="attr">username</span>=<span class="string">&quot;absurd&quot;</span> <span class="attr">password</span>=<span class="string">&quot;absurd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">acknowledge</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">task-executor</span>=<span class="string">&quot;taskExecutor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- queues是队列名称，可填多个，用逗号隔开， method是ref指定的Bean调用Invoke方法执行的方法名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">queues</span>=<span class="string">&quot;queue&quot;</span> <span class="attr">method</span>=<span class="string">&quot;onMessage&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;redQueueListener&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列声明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">&quot;queue&quot;</span> <span class="attr">durable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 配置线程池 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;taskExecutor&quot;</span>  <span class="attr">class</span> =<span class="string">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span> &gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 线程池维护线程的最少数量 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;corePoolSize&quot;</span> <span class="attr">value</span> =<span class="string">&quot;5&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 线程池维护线程所允许的空闲时间 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;keepAliveSeconds&quot;</span> <span class="attr">value</span> =<span class="string">&quot;30000&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 线程池维护线程的最大数量 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span> =<span class="string">&quot;1000&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 线程池所使用的缓冲队列 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;queueCapacity&quot;</span> <span class="attr">value</span> =<span class="string">&quot;200&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 红色监听处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;redQueueListener&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.absurd.rabbitmqcustomer.RedQueueListener&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p>监听方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedQueueListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(RedQueueListener.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;RedQueueListener Receved:&quot;</span>  + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rabbitmq引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>效果：<br>访问<a href="http://localhost:8080/rabbitmqproducer/hello/publish/bfdbdfbdfg/queue/absurd_exchange5">http://localhost:8080/rabbitmqproducer/hello/publish/bfdbdfbdfg/queue/absurd_exchange5</a><br>消费者就能监听到消息</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/hexo/post/effa6b88.html"/>
      <url>/hexo/post/effa6b88.html</url>
      
        <content type="html"><![CDATA[<p> <a href="http://www.mongodb.org/downloads">http://www.mongodb.org/downloads</a> </p><p>mongod.exe –dbpath</p><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use DATABASE_NAME</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p>创建集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure><p>options:<br>项​​参数是可选的，所以只需要到指定的集合名称。以下是可以使用的选项列表：</p><p>字段  类型  描述<br>capped  Boolean （可选）如果为true，则启用封顶集合。封顶集合是固定大小的集合，会自动覆盖最早的条目，当它达到其最大大小。如果指定true，则需要也指定尺寸参数。<br>autoIndexID Boolean （可选）如果为true，自动创建索引_id字段的默认值是false。<br>size    number  （可选）指定最大大小字节封顶集合。如果封顶如果是 true，那么你还需要指定这个字段。<br>max number  （可选）指定封顶集合允许在文件的最大数量。</p><p>删除集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.drop()</span><br></pre></td></tr></table></figure><p>数据类型：</p><ul><li>String : 这是最常用的数据类型来存储数据。在MongoDB中的字符串必须是有效的UTF-8。</li><li>Integer : 这种类型是用来存储一个数值。整数可以是32位或64位，这取决于您的服务器。</li><li>Boolean : 此类型用于存储一个布尔值 (true/ false) 。</li><li>Double : 这种类型是用来存储浮点值。</li><li>Min/ Max keys : 这种类型被用来对BSON元素的最低和最高值比较。</li><li>Arrays : 使用此类型的数组或列表或多个值存储到一个键。</li><li>Timestamp : 时间戳。这可以方便记录时的文件已被修改或添加。</li><li>Object : 此数据类型用于嵌入式的文件。</li><li>Null : 这种类型是用来存储一个Null值。</li><li>Symbol : 此数据类型用于字符串相同，但它通常是保留给特定符号类型的语言使用。</li><li>Date : 此数据类型用于存储当前日期或时间的UNIX时间格式。可以指定自己的日期和时间，日期和年，月，日到创建对象。</li><li>Object ID : 此数据类型用于存储文档的ID。</li><li>Binary data : 此数据类型用于存储二进制数据。</li><li>Code : 此数据类型用于存储到文档中的JavaScript代码。</li><li>Regular expression : 此数据类型用于存储正则表达式</li></ul><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br><span class="line">db.COLLECTION_NAME.find()</span><br><span class="line"></span><br><span class="line">db.mycol.find().pretty()//格式化</span><br><span class="line">db.mycol.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br><span class="line">db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br><span class="line"></span><br><span class="line">db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">// &#x27;where likes&gt;10 AND (by = &#x27;yiibai&#x27; OR title = &#x27;MongoDB Overview&#x27;)&#x27;</span><br><span class="line">db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br><span class="line">db.COLLECTION_NAME.save(&#123;_id:ObjectId(),NEW_DATA&#125;)</span><br><span class="line">db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</span><br><span class="line">db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</span><br><span class="line">db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)//1表示显示该字段0不显示</span><br><span class="line">db.COLLECTION_NAME.find().limit(NUMBER)</span><br><span class="line">db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</span><br><span class="line">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br><span class="line"></span><br><span class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure><p>操作  语法  例子  RDBMS 等同<br>Equality    {<key>:<value>} db.mycol.find({“by”:”tutorials yiibai”}).pretty()   where by = ‘tutorials yiibai’<br>Less Than   {<key>:{$lt:<value>}}   db.mycol.find({“likes”:{$lt:50}}).pretty()  where likes &lt; 50<br>Less Than Equals    {<key>:{$lte:<value>}}  db.mycol.find({“likes”:{$lte:50}}).pretty() where likes &lt;= 50<br>Greater Than    {<key>:{$gt:<value>}}   db.mycol.find({“likes”:{$gt:50}}).pretty()  where likes &gt; 50<br>Greater Than Equals {<key>:{$gte:<value>}}  db.mycol.find({“likes”:{$gte:50}}).pretty() where likes &gt;= 50<br>Not Equals  {<key>:{$ne:<value>}}   db.mycol.find({“likes”:{$ne:50}}).pretty()  where likes != 50</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.ensureIndex(&#123;KEY:1&#125;)//索引</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法也可以接受的选项列表（可选），其下面给出的列表：</p><p>参数  类型  描述<br>background  Boolean 在后台建立索引，以便建立索引并不能阻止其他数据库活动。指定true建立在后台。默认值是 false.<br>unique  Boolean 创建唯一索引，以便收集不会接受插入索引键或键匹配现有的值存储在索引文档。指定创建唯一索引。默认值是 false.<br>name    string  索引的名称。如果未指定，MongoDB中都生成一个索引名索引字段的名称和排序顺序串联.<br>dropDups    Boolean 创建一个唯一索引的字段，可能有重复。 MongoDB的索引只有第一次出现的一个键，从集合中删除的所有文件包含该键的后续出现的。指定创建唯一索引。默认值是 false.<br>sparse  Boolean 如果为true，指数只引用文档指定的字段。这些索引使用更少的空间，但在某些情况下，特别是各种不同的表现。默认值是 false.<br>expireAfterSeconds  integer 指定一个值，以秒为TTL控制多久MongoDB的文档保留在此集合.<br>v   index version   索引版本号。默认的索引版本取决于mongodb 运行的版本在创建索引时.<br>weights document    权重是从1到99999范围内的数，表示该字段的意义，相对于其他的索引字段分数.<br>default_language    string  对于文本索引时，决定停止词和词干分析器和标记生成规则列表的语言。默认值是 english.<br>language_override   string  对于文本索引时，指定的名称在文档中包含覆盖默认的语言，语言字段中。默认值是语言。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>表达式   描述  实例<br>$sum    总结从集合中的所有文件所定义的值.   db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])<br>$avg    从所有文档集合中所有给定值计算的平均. db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])<br>$min    获取集合中的所有文件中的相应值最小.    db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])<br>$max    获取集合中的所有文件中的相应值的最大. db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])<br>$push   值插入到一个数组生成文档中.    db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])<br>$addToSet   值插入到一个数组中所得到的文档，但不会创建重复.  db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])<br>$first  根据分组从源文档中获取的第一个文档。通常情况下，这才有意义，连同以前的一些应用 “$sort”-stage.    db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])<br>$last   根据分组从源文档中获取最后的文档。通常，这才有意义，连同以前的一些应用 “$sort”-stage.    db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</p><p>设置一个副本集<br>在本教程中，我们将mongod实例转换成独立的副本集。要转换到副本设置遵循以下步骤：</p><p>关闭停止已经运行的MongoDB服务器。<br>现在启动MongoDB服务器通过指定  –replSet 选项。 –replSet 基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --port &quot;PORT&quot; --dbpath &quot;YOUR_DB_DATA_PATH&quot; --replSet </span><br></pre></td></tr></table></figure><p>“REPLICA_SET_INSTANCE_NAME”<br>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --port 27017 --dbpath &quot;D:set upmongodbdata&quot; --replSet rs0</span><br></pre></td></tr></table></figure><p>它会启动一个mongod 实例名称rs0 ，端口为27017。启动命令提示符 rs.initiate()，并连接到这个mongod实例。在mongod客户端执行命令rs.initiate()启动一个新的副本集。要检查副本集的配置执行命令rs.conf()。要检查的状态副本sete执行命令：rs.status()。</p><p>将成员添加到副本集<br>将成员添加到副本集，在多台机器上启动mongod 实例。现在开始一个mongod 客户和发出命令 rs.add().</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.add(&quot;mongod1.net:27017&quot;)</span><br></pre></td></tr></table></figure><p>java<br>建立连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import com.mongodb.MongoClient;</span><br><span class="line">import com.mongodb.MongoException;</span><br><span class="line">import com.mongodb.WriteConcern;</span><br><span class="line">import com.mongodb.DB;</span><br><span class="line">import com.mongodb.DBCollection;</span><br><span class="line">import com.mongodb.BasicDBObject;</span><br><span class="line">import com.mongodb.DBObject;</span><br><span class="line">import com.mongodb.DBCursor;</span><br><span class="line">import com.mongodb.ServerAddress;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">// To connect to mongodb server</span><br><span class="line">MongoClient mongoClient = new MongoClient( &quot;localhost&quot; , 27017 );</span><br><span class="line">// Now connect to your databases</span><br><span class="line">DB db = mongoClient.getDB( &quot;test&quot; );</span><br><span class="line">boolean auth = db.authenticate(myUserName, myPassword);</span><br></pre></td></tr></table></figure><p>获取一个集合列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set colls = db.getCollectionNames();</span><br><span class="line">for (String s : colls) &#123;</span><br><span class="line">   System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取/选择一个集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBCollection coll = db.getCollection(&quot;mycol&quot;);</span><br></pre></td></tr></table></figure><p>插入文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BasicDBObject doc = new BasicDBObject(&quot;title&quot;, &quot;MongoDB&quot;).</span><br><span class="line">   append(&quot;description&quot;, &quot;database&quot;).</span><br><span class="line">   append(&quot;likes&quot;, 100).</span><br><span class="line">   append(&quot;url&quot;, &quot;http://www.yiibai.com/mongodb/&quot;).</span><br><span class="line">   append(&quot;by&quot;, &quot;yiibai.com&quot;).</span><br><span class="line">   ;</span><br><span class="line">coll.insert(doc);</span><br></pre></td></tr></table></figure><p>查找第一个文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DBObject myDoc = coll.findOne();</span><br><span class="line">System.out.println(myDoc);</span><br></pre></td></tr></table></figure><p>和spring配合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;mongo:mongo id=&quot;mongo&quot; replica-set=&quot;$&#123;mongodb.url&#125;&quot;&gt;</span><br><span class="line">    &lt;mongo:options connections-per-host=&quot;$&#123;mongo.connectionsPerHost&#125;&quot;</span><br><span class="line">            threads-allowed-to-block-for-connection-multiplier=&quot;$&#123;mongo.threadsAllowedToBlockForConnectionMultiplier&#125;&quot;</span><br><span class="line">            connect-timeout=&quot;$&#123;mongo.connectTimeout&#125;&quot;</span><br><span class="line">            max-wait-time=&quot;$&#123;mongo.maxWaitTime&#125;&quot;</span><br><span class="line">            auto-connect-retry=&quot;$&#123;mongo.autoConnectRetry&#125;&quot;</span><br><span class="line">            socket-keep-alive=&quot;$&#123;mongo.socketKeepAlive&#125;&quot;</span><br><span class="line">            socket-timeout=&quot;$&#123;mongo.socketTimeout&#125;&quot; slave-ok=&quot;$&#123;mongo.slaveOk&#125;&quot;</span><br><span class="line">            write-number=&quot;1&quot; write-timeout=&quot;0&quot; write-fsync=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;mongo:options write-number=&quot;1&quot; write-timeout=&quot;0&quot;</span><br><span class="line">            write-fsync=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/mongo:mongo&gt;</span><br><span class="line">&lt;mongo:db-factory dbname=&quot;$&#123;mongodb.dbname&#125;&quot; mongo-ref=&quot;mongo&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;mongoTemplate&quot; class=&quot;org.springframework.data.mongodb.core.MongoTemplate&quot;&gt;</span><br><span class="line">        &lt;constructor-arg name=&quot;mongoDbFactory&quot; ref=&quot;mongoDbFactory&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>使用 MongoTemplate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Person p = new Person(&quot;Joe&quot;, 34);</span><br><span class="line"></span><br><span class="line">// Insert is used to initially store the object into the database.</span><br><span class="line">mongoOps.insert(p);</span><br><span class="line">log.info(&quot;Insert: &quot; + p);</span><br><span class="line"></span><br><span class="line">// Find</span><br><span class="line">p = mongoOps.findById(p.getId(), Person.class);   </span><br><span class="line">log.info(&quot;Found: &quot; + p);</span><br><span class="line"></span><br><span class="line">// Update</span><br><span class="line">mongoOps.updateFirst(query(where(&quot;name&quot;).is(&quot;Joe&quot;)), update(&quot;age&quot;, 35), Person.class);    </span><br><span class="line">p = mongoOps.findOne(query(where(&quot;name&quot;).is(&quot;Joe&quot;)), Person.class);</span><br><span class="line">log.info(&quot;Updated: &quot; + p);</span><br><span class="line"></span><br><span class="line">// Delete</span><br><span class="line">mongoOps.remove(p);</span><br><span class="line"></span><br><span class="line">// Check that deletion worked</span><br><span class="line">List&lt;Person&gt; people =  mongoOps.findAll(Person.class);</span><br><span class="line">log.info(&quot;Number of people = : &quot; + people.size());</span><br><span class="line"></span><br><span class="line">mongoOps.dropCollection(Person.class);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Query query=new Query(</span><br><span class="line">    Criteria.where(&quot;AAA&quot;).is(XXobj.getAAA()).</span><br><span class="line">    orOperator(Criteria.where(&quot;BBB&quot;).is(XXobj.getBBB()))</span><br><span class="line">    );</span><br><span class="line">List&lt;XXObject&gt; result = mongoTemplate.find(query, XXObject.class);</span><br><span class="line">if(result!=null &amp;&amp; !result.isEmpty())&#123;</span><br><span class="line">    return result.get(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">XXObject obj = mongoTemplate.findOne(query, XXObject.class);</span><br><span class="line">if(obj!=null)&#123;</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消息队列</title>
      <link href="/hexo/post/26d4999d.html"/>
      <url>/hexo/post/26d4999d.html</url>
      
        <content type="html"><![CDATA[<p>关于详细介绍：<a href="http://blog.csdn.net/column/details/rabbitmq.html">http://blog.csdn.net/column/details/rabbitmq.html</a><br>RabbitMQ：基于AMQP协议（Advanced Message Queue Protocol）介绍：<a href="http://www.infoq.com/cn/articles/AMQP-RabbitMQ/">http://www.infoq.com/cn/articles/AMQP-RabbitMQ/</a><br>ActiveMQ：基于STOMP协议</p><p>所需环境：<br>1.Erlang<br>2.RabbitMQ<br>3.rabbit-client.jar  <a href="http://www.rabbitmq.com/api-guide.html">api</a></p><p><a href="http://www.lxway.com/991402946.htm">http://www.lxway.com/991402946.htm</a><br>Direct Exchange – 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “dog”，则只有被标记为“dog”的消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog。<br><img src="https://cloud.githubusercontent.com/assets/7789698/16560356/6d0cda70-4225-11e6-97bd-96f3a557078e.png" alt="image"></p><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。<br><img src="https://cloud.githubusercontent.com/assets/7789698/16560357/764b5ce2-4225-11e6-91fe-9988a6a12df3.png" alt="image"></p><p>Topic Exchange – 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“_”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit._” 只会匹配到“audit.irs”。我在RedHat的朋友做了一张不错的图，来表明topic交换机是如何工作的：<br><img src="https://cloud.githubusercontent.com/assets/7789698/16560366/7ed92a88-4225-11e6-8334-e986473d9530.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ConnectionFactory connFactory = new ConnectionFactory();//创建连接连接到MabbitMQ </span><br><span class="line">  connFactory.setUri(uri);//或 factory.setHost(&quot;localhost&quot;);  设置ip、uri或host</span><br><span class="line">Connection connection = factory.newConnection();  //创建一个连接</span><br><span class="line">  Channel channel = connection.createChannel();  //创建一个Channel </span><br><span class="line">channel.queueDeclare(queue, true, false, false, null);//指定队列</span><br><span class="line">        channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());     //往队列中发出一条消息  </span><br><span class="line"> //关闭频道和连接  </span><br><span class="line"> channel.close();  </span><br><span class="line">connection.close();  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Connecting to a broker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">factory.setUsername(userName);</span><br><span class="line">factory.setPassword(password);</span><br><span class="line">factory.setVirtualHost(virtualHost);</span><br><span class="line">factory.setHost(hostName);</span><br><span class="line">factory.setPort(portNumber);</span><br><span class="line">Connection conn = factory.newConnection();</span><br></pre></td></tr></table></figure><p><a href="http://www.rabbitmq.com/uri-spec.html">uri</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">factory.setUri(&quot;amqp://userName:password@hostName:portNumber/virtualHost&quot;);</span><br><span class="line">Connection conn = factory.newConnection();</span><br></pre></td></tr></table></figure><p>Using Exchanges and Queues<br>声明一个exchange然后把队列和exchange和队列绑定起来（只有绑定以后，往exchange投递才会跑到相应队列）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.exchangeDeclare(exchangeName, &quot;direct&quot;, true);</span><br><span class="line">String queueName = channel.queueDeclare().getQueue();</span><br><span class="line">channel.queueBind(queueName, exchangeName, routingKey);</span><br></pre></td></tr></table></figure><p>（完整的绑定过程）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.exchangeDeclare(exchangeName, &quot;direct&quot;, true);</span><br><span class="line">channel.queueDeclare(queueName, true, false, false, null);</span><br><span class="line">channel.queueBind(queueName, exchangeName, routingKey);</span><br></pre></td></tr></table></figure><p>Publishing messages</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte[] messageBodyBytes = &quot;Hello, world!&quot;.getBytes();</span><br><span class="line">channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(exchangeName, routingKey, mandatory,</span><br><span class="line">                     MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">                     messageBodyBytes);</span><br></pre></td></tr></table></figure><p>delivery mode 2 (persistent), priority 1 , content-type “text/plain”.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(exchangeName, routingKey,</span><br><span class="line">             new AMQP.BasicProperties.Builder()</span><br><span class="line">               .contentType(&quot;text/plain&quot;)</span><br><span class="line">               .deliveryMode(2)</span><br><span class="line">               .priority(1)</span><br><span class="line">               .userId(&quot;bob&quot;)</span><br><span class="line">               .build()),</span><br><span class="line">               messageBodyBytes);</span><br></pre></td></tr></table></figure><p>自定义header</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; headers = new HashMap&lt;String, Object&gt;();</span><br><span class="line">headers.put(&quot;latitude&quot;,  51.5252949);</span><br><span class="line">headers.put(&quot;longitude&quot;, -0.0905493);</span><br><span class="line"></span><br><span class="line">channel.basicPublish(exchangeName, routingKey,</span><br><span class="line">             new AMQP.BasicProperties.Builder()</span><br><span class="line">               .headers(headers)</span><br><span class="line">               .build()),</span><br><span class="line">               messageBodyBytes);</span><br></pre></td></tr></table></figure><p>expiration</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(exchangeName, routingKey,</span><br><span class="line">             new AMQP.BasicProperties.Builder()</span><br><span class="line">               .expiration(&quot;60000&quot;)</span><br><span class="line">               .build()),</span><br><span class="line">               messageBodyBytes);</span><br></pre></td></tr></table></figure><p>在确认模式下发布大量的信息到一个通道,等待确认</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">package com.rabbitmq.examples;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">import com.rabbitmq.client.MessageProperties;</span><br><span class="line">import com.rabbitmq.client.QueueingConsumer;</span><br><span class="line"></span><br><span class="line">public class ConfirmDontLoseMessages &#123;</span><br><span class="line">    static int msgCount = 10000;</span><br><span class="line">    final static String QUEUE_NAME = &quot;confirm-test&quot;;</span><br><span class="line">    static ConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">        throws IOException, InterruptedException</span><br><span class="line">    &#123;</span><br><span class="line">        if (args.length &gt; 0) &#123;</span><br><span class="line">                msgCount = Integer.parseInt(args[0]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connectionFactory = new ConnectionFactory();</span><br><span class="line"></span><br><span class="line">        // Consume msgCount messages.</span><br><span class="line">        (new Thread(new Consumer())).start();</span><br><span class="line">        // Publish msgCount messages and wait for confirms.</span><br><span class="line">        (new Thread(new Publisher())).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;ThrowablePrintedToSystemOut&quot;)</span><br><span class="line">    static class Publisher implements Runnable &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                long startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                // Setup</span><br><span class="line">                Connection conn = connectionFactory.newConnection();</span><br><span class="line">                Channel ch = conn.createChannel();</span><br><span class="line">                ch.queueDeclare(QUEUE_NAME, true, false, false, null);</span><br><span class="line">                ch.confirmSelect();</span><br><span class="line"></span><br><span class="line">                // Publish</span><br><span class="line">                for (long i = 0; i &lt; msgCount; ++i) &#123;</span><br><span class="line">                    ch.basicPublish(&quot;&quot;, QUEUE_NAME,</span><br><span class="line">                                    MessageProperties.PERSISTENT_BASIC,</span><br><span class="line">                                    &quot;nop&quot;.getBytes());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ch.waitForConfirmsOrDie();</span><br><span class="line"></span><br><span class="line">                // Cleanup</span><br><span class="line">                ch.queueDelete(QUEUE_NAME);</span><br><span class="line">                ch.close();</span><br><span class="line">                conn.close();</span><br><span class="line"></span><br><span class="line">                long endTime = System.currentTimeMillis();</span><br><span class="line">                System.out.printf(&quot;Test took %.3fs\n&quot;,</span><br><span class="line">                                  (float)(endTime - startTime)/1000);</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                System.out.println(&quot;foobar :(&quot;);</span><br><span class="line">                System.out.print(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Consumer implements Runnable &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // Setup</span><br><span class="line">                Connection conn = connectionFactory.newConnection();</span><br><span class="line">                Channel ch = conn.createChannel();</span><br><span class="line">                ch.queueDeclare(QUEUE_NAME, true, false, false, null);</span><br><span class="line"></span><br><span class="line">                // Consume</span><br><span class="line">                QueueingConsumer qc = new QueueingConsumer(ch);</span><br><span class="line">                ch.basicConsume(QUEUE_NAME, true, qc);</span><br><span class="line">                for (int i = 0; i &lt; msgCount; ++i) &#123;</span><br><span class="line">                    qc.nextDelivery();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Cleanup</span><br><span class="line">                ch.close();</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                System.out.println(&quot;Whoosh!&quot;);</span><br><span class="line">                System.out.print(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*(the AMQP specification document)[<a href="http://www.amqp.org/]">http://www.amqp.org/]</a></p><p>接收消息的最有效的方法是建立一个订阅使用消费者接口。将自动被交付的消息到达,而不必显式地请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">boolean autoAck = false;</span><br><span class="line">channel.basicConsume(queueName, autoAck, &quot;myConsumerTag&quot;,</span><br><span class="line">     new DefaultConsumer(channel) &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void handleDelivery(String consumerTag,</span><br><span class="line">                                    Envelope envelope,</span><br><span class="line">                                    AMQP.BasicProperties properties,</span><br><span class="line">                                    byte[] body)</span><br><span class="line">             throws IOException</span><br><span class="line">         &#123;</span><br><span class="line">             String routingKey = envelope.getRoutingKey();</span><br><span class="line">             String contentType = properties.getContentType();</span><br><span class="line">             long deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">             // (process the message components here ...)</span><br><span class="line">             channel.basicAck(deliveryTag, false);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>接收个别信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">boolean autoAck = false;</span><br><span class="line">GetResponse response = channel.basicGet(queueName, autoAck);</span><br><span class="line">if (response == null) &#123;</span><br><span class="line">    // No message retrieved.</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    AMQP.BasicProperties props = response.getProps();</span><br><span class="line">    byte[] body = response.getBody();</span><br><span class="line">    long deliveryTag = response.getEnvelope().getDeliveryTag();</span><br><span class="line">    ...</span><br><span class="line">    channel.basicAck(method.deliveryTag, false); //  autoAck = false必须设置 Channel.basicAck来确认已经接受消息</span><br></pre></td></tr></table></figure><p>处理不被路由的消息<br>假如一个信息被设置强制性（mandatory）的flag不被路由的话会被送到发送端。<br>如果客户端没有配置返回特定通道侦听器,将放弃返回的相关消息。<br>为了获取这个消息，客户端可以实现ReturnListener 接口还有调用 Channel.setReturnListener</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">channel.setReturnListener(new ReturnListener() &#123;</span><br><span class="line">    public void handleBasicReturn(int replyCode,</span><br><span class="line">                                  String replyText,</span><br><span class="line">                                  String exchange,</span><br><span class="line">                                  String routingKey,</span><br><span class="line">                                  AMQP.BasicProperties properties,</span><br><span class="line">                                  byte[] body)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关闭协议</p><p>The AMQP 0-9-1 connection and channel have the following lifecycle states:</p><p>open: the object is ready to use<br>closing: the object has been explicitly notified to shut down locally, has issued a shutdown request to any supporting lower-layer objects, and is waiting for their shutdown procedures to complete<br>closed: the object has received all shutdown-complete notification(s) from any lower-layer objects, and as a consequence has shut itself down</p><p>The AMQP connection and channel objects possess the following shutdown-related methods:</p><p>addShutdownListener(ShutdownListener listener) and removeShutdownListener(ShutdownListener listener), to manage any listeners, which will be fired when the object transitions to closed state. Note that, adding a ShutdownListener to an object that is already closed will fire the listener immediately<br>getCloseReason(), to allow the investigation of what was the reason of the object’s shutdown<br>isOpen(), useful for testing whether the object is in an open state<br>close(int closeCode, String closeMessage), to explictly notify the object to shut down.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import com.rabbitmq.client.ShutdownSignalException;</span><br><span class="line">import com.rabbitmq.client.ShutdownListener;</span><br><span class="line"></span><br><span class="line">connection.addShutdownListener(new ShutdownListener() &#123;</span><br><span class="line">    public void shutdownCompleted(ShutdownSignalException cause)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ShutdownSignalException包含了关闭时的错误异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void shutdownCompleted(ShutdownSignalException cause)</span><br><span class="line">&#123;</span><br><span class="line">  if (cause.isHardError())</span><br><span class="line">  &#123;</span><br><span class="line">    Connection conn = (Connection)cause.getReference();</span><br><span class="line">    if (!cause.isInitiatedByApplication())</span><br><span class="line">    &#123;</span><br><span class="line">      Method reason = cause.getReason();</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    Channel ch = (Channel)cause.getReference();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原子性的使用open</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void brokenMethod(Channel channel)</span><br><span class="line">&#123;</span><br><span class="line">    if (channel.isOpen())</span><br><span class="line">    &#123;</span><br><span class="line">        // The following code depends on the channel being in open state.</span><br><span class="line">        // However there is a possibility of the change in the channel state</span><br><span class="line">        // between isOpen() and basicQos(1) call</span><br><span class="line">        ...</span><br><span class="line">        channel.basicQos(1);//告诉RabbitMQ同一时间给一个消息给消费者  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处于无效状态时应该抓取异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void validMethod(Channel channel)</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ...</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">    &#125; catch (ShutdownSignalException sse) &#123;</span><br><span class="line">        // possibly check if channel was closed</span><br><span class="line">        // by the time we started action and reasons for</span><br><span class="line">        // closing it</span><br><span class="line">        ...</span><br><span class="line">    &#125; catch (IOException ioe) &#123;</span><br><span class="line">        // check why connection was closed</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接设置<br>设置pool数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService es = Executors.newFixedThreadPool(20);</span><br><span class="line">Connection conn = factory.newConnection(es);</span><br></pre></td></tr></table></figure><p>使用地址列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Address[] addrArr = new Address[]&#123; new Address(hostname1, portnumber1)</span><br><span class="line">                                 , new Address(hostname2, portnumber2)&#125;;</span><br><span class="line">Connection conn = factory.newConnection(addrArr);</span><br></pre></td></tr></table></figure><p>心跳超时（Heartbeat Timeout）  <a href="http://www.rabbitmq.com/heartbeats.html">Heartbeats guide</a><br>自定义线程工厂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import com.google.appengine.api.ThreadManager;</span><br><span class="line"></span><br><span class="line">ConnectionFactory cf = new ConnectionFactory();</span><br><span class="line">cf.setThreadFactory(ThreadManager.backgroundThreadFactory());</span><br></pre></td></tr></table></figure><p>Automatic Recovery From Network Failures</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">factory.setUsername(userName);</span><br><span class="line">factory.setPassword(password);</span><br><span class="line">factory.setVirtualHost(virtualHost);</span><br><span class="line">factory.setHost(hostName);</span><br><span class="line">factory.setPort(portNumber);</span><br><span class="line">factory.setAutomaticRecoveryEnabled(true);</span><br><span class="line">// connection that will recover automatically</span><br><span class="line">Connection conn = factory.newConnection();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">// attempt recovery every 10 seconds</span><br><span class="line">factory.setNetworkRecoveryInterval(10000);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line"></span><br><span class="line">Address[] addresses = &#123;new Address(&quot;192.168.1.4&quot;), new Address(&quot;192.168.1.5&quot;)&#125;;</span><br><span class="line">factory.newConnection(addresses);</span><br></pre></td></tr></table></figure><p>The RPC (Request/Reply) Pattern</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import com.rabbitmq.client.RpcClient;</span><br><span class="line"></span><br><span class="line">RpcClient rpc = new RpcClient(channel, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">byte[] primitiveCall(byte[] message);</span><br><span class="line">String stringCall(String message)</span><br><span class="line">Map mapCall(Map message)</span><br><span class="line">Map mapCall(Object[] keyValuePairs)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gradle构建一个web项目</title>
      <link href="/hexo/post/45ab4f18.html"/>
      <url>/hexo/post/45ab4f18.html</url>
      
        <content type="html"><![CDATA[<p>安装过程略去，配置下GRADLE_HOME和GRADLE_HOME\bin</p><ol><li>创建一个空目录，新建build.gradle</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;idea&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span> </span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;war&#x27;</span></span><br><span class="line">sourceCompatibility = <span class="number">1.7</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  compile <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:1.3.5.RELEASE&#x27;</span></span><br><span class="line">  compile <span class="string">&#x27;log4j:log4j:1.2.17&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task createJavaProject &lt;&lt; &#123; </span><br><span class="line">  sourceSets*.java.srcDirs*.each &#123; it.mkdirs() &#125; </span><br><span class="line">  sourceSets*.resources.srcDirs*.each &#123; it.mkdirs()&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">task createWebProject(<span class="attr">dependsOn:</span> <span class="string">&#x27;createJavaProject&#x27;</span>) &lt;&lt; &#123; </span><br><span class="line">  <span class="keyword">def</span> webAppDir = file(<span class="string">&quot;$webAppDirName&quot;</span>) </span><br><span class="line">  webAppDir.mkdirs() </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>2.gradle idea<br>3.gradle createWebProject<br>3.gradle build</p>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在ajax权限判断后跳转？</title>
      <link href="/hexo/post/d30ad624.html"/>
      <url>/hexo/post/d30ad624.html</url>
      
        <content type="html"><![CDATA[<p>经常会遇到一种场景，直接访问某些权限被拒绝后跳转登陆页面，然而ajax不会跳转<br>这个时候使用全局的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//全局的ajax访问，处理ajax清求时sesion超时</span></span><br><span class="line">$.ajaxSetup(&#123; </span><br><span class="line">    <span class="attr">complete</span>:<span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest,textStatus</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> sessionstatus=XMLHttpRequest.getResponseHeader(<span class="string">&quot;sessionstatus&quot;</span>); <span class="comment">//通过XMLHttpRequest取得响应头，sessionstatus，</span></span><br><span class="line">    <span class="keyword">if</span>(sessionstatus==<span class="string">&quot;timeout&quot;</span>)&#123; </span><br><span class="line">        <span class="comment">//如果超时就处理 ，指定要跳转的页面</span></span><br><span class="line">        <span class="built_in">window</span>.location.replace(urlconfig.url.ctx+<span class="string">&quot;/login.jsp&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><p>在拦截器里面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (httpRequest.getHeader(<span class="string">&quot;x-requested-with&quot;</span>) != <span class="literal">null</span></span><br><span class="line">    &amp;&amp; httpRequest.getHeader(<span class="string">&quot;x-requested-with&quot;</span>).equalsIgnoreCase(<span class="string">&quot;XMLHttpRequest&quot;</span>))<span class="comment">// 如果是ajax请求响应头会有，x-requested-with；</span></span><br><span class="line">&#123;</span><br><span class="line">    httpResponse.setHeader(<span class="string">&quot;sessionstatus&quot;</span>, <span class="string">&quot;timeout&quot;</span>);<span class="comment">// 在响应头设置session状态</span></span><br><span class="line">    httpResponse.setStatus(<span class="number">403</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    httpResponse.sendRedirect(httpResponse.encodeRedirectURL(<span class="string">&quot;/login.jsp&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hexo/post/4a17b156.html"/>
      <url>/hexo/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
